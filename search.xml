<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Microservices vs. SOA</title>
    <url>/2016-05-31-Microservices-Vs-SOA/</url>
    <content><![CDATA[<h1 id="Microservice"><a href="#Microservice" class="headerlink" title="Microservice"></a>Microservice</h1><ul>
<li>Services are organized around capabilities, e.g., user interface front-end, recommendation, logistics, billing, etc.</li>
<li>Services are small in size, messaging enabled, bounded by contexts, autonomously developed, independently deployable, decentralized and built and released with automated processes.</li>
<li>resource-oriented computing (ROC) as a generalized form of the Web abstraction. If in the Unix abstraction “everything is a file”, in ROC, everything is a “Micro-Web-Service”</li>
</ul>
<h2 id="Philosophy"><a href="#Philosophy" class="headerlink" title="Philosophy"></a>Philosophy</h2><p>The philosophy of the microservices architecture essentially equates to the Unix philosophy of “Do one thing and do it well”. It is described as follows:</p>
<ul>
<li>The services are small - fine-grained to perform a single function.</li>
<li>The organization culture must embrace automation of testing and deployment. This eases the burden on management and operations and allows for different development teams to work on independently deployable units of code.</li>
<li>The culture and design principles must embrace failure and faults, similar to anti-fragile systems.</li>
<li>Each service is elastic, resilient, composable, minimal, and complete.</li>
</ul>
<h2 id="service-mesh"><a href="#service-mesh" class="headerlink" title="service mesh"></a>service mesh</h2><p>In a service mesh, each service instance is paired with an instance of a reverse proxy server, called a service proxy, sidecar proxy, or sidecar. The service instance and sidecar proxy share a container, and the containers are managed by a container orchestration tool such as Kubernetes.</p>
<h1 id="Differences-between-Microservices-and-SOA"><a href="#Differences-between-Microservices-and-SOA" class="headerlink" title="Differences between Microservices and SOA"></a>Differences between Microservices and SOA</h1><h2 id="Definitaion-of-SOA"><a href="#Definitaion-of-SOA" class="headerlink" title="Definitaion of SOA"></a>Definitaion of SOA</h2><ul>
<li><code>Boundaries</code> are explicit</li>
<li>Services are <code>autonomous</code></li>
<li>Services share __ schema __ and <strong>contract</strong>, not class</li>
<li>Service compatibility is based on policy</li>
</ul>
<hr>
<blockquote>
<p>In short, the microservice architectural style is an approach to developing a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms, often an HTTP resource API. These services are built around business capabilities and independently deployable by fully automated deployment machinery. There is a bare mininum of centralized management of these services, which may be written in different programming languages and use different data storage technologies.</p>
</blockquote>
<h3 id="Related-links"><a href="#Related-links" class="headerlink" title="Related links:"></a>Related links:</h3><ul>
<li><a href="https://www.infoq.com/news/2015/12/soa-v-microservices" target="_blank" rel="noopener">InfoQ Discussions</a></li>
<li><a href="http://stackoverflow.com/questions/25501098/difference-between-microservices-architecture-and-soa" target="_blank" rel="noopener">StackOverFlow</a></li>
<li><a href="http://stackoverflow.com/tags/microservices/info" target="_blank" rel="noopener">Microservices tag desc</a></li>
<li><a href="http://martinfowler.com/articles/microservices.html" target="_blank" rel="noopener">MartinFowler</a></li>
</ul>
]]></content>
      <tags>
        <tag>Microservices</tag>
        <tag>SOA</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Class Loader</title>
    <url>/2016-02-25-Java-Class-Loader/</url>
    <content><![CDATA[<h1 id="Codecache"><a href="#Codecache" class="headerlink" title="Codecache"></a>Codecache</h1><ul>
<li>The maximum size of the code cache is set via the -XX:ReservedCodeCacheSize=N flag (where N is the default just mentioned for the particular compiler). The code cache is managed like most memory in the JVM: there is an initial size (specified by -XX:InitialCodeCacheSize=N). Allocation of the code cache size starts at the initial size and increases as the cache fills up. The total of native and heap memory used by the JVM yields the total footprint of an application.</li>
</ul>
<ol>
<li>The code cache is a resource with a defined maximum size that affects the total amount of compiled code the JVM can run.<br>Tiered compilation can easily use up the entire code cache in its default configuration (particularly in Java 7); monitor the code cache and increase its size if necessary when using tiered compilation.<br>Compilation Thresholds<br>The major factor involved here is how often the code is executed; once it is executed a certain number of times, its compilation threshold is reached, and the com‐ piler deems that it has enough information to compile the code.<br>Compilation is based on two counters in the JVM: the number of times the method has been called, and the number of times any loops in the method have branched back. Branching back can effectively be thought of as the number of times a loop has com‐ pleted execution, either because it reached the end of the loop itself or because it executed a branching statement like continue.<br>When the JVM executes a Java method, it checks the sum of those two counters and decides whether or not the method is eligible for compilation. If it is, the method is queued for compilation So every time the loop completes an execution, the branching counter is incremented and inspected. If the branching counter has exceeded its indi‐ vidual threshold, then the loop (and not the entire method) becomes eligible for compilation.<br>This kind of compilation is called on-stack replacement (OSR), because even if the loop is compiled, that isn’t sufficient: the JVM has to have the ability to start executing the compiled version of the loop while the loop is still running. When the code for the loop has finished compiling, the JVM replaces the code (on-stack), and the next iteration of the loop will execute the much-faster compiled version of the code. Standard compilation is triggered by the value of the -XX:CompileThreshold=N flag. The default value of N for the client compiler is 1,500; for the server compiler it is 10,000. Changing the value of the CompileThreshold flag will cause the the compiler to choose to compile the code sooner (or later) than it normally would have.<br>Periodically (specifically, when the JVM reaches a safepoint), the value of each counter is reduced. Practically speaking, this means that the counters are a relative measure of the recent hotness of the method or loop. One side effect of this is that somewhat-frequently executed code may never be compiled, even for programs that run forever (these methods are sometimes called lukewarm [as opposed to hot]). This is one case where reducing the compilation threshold can be beneficial, and it is another reason why tiered compilation is usually slightly faster than the server compiler alone.<br>Quick Summary</li>
<li>Compilation occurs when the number of times a method or loop has been executed reaches a certain threshold.<br>Changing the threshold values can cause the code to be com‐ piled sooner than it otherwise would.<br>“Lukewarm” methods will never reach the compilation thresh‐ old (particularly for the   server compiler) since the counters de‐ cay over time.<br>that give visibility into the working of the compiler. The most important of these is -XX:+PrintCompilation (which by default is false).<br>If PrintCompilation is enabled, every time a method (or loop) is compiled, the JVM prints out a line with information about what has just been compiled.<br>Usually this number will simply increase monotonically<br>Inspecting Compilation with jstat<br>Seeing the compilation log requires that the program be started with the -XX:+PrintCompilation flag. If the program was started without that flag, you can get some limited visibility into the working of the compiler by using jstat.<br>jstat has two options to provide information about the compiler. The -compiler option supplies summary information about how many methods have been compiled (here 5003 is the process ID of the program to be inspected):<br>% jstat -compiler 5003<br>Compiled Failed Invalid Time FailedType FailedMethod<br>206 0   0   1.97    0<br>Note this also lists the number of methods that failed to compile and the name of the last method that failed to compile; if profiles or other information lead you to suspect that a method is slow because it hasn’t been compiled, this is an easy way to verify that hypothesis.<br>Because jstat takes an optional argument to repeat its operation, you can see over time which methods are being compiled. In this example, jstat repeats the information for process ID 5003 every second (1,000 ms):<br>% jstat -printcompilation 5003 1000 Compiled</li>
</ol>
<p>It’s easy to read OSR lines like this example as 25% and wonder about the other 75%, but remember that the number is the compilation ID, and the % just signifies OSR compilation.</p>
<ol>
<li>The best way to gain visibility into how code is being compiled is by enabling PrintCompilation.<br>Output from enabling PrintCompilation can be used to make sure that compilation is proceeding as expected.<br>If a method is compiled using standard compilation, then the next method invocation will execute the compiled method; if a loop is compiled using OSR, then the next iteration of the loop will execute the compiled code.<br>These queues are not strictly first in, first out: methods whose invocation counters are higher have priority.<br>this priority ordering helps to ensure that the most important code will be compiled first. (This is another reason why the compilation ID in the PrintCompilation output can appear out of order.)<br>When the client compiler is in use, the JVM starts one compilation thread; the server compiler has two such threads. When tiered compilation is in effect, the JVM will by default start multiple client and server threads based on a somewhat complex equation involving double logs of the number of CPUs on the target platform. The number of compiler threads (for all three compiler options) can be adjusted by setting the -XX:CICompilerCount=N flag (with a default value given in the previous table).<br>Quick Summary</li>
<li>Compilation occurs asynchronously for methods that are placed on the compilation queue.<br>The queue is not strictly ordered; hot methods are compiled before other methods in the queue. This is another reason why compilation IDs can appear out of order in the compilation log.<br>Inlining<br>One of the most important optimizations the compiler makes is to inline methods. Code that follows good object-oriented design often contains a number of attributes that are accessed via getters (and perhaps setters):<br>public class Point { private int x, y;<br>public void getX() { return x; } public void setX(int i) { x = i; }<br>}
The overhead for invoking a method call like this is quite high, especially relative to the amount of code in the method. In fact, in the early days of Java, performance tips often argued against this sort of encapsulation precisely because of the performance impact of all those method calls. Fortunately, JVMs now routinely perform code inlining for these kinds of methods. Hence, you can write this code:<br>Point p = getPoint(); p.setX(p.getX() * 2);<br>and the compiled code will essentially execute this:<br>Point p = getPoint(); p.x = p.x * 2;<br>Inlining is enabled by default. It can be disabled using the -XX:-Inline flag, though it is such an important performance boost that you would never actually do that (for example, disabling inlining reduces the performance of the stock batching test by over 50%).</li>
</ol>
<p>The basic decision about whether to inline a method depends on how hot it is and its size. The JVM determines if a method is hot (i.e., called frequently) based on an internal calculation; it is not directly subject to any tunable parameters. If a method is eligible for inlining because it is called frequently, then it will be inlined only if its bytecode size is less than 325 bytes (or whatever is specified as the -XX:MaxFreqInlineSize=N flag). Otherwise, it is eligible for inlining only if it is small: less than 35 bytes (or whatever is specified as the -XX:MaxInlineSize=N flag).<br>Sometimes you will see recommendations that the value of the MaxInlineSize flag be increased so that more methods are inlined.<br>Inlining is the most beneficial optimization the compiler can make, particularly for object-oriented code where attributes are well encapsulated.</p>
<ol>
<li>Tuning the inlining flags is rarely needed, and recommendations to do so often fail to account for the relationship between normal inlining and frequent inlining. Make sure to account for both cases when investigating the effects of inlining.<br>Escape Analysis<br>The server compiler performs some very aggressive optimizations if escape analysis is enabled (-XX:+DoEscapeAnalysis, which is true by default).<br>Escape analysis is the most sophisticated of the optimizations the compiler can perform. This is the kind of optimization that fre¬quently causes microbenchmarks to go awry.</li>
<li>Escape analysis can often introduce “bugs” into improperly synchronized code.</li>
</ol>
<p>Escape analysis is a technical that evaluate the scope of a Java object. In particular, if a java object allocated by some execting thread can ever be seen by a different thread, the object ‘escapes’.<br>For example, consider this class to work with factorials:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factorial</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> BigInteger factorial;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Factorial</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.n = n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> BigInteger <span class="title">getFactorial</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (factorial == <span class="keyword">null</span>)</span><br><span class="line">factorial = ...;</span><br><span class="line"><span class="keyword">return</span> factorial;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">To store the first <span class="number">100</span> factorial values in an array, <span class="keyword">this</span> code would be used:</span><br><span class="line">ArrayList&lt;BigInteger&gt; list = <span class="keyword">new</span> ArrayList&lt;BigInteger&gt;(); <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">Factorial factorial = <span class="keyword">new</span> Factorial(i);</span><br><span class="line">list.add(factorial.getFactorial());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The factorial object is referenced only inside that loop; no other code can ever access<br>that object. Hence, the JVM is free to perform a number of optimizations on that object:<br>·   It needn’t get a synchronization lock when calling the getFactorial() method.<br>·   It needn’t store the field n in memory; it can keep that value in a register. Similarly it can store the factorial object reference in a register.<br>·   In fact, it needn’t allocate an actual factorial object at all; it can just keep track of the individual fields of the object.<br>Deoptimization</p>
<p>There are two cases of deoptimization: when code is “made not entrant,” and when code is “made zombie.”<br>This generates a deoptimization trap, and the previous optimizations are discarded. If a lot of additional calls are made with logging enabled, the JVM will quickly end up compiling that code and making new optimizations.<br>The second thing that can cause code to be made not entrant is due to the way tiered compilation works. In tiered compilation, code is compiled by the client compiler, and then later compiled by the server compiler (and actually it’s a little more complicated than that,</p>
<p>Deoptimizing Zombie Code</p>
<p>When the compilation log reports that it has made zombie code, it is saying that it has reclaimed some previous code that was made not entrant. But there were still objects of the StockPriceHistoryImpl class around.<br>Eventually all those objects were reclaimed by GC. When that happened, the compiler noticed that the methods of that class were now eligible to be marked as zombie code.</p>
<p>The heap (usually) accounts for the largest amount of memory used by the JVM, but the JVM also uses memory for its internal operations. This nonheap memory is native memory. Native memory can also be allocated in applications (via JNI calls to malloc() and similar methods, or when using New I/O, or NIO). The total of native and heap memory used by the JVM yields the total footprint of an application.</p>
<ol>
<li>Deoptimization allows the compiler to back out previous versions of compiled code.<br>Code is deoptimized when previous optimizations are no longer valid (e.g., because the type of the objects in question has changed).</li>
<li>There is usually a small, momentary effect in performance when code is deoptimized, but the new code usually warms up quick‐ ly again.</li>
<li>Under tiered compilation, code is deoptimized when it had previously been compiled by the client compiler and has now been optimized by the server compiler.<br>Tiered Compilation Levels<br>It turns out that there are five levels of execution, because the client compiler has three different levels. So the level of compilation runs from:<br>·   0: Interpreted code<br>·   1: Simple C1 compiled code<br>·   2: Limited C1 compiled code<br>·   3: Full C1 compiled code<br>·   4: C2 compiled code<br>A typical compilation log shows that most methods are first compiled at level 3: full C1 compilation. (All methods start at level 0, of course.) If they run often enough, they will get compiled at level 4 (and the level 3 code will be made not entrant). This is the most frequent path: the client compiler waits to compile something until it has information about how the code is used that it can leverage to perform optimizations.<br>If the server compiler queue is full, methods will be pulled from the server queue and compiled at level 2, which is the level at which the C1 compiler uses the invocation and back-edge counters (but doesn’t require profile feedback). That gets the method com‐ piled more quickly; the method will later be compiled at level 3 after the C1 compiler has gathered profile information, and finally compiled at level 4 when the server compiler queue is less busy.</li>
</ol>
<p>And of course when code is deoptimized, it goes to level 0.<br>Summary:<br>Tiered compilation can operate at five distinct levels among the two compilers<br>Changing the path between levels is not recommended; this section just helps to explain the output of the compilation log.<br>This chapter has provided a lot of details about how just-in-time compilation works. From a tuning perspective, the simple choice here is to use the server compiler with tiered compilation for virtually everything; this will solve 90% of compiler-related performance issues. Just make sure that the code cache is sized large enough, and the compiler will provide pretty much all the performance that is possible.<br>If you have some experience with Java performance, you may be surprised that compilation has been discussed for an entire chapter without mentioning the final keyword. In some circles, the final keyword is thought to be an important factor in performance because it is believed to allow the JIT compiler to make better choices about inlining and other optimizations.<br>Still, it is a persistent rumor. For the record, then, you should use the final keyword whenever it makes sense: for an immutable object or primitive value you don’t want to change, for parameters to certain inner classes, and so on. But the presence or absence of the final keyword will not affect the performance of an application.<br>Don’t be afraid of small methods—and in particular getters and setters—because they are easily inlined. If you have a feeling that the method overhead can be ex‐ pensive, you’re correct in theory (we showed that removing inlining has a huge impact on performance). But it’s not the case in practice, since the compiler fixes that problem.</p>
<ol start="2">
<li>Code that needs to be compiled sits in a compilation queue. The more code in the queue, the longer the program will take to achieve optimal performance.</li>
<li>Although you can (and should) size the code cache, it is still a finite resource.</li>
<li>The simpler the code, the more optimizations that can be performed on it. Profile feedback and escape analysis can yield much faster code, but complex loop struc‐ tures and large methods limit their effectiveness.</li>
</ol>
<p>That concept is the essential difference between committed (or allocated) memory and reserved memory (sometimes called the virtual size of a process). The JVM must tell the operating system that it might need as much as 2 GB of memory for the heap, so that memory is reserved: the operating system promises that when the JVM attempts to allocate additional memory when it increases the size of the heap, that memory will be available.<br>Still, only 512 MB of that memory is actually allocated initially, and that 512 MB is all of the memory that actually is being used (for the heap). That (actually allocated) mem‐ ory is known as the committed memory. The amount of committed memory will fluc‐ tuate as the heap resizes; in particular, as the heap size increases, the committed memory correspondingly increases.<br>When we look at performance, only committed memory really matters: there is never a performance problem from reserving too much memory.<br>However, sometimes you want to make sure that the JVM does not reserve too much memory. This is particularly true for 32-bit JVMs. Since the maximum process size of a 32-bit application is 4 GB (or less, depending on the operating system), over-reserving memory can be an issue. A JVM that reserves 3.5 GB of memory for the heap is left with only 0.5 GB of native memory for its stacks, code cache, and so on. It doesn’t matter if the heap only expands to commit 1 GB of memory: because of the 3.5 GB reservation, the amount of memory for other operations is limited to 0.5 GB.<br>64-bit JVMs aren’t limited that way by the process size, but they are limited by the total amount of virtual memory on the machine. Say that you have a small server with 4 GB of physical memory and 10 GB of virtual memory and start a JVM with a maximum</p>
<p>One exception to this is thread stacks. Every time the JVM creates a thread, the OS allocates some native memory to hold that thread’s stack, committing more memory to the process (until the thread exits, at least). Thread stacks, though, are fully allocated when they are created.</p>
<p>Code cache<br>The code cache uses native memory to hold compiled code. As discussed in Chap‐ ter 4, this can be tuned (though performance will suffer if all the code cannot be compiled due to space limitations).<br>Developers can allocate native memory via JNI calls, but NIO byte buffers will also allocate native memory if they are created via the allocateDirect() method. Native byte buffers are quite important from a performance perspective, since they allow native code and Java code to share data without copying it. The most common example here is buffers that are used for filesystem and socket operations. Writing data to a native NIO buffer and then sending that data to the channel or socket) requires no copying of data between the JVM and the C library used to transmit the data. If a heap byte buffer is used instead, contents of the buffer must be copied by the JVM.</p>
<p>The allocateDirect() method call is quite expensive; direct byte buffers should be reused as much as possible. The ideal situation is when threads are independent and each can keep a direct byte buffer as a thread-local variable. That can sometimes use too much native memory if there are many threads that need buffers of variable sizes, since eventually each thread will end up with a buffer at the maximum possible size. For that kind of situation—or when thread-local buffers don’t fit the application design— an object pool of direct byte buffers may be more useful.</p>
<ol>
<li>From a tuning perspective, the footprint of the JVM can be limi¬ted in the amount of native memory it uses for direct byte buf¬fers, thread stack sizes, and the code cache (as well as the heap).</li>
</ol>
<h1 id="Class-loader"><a href="#Class-loader" class="headerlink" title="Class loader"></a>Class loader</h1><ul>
<li><p>A class loader in Java is simply an object whose type extends the ClassLoader class. When the virtual machine needs access to a particular class, it asks the appropriate class loader.</p>
</li>
<li><p>Class loaders are organized into a tree hierarchy. At the root of this tree is the system class loader. This class loader is also called the primordial class loader or the null class loader. It is used only to load classes from the core Java API.</p>
</li>
<li><p>The system class loader has one or more children. It has at least one child; the URL class loader that is used to load classes from the classpath. It may have other direct children, though typically any other class loaders are children of the URL class loader that reads the classpath.</p>
</li>
<li><p>The hierarchy comes into play when it is time to load a class. Classes are loaded in one of three ways: either explicitly by calling the loadClass( ) method of a class loader, explicitly by calling the Class.forName( ) method, or implicitly when they are referenced by an already−loaded class.<br>In any case, a class loader is asked to load the class. In the first case, the class loader is the object on which the loadClass( ) method is invoked. In the case of the forName( ) method, the class loader is either passed to that method, or it is the class loader that loaded the class that is calling the forName( ) method. The implicit case is similar: the class loader that was used to load the referencing class is also used to load the referenced class.<br>Class loaders are responsible for asking their parent to load a class; only if that operation fails will the class loader attempt to define the class itself.</p>
</li>
</ul>
<ul>
<li><p>The net effect of this is that system classes will always be loaded from the system class loader, classes on the class path will always be loaded by the class loader that knows about the classpath, and in general, a class will be loaded by the oldest class loader in the ancestor hierarchy that knows where to find a class.</p>
</li>
<li><p>When you create a class loader, you can insert it anywhere into the hierarchy of class loaders (except at the root). Typically, when a class loader is created, its parent is the class loader of the class that is instantiating the new class loader.</p>
</li>
</ul>
<ul>
<li><p>Implementing a Class Loader</p>
</li>
<li><p>Now we’ll look at how to implement a class loader. The class loader we implement will be able to extend the normal permissions that are granted via policy files, and it will enforce certain optional security features of the class loader.</p>
</li>
<li><p>The basic class that defines a class loader is the ClassLoader class (java.lang.ClassLoader):<br>public abstract class ClassLoader<br>Turn a series of Java bytecodes into a class definition. This class does not define how the bytecodes are obtained but provides all other functionality needed to create the class definition.</p>
</li>
<li><p>However, the preferred class to use as the basis of a class loader is the SecureClassLoader class (java.security.SecureClassLoader):<br>public class SecureClassLoader extends ClassLoader<br>Turn a series of Java bytecodes into a class definition. This class adds secure functionality to the ClassLoader class, but it still does not define how bytecodes are obtained. Although this class is not abstract, you must subclass it in order to use it.<br>The secure class loader provides additional functionality in dealing with code sources and protection domains. You should always use this class as the basis of any class loader you work with; in fact, the ClassLoader class would be private were it not for historical reasons.</p>
</li>
</ul>
<p>public class URLClassLoader extends SecureClassLoader<br>Load classes securely by obtaining the bytecodes from a set of given URLs.</p>
<h1 id="Key-Methods-of-the-Class-Loader"><a href="#Key-Methods-of-the-Class-Loader" class="headerlink" title="Key Methods of the Class Loader"></a>Key Methods of the Class Loader</h1><ul>
<li>The ClassLoader class and its subclasses have three key methods that you work with when creating your own class loader.</li>
</ul>
<p>6.3.2.1 The loadClass( ) method<br>The loadClass( ) method is the only public entry into the class loader:<br>public Class loadClass(String name)</p>
<ul>
<li>Load the named class. A ClassNotFoundException is thrown if the class cannot be found.<br>This is the simplest way to use a class loader directly: it requires that the class loader be instantiated and then be used via the loadClass( ) method. Once the Class object has been constructed, there are three ways in which a method in the class can be executed:<br>The correct implementation of the loadClass( ) method is crucial to the security of the virtual machine. For instance, one operation this method performs is to call the parent class loader to see if it has already defined a particular class; this allows all the<br>core Java classes to be loaded by the primordial class loader. If that operation is not performed correctly, security could suffer. As a developer you should be careful when you override this method; as an administrator, this is one of the reasons to prevent untrusted code from creating a class loader.</li>
</ul>
<h2 id="6-3-2-2-The-findClass-method"><a href="#6-3-2-2-The-findClass-method" class="headerlink" title="6.3.2.2 The findClass( ) method"></a>6.3.2.2 The findClass( ) method</h2><ul>
<li><p>The loadClass( ) method performs a lot of setup and bookkeeping related to defining a class, but from a developer perspective, the bulk of the work in creating a Class class object is performed by the findClass( ) method:<br>protected Class findClass(String name)</p>
</li>
<li><p>The findClass( ) method uses whatever mechanism it deems appropriate to load the class (e.g., by reading a class file from the file system or from an HTTP server). It is then responsible for creating the protection domain associated with the class and using the next method to create the Class class object.</p>
</li>
<li><p>The defineClass( ) methods<br>These methods all take an array of Java bytecodes and some information that specifies the permissions associated with the class represented by those bytecodes. They all return the Class class object:<br>protected final Class defineClass(String name, byte[] b, int off, int len)</p>
</li>
</ul>
<h2 id="Responsibilities-of-the-Class-Loader"><a href="#Responsibilities-of-the-Class-Loader" class="headerlink" title="Responsibilities of the Class Loader"></a>Responsibilities of the Class Loader</h2><p>When you implement a class loader, you override some or all of the methods we’ve just listed. In sum, the class loader must perform the following steps:<br>The security manager is consulted to see if this program is allowed to access the class in question. If it is not, a security exception is thrown. This step is optional; it should be implemented at the beginning of the loadClass( ) method. This</p>
<ol>
<li><p>corresponds to the use of the accessClassInPackage permission.<br>If the class loader has already loaded this class, it finds the previously defined class object and returns that object. This step is built into the loadClass( ) method.</p>
</li>
<li><p>corresponds to the use of the accessClassInPackage permission.<br>If the class loader has already loaded this class, it finds the previously defined class object and returns that object. This step is built into the loadClass( ) method.</p>
</li>
<li><p>Otherwise, the class loader consults its parent to see if the parent knows how to load the class. This is a recursive operation, so the system class loader</p>
</li>
<li><p>will always be asked first to load a class. This prevents programs from providing alternate definitions of classes in the core API (but a clever class loader can defeat that protection). This step is built into the loadClass( ) method.<br>The security manager is consulted to see if this program is allowed to create the class in question. If it is not, a security exception is thrown. This step is optional; if implemented, it should appear at the beginning of the findClass( ) method. Note that this step should take place after the parent class loader is queried rather than at the beginning of the operation (as is done with the access check). No Sun−supplied class loader implements this step; it corresponds to the defineClassInPackage permission.</p>
</li>
<li><p>The class file is read into an array of bytes. The mechanism by which the class loader reads the file and creates the byte array will vary depending on the class loader (which, after all, is one of the points of having different class loaders). This occurs in the findClass( ) method.<br>The appropriate protection domain is created for the class. This can come from the default security model (i.e., from the policy files), and it</p>
</li>
<li><p>can be augmented (or even replaced) by the class loader. Alternately, you can create a code source object and defer definition of the protection domain. This occurs in the findClass( ) method.</p>
</li>
<li><p>Within the findClass( ) method, a Class object is constructed from the bytecodes by calling the defineClass( ) method. If you used a code source in step 6, the getPermissions( ) method will be called to find the permissions associated with the code source. The defineClass( ) method also ensures that the bytecodes are run through the bytecode verifier.</p>
</li>
<li><p>Before the class can be used, it must be resolved −− which is to say that any classes that it immediately references must also be found by this class loader. The set of classes that are immediately referenced contains any classes that the class extends as well as any classes used by the static initializers of the class. Note that classes that are used only as instance variables, method parameters, or local variables are not normally loaded in this phase: they are loaded when the class actually references them (although certain compiler optimizations may require that these classes be loaded when the class is resolved). This step happens in the loadClass( ) method.</p>
</li>
</ol>
<p>If you want to use a custom class loader, the easiest route is to use the URL class loader. This limits the number of methods that you have to override.<br>To construct an instance of this class, use one of the following constructors:<br>public URLClassLoader(URL urls[])</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">URL urls[] = <span class="keyword">new</span> URL[<span class="number">2</span>];</span><br><span class="line">urls[<span class="number">0</span>] = <span class="keyword">new</span> URL(<span class="string">"http://piccolo.East/~sdo/"</span>);</span><br><span class="line">urls[<span class="number">1</span>] = <span class="keyword">new</span> URL(<span class="string">"file:/home/classes/LocalClasses.jar"</span>); ClassLoader parent = <span class="keyword">this</span>.getClass().getClassLoader( ); URLClassLoader ucl = <span class="keyword">new</span> URLClassLoader(urls, parent);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> Class <span class="title">loadClass</span><span class="params">(String name, <span class="keyword">boolean</span> resolve)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line"><span class="comment">// First check if we have permission to access the package.</span></span><br><span class="line">SecurityManager sm = System.getSecurityManager( );</span><br><span class="line"><span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> i = name.lastIndexOf(<span class="string">'.'</span>);</span><br><span class="line"><span class="keyword">if</span> (i != −<span class="number">1</span>) &#123;</span><br><span class="line">sm.checkPackageAccess(name.substring(<span class="number">0</span>, i));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.loadClass(name, resolve);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>6.3.4.2 Step 2: Use the previously−defined class, if available<br>The loadClass( ) method of the ClassLoader class performs this operation for you, which is why we’ve called the super.loadClass( ) method.</p>
<p>6.3.4.3 Step 3: Defer class loading to the parent<br>The loadClass( ) method of the ClassLoader class performs this operation. 6.3.4.4 Step 4: Optionally call the checkPackageDefinition( ) method<br>In order to call the checkPackageDefinition( ) method, you must override the findClass( ) method:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Class <span class="title">findClass</span><span class="params">(<span class="keyword">final</span> String name)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line"><span class="comment">// First check if we have permission to access the package. SecurityManager sm = System.getSecurityManager( );</span></span><br><span class="line"><span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> i = name.lastIndexOf(<span class="string">'.'</span>);</span><br><span class="line"><span class="keyword">if</span> (i != −<span class="number">1</span>) &#123;</span><br><span class="line">sm.checkPackageDefinition(name.substring(<span class="number">0</span>, i));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.findClass(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>6.3.4.5 Step 5: Read in the class bytes<br>The URL class loader performs this operation for you by consulting the URLs that were passed to its constructor. If you need to adjust the way in which the class bytes are read, you should use the SecureClassLoader class instead.<br>6.3.4.6 Step 6: Create the appropriate protection domain<br>The URL class loader will create a code source for each class based on the URL from which the class was loaded and the signers (if any) of the class. The permissions associated with this code source will be obtained by using the getPermissions( ) method of the Policy class, which by default will return the permissions read in from the active policy files. In addition, the URL class loader will add additional permissions to that set:<br>If the URL has a file protocol, it must specify a file permission that allows all files that descend from the URL path to be read. For example, if the URL is file:///xyz/classes/, then a file permission with a name of /xyz/classes/− and an action list of read will be added to the set of permiss ions. If the URL is a jar file (file:///xyz/MyApp.jar), the name file permission will be the URL itself.<br>If you want to associate different permissions with the class, then you should override the getPermissions( ) method. For example, if we wanted the above rules to apply and also allow the class to exit the virtual machine, we’d use this code:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> PermissionCollection <span class="title">getPermissions</span><span class="params">(CodeSource codesource)</span> </span>&#123; PermissionCollection pc = <span class="keyword">super</span>.getPermissions(codesource);</span><br><span class="line">pc.add(<span class="keyword">new</span> RuntimePermission(<span class="string">"exitVM"</span>));</span><br><span class="line"><span class="keyword">return</span> pc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>We could completely change the permissions associated with the class (bypassing the Policy class altogether) by constructing a new permission collection in this method rather than calling super.getPermissions( ). The URL class loader will use whatever permissions are returned from this getPermissions( ) method to define the protection domain that will be associated with the class.<br>If you need to load bytes from a source that is not a URL (or from a URL for which you don’t have a protocol handler, like FTP), then you’ll need to extend the SecureClassLoader class. A subclass is required because the constructors of this class are protected, and in any case you need to override the findClass( )</p>
<p>The steps to use this class are exactly like the steps for the URLClassLoader class, except for step 5. To implement step 5, you must override the findClass( ) method like this:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Class <span class="title">findClass</span><span class="params">(<span class="keyword">final</span> String name)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line"><span class="comment">// First check if we have permission to access the package.</span></span><br><span class="line"><span class="comment">// You could remove these 7 lines to skip the optional step 4.</span></span><br><span class="line">SecurityManager sm = System.getSecurityManager( );</span><br><span class="line"><span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> i = name.lastIndexOf(<span class="string">'.'</span>);</span><br><span class="line"><span class="keyword">if</span> (i != −<span class="number">1</span>) &#123;</span><br><span class="line">sm.checkPackageDefinition(name.substring(<span class="number">0</span>, i));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Now read in the bytes and define the class</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (Class)</span><br><span class="line">AccessController.doPrivileged(</span><br><span class="line"><span class="keyword">new</span> PrivilegedExceptionAction( ) &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">( )</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line"><span class="keyword">byte</span>[] buf = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// Acutally load the class bytes</span></span><br><span class="line">buf = readClassBytes(name);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(name, e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Create an appropriate code source</span></span><br><span class="line">CodeSource cs = getCodeSource(name);</span><br><span class="line"><span class="comment">// Define the class</span></span><br><span class="line"><span class="keyword">return</span> defineClass(name, buf,</span><br><span class="line"><span class="number">0</span>, buf.length, cs);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line">&#125; <span class="keyword">catch</span> (java.security.PrivilegedActionException pae) &#123; <span class="keyword">throw</span> (ClassNotFoundException) pae.getException( ); &#125;</span><br></pre></td></tr></table></figure>

<p>The syntax of this method is complicated by the fact that we need to load the class bytes in a privileged block. Depending on your circumstances, that isn’t strictly necessary, but it’s by far the most common case for class loaders. Say that your class loader loads class A from the database; that class is given minimal permissions. When that class references class B, the class loader will be asked to load class B and class A will be on the stack. When it’s time to load the new class bytes, we need to load them with the permissions of the class loader rather than the entire stack, which is why we use a privileged block.<br>Notwithstanding, the try block has three operations: it loads the class bytes, it defines a code source for that class, and it calls the defineClass( ) method to create the class. The first two of the opera tions are encapsulated in the readClassBytes( ) and getCodeSource( ) methods; these are methods that<br>you must implement.<br>Loading the class bytes is an operation left to the reader. The reason for providing your own class loader is that you want to read the class bytes in some special way; otherwise, you’d use the URLClassLoader class. The code source is another matter: we must determine a URL and a set of certificates that should be<br>associated with the class.<br>In a signed jar file, the certificates are read from the jar file and the URL is the location of the jar file. In Chapter 12, we’ll show how to get the certificates from a standard jar file and construct the appropriate URLClassLoader class. The code source is another matter: we must determine a URL and a set of certificates that should be<br>associated with the class.<br>In a signed jar file, the certificates are read from the jar file and the URL is the location of the jar file. In Chapter 12, we’ll show how to get the certificates from a standard jar file and construct the appropriate The defineClass( ) method will call back to the getPermissions( ) method in order to complete the definition of the protection domain for this class. And that’s why the URL used to construct the code source can be arbitrary: when you write the getPermissions( ) method, just make sure that you understand what the URL actually is. In default usage, the URL would be used to find entries in the policy files, but since you’re defining your own permissions anyway, the contents of the URL don’t matter. What matters is that you follow a consistent convention between the definition of your getCodeSource( ) and findClass( ) methods.<br>Hence, possible implementations of the getPermissions( ) and getCodeSource( ) methods are as follows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> CodeSource <span class="title">getCodeSource</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> CodeSource(<span class="keyword">new</span> URL(<span class="string">"file"</span>, <span class="string">"localhost"</span>, name),</span><br><span class="line"><span class="keyword">null</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (MalformedURLException mue) &#123;</span><br><span class="line">mue.printStackTrace( );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> PermissionCollection <span class="title">getPermissions</span><span class="params">(CodeSource codesource)</span> </span>&#123;</span><br><span class="line">PermissionCollection pc = <span class="keyword">new</span> Permissions( );</span><br><span class="line">pc.add(<span class="keyword">new</span> RuntimePermission(<span class="string">"exitVM"</span>));</span><br><span class="line"><span class="keyword">return</span> pc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>If you’re reading the class bytes from, say, a database, it would be more useful if you could pass an arbitrary string to construct the code source. That doesn’t work directly since the code source requires a URL but the file part of the URL can be any arbitrary string. In this case, we just use the class name.<br>Note that the getPermissions( ) method of the SecureClassLoader class does not add the additional permissions that the same method of the URLClassLoader class adds. As a result, we do not call the super.getPermissions( ) </p>
<h2 id="Delegation"><a href="#Delegation" class="headerlink" title="Delegation"></a>Delegation</h2><p>As we’ve mentioned, class loading follows a delegation model. This model permits a class loader to be instantiated with this constructor:<br>protected ClassLoader(ClassLoader parent)<br>Create a class loader that is associated with the given class loader. This class loader delegates all operations to the parent first: if the parent is able to fulfill the operation, this class loader takes no action. For example, when the class loader is asked to load a class via the loadClass( ) method, it first calls the loadClass( ) method of the parent. If that succeeds, the class returned by the delegate will ultimately be returned by this class. If that fails, the class loader then uses its original logic to complete its task, something like this:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Class <span class="title">loadClass</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">Class cl;</span><br><span class="line">cl = delegate.loadClass(name);</span><br><span class="line"><span class="keyword">if</span> (cl != <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> cl;</span><br><span class="line"><span class="comment">// else continue with the loadClass( ) logic</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>You may retrieve the delegate associated with a class loader with the following method<br> public final ClassLoader getParent( )<br>Return the class loader to which operations are being delegated.<br>The class loader that exists at the root of the class loader hierarchy is retrieved via this method:<br>Return the system class loader (the class loader that was used to load the base application classes). If a security manager is in place, you must have the getClassLoader runtime permission to use this method.</p>
<h2 id="Loading-Resources"><a href="#Loading-Resources" class="headerlink" title="Loading Resources"></a>Loading Resources</h2><p>A class loader can load not only classes, but any arbitrary resource: an audio file, an image file, or anything else. Instead of calling the loadClass( ) method, a resource is obtained by invoking one of these methods:<br>public URL getResource(String name)<br>public InputStream getResourceAsStream(String name)<br>The getResource( ) method calls the getSystemResource( ) method; if it does not find a system resource, it returns the object retrieved by a call to the findResource( ) method (which by default will be null). The getResourceAsStream( ) method simply</p>
<h2 id="Loading-Libraries"><a href="#Loading-Libraries" class="headerlink" title="Loading Libraries"></a>Loading Libraries</h2><p>Loading classes with native methods creates a call to this method of the ClassLoader class:<br>protected String findLibrary(String libname)<br>Return the directory from which native libraries should be loaded.<br>This method is used by the System.loadLibrary( ) method to determine the directory in which the native library in question should be found. If this method returns null (the default), the native library must be in one of the di</p>
<p>谈到常量池，在Java体系中，共用三种常量池。分别是字符串常量池、Class常量池和运行时常量池。</p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>class loader`</tag>
      </tags>
  </entry>
  <entry>
    <title>XA Transactions in 2PC</title>
    <url>/2016-06-01-XA-2PC/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><ul>
<li>2 phase commit protocol referred to as XA(eXtended Architecture)</li>
<li>This protocol provides ACID-like properties for global transaction processing</li>
<li>2 phase commit protocol is an atomic commitment protocol for distributed systems.</li>
<li>The first one is commit-request phase in which transaction manager coordinates all of the transaction resources to commit or abort. </li>
<li>In the commit-phase, transaction manager decides to finalize operation by committing or aborting according to the votes of the each transaction resource. </li>
<li>XA transactions need a global transaction id and local transaction id(xid) for each XA resource.</li>
<li>Each XA Resource is enlisted to XA Manager by start(xid) method. </li>
<li>This method tells that XA Resource is being involved in the transaction(be ready for operations). </li>
<li>the first phase of the 2PC protocol is realized by calling prepare(xid) method. This method requests OK or ABORT vote from XA Resource. </li>
<li>After receiving vote from each of XA Resource, XA Manager decides to execute a commit(xid) operation if all XA Resources send OK or decides to execute a rollback(xid) if an XA Resource sends ABORT.</li>
<li>Finally, the end(xid) method is called for each of XA Resource telling that the transaction is completed. </li>
</ul>
<p>Reference links:</p>
<ol>
<li>(DZone XA 2PC)[<a href="https://dzone.com/articles/xa-transactions-2-phase-commit]" target="_blank" rel="noopener">https://dzone.com/articles/xa-transactions-2-phase-commit]</a></li>
</ol>
]]></content>
      <tags>
        <tag>XA</tag>
        <tag>MobileInternet</tag>
      </tags>
  </entry>
  <entry>
    <title>Database sharding</title>
    <url>/2016-06-01-DB-Sharding/</url>
    <content><![CDATA[<h1 id="DB-sharding-in-YHD"><a href="#DB-sharding-in-YHD" class="headerlink" title="DB sharding in YHD"></a>DB sharding in YHD</h1><p>There are two solutions when DB becoming bottleneck in yihaodian. </p>
<ul>
<li>Scale up<br>Upgrade Oracle DB, adding more CPU , Disk and memory to incrase I/O performance. This is for short term only, high cost.</li>
<li>Scale out<br>Divide the order table to multiple DBs, which is support horizontal extension, for long term purpose.</li>
</ul>
<p>Orgional Oracle is replaced by multiple MySQL DB, supporintg one master and multiple slaves, supporitng segratation of read and write. Leveraging <code>MySQL built-in</code> Master-slave replication (SLA&lt;1 second)</p>
<h2 id="sharding-dimensions"><a href="#sharding-dimensions" class="headerlink" title="sharding dimensions"></a>sharding dimensions</h2><ul>
<li>DB Field chosing, it should chose the filed that lead to least SQL and code change, to make the access fall in <code>one database</code>, instead of multiple DBs, which result in high I/O and significant logic change. </li>
<li>Here is one practice</li>
<li><ul>
<li>Get all SQL</li>
</ul>
</li>
<li><ul>
<li>Pick up top fields appear in <code>where</code> clause.</li>
</ul>
</li>
<li><ul>
<li>List break down from three categories</li>
</ul>
</li>
</ul>
<ol>
<li>Single ID, i.e. userID=?</li>
<li>Multiple ID. i.e. userID in (?,?,?)</li>
<li>Not show</li>
</ol>
<table>
<thead>
<tr>
<th align="left">Field</th>
<th align="right">Single ID</th>
<th align="right">Multiple ID</th>
<th align="right">Not show</th>
</tr>
</thead>
<tbody><tr>
<td align="left">userID</td>
<td align="right">120</td>
<td align="right">40</td>
<td align="right">330</td>
</tr>
<tr>
<td align="left">orderID</td>
<td align="right">60</td>
<td align="right">80</td>
<td align="right">360</td>
</tr>
<tr>
<td align="left">shopID</td>
<td align="right">15</td>
<td align="right">0</td>
<td align="right">485</td>
</tr>
<tr>
<td align="left">It’s obviously we should chose userID for sharding. Hold on, this is just <strong>static</strong> analysis, we should conduct <em>dynamic*</em> study as well, so list most executed SQLs, e.g. top 15 SQL (account to 85% of SQL calls), if we conduct sharding by user ID, 85% of those SQL will fall in single DB and 13% fall in multiple DB, and only 2% will scan all DB, so the performance is must better than sharding on other ID fields.</td>
<td align="right"></td>
<td align="right"></td>
<td align="right"></td>
</tr>
</tbody></table>
<h2 id="sharding-strategy"><a href="#sharding-strategy" class="headerlink" title="sharding strategy"></a>sharding strategy</h2><p>There are two type of strategies</p>
<ol>
<li>By value range, e.g. user ID 1-9999 to DB1, and 10000-20000 to DB2. For this option, </li>
<li>By value mod, e.g. userID mod n, when reminder is 0, go to DB1, reminder is 1, to DB2, etc.</li>
</ol>
<p>Pros and Cons:</p>
<table>
<thead>
<tr>
<th align="left">Criteria</th>
<th align="left">By Range</th>
<th align="left">By Mod</th>
</tr>
</thead>
<tbody><tr>
<td align="left">number of DBs</td>
<td align="left">initially only require small amount of DBs, can increasse by business requests</td>
<td align="left">initially number based on mod number, normally a big number</td>
</tr>
<tr>
<td align="left">Accessibility</td>
<td align="left">initially only few DBs, perforamce cost is small, single DB performance query is poor</td>
<td align="left">initially big number of DBs, query acorss DBs may consume many resources, better for query on single DB</td>
</tr>
<tr>
<td align="left">DBs adjustment</td>
<td align="left">easy, just add new DB, and impact is limit when split existing DB</td>
<td align="left">not easy, change mod value  may result in DB migration across DBs</td>
</tr>
<tr>
<td align="left">Data hotspot</td>
<td align="left">there are data hotspot issues</td>
<td align="left">no data hotspot issues</td>
</tr>
</tbody></table>
<p>In practice, for the sake of simplicity, mod sharding is often used. To manage further sharding, and for smooth data migration, normally new DBs are added by folds, e.g. intially 4 DBs, furhter split will be 8 DBs, then 16 DBs. This is becuase only half of data in existing DB will be migrated to new DB, while the rest half will be remain unchanged. However, there are some super IDs, e.g. one big shop with massive records than normal, if we shard DB by user ID, there will one DB will many records than others. For this case, we need to provide separate DB for those super IDs.</p>
<h2 id="sharding-numbers"><a href="#sharding-numbers" class="headerlink" title="sharding numbers"></a>sharding numbers</h2><p>Firslty, that’s depends on the ability of single DB, e.g. normally one MySQL DB can support upto 50mio records, and Oracle can support 100mio. Normally multiple DBs may leads to certain perforamnce issues, when data query across multiple DBs, if there are multithreading call, it will cost precious thread resource, while it’s single thread, the wating time will be unacceptable. Normally, the initial sharding is 4-8 DBs.</p>
<h2 id="Router-transparency"><a href="#Router-transparency" class="headerlink" title="Router transparency"></a>Router transparency</h2><p>To certain extent, DB sharding means change of DBSChema, which inevitable result in application, however, this is irrelavent to business logic, so the DB sharding should be transparent to business logic code, therefore, DB sharding should be handled at DAL (Data Access Layer) or DDAL (Distributed Data Access Layer).</p>
<ol>
<li>For access to single DB, e.g. query by certain user id, DAL will automatically route to that DB, even further split by mod, still no applicaiton logic code change impacted.</li>
<li>For simple across DB query, DAL in charge to aggregate results from every DB query, still transparent to upper application logic.</li>
<li>For query involves multiple DBs with aggretation functions, e.g. groupBy, order by, min, max, avg. It’s recommended DAL consolidate request from single DB, while upper layers do further processing. That’s becuase if rely on DAL, it would be too complex, and such case is relatively rare case, so leave it to upper layer.</li>
</ol>
<h1 id="Oracle-Sharding"><a href="#Oracle-Sharding" class="headerlink" title="Oracle Sharding"></a>Oracle Sharding</h1><p>It’s required in Web 2.0 and high availability technologies</p>
<p>Shardingis an application-managed scaling technique using many (hundreds /thousands of) independent databases </p>
<ul>
<li>Data is split into multiple databases (shards)</li>
<li>Each database holds a subset (either range or hash) of the data</li>
<li>Split the shards as data volume or access grows</li>
<li>Shards are replicated for availability and scalability</li>
</ul>
<p>Sharding is the dominant approach for scaling massive websites</p>
<ul>
<li>Application code dispatches request to a specific database based on key value</li>
<li>Queries are constrained -simple queries on shard-key</li>
<li>Data isdenormalizedto avoid cross-shard operations (no joins)</li>
<li>Each database holds all the data</li>
<li>Request dispatched to a specific database based on read/write,key value</li>
<li>Updates go to one database, changes are replicated to the other databases. The other databases are available for reads</li>
<li>Provides read scalability</li>
<li>Can be combined with horizontal sharding so that each shard is replicated to a different degree</li>
<li>Main benefit is that you do not need to reshard</li>
</ul>
<h2 id="Downsides-of-DB-replica"><a href="#Downsides-of-DB-replica" class="headerlink" title="Downsides of DB replica"></a>Downsides of DB replica</h2><ul>
<li>Only async log shipping which can lose data in case of failure</li>
<li>Slaves can return inconsistent data</li>
<li>Statement based replication has correctness issues &amp; row-based replication is immature</li>
<li>Replication is slow (high overhead on each reader, slaves are single-threaded)</li>
<li>No support for failover between master (primary) &amp; slaves (backup)</li>
<li>Does not handle failure conditions such as missing or damaged logs</li>
<li>Storage engine and replication state may become inconsistent after a crash</li>
<li>Bringing a failed master back requires copying the database</li>
</ul>
<p>–End–</p>
]]></content>
      <tags>
        <tag>MobileInternet</tag>
        <tag>DB</tag>
        <tag>Sharding</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker</title>
    <url>/2016-06-01-Docker/</url>
    <content><![CDATA[<h1 id="Dockers-Concepts"><a href="#Dockers-Concepts" class="headerlink" title="Dockers Concepts"></a>Dockers Concepts</h1><h2 id="Official-Definition"><a href="#Official-Definition" class="headerlink" title="Official Definition"></a>Official Definition</h2><blockquote>
<p>Docker is an open platform for developers and sysadmins to build,ship and run distributed applications</p>
</blockquote>
<blockquote>
<p>Docker’s philosophy is “build-&gt;ship-&gt;run”.</p>
</blockquote>
<p>In contemporary IT industry, there are two major usage of <code>Docker</code>.</p>
<ol>
<li>Focus on Build &amp; Ship, to leverage Docker to setup a platform of “CI/CD”, for develop, test enviornment.</li>
<li>Make use of Docker as light weight VM (virtual machine), focus on <code>Run</code>, apply it in large scale production environment.</li>
</ol>
<h1 id="ACL"><a href="#ACL" class="headerlink" title="ACL"></a>ACL</h1><p>the access control in docker is rely on iptables, the firewall software shipped in almost all Linux release.</p>
<h1 id="Sample-Commands"><a href="#Sample-Commands" class="headerlink" title="Sample Commands"></a>Sample Commands</h1><p>List all images</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo docker version</span><br></pre></td></tr></table></figure>

<h2 id="remove-all-exited-containers"><a href="#remove-all-exited-containers" class="headerlink" title="remove all exited containers"></a>remove all exited containers</h2><p>docker rm $(docker ps -a -f status=exited -q)</p>
<h2 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run IMAGE_NAME [COMMAND] <span class="comment"># run a command in new container</span></span><br><span class="line">docker run -t -i f2d8ce9fa988 /bin/bash <span class="comment"># run bash in console and interactive mode</span></span><br></pre></td></tr></table></figure>

<h2 id="View-docker-details-e-g-start-up-script-working-dir"><a href="#View-docker-details-e-g-start-up-script-working-dir" class="headerlink" title="View docker details, e.g. start up script, working dir"></a>View docker details, e.g. start up script, working dir</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker inspect containerid</span><br></pre></td></tr></table></figure>

<h2 id="Start-bash-to-view-files-inside-docker"><a href="#Start-bash-to-view-files-inside-docker" class="headerlink" title="Start bash to view files inside docker"></a>Start bash to view files inside docker</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker -t -i imageFile /bin/bash</span><br></pre></td></tr></table></figure>

<h2 id="Map-hosts-between-host-and-contains"><a href="#Map-hosts-between-host-and-contains" class="headerlink" title="Map hosts between host and contains"></a>Map hosts between host and contains</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker -P xxx</span><br><span class="line">docker ps -l</span><br></pre></td></tr></table></figure>

<p>You’ll see</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">0.0.0.0:32768-&gt;5000/tcp</span><br></pre></td></tr></table></figure>

<p>It means host port 32768 map to port 5000 in contains</p>
<h2 id="To-list-docker-containers-including-histories"><a href="#To-list-docker-containers-including-histories" class="headerlink" title="To list docker containers including histories"></a>To list docker containers including histories</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker ps -a <span class="comment"># show all containers instead of only running as default</span></span><br><span class="line">docker ps -l <span class="comment"># show latest created container</span></span><br></pre></td></tr></table></figure>

<h1 id="removes-containers-once-return-from-one-run"><a href="#removes-containers-once-return-from-one-run" class="headerlink" title="removes containers once return from one run"></a>removes containers once return from one run</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run --rm -name myApp1  -link  db:db training/webapp env</span><br></pre></td></tr></table></figure>

<h2 id="to-ping-other-containers"><a href="#to-ping-other-containers" class="headerlink" title="to ping other containers"></a>to ping other containers</h2><p>Be advised there is no built-in ping for containers, therefore it’s requried manually install one. As following sample:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">apt-get install -yqq inetutils-ping</span><br></pre></td></tr></table></figure>

<h1 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h1><ul>
<li><a href="https://www.gitbook.com/book/yeasy/docker_practice/details" target="_blank" rel="noopener">GitBook Docker —— 从入门到实践</a></li>
<li><a href="https://www.zhihu.com/question/27227492" target="_blank" rel="noopener">知乎 docker</a></li>
<li><a href="http://dockone.io/article/626" target="_blank" rel="noopener">Yelp Docker -中文版</a></li>
<li><a href="http://engineeringblog.yelp.com/2015/08/docker-in-the-real-world-at-yelp.html" target="_blank" rel="noopener">Yelp Docker -英文版</a></li>
<li><a href="https://www.amazon.cn/%E5%9B%BE%E4%B9%A6/dp/1784397938?ie=UTF8&camp=536&creative=3132&creativeASIN=1784397938&linkCode=as2&ref_=as_li_ss_tl&tag=flamingtop-23" target="_blank" rel="noopener">Amazon Docker books</a></li>
</ul>
]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Setup Git in Mint Linux</title>
    <url>/2016-06-01-Setup-Git-In-Mint/</url>
    <content><![CDATA[<h1 id="How-to-setup-Git-in-Mint-Linux"><a href="#How-to-setup-Git-in-Mint-Linux" class="headerlink" title="How to setup Git in Mint Linux"></a>How to setup Git in Mint Linux</h1><p>=================================================</p>
<ul>
<li>git config –global user.name “Todd Zhang”</li>
<li>git config –global user.email <a href="mailto:phray.zhang@gmail.com" target="_blank" rel="noopener">phray.zhang@gmail.com</a></li>
<li>git config –list</li>
<li>git clone <a href="https://github.com/todzhanglei/todzhanglei.github.io" target="_blank" rel="noopener">https://github.com/todzhanglei/todzhanglei.github.io</a> </li>
<li>git config –global credential.helper cache</li>
<li>git config –global credential.helper ‘cache –timeout=36000’</li>
</ul>
<h2 id="To-add-remote"><a href="#To-add-remote" class="headerlink" title="To add remote"></a>To add remote</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git remote add origin https://github.com/CloudsDocker/cloudsdocker.github.io.git</span><br></pre></td></tr></table></figure>

<p>Above command will add the remote URL with alias “origin”</p>
<h2 id="To-pull-specific-branch"><a href="#To-pull-specific-branch" class="headerlink" title="To pull specific branch"></a>To pull specific branch</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git pull origin blogSrc</span><br></pre></td></tr></table></figure>

<h1 id="Errors"><a href="#Errors" class="headerlink" title="Errors"></a>Errors</h1><h2 id="Error-The-following-untracked-working-tree-files-would-be-overwritten-by-checkout"><a href="#Error-The-following-untracked-working-tree-files-would-be-overwritten-by-checkout" class="headerlink" title="Error: The following untracked working tree files would be overwritten by checkout"></a>Error: The following untracked working tree files would be overwritten by checkout</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git clean  -d  -fx <span class="string">""</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Git</tag>
        <tag>Mint</tag>
      </tags>
  </entry>
  <entry>
    <title>CI and CD</title>
    <url>/2016-06-03-CI-CD/</url>
    <content><![CDATA[<h1 id="Concepts"><a href="#Concepts" class="headerlink" title="Concepts"></a>Concepts</h1><p><code>CI/CD</code> are usage of Docker, <code>CI</code> is continuous integration, is the process of eliciting fast, automated feedback on the <em>correctness</em> of your application every time there is a change to the code, while <code>CD</code> means continuous delivery, build upon the earlier concept by providing fast, automated feedback on the <em>correctness</em> and <em>production readiness</em> of your application every time there is a chance to <em>code, infrastructure, or configuration</em>.</p>
<h1 id="Some-“best-practices”"><a href="#Some-“best-practices”" class="headerlink" title="Some “best practices”"></a>Some “best practices”</h1><ul>
<li>Frequent commits to a common code stream</li>
<li>Disallow commits into a “broken” build</li>
<li>A “broken” build on CI should be attended to immediately and its resolutin should be of utmost priority</li>
</ul>
<h1 id="Use-cases"><a href="#Use-cases" class="headerlink" title="Use cases"></a>Use cases</h1>]]></content>
      <tags>
        <tag>MobileInternet</tag>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>Load Balancing</title>
    <url>/2016-06-07-Load-Balancing/</url>
    <content><![CDATA[<h1 id="Concepts"><a href="#Concepts" class="headerlink" title="Concepts"></a>Concepts</h1><p><code>LVS</code> means Linux Virtual Server, which is one Linux built-in component. </p>
<h1 id="Some-logics-of-LVS"><a href="#Some-logics-of-LVS" class="headerlink" title="Some logics of LVS"></a>Some logics of LVS</h1><h2 id="Never-Queue-Shceduling"><a href="#Never-Queue-Shceduling" class="headerlink" title="Never Queue Shceduling"></a>Never Queue Shceduling</h2><blockquote>
<p>The never queue scheduling algorithm adpots a two-speed model</p>
</blockquote>
<ol>
<li>When there is an idel server avaiable, the job will be sent to the idel server, instead of waiting for a fast one.</li>
<li>When there is no idel server avaiable, the job will be sent to the server that minimize it’s expected delay.</li>
</ol>
<h1 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h1><h2 id="Setup-LVS"><a href="#Setup-LVS" class="headerlink" title="Setup LVS"></a>Setup LVS</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ipvsadm -A -t 192.168.0.1:80 -s rr</span><br><span class="line">ipvsadm -a -t 192.168.0.1:80 -r 172.16.0.1:80 -m</span><br><span class="line">ipvsadm -a -t 192.168.0.1:80 -r 172.16.0.2:80 -m</span><br></pre></td></tr></table></figure>

<ul>
<li>The first command assign TCP port 80 on IP address 192.168.0.1 to the virtual server, the shceduling algorithm for load balancing is <code>-s rr</code> means using round-robin</li>
<li>The 2nd and 3rd commands are adding IP addresss of <code>real servers</code> to the LVS setup</li>
<li>the forwarded network packets shall be masked <code>-m</code></li>
</ul>
<h2 id="To-query-LVS-status"><a href="#To-query-LVS-status" class="headerlink" title="To query LVS status"></a>To query LVS status</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ipvsadm -L -n</span><br><span class="line">IP Virtual Server version 1.0.8 (size=65536)</span><br><span class="line">Prot LocalAddress:Port Scheduler Flags</span><br><span class="line">  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br><span class="line">TCP  192.168.0.1:80 rr</span><br><span class="line">  -&gt; 172.16.0.2:80                Masq    1      3          1</span><br><span class="line">  -&gt; 172.16.0.1:80                Masq    1      4          0</span><br></pre></td></tr></table></figure>

<h2 id="Strucutre-of-LVS-in-wikipedia"><a href="#Strucutre-of-LVS-in-wikipedia" class="headerlink" title="Strucutre of LVS in wikipedia"></a>Strucutre of LVS in wikipedia</h2><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/8/84/Wikimedia_Server_Architecture_%28simplified%29.svg/743px-Wikimedia_Server_Architecture_%28simplified%29.svg.png" alt="Strucutre of LVS in wikipedia"></p>
]]></content>
      <tags>
        <tag>MobileInternet</tag>
        <tag>DevOps</tag>
        <tag>CTO</tag>
      </tags>
  </entry>
  <entry>
    <title>Storage Management</title>
    <url>/2016-06-03-Storage-Management/</url>
    <content><![CDATA[<h1 id="RAID"><a href="#RAID" class="headerlink" title="RAID"></a>RAID</h1><p><code>RAID</code> is Reductant Array Independent Disk, </p>
<h1 id="JBOD"><a href="#JBOD" class="headerlink" title="JBOD"></a>JBOD</h1><p><code>JBOD</code> is abbreviated from “Just a bunch of disks”, is an architecutre using multiple hard drives, but not in a RAID configuration, thus providing neither redundancy nor performance improvement.Hard drives may be handled independently as separate logical volumnes, or they may be combined into a single logical volume using a volume manager like LVM, such volumes are usually called “spanned”</p>
<h1 id="LVM"><a href="#LVM" class="headerlink" title="LVM"></a>LVM</h1><p>‘LVM’ means Logical Volume Manager, is part of Linux kenel, is a device mapper. LVM is used to manage large hard disk farms by allowing disks to be added and replaced without downtime or service distruption.</p>
]]></content>
      <tags>
        <tag>MobileInternet</tag>
        <tag>CTO</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker Errors and Fixes</title>
    <url>/2016-06-09-Docker-Errors-Fixes/</url>
    <content><![CDATA[<h1 id="Docker-Errors"><a href="#Docker-Errors" class="headerlink" title="Docker Errors"></a>Docker Errors</h1><ol>
<li>Cannot connect to the Docker daemon. Is the docker daemon running on this host?<br>The solution is to run under root user, e.g. </li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure>

<ol>
<li>Docker service</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo service docker status</span><br><span class="line">sudo service docker start</span><br><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>DevOps</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Python</title>
    <url>/2016-06-05-Python/</url>
    <content><![CDATA[<p>(‘—–Unexpected error:’, &lt;type ‘exceptions.TypeError’&gt;) datetime.datetime.now()</p>
<h1 id="Python-items"><a href="#Python-items" class="headerlink" title="Python items"></a>Python items</h1><p>Test item,</p>
<p>MapReduce的设计灵感来自于函数式编程，这里不打算提MapReduce，就拿python中的map()函数来学习一下</p>
<h1 id="Single-Qutoe-vs-Double-Quote"><a href="#Single-Qutoe-vs-Double-Quote" class="headerlink" title="Single Qutoe vs Double Quote"></a>Single Qutoe vs Double Quote</h1><p>There is no difference between using single quotes and double quotes in Python</p>
<h1 id="Generators-presentation"><a href="#Generators-presentation" class="headerlink" title="Generators presentation:"></a>Generators presentation:</h1><p><a href="http://www.dabeaz.com/generators/Generators.pdf" target="_blank" rel="noopener">http://www.dabeaz.com/generators/Generators.pdf</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">wwwlog=open(<span class="string">'weblog.debug'</span>)</span><br><span class="line">bytecolumn=(line.rsplit(<span class="literal">None</span>,<span class="number">1</span>)[<span class="number">1</span>] <span class="keyword">for</span> line <span class="keyword">in</span> wwwlog)</span><br><span class="line">bytes=(int(x) <span class="keyword">for</span> x <span class="keyword">in</span> bytecolumn <span class="keyword">if</span> x!=<span class="string">'-'</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"total:"</span>, sum(bytes)</span><br></pre></td></tr></table></figure>

<h2 id="Generator-as-a-pipeline"><a href="#Generator-as-a-pipeline" class="headerlink" title="Generator as a pipeline"></a>Generator as a pipeline</h2><p>At each step, we declare an operation that will be applied to the entire input stream, like <code>rsplit</code> to all lines of the input log file. Rather than take a huge memory to process a huge file.</p>
<p>The key is ‘think big’. Instead of focusing on the problem at a line-by-line level, you just break it down into big operations that operate on the whole file.</p>
<h3 id="Iteration-is-the-glue"><a href="#Iteration-is-the-glue" class="headerlink" title="Iteration is the glue"></a>Iteration is the glue</h3><h1 id="rsplit"><a href="#rsplit" class="headerlink" title="rsplit"></a>rsplit</h1><p><a href="http://python-reference.readthedocs.io/en/latest/docs/str/rsplit.html" target="_blank" rel="noopener">API doc</a><br>Returns a list of the words in the string, separated by the delimiter string (starting from right).</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">' a b c '</span>.rsplit(<span class="literal">None</span>, <span class="number">1</span>)</span><br><span class="line">[<span class="string">' a b'</span>, <span class="string">'c'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">' a b c '</span>.rsplit(<span class="literal">None</span>, <span class="number">2</span>)</span><br><span class="line">[<span class="string">' a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Coding</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Git commands notes</title>
    <url>/2016-06-13-GIT/</url>
    <content><![CDATA[<h1 id="How-to-to-list-of-what-branch-for-a-given-commit"><a href="#How-to-to-list-of-what-branch-for-a-given-commit" class="headerlink" title="How to to list of what branch for a given commit"></a>How to to list of what branch for a given commit</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --author todd --grep e2e</span><br><span class="line">$ git name-rev 78a4c4c340de70c726844e97233c58fa4738fea9</span><br><span class="line"></span><br><span class="line">78a4c4c340de70c726844e97233c58fa4738fea9 remotes/origin/feature/term-deposit-protractors~1</span><br></pre></td></tr></table></figure>

<h1 id="To-search-keywords-in-js-files-only"><a href="#To-search-keywords-in-js-files-only" class="headerlink" title="To search keywords in js files only"></a>To search keywords in js files only</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ find . -name <span class="string">'*.js'</span> | xargs grep -r <span class="string">'SearchKeywords'</span></span><br></pre></td></tr></table></figure>

<h1 id="One-line-command-to-add-and-commit-file"><a href="#One-line-command-to-add-and-commit-file" class="headerlink" title="One line command to add and commit file"></a>One line command to add and commit file</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status --short | awk <span class="string">'&#123;split($0, a);print a[2]&#125;'</span> | xargs git add &amp;&amp; git commit -m <span class="string">'summit status'</span></span><br></pre></td></tr></table></figure>

<h1 id="to-show-files-commited-but-not-pushed"><a href="#to-show-files-commited-but-not-pushed" class="headerlink" title="to show files commited but not pushed"></a>to show files commited but not pushed</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff --<span class="built_in">stat</span> --cached origin/feature/BRANCH_NAME</span><br></pre></td></tr></table></figure>

<h1 id="to-view-file-content-changed"><a href="#to-view-file-content-changed" class="headerlink" title="to view file content changed"></a>to view file content changed</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git show PATH/FILE.sql</span><br></pre></td></tr></table></figure>

<h1 id="One-line-to-fetch-checkout-newly-created-branch"><a href="#One-line-to-fetch-checkout-newly-created-branch" class="headerlink" title="One line to fetch, checkout newly created branch"></a>One line to fetch, checkout newly created branch</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git fetch &amp;&amp; git <span class="keyword">for</span>-each-ref | grep <span class="string">'AO-106'</span>  | awk <span class="string">'&#123;split($0,a);print a[3]&#125;'</span> | awk <span class="string">"&#123;split(<span class="variable">$0</span>,a, '/');print a[-1]&#125;"</span></span><br></pre></td></tr></table></figure>

<h1 id="To-get-changed-files-NOT-contains-keyword"><a href="#To-get-changed-files-NOT-contains-keyword" class="headerlink" title="To get changed files NOT contains keyword"></a>To get changed files <code>NOT</code> contains keyword</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git status | grep -v <span class="string">"node_"</span></span><br></pre></td></tr></table></figure>

<p>-v is for reverse</p>
<h1 id="Cherry-picking"><a href="#Cherry-picking" class="headerlink" title="Cherry picking"></a>Cherry picking</h1><p>Cherry picking in Git is designed to <code>apply some commit from one branch into another branch</code>. 
It can be done if you eg. made a mistake and committed a change into wrong branch, but do not want to merge the whole branch. You can just eg. revert the commit and cherry-pick it on another branch.</p>
<p>To use it, you just need git cherry-pick hash, where hash is a commit hash from other branch.</p>
<h2 id="Differences-among-Git-and-subversion"><a href="#Differences-among-Git-and-subversion" class="headerlink" title="Differences among Git and subversion"></a>Differences among Git and subversion</h2><p> The differences between git and other source control (like subversion) is Git have to merge conflict before upload to server, while subversion will merge conflicts at server side</p>
<h2 id="following-lages-are-searchable-in-google"><a href="#following-lages-are-searchable-in-google" class="headerlink" title="following lages are searchable in google"></a>following lages are searchable in google</h2><ul>
<li><a href="http://byalice.github.io/2016/06/04/Build-Blog/" target="_blank" rel="noopener">alice</a></li>
<li>gihub</li>
</ul>
<h2 id="Errors"><a href="#Errors" class="headerlink" title="Errors"></a>Errors</h2><p>WARN  No layout: index.html</p>
<h3 id="Following-errors-when-run-hexo-g"><a href="#Following-errors-when-run-hexo-g" class="headerlink" title="Following errors when run hexo g"></a>Following errors when run <code>hexo g</code></h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Unhandled rejection Error: ENOENT: no such file or directory, open <span class="string">'/Users/todzhang/dev/git/blogSrc/themes/next/layout/_scripts/schemes/.swig'</span></span><br><span class="line">    at Error (native)</span><br><span class="line">    at Object.fs.openSync (fs.js:549:18)</span><br><span class="line">    at Object.fs.readFileSync (fs.js:397:15)</span><br><span class="line">    at Object.ret.load (/Users/todzhang/dev/git/blogSrc/node_modules/hexo/node_modules/swig/lib/loaders/filesystem.js:55:15)</span><br><span class="line">    at compileFile (/Users/todzhang/dev/git/blogSrc/node_modules/hexo/node_modules/swig/lib/swig.js:695:31)</span><br><span class="line">    at Object.eval [as tpl] (<span class="built_in">eval</span> at &lt;anonymous&gt; (/Users/todzhang/dev/git/blogSrc/node_modules/hexo/node_modules/swig/lib/swig.js:498:13), &lt;anonymous&gt;:338:18)</span><br><span class="line">    at compiled [as _compiledSync] (/Users/todzhang/dev/git/blogSrc/node_modules/hexo/node_modules/swig/lib/swig.js:619:18)</span><br><span class="line">    at tryCatcher (/Users/todzhang/dev/git/blogSrc/node_modules/hexo/node_modules/bluebird/js/release/util.js:16:23)</span><br><span class="line">    at null._compiled (/Users/todzhang/dev/git/blogSrc/node_modules/hexo/node_modules/bluebird/js/release/method.js:15:34)</span><br><span class="line">    at View.render (/Users/todzhang/dev/git/blogSrc/node_modules/hexo/lib/theme/view.js:29:15)</span><br><span class="line">    at /Users/todzhang/dev/git/blogSrc/node_modules/hexo/lib/hexo/index.js:387:25</span><br><span class="line">    at tryCatcher (/Users/todzhang/dev/git/blogSrc/node_modules/hexo/node_modules/bluebird/js/release/util.js:16:23)</span><br><span class="line">    at /Users/todzhang/dev/git/blogSrc/node_modules/hexo/node_modules/bluebird/js/release/method.js:15:34</span><br><span class="line">    at RouteStream._read (/Users/todzhang/dev/git/blogSrc/node_modules/hexo/lib/hexo/router.js:134:3)</span><br><span class="line">    at RouteStream.Readable.read (_stream_readable.js:336:10)</span><br><span class="line">    at resume_ (_stream_readable.js:733:12)</span><br><span class="line">    at nextTickCallbackWith2Args (node.js:442:9)</span><br><span class="line">    at process._tickCallback (node.js:356:17)</span><br></pre></td></tr></table></figure>

<h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h4><p>That’s because one extra space required after semi colon in _config.yml of Next, as following config</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># Duoshuo ShortName</span><br><span class="line">duoshuo_shortname: cloudsdocker</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Git</tag>
        <tag>GitPages</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript tips</title>
    <url>/2016-06-12-JavaScript-tips/</url>
    <content><![CDATA[<h1 id="includes-vs-some"><a href="#includes-vs-some" class="headerlink" title="includes() vs some()"></a>includes() vs some()</h1><ul>
<li><p>The includes() method is used to check if a specific string exists in a collection, and returns true or false. Keep in mind that it is case sensitive: if the item inside the collection is SCHOOL, and you search for school, it will return false.</p>
</li>
<li><p>The some() method checks if some elements exists in an array, and returns true or false. This is somewhat similar to the concept of the includes() method, <code>the key diffence is the argument is a function</code> but not a string.</p>
</li>
</ul>
<h1 id="splice-vs-slice"><a href="#splice-vs-slice" class="headerlink" title="splice vs slice"></a>splice vs slice</h1><p>splice: Join or connect (a rope or ropes) by interweaving the strands at the ends.</p>
<p>‘we learned how to weave and splice ropes’</p>
<p>slice: Cut (something, especially food) into slices.</p>
<p>‘slice the onion into rings’</p>
<ol>
<li><p>The splice() method returns the removed item(s) in an array and slice() method returns the selected element(s) in an array, as a new array object.</p>
</li>
<li><p>The splice() method changes the original array and slice() method doesn’t change the original array.</p>
</li>
<li><p>The splice() method can take n number of arguments:</p>
</li>
</ol>
<p>Argument 1: Index, Required. An integer that specifies at what position to add /remove items, Use negative values to specify the position from the end of the array.</p>
<p>Argument 2: Optional. The number of items to be removed. If set to 0(zero), no items will be removed. And if not passed, all item(s) from provided index will be removed.</p>
<p>Argument 3…n: Optional. The new item(s) to be added to the array.</p>
<pre><code>-5 -4 -3 -2 -1
 |  |  |  |  |</code></pre><p>var array4=[16,17,18,19,20];<br>             |  |  |  |  |<br>             0  1  2  3  4</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="built_in">console</span>.log(array4.splice(<span class="number">-2</span>,<span class="number">1</span>,<span class="string">"me"</span>));</span><br><span class="line"><span class="comment">// shows  [19]</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(array4);</span><br><span class="line"><span class="comment">// shows [16, 17, 18, "me", 20]</span></span><br></pre></td></tr></table></figure>

<p>The slice() method can take 2 arguments:</p>
<p>Argument 1: Required. An integer that specifies where to start the selection (The first element has an index of 0). Use negative numbers to select from the end of an array.</p>
<p>Argument 2: Optional. An integer that specifies where to end the selection. If omitted, all elements from the start position and to the end of the array will be selected. Use negative numbers to select from the end of an array.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(array.slice(<span class="number">2</span>));</span><br><span class="line"><span class="comment">// shows [3, 4, 5], returned selected element(s).</span></span><br></pre></td></tr></table></figure>

<h1 id="Observable-is-lazy"><a href="#Observable-is-lazy" class="headerlink" title="Observable is lazy"></a>Observable is <code>lazy</code></h1><p>Remember that observables are lazy — if we want to pull a value out of an observable, we must subscribe().</p>
<h1 id="mergeAll-vs-mergeMap-in-redux"><a href="#mergeAll-vs-mergeMap-in-redux" class="headerlink" title="mergeAll vs mergeMap in redux"></a>mergeAll vs mergeMap in redux</h1><h2 id="mergeAll"><a href="#mergeAll" class="headerlink" title="mergeAll"></a>mergeAll</h2><p>When the inner observable emits, let me know by merging the value to the outer observable.</p>
<p>Under the hood, the mergeAll() operator basically does takes the inner observable, subscribes to it, and pushes the value to the observer. Here is one sample:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> click$ = Observable.fromEvent(button, ‘click’);</span><br><span class="line"><span class="keyword">const</span> interval$ = Observable.interval(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> observable$ = click$.map(<span class="function"><span class="params">event</span> =&gt;</span> &#123; </span><br><span class="line">   <span class="keyword">return</span> interval$;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">observable$.mergeAll().subscribe(<span class="function"><span class="params">num</span> =&gt;</span> <span class="built_in">console</span>.log(num));</span><br><span class="line"></span><br><span class="line">Because <span class="keyword">this</span> is a common pattern <span class="keyword">in</span> Rx, there is a shortcut that achieves the same behaviour — mergeMap().</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> click$ = Observable.fromEvent(button, ‘click’);</span><br><span class="line"><span class="keyword">const</span> interval$ = Observable.interval(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> observable$ = click$.mergeMap(<span class="function"><span class="params">event</span> =&gt;</span> &#123; </span><br><span class="line">   <span class="keyword">return</span> interval$;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">observable$.subscribe(<span class="function"><span class="params">num</span> =&gt;</span> <span class="built_in">console</span>.log(num));</span><br></pre></td></tr></table></figure>

<h1 id="more-elegant-concise-and-flexible-approach-to-check-host-string-belongs-to-multiple-value-choices"><a href="#more-elegant-concise-and-flexible-approach-to-check-host-string-belongs-to-multiple-value-choices" class="headerlink" title="more elegant, concise and flexible approach to check host string belongs to multiple value choices"></a>more elegant, concise and flexible approach to check host string belongs to multiple value choices</h1><p>checkStringAgainstMultipleLiteralValues.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (host.match(<span class="regexp">/["uat" , "beta", "lab"].(api.)?yourdomain.(com.)?["au","io"]/</span>)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'matched'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="closure"><a href="#closure" class="headerlink" title="closure"></a>closure</h1><p>闭包就是一个函数引用另外一个函数的变量，因为变量被引用着所以不会被回收，因此可以用来封装一个私有变量。这是优点也是缺点，不必要的闭包只会徒增内存消耗！另外使用闭包也要注意变量的值是否符合你的要求，因为他就像一个静态私有变量一样。</p>
<p> In JavaScript, if you use the function keyword inside another function, you are creating a closure.</p>
<p> Two one sentence summaries about closure</p>
<ul>
<li><p>closure is the local variable for a function — kept alive after the function has returned, or</p>
</li>
<li><p>closure is a stack-frame which is not deallocated when the function returns (as if a ‘stack-frame’ were malloc’ed instead of being on the stack!).</p>
<p>In JavaScript, if you declare a function within another function, then the local variables can remain accessible after returning from the function you called. </p>
</li>
</ul>
<h1 id="Tips-to-redirect-page"><a href="#Tips-to-redirect-page" class="headerlink" title="Tips to redirect page"></a>Tips to redirect page</h1><p>It’s better to use <code>window.location.replace(&quot;httpxxx&quot;)&#39;, rather than window.location.href=&quot;xxx&quot;. Because</code>replace` will not save the page in the session history, so users won’t get stufy in never-ending back-button fiasco.</p>
]]></content>
      <tags>
        <tag>Coding</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Tips</title>
    <url>/2016-06-10-Linux-Tips/</url>
    <content><![CDATA[<h1 id="Get-permission-denied-error-when-sudo-su-or-hyphen-in-sudo-command"><a href="#Get-permission-denied-error-when-sudo-su-or-hyphen-in-sudo-command" class="headerlink" title="Get permission denied error when sudo su (or hyphen in sudo command)"></a>Get permission denied error when sudo su (or hyphen in sudo command)</h1><p>bash: /home/YOURNAME/.bashrc: Permission denied<br>That’s because you didn’t add “-“ hyphen in your sudo command.</p>
<p>The difference between “-“ and “no hyphen” is that the latter keeps your existing environment (variables, etc); the former creates a new environment (with the settings of the actual user, not your own).</p>
<p>The hyphen has two effects:</p>
<p>1) switches from the current directory to the home directory of the new user (e.g., to /root in the case of the root user) by logging in as that user</p>
<p>2) changes the environmental variables to those of the new user as dictated by their ~/.bashrc. That is, if the first argument to su is a hyphen, the current directory and environment will be changed to what would be expected if the new user had actually logged on to a new session (rather than just taking over an existing session).</p>
<h1 id="To-delete-lines-in-files-contain-pattern"><a href="#To-delete-lines-in-files-contain-pattern" class="headerlink" title="To delete lines in files contain pattern"></a>To delete lines in files contain pattern</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">'/.*167\=OPT.*/d'</span> testdata.txt</span><br></pre></td></tr></table></figure>

<h1 id="to-select-only-only-one-element-value-of-XML-file"><a href="#to-select-only-only-one-element-value-of-XML-file" class="headerlink" title="to select only only one element value of XML file :"></a>to select only only one element value of XML file :</h1><p>grep -oPm1 “(?&lt;=<theuniqid>)[^&lt;]+” </theuniqid></p>
<h1 id="To-check-Linux-release-name"><a href="#To-check-Linux-release-name" class="headerlink" title="To check Linux release name"></a>To check Linux release name</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat /etc/os-release</span><br></pre></td></tr></table></figure>

<h1 id="How-to-check-whether-your-linux-is-32bit-or-64-bit"><a href="#How-to-check-whether-your-linux-is-32bit-or-64-bit" class="headerlink" title="How to check whether your linux is 32bit or 64 bit"></a>How to check whether your linux is 32bit or 64 bit</h1><p>To run “arch” command,  this is similar to “uname -m” , it prints to the screen whether your system is running 32-bit (“i686”) or 64-bit (“x86_64”).</p>
<h1 id="convert-line-ending-to-unix-sometimes-git-submit-is-dos-format"><a href="#convert-line-ending-to-unix-sometimes-git-submit-is-dos-format" class="headerlink" title="convert line ending to unix (sometimes git submit is dos format)"></a>convert line ending to unix (sometimes git submit is dos format)</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">dos2unix the_script_file_name</span><br></pre></td></tr></table></figure>

<h1 id="To-check-redhat-Linux-version"><a href="#To-check-redhat-Linux-version" class="headerlink" title="To check redhat Linux version"></a>To check redhat Linux version</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat  /etc/redhat-release</span><br></pre></td></tr></table></figure>

<h1 id="To-list-all-users-in-linux"><a href="#To-list-all-users-in-linux" class="headerlink" title="To list all users in linux"></a>To list all users in linux</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat /etc/passwd</span><br></pre></td></tr></table></figure>

<h1 id="Show-IP-address-in-Linux"><a href="#Show-IP-address-in-Linux" class="headerlink" title="Show IP address in Linux"></a>Show IP address in Linux</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ifconfig</span></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 00:50:56:9B:19:81</span><br><span class="line">          inet addr:133.14.16.5  Bcast:133.14.16.255  Mask:255.255.255.0</span><br></pre></td></tr></table></figure>

<h1 id="Check-system-resource"><a href="#Check-system-resource" class="headerlink" title="Check system resource"></a>Check system resource</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">execute `cat /proc/cpuinfo` and `free -m` to gain information about the server’s CPU and memory.</span><br></pre></td></tr></table></figure>

<h1 id="chmod-command"><a href="#chmod-command" class="headerlink" title="chmod command"></a>chmod command</h1><p>From one to four octal digits<br>Any omitted digits are assumed to be leading zeros. </p>
<p>The first digit = selects attributes for the set user ID (4) and set group ID (2) and save text image (1)S<br>The second digit = permissions for the user who owns the file: read (4), write (2), and execute (1)<br>The third digit = permissions for other users in the file’s group: read (4), write (2), and execute (1)<br>The fourth digit = permissions for other users NOT in the file’s group: read (4), write (2), and execute (1)</p>
<p>The octal (0-7) value is calculated by adding up the values for each digit<br>User (rwx) = 4+2+1 = 7<br>Group(rx) = 4+1 = 5<br>World (rx) = 4+1 = 5<br>chmode mode = 0755</p>
<p>Examples</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">chmod 400 file - Read by owner</span><br><span class="line">chmod 040 file - Read by group</span><br><span class="line">chmod 004 file - Read by world </span><br><span class="line"></span><br><span class="line">chmod 200 file - Write by owner</span><br><span class="line">chmod 020 file - Write by group</span><br><span class="line">chmod 002 file - Write by world</span><br></pre></td></tr></table></figure>

<h1 id="top"><a href="#top" class="headerlink" title="top"></a>top</h1><ul>
<li>enter u, then user id to show only user process</li>
<li>Z: global color scheme, e.g. red or green</li>
<li>B: global bold for all</li>
<li>z: show color, then b to hightlight, and x highlight sort fidl, y highlight running tasks</li>
<li>#3: show only 3 threads</li>
<li>c: show command line</li>
<li>F: sort, e.g. Fk sort by CPU%</li>
<li>R: reverse order</li>
</ul>
<h1 id="Sample-config-files"><a href="#Sample-config-files" class="headerlink" title="Sample config files"></a>Sample config files</h1><h2 id="vimrc"><a href="#vimrc" class="headerlink" title=".vimrc"></a>.vimrc</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">set</span> number</span><br><span class="line"><span class="built_in">set</span> incsearch</span><br><span class="line"><span class="built_in">set</span> hlsearch</span><br><span class="line">syntax on</span><br><span class="line">colorscheme desert</span><br></pre></td></tr></table></figure>

<h2 id="screenrc"><a href="#screenrc" class="headerlink" title="==== screenrc  ="></a>==== screenrc  =</h2><p><a href="https://gist.githubusercontent.com/ChrisWills/1337178/raw/8275b66c3ea86a562cdaa16f1cc6d9931d521e1b/.screenrc-main-example" target="_blank" rel="noopener">https://gist.githubusercontent.com/ChrisWills/1337178/raw/8275b66c3ea86a562cdaa16f1cc6d9931d521e1b/.screenrc-main-example</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># GNU Screen - main configuration file </span></span><br><span class="line"><span class="comment"># All other .screenrc files will source this file to inherit settings.</span></span><br><span class="line"><span class="comment"># Author: Christian Wills - cwills.sys@gmail.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Allow bold colors - necessary for some reason</span></span><br><span class="line">attrcolor b <span class="string">".I"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Tell screen how to set colors. AB = background, AF=foreground</span></span><br><span class="line">termcapinfo xterm <span class="string">'Co#256:AB=\E[48;5;%dm:AF=\E[38;5;%dm'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enables use of shift-PgUp and shift-PgDn</span></span><br><span class="line">termcapinfo xterm|xterms|xs|rxvt ti@:te@</span><br><span class="line"></span><br><span class="line"><span class="comment"># Erase background with current bg color</span></span><br><span class="line">defbce <span class="string">"on"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable 256 color term</span></span><br><span class="line">term xterm-256color</span><br><span class="line"></span><br><span class="line"><span class="comment"># Cache 30000 lines for scroll back</span></span><br><span class="line">defscrollback 30000</span><br><span class="line"></span><br><span class="line"><span class="comment"># New mail notification</span></span><br><span class="line"><span class="comment"># backtick 101 30 15 $HOME/bin/mailstatus.sh</span></span><br><span class="line"></span><br><span class="line">hardstatus alwayslastline </span><br><span class="line"><span class="comment"># Very nice tabbed colored hardstatus line</span></span><br><span class="line">hardstatus string <span class="string">'%&#123;= Kd&#125; %&#123;= Kd&#125;%-w%&#123;= Kr&#125;[%&#123;= KW&#125;%n %t%&#123;= Kr&#125;]%&#123;= Kd&#125;%+w %-= %&#123;KG&#125; %H%&#123;KW&#125;|%&#123;KY&#125;%101`%&#123;KW&#125;|%D %M %d %Y%&#123;= Kc&#125; %C%A%&#123;-&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># change command character from ctrl-a to ctrl-b (emacs users may want this)</span></span><br><span class="line"><span class="comment">#escape ^Bb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Hide hardstatus: ctrl-a f </span></span><br><span class="line"><span class="built_in">bind</span> f <span class="built_in">eval</span> <span class="string">"hardstatus ignore"</span></span><br><span class="line"><span class="comment"># Show hardstatus: ctrl-a F</span></span><br><span class="line"><span class="built_in">bind</span> F <span class="built_in">eval</span> <span class="string">"hardstatus alwayslastline"</span></span><br></pre></td></tr></table></figure>

<h2 id="bashrc"><a href="#bashrc" class="headerlink" title="====================.bashrc =========="></a>====================.bashrc ==========</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .bashrc</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Source global definitions</span></span><br><span class="line"><span class="keyword">if</span> [ -f /etc/bashrc ]; <span class="keyword">then</span></span><br><span class="line">        . /etc/bashrc</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># source ./prompt</span></span><br><span class="line"><span class="built_in">export</span> PS1=<span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PS1=<span class="string">'[\e[104mLight blue \u \A\]$ '</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PS1=<span class="string">"\[\e[32m\]\u@\h \d \t \w \[\e[m\] \\$"</span></span><br><span class="line"></span><br><span class="line">\e[104mLight blue</span><br><span class="line"></span><br><span class="line"><span class="comment"># Welcome message</span></span><br><span class="line"><span class="built_in">echo</span> -ne <span class="string">"Good Morning ! It's "</span>; date <span class="string">'+%A, %B %-d %Y'</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"And now your moment of Zen:"</span>; fortune</span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Hardware Information:"</span></span><br><span class="line">sensors  <span class="comment"># Needs: 'sudo apt-get install lm-sensors'</span></span><br><span class="line">uptime   <span class="comment"># Needs: 'sudo apt-get install lsscsi'</span></span><br><span class="line">free -m</span><br><span class="line"></span><br><span class="line"><span class="comment"># User specific aliases and functions</span></span><br><span class="line"></span><br><span class="line">PS1=<span class="string">'\[`[ $? = 0 ] &amp;&amp; X=2 || X=1; tput setaf $X`\]\h\[`tput sgr0`\]:$PWD\n\$ '</span></span><br><span class="line"></span><br><span class="line">============vimrc =========</span><br><span class="line"><span class="built_in">set</span> number</span><br><span class="line"><span class="built_in">set</span> incsearch</span><br><span class="line"><span class="built_in">set</span> hlsearch</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line"></span><br><span class="line">grep -v <span class="string">"unwanted_word"</span> file | grep XXXXXXXX</span><br><span class="line"></span><br><span class="line">// find <span class="built_in">command</span> exclude “permission denied”</span><br><span class="line">$ find . -name <span class="string">"java"</span> 2&gt;/dev/null</span><br></pre></td></tr></table></figure>

<h1 id="Passwordless-connection-in-putty"><a href="#Passwordless-connection-in-putty" class="headerlink" title="Passwordless connection in putty"></a>Passwordless connection in putty</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">1. Generate Public &amp; private key pair by keygen</span><br><span class="line">2. Log into Linux, nano .ssh/authorized_keys and paste the public key</span><br><span class="line">3. Save the private key <span class="keyword">in</span> putty and load it <span class="keyword">in</span> Putty session</span><br></pre></td></tr></table></figure>

<h1 id="find-java-files-older-than-3-days"><a href="#find-java-files-older-than-3-days" class="headerlink" title="find java files older than 3 days"></a>find java files older than 3 days</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">find . -name <span class="string">"*.java"</span> -atime -3d</span><br></pre></td></tr></table></figure>

<h1 id="Remove-capitalization"><a href="#Remove-capitalization" class="headerlink" title="Remove capitalization"></a>Remove capitalization</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed -ie <span class="string">'s/Return /return /g'</span> ReverseString.java</span><br></pre></td></tr></table></figure>

<h1 id="replace-string-in-files"><a href="#replace-string-in-files" class="headerlink" title="replace string in files"></a>replace string in files</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#grep -r "pack.*me" .</span></span><br><span class="line">sed -ie <span class="string">'s/package.*me.*;/package com.todzhang;/g'</span> *.java</span><br><span class="line">sed -ie <span class="string">'s/package me.todzhang;/package com.todzhang;/g'</span> ~/dev/git/algo/algoWS/src/main/java/com/todzhang/*.java</span><br></pre></td></tr></table></figure>

<h1 id="create-directory-hierarchy-via-path"><a href="#create-directory-hierarchy-via-path" class="headerlink" title="create directory hierarchy via path"></a>create directory hierarchy via path</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/abc/def/egg</span><br></pre></td></tr></table></figure>

<p><code>-p</code> means create intermediary folders, if not exist. Those intermediary folders with permission 777</p>
<h1 id="lsof-to-locate-whether-who-allocated-port-8080"><a href="#lsof-to-locate-whether-who-allocated-port-8080" class="headerlink" title="lsof to locate whether/who allocated port 8080"></a>lsof to locate whether/who allocated port 8080</h1><p><code>lsof</code> means list open files.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">lsof -n -P -i | grep 8080</span><br></pre></td></tr></table></figure>

<h1 id="To-get-rid-of-‘’"><a href="#To-get-rid-of-‘’" class="headerlink" title="To get rid of ‘’"></a>To get rid of ‘’</h1><p>Sometimes got “403 Forbidden” error when trying to downalod file via wget, e.g.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ wget http://www.xmind.net/xmind/downloads/xmind-7.5-update1-macosx.dmg</span><br><span class="line">--2016-09-09 23:27:29--  http://www.xmind.net/xmind/downloads/xmind-7.5-update1-macosx.dmg</span><br><span class="line">Resolving www.xmind.net... 23.23.188.223</span><br><span class="line">Connecting to www.xmind.net|23.23.188.223|:80... connected.</span><br><span class="line">HTTP request sent, awaiting response... 403 Forbidden</span><br><span class="line">2016-09-09 23:27:29 ERROR 403: Forbidden.</span><br></pre></td></tr></table></figure>

<p>To solve this problem, using following syntax, adding <code>-U xx</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget -U <span class="string">'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.1.6) Gecko/20070802 SeaMonkey/1.1.4'</span> http://www.xmind.net/xmind/downloads/xmind-7.5-update1-macosx.dmg</span><br></pre></td></tr></table></figure>

<h1 id="case-insensitive-ls-command-in-bash"><a href="#case-insensitive-ls-command-in-bash" class="headerlink" title="case insensitive ls command in bash"></a>case insensitive ls command in bash</h1><p>Update .bashrc or current active window</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">shopt</span> -s nocaseglob</span><br></pre></td></tr></table></figure>

<h1 id="one-line-command-to-download-and-extract-files"><a href="#one-line-command-to-download-and-extract-files" class="headerlink" title="one line command to download and extract files"></a>one line command to download and extract files</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$cd</span> /tmp;curl https://www.kernel.org/pub/linux/utils/util-linux/v2.24/util-linux-2.24.tar.gz	| tar -zxf-;<span class="built_in">cd</span>	util-linux-2.24;</span><br></pre></td></tr></table></figure>

<h1 id="Redirect-request-for-HTTP-3xxx-code"><a href="#Redirect-request-for-HTTP-3xxx-code" class="headerlink" title="Redirect request for HTTP 3xxx code"></a>Redirect request for HTTP 3xxx code</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -LSso ~/.vim/<span class="built_in">autoload</span>/pathogen.vim https://tpo.pe/pathogen.vim</span><br></pre></td></tr></table></figure>

<p><code>-L</code> means redirect upon HTTP code 3xxx<br><code>-Ss</code> work together to make the curl show errors if there are<br><code>-o</code> means output to a specified file, rather than stdout</p>
<h1 id="search-files-contains-keyword"><a href="#search-files-contains-keyword" class="headerlink" title="search files contains keyword"></a>search files contains keyword</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">grep -ri <span class="string">'architect'</span> . | awk -F <span class="string">':'</span> <span class="string">'&#123;print $1&#125;'</span></span><br></pre></td></tr></table></figure>

<h1 id="Show-Linux-kernel-and-name"><a href="#Show-Linux-kernel-and-name" class="headerlink" title="Show Linux kernel and name"></a>Show Linux kernel and name</h1><h2 id="lsb-release"><a href="#lsb-release" class="headerlink" title="lsb_release"></a>lsb_release</h2><p><code>lsb</code> means Linux Standard Base , <code>-a</code> means print all information</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">lsb_release -a -u</span><br></pre></td></tr></table></figure>

<p>will output</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">phray@phray-VirtualBox ~ $ lsb_release -a -u</span><br><span class="line">No LSB modules are available.</span><br><span class="line">Distributor ID:	Ubuntu</span><br><span class="line">Description:	Ubuntu 14.04 LTS</span><br><span class="line">Release:	14.04</span><br><span class="line">Codename:	trusty</span><br></pre></td></tr></table></figure>

<h2 id="etc-os-release"><a href="#etc-os-release" class="headerlink" title="/etc/os-release"></a>/etc/os-release</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat /etc/os-release</span><br></pre></td></tr></table></figure>

<p>will output Following</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">phray@phray-VirtualBox ~ $ cat /etc/os-release</span><br><span class="line">NAME=<span class="string">"Ubuntu"</span></span><br><span class="line">VERSION=<span class="string">"14.04.2 LTS, Trusty Tahr"</span></span><br><span class="line">ID=ubuntu</span><br><span class="line">ID_LIKE=debian</span><br><span class="line">PRETTY_NAME=<span class="string">"Ubuntu 14.04.2 LTS"</span></span><br><span class="line">VERSION_ID=<span class="string">"14.04"</span></span><br><span class="line">HOME_URL=<span class="string">"http://www.ubuntu.com/"</span></span><br><span class="line">SUPPORT_URL=<span class="string">"http://help.ubuntu.com/"</span></span><br><span class="line">BUG_REPORT_URL=<span class="string">"http://bugs.launchpad.net/ubuntu/"</span></span><br></pre></td></tr></table></figure>

<p>Following is the command found in docker.sh</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">lsb_dist=$(lsb_release -a -u 2&gt;&amp;1 | tr <span class="string">'[:upper:]'</span> <span class="string">'[:lower:]'</span> | grep -E <span class="string">'id'</span> | cut -d <span class="string">':'</span> -f 2 | tr -d <span class="string">'[[:space:]]'</span>)</span><br></pre></td></tr></table></figure>

<p>show the 2nd column</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">lsb_release --Codename | cut -f2</span><br></pre></td></tr></table></figure>

<h2 id="gpsswd"><a href="#gpsswd" class="headerlink" title="gpsswd"></a>gpsswd</h2><p>DESCRIPTION<br>gpasswd is used to administer the /etc/group file (and /etc/gshadow file if compiled with SHADOWGRP defined). Every group can have administrators, members and a password. System administrator can use -A option to define group administrator(s) and -M option to define members and has all rights of group administrators and members.</p>
<p>Notes about group passwords<br>Group passwords are an inherent security problem since more than one person is permitted to know the password. However, groups are a useful tool for permitting co-operation between different users.</p>
<p>OPTIONS<br>Group administrator can add and delete users using -a and -d options respectively. Administrators can use -r option to remove group password. When no password is set only group members can use newgrp to join the group. Option -R disables access via a password to the group through newgrp command (however members will still be able to switch to this group).</p>
<p>gpasswd called by a group administrator with group name only prompts for the group password. If password is set the members can still newgrp(1) without a password, non-members must supply the password.</p>
<p>FILES<br>Tag    Description<br>/etc/group<br>     Group account information.<br>/etc/gshadow<br>     Secure group account information.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo gpasswd -a USER docker</span><br></pre></td></tr></table></figure>

<h1 id="Compare-files-difference-in-two-folders"><a href="#Compare-files-difference-in-two-folders" class="headerlink" title="Compare files difference in two folders"></a>Compare files difference in two folders</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">diff -rq ~/dev/pa ~/dev/hexo/myblog/<span class="built_in">source</span>/_posts</span><br></pre></td></tr></table></figure>

<p>This used option <code>-r</code> (recursive) and <code>-q</code> quite, means only show differences</p>
<h1 id="To-execut-shell-unix-command-within-vim"><a href="#To-execut-shell-unix-command-within-vim" class="headerlink" title="To execut shell/unix command within vim"></a>To execut shell/unix command within vim</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">:~ls -lt</span><br></pre></td></tr></table></figure>

<h1 id="To-open-find-result-with-sublime"><a href="#To-open-find-result-with-sublime" class="headerlink" title="To open find result with sublime"></a>To open find result with sublime</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">find . -name <span class="string">"*Linux*.md"</span> | xargs sublime </span><br><span class="line">find . -name <span class="string">"*Linux*.md"</span> | xargs sublime ~ <span class="comment"># open in new Sublime window</span></span><br></pre></td></tr></table></figure>

<h1 id="To-vim-vim-edit-directly-on-file-output-by-find-command"><a href="#To-vim-vim-edit-directly-on-file-output-by-find-command" class="headerlink" title="To vim/vim edit directly on file output by find command"></a>To vim/vim edit directly on file output by find command</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">find . -name <span class="string">"*tmux*"</span> -<span class="built_in">exec</span> vim &#123;&#125; \;</span><br></pre></td></tr></table></figure>

<p>Be advised you may experience following error message</p>
<blockquote>
<p>find: missing argument to `-exec’</p>
</blockquote>
<p>actually you should add a slash in front of semi colon</p>
<h1 id="quite-mode-in-apt-get"><a href="#quite-mode-in-apt-get" class="headerlink" title="quite mode in apt-get"></a>quite mode in apt-get</h1><ul>
<li>apt-get will in verbose mode</li>
<li>apt-get <code>-q</code> will be in less verbose , a.k.a quite mode</li>
<li>apt-get <code>-qq</code> in extreme least verbose mode</li>
</ul>
]]></content>
      <tags>
        <tag>DevOps</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Github page commands notes</title>
    <url>/2016-06-13-github-pages/</url>
    <content><![CDATA[<h1 id="404-error-for-customized-domain-such-as-godday"><a href="#404-error-for-customized-domain-such-as-godday" class="headerlink" title="404 error for customized domain (such as godday)"></a>404 error for customized domain (such as godday)</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">404</span><br><span class="line">There is not a GitHub Pages site here.</span><br></pre></td></tr></table></figure>

<ul>
<li>Go to github master branch for gitpages site, manually add CNAME file</li>
</ul>
<h2 id="following-lages-are-searchable-in-google"><a href="#following-lages-are-searchable-in-google" class="headerlink" title="following lages are searchable in google"></a>following lages are searchable in google</h2><ul>
<li><a href="http://byalice.github.io/2016/06/04/Build-Blog/" target="_blank" rel="noopener">alice</a></li>
<li>gihub</li>
</ul>
<h1 id="Travis-errors"><a href="#Travis-errors" class="headerlink" title="Travis errors:"></a>Travis errors:</h1><p> Got following errors in Travis page:</p>
<h2 id="branch-not-included-or-excluded"><a href="#branch-not-included-or-excluded" class="headerlink" title="branch not included or excluded"></a>branch not included or excluded</h2><p><code>solution</code>: that’s because your source branch, such as ‘blogSrc’ should be added in whitelist of .travis.yml, for instance</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">  - blogSrc</span><br></pre></td></tr></table></figure>

<h2 id="fatal-empty-ident-name"><a href="#fatal-empty-ident-name" class="headerlink" title="fatal: empty ident name"></a>fatal: empty ident name</h2><p>Because <em>–global</em> is requried when setting up travis , below is the sample</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git config --global user.email abc@def.com</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Git</tag>
        <tag>GitPages</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL</title>
    <url>/2016-06-14-SQL/</url>
    <content><![CDATA[<h2 id="Differences-between-not-in-not-exists-and-left-join-with-null"><a href="#Differences-between-not-in-not-exists-and-left-join-with-null" class="headerlink" title="Differences between not in, not exists , and left join with null"></a>Differences between not in, not exists , and left join with null</h2><blockquote>
<p>It seems to me that you can do the same thing in a SQL query using either NOT EXISTS, NOT IN, or LEFT JOIN WHERE IS NULL. For example:</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">SELECT a FROM table1 WHERE a NOT IN (SELECT a FROM table2)</span><br><span class="line">SELECT a FROM table1 WHERE NOT EXISTS (SELECT * FROM table2 WHERE table1.a = table2.a)</span><br><span class="line">SELECT a FROM table1 LEFT JOIN table2 ON table1.a = table2.a WHERE table1.a IS NULL</span><br></pre></td></tr></table></figure>

<p>I’m not sure if I got all the syntax correct, but these are the general techniques I’ve seen. Why would I choose to use one over the other? Does performance differ…? Which one of these is the fastest / most efficient? (If it depends on implementation, when would I use each one?)</p>
<h2 id="answer"><a href="#answer" class="headerlink" title="answer"></a>answer</h2><p>In a nutshell:</p>
<p>NOT IN is a little bit different: it never matches if there is but a single NULL in the list.</p>
<p>In MySQL, NOT EXISTS is a little bit less efficient</p>
<p>In SQL Server, LEFT JOIN / IS NULL is less efficient</p>
<p>In PostgreSQL, NOT IN is less efficient</p>
<p>In Oracle, all three methods are the same.</p>
]]></content>
      <tags>
        <tag>DB</tag>
        <tag>Coding</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>RenMinBi International</title>
    <url>/2016-06-13-RQFII/</url>
    <content><![CDATA[<h1 id="RQFII"><a href="#RQFII" class="headerlink" title="RQFII"></a>RQFII</h1><p><code>RQFII</code> stands for Renminbi Qualified Foreign Institutional Investor. RQFII was introduced in 2011 to allow qualified foreign institutional investors to use RMB to buy securities such as bonds and shares and other investment instruments listed on the Chinese market. RQFII is an extension of the Qualified Foreign Institutional Investor (QFII) scheme established in 2002.</p>
<h1 id="What-is-the-difference-between-QFII-and-RQFII"><a href="#What-is-the-difference-between-QFII-and-RQFII" class="headerlink" title="What is the difference between QFII and RQFII?"></a>What is the difference between QFII and RQFII?</h1><p>QFII (Qualified Foreign Institutional Investor) allows institutional investors to buy shares in mainland Chinese companies (A-shares) listed on stock exchanges in China. But they have to invest in their home currency, which is then converted. RQFII enables investors to buy into China using RMB. The government introduced it to facilitate the flow of offshore RMB into the country as the currency became more widely used globally.</p>
<h1 id="Who-can-use-these-investment-programmes"><a href="#Who-can-use-these-investment-programmes" class="headerlink" title="Who can use these investment programmes?"></a>Who can use these investment programmes?</h1><p>Although China’s financial system is opening up, there are limits to who can invest. For a foreign institutional investor to qualify, it has to be licensed within its home country, demonstrate its capital strength, and have a track record in investments and asset management.</p>
<h1 id="How-much-can-be-invested"><a href="#How-much-can-be-invested" class="headerlink" title="How much can be invested?"></a>How much can be invested?</h1><p>The Chinese government decides how much can be invested by allocating quotas to different countries. The limit is largely determined by demand. The RQFII quota for all countries is currently RMB970 billion (USD156 billion).</p>
<h1 id="Which-countries-have-been-granted-an-RQFII-quota"><a href="#Which-countries-have-been-granted-an-RQFII-quota" class="headerlink" title="Which countries have been granted an RQFII quota?"></a>Which countries have been granted an RQFII quota?</h1><p>Thirteen countries have been granted RMB quotas: Australia, Canada, Chile, France, Germany, Hong Kong, Hungary, Luxembourg, Qatar, South Korea, Singapore, Switzerland and the UK. The QFII programme is open to more than 60 countries.</p>
]]></content>
      <tags>
        <tag>RMB</tag>
        <tag>Finance</tag>
        <tag>FX</tag>
        <tag>Global Market</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTPS/2</title>
    <url>/2016-06-14-HTTP-HTTPS2/</url>
    <content><![CDATA[<h1 id="concepts"><a href="#concepts" class="headerlink" title="concepts"></a>concepts</h1><ul>
<li>HTTP : 传统 HTTP 采用明文，完全开放的编码，缺少加解密功能，很容易遭受窃取、篡改等安全威胁。尤其涉及在线交易的网站，遭遇攻击如同家常便饭。</li>
<li>HTTPS : HTTPS 协议传输过程全程加解密，相当于增加了一层 SSL/TSL 分层协议的 HTTP，让访问更加安全。</li>
<li>HTTPS2 : HTTP/2 本身是 HTTP 协议自 1999 年发表后的第一次更新，于 2015 年 5 月正式发布。掐指一算，这个协议积累了 16 年才更新，憋了这么久，放的一定是大招，它的更新主要体现在多路复用，二进制传输，使用 HPACK 压缩头部信息，服务端 Push 。</li>
</ul>
]]></content>
      <tags>
        <tag>MobileInternet</tag>
        <tag>CTO</tag>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>equity trading</title>
    <url>/2016-06-23-Equity/</url>
    <content><![CDATA[<h2 id="Difference-between-mutal-funds-and-hedge-funds"><a href="#Difference-between-mutal-funds-and-hedge-funds" class="headerlink" title="Difference between mutal funds and hedge funds"></a>Difference between mutal funds and hedge funds</h2><h3 id="Similarites"><a href="#Similarites" class="headerlink" title="Similarites:"></a>Similarites:</h3><p>Both are managed portfolios. There are manager (or managers) pick securities by certain strategy or algorithm.</p>
<h3 id="Difference"><a href="#Difference" class="headerlink" title="Difference:"></a>Difference:</h3><ul>
<li>Headge fund tend to aggressive, they take speculative postions in derviaties such as options are able to short sell. This iwll typically increase leverage (and also the risks). On the other hand, mutal fund are not permitted to take these highly leveraged postions and more safer as a result.</li>
<li>Hedge funds are avaiable to a specific group of sophisticated investotrs with high net worth. While mutul fund are more accessibale with minimal amoutns of money.</li>
</ul>
<h2 id="Differences-among-money-markets-and-capital-markets"><a href="#Differences-among-money-markets-and-capital-markets" class="headerlink" title="Differences among money markets and capital markets"></a>Differences among <code>money markets</code> and <code>capital markets</code></h2><p>The money markets are used for the raising of short term finance, sometimes for loans that are expected to be paid back as early as overnight. Whereas the capital markets are used for the raising of long term finance, such as the purchase of shares, or for loans that are not expected to be fully paid back for at least a year.</p>
]]></content>
      <tags>
        <tag>fund</tag>
        <tag>finance</tag>
        <tag>Equity</tag>
      </tags>
  </entry>
  <entry>
    <title>Something about authentication</title>
    <url>/2016-06-29-SOMETHING-ABOUT-AUTHENTICATION/</url>
    <content><![CDATA[<p>It’s annoying to keep on repeating typing same login and password when you access multiple systems within office or for systems in external Internet. There are bunch of  tools / technicles to cater for such. To my best knowledge, I’ll illustrate some as below.</p>
<h1 id="SSO-Single-Sign-On"><a href="#SSO-Single-Sign-On" class="headerlink" title="SSO (Single Sign On)"></a>SSO (Single Sign On)</h1><p>After you successfully log into one system,  when you hop onto other systems, so you’ll no need to furhter re-enter your user name and password, and you’ll in ‘logged in status’. Under the scene, its sync up your login information among systems. The transferred details is typically called ‘tickets’. One of the implementation logic is ‘kerberos’, which is one protocol developed by MIT and is widely used in such domain. In general, kerberos is supported by various systems and software, for instance, you log onto your windows desktop, your user name and password will be validated in LDAP via either client or API, you</p>
]]></content>
  </entry>
  <entry>
    <title>heavy load web application</title>
    <url>/2016-06-29-heavy-load-web-app/</url>
    <content><![CDATA[<h1 id="Common-solutions"><a href="#Common-solutions" class="headerlink" title="Common solutions"></a>Common solutions</h1><p>With <code>cache</code> + <code>hash</code>, seems nothing is impossible.</p>
<h2 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h2><p>When involving big data, heavey load and concurrent, the ultimate solution is <code>hash</code>, such as random insert, time complexity O(1) etc, the only downside is waste of space, however, storage is cheap recently. <code>hash</code> is one must-have for concurrent systems.</p>
<h2 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h2><p>There are many mature cache mechanism, such as KV DB like memcache, redis, and they are supporting clusters, operatibility is good as well.</p>
<h2 id="read-write-segaration"><a href="#read-write-segaration" class="headerlink" title="read-write segaration"></a>read-write segaration</h2><p>In most cases, there are more read than write operation, so separate database to acccept write request to master DB, and redirect read request to slave DBs. At the same time, multiple salve DBs can be smoothly <code>scale out</code>, data replicate can leverage log bin.</p>
<h2 id="Database-separation-and-sharding"><a href="#Database-separation-and-sharding" class="headerlink" title="Database separation and sharding"></a>Database separation and sharding</h2><p>For DB sharding, leverage hash to direct to corresponding DB shard. To ease the load on single host.</p>
]]></content>
      <tags>
        <tag>DevOps</tag>
        <tag>heavy load</tag>
        <tag>mobile internet</tag>
      </tags>
  </entry>
  <entry>
    <title>tips in as400 IBM Emulator</title>
    <url>/2016-06-29-TIPS-AS400-IBM-EMULATOR/</url>
    <content><![CDATA[<h1 id="Toggle-crosshair"><a href="#Toggle-crosshair" class="headerlink" title="Toggle crosshair"></a>Toggle crosshair</h1><ol>
<li>Open IBM personal communication client</li>
<li>Go to menu Edit-&gt;Preference-&gt;Apperance-&gt;Display settings-&gt;Ruler</li>
<li>change Rule style to crosshair or turn it off</li>
</ol>
]]></content>
      <tags>
        <tag>AS400</tag>
        <tag>IBM Personal Communications</tag>
      </tags>
  </entry>
  <entry>
    <title>git raise error filename too long when checkout</title>
    <url>/2016-07-02-file-name-too-long-when-git-checkout/</url>
    <content><![CDATA[<h1 id="Symptoms"><a href="#Symptoms" class="headerlink" title="Symptoms:"></a>Symptoms:</h1><p>node_modules/grunt-contrib-imagemin/node_modules/pngquant-bin/node_modules/bin-wrapper/node_modules/download/node_modules/request/node_modules/form-data/node_modules/combined-stream/node_modules/delayed-stream/test/integration/test-handle-source-errors.js: <strong>Filename too long</strong></p>
<h1 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h1><ol>
<li><p>Execute following command</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git config core.longpaths <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>retry checkoutpap</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Git</tag>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>Useful bookmarks</title>
    <url>/2016-07-24-Bookmarks/</url>
    <content><![CDATA[<h2 id="eBooks"><a href="#eBooks" class="headerlink" title="eBooks"></a>eBooks</h2><p><a href="http://www.open-open.com/lib/view/open1387100263499.html" target="_blank" rel="noopener">list of various books</a></p>
<h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><p><a href="http://abdelraoof.com/blog/2014/11/11/install-nodejs-without-admin-rights/" target="_blank" rel="noopener">install nodejs without admin access</a></p>
]]></content>
  </entry>
  <entry>
    <title>Data Structure</title>
    <url>/2016-07-25-Data-Structure/</url>
    <content><![CDATA[<h1 id="Binary-Tree"><a href="#Binary-Tree" class="headerlink" title="Binary Tree"></a>Binary Tree</h1><ul>
<li>A binary tree is a tree in which no node can have more than two children.</li>
<li>A property of a binary tree that is sometimes important is that the depth of an average<br>binary tree is considerably smaller than N. An analysis shows that the average depth is √O( N), and that for a special type of binary tree, namely the binary search tree, the average value of the depth is O(log N). Unfortunately, the depth can be as large as N − 1, </li>
</ul>
<h1 id="Cyclic-List"><a href="#Cyclic-List" class="headerlink" title="Cyclic List"></a>Cyclic List</h1><h2 id="Round-Robin-scheduling"><a href="#Round-Robin-scheduling" class="headerlink" title="Round Robin scheduling"></a>Round Robin scheduling</h2><ul>
<li>using some form of an algorithm known as round-robin scheduling. A process is given a short turn to execute, known as a time slice, but it is interrupted when the slice ends, even if its job is not yet complete.</li>
</ul>
<h1 id="doubly-linked-list"><a href="#doubly-linked-list" class="headerlink" title="doubly linked list"></a>doubly linked list</h1><ul>
<li>a doubly linked list. These lists allow a greater variety of O(1)-time update operations, including insertions and deletions at arbitrary posi- tions within the list. </li>
<li>Header and Trailer Sentinels</li>
<li>a header node at the beginning of the list, and a trailer node at the end of the list. These “dummy” nodes are known as <strong>sentinels</strong> (or guards), and they do not store elements of the primary sequence. </li>
</ul>
<h2 id="Advantages-using-sentinel"><a href="#Advantages-using-sentinel" class="headerlink" title="Advantages using sentinel"></a>Advantages using sentinel</h2><ul>
<li>Although we could implement a doubly linked list without sentinel nodes (as we did with our singly linked list in Section 3.2), the slight extra memory devoted to the sentinels greatly simplifies the logic of our operations. Most notably, the header and trailer nodes never change—only the nodes between them change. Furthermore, we can treat all insertions in a unified manner, because a new node will always be placed between a pair of existing nodes. In similar fashion, every element that is to be deleted is guaranteed to be stored in a node that has neighbors on each side.</li>
</ul>
<h1 id="Equivalence-relation"><a href="#Equivalence-relation" class="headerlink" title="Equivalence relation"></a>Equivalence relation</h1><p>equivalence relation in mathematics, satisfying the following properties:</p>
<ul>
<li>Treatment of null: For any nonnull reference variable x, the call x.equals(null) should return false (that is, nothing equals null except null).</li>
<li>Reflexivity: Foranynonnullreferencevariablex,thecallx.equals(x)should return true (that is, an object should equal itself).</li>
<li>Symmetry: For any non null reference variables x and y,the calls x.equals(y) and y.equals(x) should return the same value.</li>
<li>Transitivity: For any nonnull reference variables x, y, and z, if both calls x.equals(y) and y.equals(z) return true, then call x.equals(z) must return true as well.</li>
</ul>
<h2 id="Ring-Buffer"><a href="#Ring-Buffer" class="headerlink" title="Ring Buffer"></a>Ring Buffer</h2><p>In other words, the circular buffer is well-suited as a FIFO buffer while a standard, non-circular buffer is well suited as a LIFO buffer.<br>Circular buffering makes a good implementation strategy for a queue that has fixed maximum size. Ref to <a href="https://en.wikipedia.org/wiki/Circular_buffer" target="_blank" rel="noopener">this wiki page</a></p>
]]></content>
      <tags>
        <tag>programming</tag>
        <tag>data strucutre</tag>
      </tags>
  </entry>
  <entry>
    <title>Something about RESTful architect</title>
    <url>/2016-08-02-RESTful/</url>
    <content><![CDATA[<h2 id="REST-API-must-be-hypertext-driver"><a href="#REST-API-must-be-hypertext-driver" class="headerlink" title="REST API must be hypertext driver"></a>REST API must be hypertext driver</h2><p><a href="http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven" target="_blank" rel="noopener">Roy’s interview</a></p>
<h3 id="Key-points-for-a-REST-structure"><a href="#Key-points-for-a-REST-structure" class="headerlink" title="Key points for a REST structure"></a>Key points for a REST structure</h3><p>API designers, please note the following rules before calling your creation a REST API:</p>
<ul>
<li>A REST API should not be dependent on any single communication protocol, though its successful mapping to a given protocol may be dependent on the availability of metadata, choice of methods, etc. In general, any protocol element that uses a URI for identification must allow any URI scheme to be used for the sake of that identification. [Failure here implies that identification is not separated from interaction.]</li>
<li>A REST API should not contain any changes to the communication protocols aside from filling-out or fixing the details of underspecified bits of standard protocols, such as HTTP’s PATCH method or Link header field. Workarounds for broken implementations (such as those browsers stupid enough to believe that HTML defines HTTP’s method set) should be defined separately, or at least in appendices, with an expectation that the workaround will eventually be obsolete. [Failure here implies that the resource interfaces are object-specific, not generic.]</li>
<li>A REST API should spend almost all of its descriptive effort in defining the media type(s) used for representing resources and driving application state, or in defining extended relation names and/or hypertext-enabled mark-up for existing standard media types. Any effort spent describing what methods to use on what URIs of interest should be entirely defined within the scope of the processing rules for a media type (and, in most cases, already defined by existing media types). [Failure here implies that out-of-band information is driving interaction instead of hypertext.]</li>
<li>A REST API must not define fixed resource names or hierarchies (an obvious coupling of client and server). Servers must have the freedom to control their own namespace. Instead, allow servers to instruct clients on how to construct appropriate URIs, such as is done in HTML forms and URI templates, by defining those instructions within media types and link relations. [Failure here implies that clients are assuming a resource structure due to out-of band information, such as a domain-specific standard, which is the data-oriented equivalent to RPC’s functional coupling].</li>
<li>A REST API should never have “typed” resources that are significant to the client. Specification authors may use resource types for describing server implementation behind the interface, but those types must be irrelevant and invisible to the client. The only types that are significant to a client are the current representation’s media type and standardized relation names. [ditto]</li>
<li>A REST API should be entered with no prior knowledge beyond the initial URI (bookmark) and set of standardized media types that are appropriate for the intended audience (i.e., expected to be understood by any client that might use the API). From that point on, all application state transitions must be driven by client selection of server-provided choices that are present in the received representations or implied by the user’s manipulation of those representations. The transitions may be determined (or limited by) the client’s knowledge of media types and resource communication mechanisms, both of which may be improved on-the-fly (e.g., code-on-demand). [Failure here implies that out-of-band information is driving interaction instead of hypertext.]</li>
</ul>
<h2 id="What’s-hyptertext"><a href="#What’s-hyptertext" class="headerlink" title="What’s hyptertext"></a>What’s hyptertext</h2><p>I have a slide in my REST talk that explains what hypertext (and hypermedia) means.</p>
<p>Hypertext has many definitions:<br>` 
Ted Nelson’s original definition was focused on non-linear documents.</p>
<p>By ‘hypertext,’ I mean non-sequential writing — text that branches and allows choices to the reader, best read at an interactive screen. As popularly conceived, this is a series of text chunks connected by links which offer the reader different pathways. [Theodor H. Nelson]</p>
<p>Later, hypertext became associated with a particular user interface mechanism.</p>
<p>Hypertext is a computer-supported medium for information in which many interlinked<br>documents are displayed with their links on a high-resolution computer screen. [Jeffrey Conklin]</p>
<p>When I say hypertext, I mean the simultaneous presentation of information and controls such that the information becomes the affordance through which the user (or automaton) obtains choices and selects actions. Hypermedia is just an expansion on what text means to include temporal anchors within a media stream; most researchers have dropped the distinction.</p>
<p>Hypertext does not need to be HTML on a browser. Machines can follow links when they understand the data format and relationship types.</p>
<h3 id="Sample-about-web"><a href="#Sample-about-web" class="headerlink" title="Sample about web"></a>Sample about web</h3><blockquote>
<p>Think of it in terms of the Web. How many Web browsers are aware of the distinction between an online-banking resource and a Wiki resource? None of them. They don’t need to be aware of the resource types. What they need to be aware of is the potential state transitions — the links and forms — and what semantics/actions are implied by traversing those links. A browser represents them as distinct UI controls so that a user can see potential transitions and anticipate the effect of chosen actions. A spider can follow them to the extent that the relationships are known to be safe. Typed relations, specific media types, and action-specific elements provide the guidance needed for automated agents.</p>
</blockquote>
<h2 id="Notworthy-points"><a href="#Notworthy-points" class="headerlink" title="Notworthy points"></a>Notworthy points</h2><ul>
<li><p>REST is intended for long-lived network-based applications that span multiple organizations. If you don’t see a need for the constraints, then don’t use them. </p>
</li>
<li><p>Don’t confuse application state (the state of the user’s application of computing to a given task) with resource state (the state of the world as exposed by a given service). They are not the same thing.</p>
</li>
</ul>
<h2 id="A-Sample-of-implementing-REST-via-a-distributed-queue"><a href="#A-Sample-of-implementing-REST-via-a-distributed-queue" class="headerlink" title="A Sample of implementing REST via a distributed queue"></a>A Sample of implementing REST via a distributed queue</h2><p>the usecase of a distributed queue? The queue should not care about the media types it is exchanging between senders and receivers, yet it can quite easily satisfy the addressability, uniform interface, and statelessness constraints of a RESTful architecture. Can’t a service that is media-type agnostic be a RESTful API? Such a service would require assigning semantic meaning to a specific HTTP method and URI pattern and would not receive state transition information from its exchanged media types (as the service doesn’t care or need to know about the media types). I hope I am explaining myself well.</p>
<p>For example:<br>POST /{queue-name} sends a message to the queue<br>GET /{queue-name}/top is the current message waiting to be processed. It returns<br>Location: /messages/111<br>DELETE /messages/111 tells server you are done processing that message.</p>
<h2 id="HATEOAS"><a href="#HATEOAS" class="headerlink" title="HATEOAS"></a>HATEOAS</h2><p><a href="https://en.wikipedia.org/wiki/HATEOAS" target="_blank" rel="noopener">Definitions</a></p>
]]></content>
      <tags>
        <tag>RESTul</tag>
        <tag>Architect</tag>
      </tags>
  </entry>
  <entry>
    <title>Business Analysis</title>
    <url>/2016-08-04-BA/</url>
    <content><![CDATA[<h2 id="Purpose-of-BA"><a href="#Purpose-of-BA" class="headerlink" title="Purpose of BA"></a>Purpose of BA</h2><ul>
<li>带来一些商业价值（收益）</li>
<li>解决业务痛点</li>
</ul>
<h2 id="Best-Parctices-for-BA-Architect"><a href="#Best-Parctices-for-BA-Architect" class="headerlink" title="Best Parctices for BA/Architect"></a>Best Parctices for BA/Architect</h2><ul>
<li>架构设计可以大而全，但实施过程最好是<code>简化</code>，<code>化整为零</code>，以最快速度先上线，通过迭代方式不断的完善。（_船小好调头_）</li>
<li>理想的架构应该像是App Store那样，设计成一个窗口，只要符合平台规范和协议就可以发布上去，关注是应用本身是否work，其他交给平台完成。</li>
<li>收益可以通过多种形式表现：提高产量、节约成本、挖掘用户价值、加强服务质量、优化用户体验、快速响应市场变化等</li>
<li>架构：将产品、技术、运营有机的结合起来</li>
<li>一个成功的互联网应用，背后一定是一群既懂得经营，又明白如何利用技术的业务和一群懂得<code>驱动业务</code>的技术大神们的故事。</li>
<li>任何一个产生生产力革命的行业一定是由业务和技术结合而产生的，比如网上订餐，叫车行业</li>
</ul>
<h2 id="Samples-tips-for-online-eCommerence"><a href="#Samples-tips-for-online-eCommerence" class="headerlink" title="Samples tips for online eCommerence"></a>Samples tips for online eCommerence</h2><ul>
<li>From API to CRS (中央预定系统 Centeral Reservation System)</li>
</ul>
]]></content>
      <tags>
        <tag>Architect</tag>
        <tag>BA</tag>
      </tags>
  </entry>
  <entry>
    <title>iConnect</title>
    <url>/2016-08-04-iConnect/</url>
    <content><![CDATA[<h3 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h3><p>HTML5, AngularJS, BootStrap, REST API, JSON</p>
<h3 id="Backend"><a href="#Backend" class="headerlink" title="Backend"></a>Backend</h3><p>Hadoop core (HDFS), Hive, HBase, MapReduce, Oozie, Pig, Solr</p>
]]></content>
  </entry>
  <entry>
    <title>Anatomy of ThreadLocal</title>
    <url>/2016-08-05-Anatomy-of-ThreadLocal/</url>
    <content><![CDATA[<h2 id="Design-philosophies"><a href="#Design-philosophies" class="headerlink" title="Design philosophies"></a>Design philosophies</h2><h3 id="fast-path"><a href="#fast-path" class="headerlink" title="fast-path"></a>fast-path</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Get the entry associated with key.  This method</span></span><br><span class="line"><span class="comment">         * itself handles only the fast path: a direct hit of existing</span></span><br><span class="line"><span class="comment">         * key. It otherwise relays to getEntryAfterMiss.  This is</span></span><br><span class="line"><span class="comment">         * designed to maximize performance for direct hits, in part</span></span><br><span class="line"><span class="comment">         * by making this method readily inlinable.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span>  key the thread local object</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> the entry associated with key, or null if no such</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> Entry <span class="title">getEntry</span><span class="params">(ThreadLocal key)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (table.length - <span class="number">1</span>);</span><br><span class="line">            Entry e = table[i];</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span> &amp;&amp; e.get() == key)</span><br><span class="line">                <span class="keyword">return</span> e;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> getEntryAfterMiss(key, i, e);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h2 id="Magic-number-0x61c88647"><a href="#Magic-number-0x61c88647" class="headerlink" title="Magic number 0x61c88647"></a>Magic number <code>0x61c88647</code></h2><p>This is a <a href="https://en.wikipedia.org/wiki/Golden_ratio" target="_blank" rel="noopener">golden ratio</a>, </p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>source code</tag>
      </tags>
  </entry>
  <entry>
    <title>kibana, view layer of elasticsearch</title>
    <url>/2016-08-11-Kibana/</url>
    <content><![CDATA[<p><img src="http://blog.trifork.com/wp-content/uploads/2013/11/Screen-Shot-2013-11-22-at-14.14.28.png" alt></p>
<h2 id="What’s-Kibana"><a href="#What’s-Kibana" class="headerlink" title="What’s Kibana"></a>What’s Kibana</h2><p><code>kibana</code> is an open source data visualization plugin for Elasticsearch.  It provides visualization capabilities on top of the content indexed on an Elasticsearch cluster. Users can create bar, line and scatter plots, or pie charts and maps on top of large volumes of data.</p>
<h2 id="Why-Kibana"><a href="#Why-Kibana" class="headerlink" title="Why Kibana"></a>Why Kibana</h2><ul>
<li>Flexible analytics and visualization platform</li>
<li>Real-time summary and charting of streaming data</li>
<li>Intuitive interface for a variety of users</li>
<li>Instant sharing and embedding of dashboards</li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.digitalocean.com/community/tutorials/how-to-use-kibana-dashboards-and-visualizations" target="_blank" rel="noopener">digital ocean</a><br><a href="https://www.digitalocean.com/community/tutorials/how-to-install-elasticsearch-logstash-and-kibana-elk-stack-on-ubuntu-14-04" target="_blank" rel="noopener">setup ELK</a></p>
]]></content>
      <tags>
        <tag>DevOps</tag>
        <tag>elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>kibana, view layer of elasticsearch</title>
    <url>/2016-08-11-Sentry/</url>
    <content><![CDATA[<p><img src="http://blog.trifork.com/wp-content/uploads/2013/11/Screen-Shot-2013-11-22-at-14.14.28.png" alt></p>
<h2 id="What’s-Kibana"><a href="#What’s-Kibana" class="headerlink" title="What’s Kibana"></a>What’s Kibana</h2><p><code>kibana</code> is an open source data visualization plugin for Elasticsearch.  It provides visualization capabilities on top of the content indexed on an Elasticsearch cluster. Users can create bar, line and scatter plots, or pie charts and maps on top of large volumes of data.</p>
<h2 id="Why-Kibana"><a href="#Why-Kibana" class="headerlink" title="Why Kibana"></a>Why Kibana</h2><ul>
<li>Flexible analytics and visualization platform</li>
<li>Real-time summary and charting of streaming data</li>
<li>Intuitive interface for a variety of users</li>
<li>Instant sharing and embedding of dashboards</li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.digitalocean.com/community/tutorials/how-to-use-kibana-dashboards-and-visualizations" target="_blank" rel="noopener">digital ocean</a><br><a href="https://www.digitalocean.com/community/tutorials/how-to-install-elasticsearch-logstash-and-kibana-elk-stack-on-ubuntu-14-04" target="_blank" rel="noopener">setup ELK</a></p>
]]></content>
      <tags>
        <tag>elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>unmodifiableList, unmodifiableSet,unmodifiableMap</title>
    <url>/2016-08-12-unmodifiableCollection/</url>
    <content><![CDATA[<h2 id="What’s-it"><a href="#What’s-it" class="headerlink" title="What’s it"></a>What’s it</h2><p>Returns an unmodifiable view of the specified set.  This method allows<br>modules to provide users with “read-only” access to internal sets.<br>Query operations on the returned set “read through” to the specified<br>set, and attempts to modify the returned set, whether direct or via its<br>iterator, result in an <tt>UnsupportedOperationException</tt>.</p><p></p>
<h2 id="Impelement-logic"><a href="#Impelement-logic" class="headerlink" title="Impelement logic"></a>Impelement logic</h2><p>In general, it re-created a new Collection, and inherit <code>read-only</code> methods from superclass, while raise Exception for those <code>modify</code> functions. Here is the code snippet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UnmodifiableCollection</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt;, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1820017752578914078L</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Collection&lt;? extends E&gt; c;</span><br><span class="line"></span><br><span class="line">        UnmodifiableCollection(Collection&lt;? extends E&gt; c) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c==<span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            <span class="keyword">this</span>.c = c;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span>                   </span>&#123;<span class="keyword">return</span> c.size();&#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span>            </span>&#123;<span class="keyword">return</span> c.isEmpty();&#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span>   </span>&#123;<span class="keyword">return</span> c.contains(o);&#125;</span><br><span class="line">        <span class="keyword">public</span> Object[] toArray()           &#123;<span class="keyword">return</span> c.toArray();&#125;</span><br><span class="line">        <span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a)       &#123;<span class="keyword">return</span> c.toArray(a);&#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span>            </span>&#123;<span class="keyword">return</span> c.toString();&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Iterator&lt;E&gt;() &#123;</span><br><span class="line">                <span class="keyword">private</span> <span class="keyword">final</span> Iterator&lt;? extends E&gt; i = c.iterator();</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> i.hasNext();&#125;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span>          </span>&#123;<span class="keyword">return</span> i.next();&#125;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsAll</span><span class="params">(Collection&lt;?&gt; coll)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> c.containsAll(coll);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; coll)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; coll)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">retainAll</span><span class="params">(Collection&lt;?&gt; coll)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>微服务</title>
    <url>/2016-08-24-microservices/</url>
    <content><![CDATA[<p>可以想像一下，之前的传统应用系统，像是一个大办公室里面，有各个部门，销售部，采购部，财务部。办一件事情效率比较高。但是也有一些弊端，首先，各部门都在一个房间里。</p>
]]></content>
  </entry>
  <entry>
    <title>Spark-vs-Storm</title>
    <url>/2016-08-30-Spark-vs-Storm/</url>
    <content><![CDATA[<p>The stark difference among Spark and Storm. Although both are claimed to process the streaming data in real time. But Spark processes it as micro-batches; whereas Storm processes per message - meaning if you intend to process things like social data, log data, etc.. you can actually apply CEP (Complex Event Processing) per tuples (i.e each social message in your example).  Spark, on other hand is good at processing small blocks of data, for instance if you are streaming a whole blobs of data (say some huge files of medical record, for example).</p>
<p>So, obviously, I would say, give your usecase, Storm may be a better fit for your needs.</p>
<p>And last, between distributions, I have found Hortonworks to be more easier in standing up and managing the cluster than other distribution (please take this comment with a grain of salt, as I may be slightly biased towards HWX given my comfort-zone of working around this distribution more than others)</p>
]]></content>
      <tags>
        <tag>Spark</tag>
        <tag>Storm</tag>
        <tag>Apache</tag>
        <tag>Haddop</tag>
        <tag>BigData</tag>
      </tags>
  </entry>
  <entry>
    <title>http methods</title>
    <url>/2016-09-01-HTTP-Methods-RFC/</url>
    <content><![CDATA[<p>RFC origion <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.1.2" target="_blank" rel="noopener">http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.1.2</a>)</p>
<p>part of Hypertext Transfer Protocol – HTTP/1.1<br>RFC 2616 Fielding, et al.<br>9 Method Definitions</p>
<p>The set of common methods for HTTP/1.1 is defined below. Although this set can be expanded, additional methods cannot be assumed to share the same semantics for separately extended clients and servers.</p>
<p>The Host request-header field (section 14.23) MUST accompany all HTTP/1.1 requests.</p>
<p>9.1 Safe and Idempotent Methods</p>
<p>9.1.1 Safe Methods</p>
<p>Implementors should be aware that the software represents the user in their interactions over the Internet, and should be careful to allow the user to be aware of any actions they might take which may have an unexpected significance to themselves or others.</p>
<p>In particular, the convention has been established that the GET and HEAD methods SHOULD NOT have the significance of taking an action other than retrieval. These methods ought to be considered “safe”. This allows user agents to represent other methods, such as POST, PUT and DELETE, in a special way, so that the user is made aware of the fact that a possibly unsafe action is being requested.</p>
<p>Naturally, it is not possible to ensure that the server does not generate side-effects as a result of performing a GET request; in fact, some dynamic resources consider that a feature. The important distinction here is that the user did not request the side-effects, so therefore cannot be held accountable for them.</p>
<p>9.1.2 Idempotent Methods</p>
<p>Methods can also have the property of “idempotence” in that (aside from error or expiration issues) the side-effects of N &gt; 0 identical requests is the same as for a single request. The methods GET, HEAD, PUT and DELETE share this property. Also, the methods OPTIONS and TRACE SHOULD NOT have side effects, and so are inherently idempotent.</p>
<p>However, it is possible that a sequence of several requests is non- idempotent, even if all of the methods executed in that sequence are idempotent. (A sequence is idempotent if a single execution of the entire sequence always yields a result that is not changed by a reexecution of all, or part, of that sequence.) For example, a sequence is non-idempotent if its result depends on a value that is later modified in the same sequence.</p>
<p>A sequence that never has side effects is idempotent, by definition (provided that no concurrent operations are being executed on the same set of resources).</p>
<p>9.2 OPTIONS</p>
<p>The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI. This method allows the client to determine the options and/or requirements associated with a resource, or the capabilities of a server, without implying a resource action or initiating a resource retrieval.</p>
<p>Responses to this method are not cacheable.</p>
<p>If the OPTIONS request includes an entity-body (as indicated by the presence of Content-Length or Transfer-Encoding), then the media type MUST be indicated by a Content-Type field. Although this specification does not define any use for such a body, future extensions to HTTP might use the OPTIONS body to make more detailed queries on the server. A server that does not support such an extension MAY discard the request body.</p>
<p>If the Request-URI is an asterisk (“*”), the OPTIONS request is intended to apply to the server in general rather than to a specific resource. Since a server’s communication options typically depend on the resource, the “*” request is only useful as a “ping” or “no-op” type of method; it does nothing beyond allowing the client to test the capabilities of the server. For example, this can be used to test a proxy for HTTP/1.1 compliance (or lack thereof).</p>
<p>If the Request-URI is not an asterisk, the OPTIONS request applies only to the options that are available when communicating with that resource.</p>
<p>A 200 response SHOULD include any header fields that indicate optional features implemented by the server and applicable to that resource (e.g., Allow), possibly including extensions not defined by this specification. The response body, if any, SHOULD also include information about the communication options. The format for such a</p>
<p>body is not defined by this specification, but might be defined by future extensions to HTTP. Content negotiation MAY be used to select the appropriate response format. If no response body is included, the response MUST include a Content-Length field with a field-value of “0”.</p>
<p>The Max-Forwards request-header field MAY be used to target a specific proxy in the request chain. When a proxy receives an OPTIONS request on an absoluteURI for which request forwarding is permitted, the proxy MUST check for a Max-Forwards field. If the Max-Forwards field-value is zero (“0”), the proxy MUST NOT forward the message; instead, the proxy SHOULD respond with its own communication options. If the Max-Forwards field-value is an integer greater than zero, the proxy MUST decrement the field-value when it forwards the request. If no Max-Forwards field is present in the request, then the forwarded request MUST NOT include a Max-Forwards field.</p>
<p>9.3 GET</p>
<p>The GET method means retrieve whatever information (in the form of an entity) is identified by the Request-URI. If the Request-URI refers to a data-producing process, it is the produced data which shall be returned as the entity in the response and not the source text of the process, unless that text happens to be the output of the process.</p>
<p>The semantics of the GET method change to a “conditional GET” if the request message includes an If-Modified-Since, If-Unmodified-Since, If-Match, If-None-Match, or If-Range header field. A conditional GET method requests that the entity be transferred only under the circumstances described by the conditional header field(s). The conditional GET method is intended to reduce unnecessary network usage by allowing cached entities to be refreshed without requiring multiple requests or transferring data already held by the client.</p>
<p>The semantics of the GET method change to a “partial GET” if the request message includes a Range header field. A partial GET requests that only part of the entity be transferred, as described in section 14.35. The partial GET method is intended to reduce unnecessary network usage by allowing partially-retrieved entities to be completed without transferring data already held by the client.</p>
<p>The response to a GET request is cacheable if and only if it meets the requirements for HTTP caching described in section 13.</p>
<p>See section 15.1.3 for security considerations when used for forms.</p>
<p>9.4 HEAD</p>
<p>The HEAD method is identical to GET except that the server MUST NOT return a message-body in the response. The metainformation contained in the HTTP headers in response to a HEAD request SHOULD be identical to the information sent in response to a GET request. This method can be used for obtaining metainformation about the entity implied by the request without transferring the entity-body itself. This method is often used for testing hypertext links for validity, accessibility, and recent modification.</p>
<p>The response to a HEAD request MAY be cacheable in the sense that the information contained in the response MAY be used to update a previously cached entity from that resource. If the new field values indicate that the cached entity differs from the current entity (as would be indicated by a change in Content-Length, Content-MD5, ETag or Last-Modified), then the cache MUST treat the cache entry as stale.</p>
<p>9.5 POST</p>
<p>The POST method is used to request that the origin server accept the entity enclosed in the request as a new subordinate of the resource identified by the Request-URI in the Request-Line. POST is designed to allow a uniform method to cover the following functions:</p>
<pre><code>- Annotation of existing resources;
- Posting a message to a bulletin board, newsgroup, mailing list,
  or similar group of articles;
- Providing a block of data, such as the result of submitting a
  form, to a data-handling process;
- Extending a database through an append operation.</code></pre><p>The actual function performed by the POST method is determined by the server and is usually dependent on the Request-URI. The posted entity is subordinate to that URI in the same way that a file is subordinate to a directory containing it, a news article is subordinate to a newsgroup to which it is posted, or a record is subordinate to a database.</p>
<p>The action performed by the POST method might not result in a resource that can be identified by a URI. In this case, either 200 (OK) or 204 (No Content) is the appropriate response status, depending on whether or not the response includes an entity that describes the result.</p>
<p>If a resource has been created on the origin server, the response SHOULD be 201 (Created) and contain an entity which describes the status of the request and refers to the new resource, and a Location header (see section 14.30).</p>
<p>Responses to this method are not cacheable, unless the response includes appropriate Cache-Control or Expires header fields. However, the 303 (See Other) response can be used to direct the user agent to retrieve a cacheable resource.</p>
<p>POST requests MUST obey the message transmission requirements set out in section 8.2.</p>
<p>See section 15.1.3 for security considerations.</p>
<p>9.6 PUT</p>
<p>The PUT method requests that the enclosed entity be stored under the supplied Request-URI. If the Request-URI refers to an already existing resource, the enclosed entity SHOULD be considered as a modified version of the one residing on the origin server. If the Request-URI does not point to an existing resource, and that URI is capable of being defined as a new resource by the requesting user agent, the origin server can create the resource with that URI. If a new resource is created, the origin server MUST inform the user agent via the 201 (Created) response. If an existing resource is modified, either the 200 (OK) or 204 (No Content) response codes SHOULD be sent to indicate successful completion of the request. If the resource could not be created or modified with the Request-URI, an appropriate error response SHOULD be given that reflects the nature of the problem. The recipient of the entity MUST NOT ignore any Content-* (e.g. Content-Range) headers that it does not understand or implement and MUST return a 501 (Not Implemented) response in such cases.</p>
<p>If the request passes through a cache and the Request-URI identifies one or more currently cached entities, those entries SHOULD be treated as stale. Responses to this method are not cacheable.</p>
<p>The fundamental difference between the POST and PUT requests is reflected in the different meaning of the Request-URI. The URI in a POST request identifies the resource that will handle the enclosed entity. That resource might be a data-accepting process, a gateway to some other protocol, or a separate entity that accepts annotations. In contrast, the URI in a PUT request identifies the entity enclosed with the request – the user agent knows what URI is intended and the server MUST NOT attempt to apply the request to some other resource. If the server desires that the request be applied to a different URI,</p>
<p>it MUST send a 301 (Moved Permanently) response; the user agent MAY then make its own decision regarding whether or not to redirect the request.</p>
<p>A single resource MAY be identified by many different URIs. For example, an article might have a URI for identifying “the current version” which is separate from the URI identifying each particular version. In this case, a PUT request on a general URI might result in several other URIs being defined by the origin server.</p>
<p>HTTP/1.1 does not define how a PUT method affects the state of an origin server.</p>
<p>PUT requests MUST obey the message transmission requirements set out in section 8.2.</p>
<p>Unless otherwise specified for a particular entity-header, the entity-headers in the PUT request SHOULD be applied to the resource created or modified by the PUT.</p>
<p>9.7 DELETE</p>
<p>The DELETE method requests that the origin server delete the resource identified by the Request-URI. This method MAY be overridden by human intervention (or other means) on the origin server. The client cannot be guaranteed that the operation has been carried out, even if the status code returned from the origin server indicates that the action has been completed successfully. However, the server SHOULD NOT indicate success unless, at the time the response is given, it intends to delete the resource or move it to an inaccessible location.</p>
<p>A successful response SHOULD be 200 (OK) if the response includes an entity describing the status, 202 (Accepted) if the action has not yet been enacted, or 204 (No Content) if the action has been enacted but the response does not include an entity.</p>
<p>If the request passes through a cache and the Request-URI identifies one or more currently cached entities, those entries SHOULD be treated as stale. Responses to this method are not cacheable.</p>
<p>9.8 TRACE</p>
<p>The TRACE method is used to invoke a remote, application-layer loop- back of the request message. The final recipient of the request SHOULD reflect the message received back to the client as the entity-body of a 200 (OK) response. The final recipient is either the</p>
<p>origin server or the first proxy or gateway to receive a Max-Forwards value of zero (0) in the request (see section 14.31). A TRACE request MUST NOT include an entity.</p>
<p>TRACE allows the client to see what is being received at the other end of the request chain and use that data for testing or diagnostic information. The value of the Via header field (section 14.45) is of particular interest, since it acts as a trace of the request chain. Use of the Max-Forwards header field allows the client to limit the length of the request chain, which is useful for testing a chain of proxies forwarding messages in an infinite loop.</p>
<p>If the request is valid, the response SHOULD contain the entire request message in the entity-body, with a Content-Type of “message/http”. Responses to this method MUST NOT be cached.</p>
<p>9.9 CONNECT</p>
<p>This specification reserves the method name CONNECT for use with a proxy that can dynamically switch to being a tunnel (e.g. SSL tunneling [44]).</p>
]]></content>
      <tags>
        <tag>http</tag>
        <tag>rfc</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac tips</title>
    <url>/2016-09-01-Mac-Tips/</url>
    <content><![CDATA[<h1 id="how-to-switch-differnt-input"><a href="#how-to-switch-differnt-input" class="headerlink" title="how to switch differnt input"></a>how to switch differnt input</h1><p>This can be configured in system proferenece-&gt;keyboard shortcuts-&gt;input sources-&gt;select next source in input<br>Ctrl+Alt+Space</p>
<h1 id="How-to-force-an-app-to-quit-on-your-Mac"><a href="#How-to-force-an-app-to-quit-on-your-Mac" class="headerlink" title="How to force an app to quit on your Mac"></a>How to force an app to quit on your Mac</h1><p>Press these three keys together: Option, Command, and Esc (Escape). This is similar to pressing Control-Alt-Delete on a PC. Or choose Force Quit from the Apple () menu in the upper-left corner of your screen.</p>
<h1 id="To-capture-screenshot-of-Mac"><a href="#To-capture-screenshot-of-Mac" class="headerlink" title="To capture screenshot of Mac"></a>To capture screenshot of Mac</h1><p>Press Shift + Command + 5, then click an option, like Selection button to capture a still selection or Whole screen button to record your whole screen.</p>
<p>The screenshot tools appear in a small palette, which you can drag to reposition. The palette includes options for where to save the screenshot, whether to show the pointer, and more.</p>
<p>Save, edit, and share your shots<br> After you take a screenshot or video, a thumbnail appears in the corner of your screen. Drag it int</p>
<h1 id="Forward-delete-delete-char-next-to-cursor"><a href="#Forward-delete-delete-char-next-to-cursor" class="headerlink" title="Forward delete (delete char next to cursor)"></a>Forward delete (delete char next to cursor)</h1><p>Fn+Delete</p>
<h1 id="To-hide-and-show-dock"><a href="#To-hide-and-show-dock" class="headerlink" title="To hide and show dock"></a>To hide and show dock</h1><p>Just hit Command+Option+D at any time, and the dock will glide away (or back again).</p>
<h1 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h1><h2 id="Open-a-file"><a href="#Open-a-file" class="headerlink" title="Open a file"></a>Open a file</h2><ul>
<li>Cmd+Down arrow</li>
<li>Cmd+O</li>
</ul>
<h2 id="Switch-between-windows"><a href="#Switch-between-windows" class="headerlink" title="Switch between windows"></a>Switch between windows</h2><p>While you have two or more documents open in your favorite word-processing software, simply press and hold the Command ⌘ key and then strike the ~ (Tilde) key on your keyboard.</p>
<h2 id="navigate-on-page"><a href="#navigate-on-page" class="headerlink" title="navigate on page"></a>navigate on page</h2><p>fn + ←  Jump to top of document<br>fn + →  Jump to bottom of document<br>fn + ↓  Advance down one page<br>fn + ↑  Advance up one page</p>
<h2 id="Enter-path-in-open-save-window"><a href="#Enter-path-in-open-save-window" class="headerlink" title="Enter path in open/save window"></a>Enter path in open/save window</h2><p>Press <code>Ctrl+Shift+G</code> will open GoTo window</p>
<h2 id="Switch-running-applications"><a href="#Switch-running-applications" class="headerlink" title="Switch running applications"></a>Switch running applications</h2><p>Besides Command + Tab, you can swipe up on the touchpad with three fingers to view the windows of open apps, allowing you to quickly switch between programs. This view is called Mission Control, which also has its own dedicated keyboard shortcut (F3).</p>
<h2 id="Capture-screen-shot"><a href="#Capture-screen-shot" class="headerlink" title="Capture screen shot"></a>Capture screen shot</h2><h3 id="To-capture-the-entire-screen-press-Command-Shift-3"><a href="#To-capture-the-entire-screen-press-Command-Shift-3" class="headerlink" title="To capture the entire screen, press Command-Shift-3"></a>To capture the entire screen, press Command-Shift-3</h3><p> The screen shot will be automatically saved as a PNG file on your desktop with the filename starting with “Picture” followed by a number, example Picture 1, Picture 2, and so on.</p>
<h3 id="To-capture-a-portion-of-the-screen-press-Command-Shift-4"><a href="#To-capture-a-portion-of-the-screen-press-Command-Shift-4" class="headerlink" title="To capture a portion of the screen, press Command-Shift-4"></a>To capture a portion of the screen, press Command-Shift-4</h3><h1 id="Terminal"><a href="#Terminal" class="headerlink" title="Terminal"></a>Terminal</h1><h2 id="Page-up-Down"><a href="#Page-up-Down" class="headerlink" title="Page up /Down"></a>Page up /Down</h2><ul>
<li>Page up/down: Fn + up/down arrow, or Ctrl+f/b<h2 id="Setup-command-line-for-sublime"><a href="#Setup-command-line-for-sublime" class="headerlink" title="Setup command line for sublime"></a>Setup command line for sublime</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ln -s <span class="string">"/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl"</span> /usr/<span class="built_in">local</span>/bin/sublime</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="Open-files-from-terminal"><a href="#Open-files-from-terminal" class="headerlink" title="Open files from terminal"></a>Open files from terminal</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">open abc.jpg</span><br></pre></td></tr></table></figure>

<h2 id="To-make-changed-profile-settings-take-effect-right-away"><a href="#To-make-changed-profile-settings-take-effect-right-away" class="headerlink" title="To make changed profile settings take effect right away"></a>To make changed profile settings take effect right away</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> .bash_profile</span><br></pre></td></tr></table></figure>

<h1 id="Applications"><a href="#Applications" class="headerlink" title="Applications"></a>Applications</h1><h2 id="Safari"><a href="#Safari" class="headerlink" title="Safari"></a>Safari</h2><h2 id="Sublime"><a href="#Sublime" class="headerlink" title="Sublime"></a>Sublime</h2><h3 id="Switch-different-sublime-windows"><a href="#Switch-different-sublime-windows" class="headerlink" title="Switch different sublime windows"></a>Switch different sublime windows</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="string">'command + ~'</span></span><br></pre></td></tr></table></figure>

<h3 id="Path-of-customize-build-system"><a href="#Path-of-customize-build-system" class="headerlink" title="Path of customize build system"></a>Path of customize build system</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">~/Library/Application Support/Sublime Text 3/Packages/User/Nodejs.sublime-build</span><br></pre></td></tr></table></figure>

<h3 id="Open-folders-in-Sublime"><a href="#Open-folders-in-Sublime" class="headerlink" title="Open folders in Sublime"></a>Open folders in Sublime</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sublime .</span><br></pre></td></tr></table></figure>

<h3 id="Open-and-edit-file-with-sublime"><a href="#Open-and-edit-file-with-sublime" class="headerlink" title="Open and edit file with sublime"></a>Open and edit file with sublime</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">open -a <span class="string">'Sublime Text'</span> .bash_profile</span><br></pre></td></tr></table></figure>

<h3 id="Show-full-path-in-Sublime-text-3"><a href="#Show-full-path-in-Sublime-text-3" class="headerlink" title="Show full path in Sublime text 3"></a>Show full path in Sublime text 3</h3><p>With Sublime Text 3, all that’s necessary is to edit your Sublime user preferences (Preferences -&gt; Settings - User) to include:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  // ... other settings</span><br><span class="line">  <span class="string">"show_full_path"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Open-files-go-to-anything-in-sublime"><a href="#Open-files-go-to-anything-in-sublime" class="headerlink" title="Open files (go to anything) in sublime"></a>Open files (go to anything) in sublime</h3><p>Command + P</p>
<h3 id="Go-to-matching-brace"><a href="#Go-to-matching-brace" class="headerlink" title="Go to matching brace"></a>Go to matching brace</h3><p>Ctrl + M</p>
<h3 id="Go-to-previous-next-position"><a href="#Go-to-previous-next-position" class="headerlink" title="Go to previous/next position"></a>Go to previous/next position</h3><ul>
<li>Ctrl + “-“</li>
<li>Ctrl + Shift + “-“</li>
</ul>
<h3 id="Preview-markdown"><a href="#Preview-markdown" class="headerlink" title="Preview markdown"></a>Preview markdown</h3><p>Command + Shift + P -&gt; Preview</p>
<h1 id="Gestures"><a href="#Gestures" class="headerlink" title="Gestures"></a>Gestures</h1><h2 id="Three-3-fingures-for-windows-switch"><a href="#Three-3-fingures-for-windows-switch" class="headerlink" title="Three (3) fingures for windows switch"></a>Three (3) fingures for windows switch</h2><ul>
<li>Up: Mission control, show all running applications</li>
<li>Left/Right: Swtich desktops</li>
</ul>
<h2 id="Thumb-three-figures"><a href="#Thumb-three-figures" class="headerlink" title="Thumb + three figures"></a>Thumb + three figures</h2><ul>
<li>Center to outside: show desktop</li>
<li>Outside to Center: show launch pad</li>
</ul>
]]></content>
      <tags>
        <tag>Mac</tag>
        <tag>shortcut</tag>
        <tag>Efficiency</tag>
      </tags>
  </entry>
  <entry>
    <title>漫谈开发设计中的一些‘原则’及&#39;设计哲学&#39;</title>
    <url>/2016-09-02-Design-Principals/</url>
    <content><![CDATA[<p>在开发设计中有一些常用原则或者潜规则，根据笔者的经验，这里稍微总结一下最最常用的，以飨读者。</p>
<h1 id="POLA"><a href="#POLA" class="headerlink" title="POLA"></a>POLA</h1><p>The principle of least astonishment (POLA) is: “If a necessary feature has a high astonishment factor, it may be necessary to redesign the feature.”</p>
<p>In general engineering design contexts, the principle means that a component of a system should behave in a way that users expect it to behave; that is, users should not be astonished by its behavior.</p>
<p>A textbook formulation is: “People are part of the system. The design should match the user’s experience, expectations, and mental models.”</p>
<p>In more practical terms, the principle aims to leverage the pre-existing knowledge of users to minimize the learning curve, for instance by designing interfaces that borrow heavily from “functionally similar or analogous programs with which your users are likely to be familiar”.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h2><p>A web site could declare an input that should autofocus when the page is loaded,[8] such as a search field (e.g., Google.com), or the username field of a login form.</p>
<h1 id="DRY"><a href="#DRY" class="headerlink" title="DRY"></a>DRY</h1><p>这里的DRY是<code>Do Not Repeat Yourself</code>的缩写。具体解释参见 ,严谨的定义是　Every piece of knowledge must have a single, unambiguous, authoritative representation within a system，意思是：任何一部分知识在系统中必须只有单一的，清晰并且权威的展示。？？？这是啥意思，没懂。简单说就是不要重复自己任何一部分的工作。比如说，有一段代码是用于清除字条串中的HTML符号，在多个程序中会用到此功能，如果每个地方都使用如下代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">html = html.replaceAll(<span class="string">"\\&lt;.*?&gt;"</span>,<span class="string">""</span>) </span><br><span class="line">html = html.replaceAll(<span class="string">"&amp;nbsp;"</span>,<span class="string">""</span>);</span><br><span class="line">html = html.replaceAll(<span class="string">"&amp;amp;"</span>.<span class="string">""</span>);</span><br></pre></td></tr></table></figure>

<p>如果是只有２，３个地方用到(Martin曾经提到过Rule of three,意思是一段代码如果被copy３次以上就应该重构到一个单独的子方法中)，你可能就直接复制过来用，但是想想是２，３百个地方用到呢？如果上面需要再做个修改(如下)，你是不是要去这个２，３百个地方去改代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">html = html.replaceAll(<span class="string">"&amp;lt;"</span>.<span class="string">"&lt;"</span>);</span><br><span class="line">html = html.replaceAll(<span class="string">"&amp;gt;"</span>.<span class="string">"&gt;"</span>);</span><br></pre></td></tr></table></figure>

<p>所以这个DRY的规则就是推荐使用 <code>子方法</code> 的方式，这样只需要修改一次即可. 与之类似的编程思想有 <code>DIE（Duplication is Evil）,SPoT(Single Point of Truth), SSOT (Singel Source of Truth)</code> 。 题外话，和DRY对应的是WET,意思是 “write everything twice”（任何东西都写两遍）或者”we enjoy typing” （我们就是喜欢打字编码）。　:-)。</p>
<h1 id="KISS"><a href="#KISS" class="headerlink" title="KISS"></a>KISS</h1><p>KISS 是 Keep it simple, stupid （或者Keep it short and simple ）的简称。意思是在设计时保持简约，通俗。这个很像是现在推畅的“极简风”。<br>使用KISS有什么好处呢？如下是其中的一些：</p>
<ul>
<li>你可以更快的解决更多的问题</li>
<li>你可以使用更少的代码来解决复杂的问题</li>
<li>你可以写出更高质量的代码</li>
<li>你可以创建更大的系统，更好的去运维</li>
<li>你的代码将更加灵活，当有新需求时可以更好的支持扩展，修改或者重构</li>
<li>等等</li>
</ul>
<p>在软件设计领域， 有一些技术具体实现这个精髓，比如 DDD (Domain Driven Design),TDD (Test Driven Develop),这个使代码集中在真正需要的功能上，而不需要其他额外的。另外一个建议是 <code>不要试图通过注释来提高代码的可读性</code>，而应该从代码本身提高。比如如下是不太好的变量定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// i is for 'counter' and j means total sum</span></span><br><span class="line"><span class="keyword">int</span> i, j;</span><br></pre></td></tr></table></figure>

<p>而如下是好的设计 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// more intuitive one</span></span><br><span class="line"><span class="keyword">int</span> counter,sum;</span><br></pre></td></tr></table></figure>

<p>与此相呼应的是称作 <code>奥卡姆剃刀</code> 或者 <code>简约之法则</code>：</p>
<blockquote>
<p>Occam’s razor<br>The simplest (explanation|solution) is usually the best one.<br>往往最简单的解决方案是最好的解决方案</p>
</blockquote>
<p>具体到以Java为例的程序设计，如下有一些实践KISS的建议</p>
<ul>
<li>首先，认清自己，不要认为自己是个天才，这往往是你犯的第一个错。</li>
<li>把你的工作打散成几个子工作，每个部分不会耗费超过4-12个小时去完成</li>
<li>把一个问题分成几个小的子问题，每个问题可以通过1个或者只要几个类就能解决。</li>
<li>保持每个方法只做一件事，并且不要超过30-40行的代码量</li>
<li>保持每个类的体积不要太大。</li>
<li>不要害怕扔掉不用的代码。就像家里用不到的东西就及时扔掉一样。</li>
</ul>
<h1 id="New-Jersey-style-（Worse-is-better）"><a href="#New-Jersey-style-（Worse-is-better）" class="headerlink" title="New Jersey style （Worse is better）"></a>New Jersey style （Worse is better）</h1><p>新泽西风格，也叫做“Worse is better”。此原则指出，<code>系统的质量不会因为新功能的增多而提高</code>。 比如一个软件，只提供一些功能，但是用户很方便使用，有可能比一些提供了非常多令人眼花缭乱功能的“大杂烩”似的软件。比如像 Linux下面的 vi/vim, 浏览器中的Chrome.</p>
<h1 id="SOLID"><a href="#SOLID" class="headerlink" title="SOLID"></a>SOLID</h1><p>SOLID是几个编程哲学的总称，即 SOLID (Single responsibility, Open-closed, Liskov substitution, Interface segregation and Dependency inversion) ，下面我们分别解释一下：</p>
<h2 id="Single-responsibility-（SRP）"><a href="#Single-responsibility-（SRP）" class="headerlink" title="Single responsibility （SRP）"></a>Single responsibility （SRP）</h2><p>单一功能原则。Robert描述这个为“A class should have only one reason to change.”，即修改一个类（或者模块）有（且只能有）一个理由。简单说就是 <code>一个类或者模块只能负责一个功能</code>。举个例子，有一个模块负责生成一个报表，可以想像可能有两个理由去修改此模块，第一，报表的内容要变，第二，报表的格式要改。这两个改动是出于不同的理由，一个是内容的一个美化版面的。 而 “单一职责” 规则认为这是两个不同的职责，因此应该分成两个不同的子模块。如果把两件事情放在一起，并且不同的改动是出于不同的原因，这种设计是不好的。此规则方便系统各模块间解耦合。</p>
<h2 id="Open-closed-principle-（OCP）"><a href="#Open-closed-principle-（OCP）" class="headerlink" title="Open/closed principle （OCP）"></a>Open/closed principle （OCP）</h2><p>开闭原则。Bertrand描述为“”software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification”;”，也就是说对于一个实体（类，模块，方法等）允许在不修改源代码的前提下扩展它的功能行为。即，你可以把 <code>新代码放到新的类或者方法中</code>，新类通过继承来重用已有代码及功能。而 <code>已有的代码只有在修bug时才去修改</code>。 此原则主要用于降低在添加新加功能时引入新的bug的风险。</p>
<h2 id="The-Liskov-Substitution-Principle-（LSP）"><a href="#The-Liskov-Substitution-Principle-（LSP）" class="headerlink" title="The Liskov Substitution Principle （LSP）"></a>The Liskov Substitution Principle （LSP）</h2><p>里氏替换原则. 原文是 “Derived classes must be substitutable for their base classes.”，意思是，<code>派生类（子类）对象能够替换其基类（超类）对象被使用</code>。 比如说，如果 S 是T 的子类， 那么任何T类的具体实现对象都可以替换S的实现对象出现的地方，具体的调用者也不知道具体是父类还是子类，还不会出现任何错误。比如下图，调用者可以2来替换1的地方 。<br><img src="https://msdnshared.blob.core.windows.net/media/TNBlogsFS/BlogFileStorage/blogs_msdn/willy-peter_schaub/WindowsLiveWriter/SDLCSoftwareDevelopmentLifecycleflashbac_A707/image_4.png" alt></p>
<h2 id="Interface-segregation-principle-（ISP）"><a href="#Interface-segregation-principle-（ISP）" class="headerlink" title="Interface segregation principle （ISP）"></a>Interface segregation principle （ISP）</h2><p>接口隔离。原文是 many client-specific interfaces are better than one general-purpose interface. 意思是多个特定客户端接口要好于一个宽泛用途的接口。Make fine grained interfaces that are client specific. 应该定义粒度合适的一系列接口(像下图)，以便于每个客户去实现具体的功能请求。换句话说是，客户（client）不应该必须去依赖于它用不到的功能方法。此原则的目的是系统解开耦合，从而容易重构，更改和重新部署。<br><img src="http://cdn.hackerchick.com/wp-content/uploads/2010/04/200806SOLIDIISP2.gif" alt></p>
<h2 id="Dependency-inversion-principle-DIP"><a href="#Dependency-inversion-principle-DIP" class="headerlink" title="Dependency inversion principle (DIP)"></a>Dependency inversion principle (DIP)</h2><p>依赖反转原则. 原文是 One should “Depend upon Abstractions. Do not depend upon concretions.” 意思是 一个方法应该遵从“依赖于抽象而不是一个实例”。该原则规定：</p>
<ol>
<li>高层次的模块不应该依赖于低层次的模块，两者都应该依赖于抽象接口。</li>
<li>抽象接口不应该依赖于具体实现。而具体实现则应该依赖于抽象接口。<br>这个就像是设计模式中的Adaptor适配器模式。<br>下图解释了这个原理。<br><a href="https://upload.wikimedia.org/wikipedia/commons/9/96/Dependency_inversion.png" target="_blank" rel="noopener"></a><br>图1中，高层对象A依赖于底层对象B的实现；图2中，把高层对象A对底层对象的需求抽象为一个接口A，底层对象B实现了接口A，这就是依赖反转。</li>
</ol>
<h1 id="SOC"><a href="#SOC" class="headerlink" title="SOC"></a>SOC</h1><p>Separation of concerns,?即关注点分离。 是处理复杂性的一个原则。由于关注点混杂在一起会导致复杂性大大增加，所以能够把不同的关注点分离开来，分别处理就是处理复杂性的一个原则，一种方法。这个与SOLID中的 SRP很类似。</p>
<h1 id="YANGI"><a href="#YANGI" class="headerlink" title="YANGI"></a>YANGI</h1><p>是”You aren’t gonna need it”的缩写，直译是“你将来用不到它的”。这个是<a href="https://en.wikipedia.org/wiki/Extreme_programming" target="_blank" rel="noopener">极限编程</a>的一个编程思想。意思是说,永远不要因为 <code>预计</code>你会用到某个功能就去写一段代码去实现，总是只有问题出现了，<code>真的需要这个功能时才去写</code>。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://en.wikipedia.org/wiki/Principle_of_least_astonishment" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Principle_of_least_astonishment</a></li>
<li><a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" target="_blank" rel="noopener">DRY</a></li>
<li><a href="http://blog.csdn.net/sinat_20645961/article/details/47393737" target="_blank" rel="noopener"> 六大设计原则–里氏替换原则【Liskov Substitution Principle】</a></li>
<li><a href="https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)" target="_blank" rel="noopener">SOLID</a></li>
<li><a href="http://stackoverflow.com/questions/816130/how-to-keep-my-code-simple" target="_blank" rel="noopener">how to keep code simple</a></li>
<li><a href="https://en.wikipedia.org/wiki/Occam%27s_razor" target="_blank" rel="noopener">奥卡姆剃刀</a></li>
<li><a href="http://people.apache.org/~fhanik/kiss.html" target="_blank" rel="noopener">Apache KISS</a></li>
<li><a href="https://en.wikipedia.org/wiki/Worse_is_better" target="_blank" rel="noopener">Worse is better</a></li>
</ul>
]]></content>
      <tags>
        <tag>development</tag>
        <tag>desgin</tag>
        <tag>principals</tag>
        <tag>MyBlog</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes 与 Docker Swarm的对比</title>
    <url>/2016-09-04-Kubernets-vs-Swarm/</url>
    <content><![CDATA[<p>Kubernetes 和Docker Swarm 可能是使用最广泛的工具，用于在集群环境中部署容器。但是这两个工具还是有很大的差别。</p>
<h2 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h2><p><img src="https://technologyconversations.files.wordpress.com/2015/10/kubernetes.png?w=600&h=532" alt><br>Google根据其在Linux上容器管理经验，改造到docker管理上，就是kubernetes。他的在许多方面表现良好。最重要的是构造于Google多年的宝贵经验只上。</p>
<p>如果你从docker1.0以上开始使用kubernetes，你得到的用户体验会非常良好。比如你会发现kubernetes解决一些docker自身的问题。例如你可以mount（绑定）持久化存储卷（volume），以便于在迁移docker时不至于丢失数据。</p>
<p>kubernetes使用<code>flannel</code>（一个使用go写的虚拟网络的开源系统）构造容器间的网络通信。它还内置有负载均衡。除此之外，它的“服务发现”使用了etcd（一个使用golang编写的开源虚拟网络系统）。然而，使用kubernetes是有代价的。首先，它用一个不同的命令行接口，不同的编程接口及不同的YAML文件定义等。换言之，你不能使用docker命令行接口也不能用docker compose来定义容器。为了使用kubernetes，所有所有的东西都需要从头开始。这就好像这个工具并不是为了docker写的一样（这个在某种程度上确实是）。kubernetes把集群带到了一个全新的高度，代价是学习曲线比较陡。</p>
<h2 id="Docker-Swarm"><a href="#Docker-Swarm" class="headerlink" title="Docker Swarm"></a>Docker Swarm</h2><p><img src="https://technologyconversations.files.wordpress.com/2015/11/docker-swarm.png?w=438&h=600" alt><br>docker-swarm 使用了一个不同的方式。它是docker原生的集群工具。</p>
<p>最方便的部分是它暴露了docker标准的编程接口，意味着你之前一直在使用的任何与docker沟通的工具（docker命令行接口，docker compose，dokku，krane等等），都可以无缝的在docker swarm上使用。</p>
<p>这个其实是个双刃剑，毁誉参半。一直可以使用自己得心应手熟悉的工具，这再好不过了，然而，这样意味着我们又被docker紧紧的“耦合”了（而非业界一直追求的松耦合”）。如果你需要的都能满足，那皆大欢喜。可是如果不是呢，要是你有特殊需求这些API满足不了怎么办？这是就不得不去耍一些“小聪明”。</p>
<p>我们来仔细剖析下这两个工具，主要会从如何在集群中运行容器，这两个工具分别如何安装以及他们提供的功能。</p>
<h2 id="安装设置"><a href="#安装设置" class="headerlink" title="安装设置"></a>安装设置</h2><p>安装设置swarm非常简单，简单明了并且很灵活。我们需要做的就是安装一个服务发现工具，然后在所有的节点上安装swarm容器。因为它自己就是以一个docker容器来部署的，因此它在不同的操作系统上运行方式都是没有差别的。我们运行swarm容器，开放一个端口，然后告知服务发现模块的地址。这不能再简单了。我们甚至可以在没有任何服务发现模块的情况下开始使用，来看看我们是否喜欢它，当开始真正认真的要使用时再去添加etcd，consul或者其他支持的工具。</p>
<p>相比较而言，kubernetes的安装就有点复杂晦涩了。不同的操作系统上安装都不同。每个操作系统都有自己的独立安装指令和运维团队。比如说，如果你选择使用vagrant来试用，然后在Fedora这里遇到问题卡住了，但这不是意味着其他的（比如Ubuntu或者coreos）也不能用。你可以，不过要开始在kubernetes官方以外到处搜索. 你所需要的很可能在某个社区论坛里提供的解决方案，但是你需要时间去查询，运气好的话可以在第一次尝试就能用。一个严重的问题是安装kubernetes依赖于bash脚本。如果我们是处于配置管理不是必须的情况下是，这个本身可能不是大问题。我们可能不希望运行一个脚本，而是希望kubernetes成为puppet，chef或者ansible的一部分。同样，这个也是可以解决的。你可以找到ansible 的安装手册来动行kubernetes或者你自己去写。跟swarm比这些都不是什么大问题,只是一点点的小痛苦而已。使用刀砍请不要期待任何的安装文档，除非都可使用docker命令行的时候运行的参数而已。我们打算去运行容器，swarm可以实现这个，但kubernetes 没有。有些人可能并不在意具体是使用哪个服务发现的工具。我喜欢swarm背后提倡的那种极简风格，以及他背后的逻辑，内置电池，拆留由已。任何东西都是拆箱可用但是我们还提供了选项让你去替换其中的任一个模块。</p>
<p>与swarm不同的是，kubernetes 是一个可配置的工具。你需要跟kubernetes提供的各个选项来共生存。例如，如果你打算使用kubernets,你必须要使用etcd.我不是说etcd不好(实际上正好相反)，但是如果你习惯于，比如你在非常复杂的业务场景下使用consul，如果要使用服务发现，必须特别针对kubernets使用一个，而剩下的其他部分使用其他一个产品。另外一个对使用Kubernets觉得不方便的地方就是你需要在事先了解各种事情。比如，你需要告诉他要用到的所有节点的地址，每个节点的职责是什么,这个集群有多少个“小黄人” (minion,是kubernet对于一个集群中机器之前叫的名字)，等等。<br>而使用Swarm，我们只需要启动一个节点，告诉他加入网络，就可以了。我们不需要提前告诉关于集群其他的信息，因为这些信息会通过各个节点间的 “八卦”（gossip protocol）来传输。</p>
<p>配置本身也许并不是这些工具之间最大的差别。不管你使用哪个工具，或早或晚，所有都会配置好并运行起来，到时候你们就会忘掉在配置时的痛苦经历。你可能会说我们之所以选择某个工具就是因为它安装配置简单吧。很公平的。我们继续往下讨论如何定义容器及之上的这些工具。</p>
<h2 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h2><p>如果使用Swarm来运行Docker容器，你如何去定义所有的参数呢？<br>实际上你根本不需要！你所做的跟使用Swarm之前没有什么不同。比如，你习惯于使用Docker CLI（命令行接口），你可以继续使用几乎相同的命令。如果你习惯于使用Docker Componse来运行容器，你可以继续在Swarm集群中使用。不管你之前习惯于怎么使用容器，你仍旧可以使用，只是在更大级别的集群中使用。</p>
<p>Kubernetes要求你去学习它自己的CLI（命令行接口）和配置。你不能使用你之前创建的docker-compose.yml配置，你必须要去新建与Kubernetes对应的配置。你也不能使用之前学习的Docker CLI（命令行接口）。你必须要去学习 Kubernetes CLI（命令行接口），并且很有可能，确保你整个公司机构也要去学习。</p>
<p>不管你选择哪个工具来部署集群，你都要先熟悉Docker。你可能已经习惯于使用 使用Docker Compose来定义你运行容器的参数。如果你曾经使用它超过几个小时，你可能就会直接使用它而扔掉Docker CLI。你可以使用它运行容器，跟踪日志变化，等等。另外一方面，你可能是Docker的  “死忠”，看不上 Docker Compose，而是任何事都使用Docker CLI，或者你甚至自己写bash脚本来运行容器。不管哪种方式，这些都可以在Docker Swarm上使用。</p>
<p>如果你选择Kubernetes，请先准备好同一件事需要有多个定义配置。你需要使用 Docker Compose来运行Kubernetes范围外的容器。开发人员需要继续在他们的笔记本电脑上运行容器，你的测试环境可能也不是一个大集群，等等。换言之，如果你选择了Docker，那么 Docker Compose 和 Docker CLI将是不可避免的。你肯定会在某些地方或者以某种方式用到它们。一旦你开始使用 Kubernetes，你就会发现你所有的 Docker Compose的配置都要翻译成 Kubernetes的方式，从这个时候，你也要开始<code>维护这两个版本了</code>。使用 Kubernetes，这些重复的事情意味着维护成本的提高。重复只是一个问题，另外的是你在集群中运行的命令将于集群外使用的命令不一样了。你之前学习并喜爱的Docker的所有命令在 Kubernetes集群内将是完全行不通了。</p>
<p>Kubernetes的开发团队强制你去按照他们的办事方式行事，其实不是为了让你过的那么苦。如此巨大差别的主要原因是 Swarm 和 Kubernetes针对同一问题采取了不同的处理手段。 Swarm团队决定使用跟Docker相同的API接口，因此我们看到这些之前有如此好的兼容性。结果就是，你可以使用几乎所有之前的东西，只是在更大级别的集群中使用而已。没有新的东西要去做，不需要去重复配置参数，也不需要去新学习什么。不管你是直接使用Docker CLIgipj使用Swarm，这些API接口是基本上一致的。不好的方面是如果你想Swarm去做某件事，但是这个在Docker API中没有，这样你就悲催了。简单来说，如果你在找一个工具，<code>可以部署使用Docker API的容器到集群中，那么 Swarm就是解决方案</code>。另一方面，如果你想要一个工具，<code>可以解决Docker API办不到的事情，你就应该去试试 Kubernetes</code>了。这就是功能性（ Kubernetes）VS. 简易性（Swarm）。</p>
<p>这里唯一还没有回答的问题就是这些限制是什么。主要的限制中有两个，网络配置和持续化存储卷。走到Swarm1.0，我们不能连接运行于不同服务器上的容器。事实上，现在我们仍然不能连接他们，但是我们可能通过跨主机网络来协助连接运行于不同服务器上的容器。这是个非常强大的功能。而 Kubernetes使用 flannel（一个使用go写的虚拟网络的开源系统）来实现网络路由。目前自从Docker1.0开始， 这个功能也成为Docker CLI的一部分了。</p>
<p>另外一个问题是持续化存储卷。Docker在1.9版本中引入此功能。直到最近，如果你持久化一个数据卷，这个容器就绑定到这个持续化卷所在的服务器上了。它不能再次移动，除非你使用一些恶心的小花招，比如在不同的服务器间复制这些数据卷文件。这些本身是一些比较慢的操作，这与Swarm等工具的初衷也是相违背的。即便你有时间去复制，你也不知道从哪里去复制，因为集群工具会认为你整个数据中心是一个实体。你的容器会部署到它认为最合适的地方（比如，运行最少容器，CPU或者内容使用率最低，等等）。现在已经有Docker内置的持久化卷了。网络和持久化卷缺失曾经是许多人放弃Swarm而去选择 Kubernetes。自从Docker1.9，这此已经成为过去式。</p>
<h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><p>当需要在Docker Swarm 和 Kubernetes做出选择时，可以考虑如下几点。你是否想依赖于Docker自己来解决集群的问题。如果是，选择Swarm。如果某些功能在Docker中不支持，那它也非常可能在Swarm中找不到，因为Swarm是依赖于Docker API的。另外一方面，如果你想要一个工具可以解决Docker的限制，Kubernetes将是不错的选择。Kubernetes不是基于Docker，而是基于Google多年对于管理容器的经验。它是按照自己的方式来行事。</p>
<p>真正的问题是Kubernetes这种自我的方式（与Docker非常的不同）相比于它提供的优点是否值得。或者，我们是不是应该押宝在Docker本身上，期待Docker将来会解决这些难题。在回答这些问题之前，请先看一下Docker1.9之后的版本。它已经有个网络配置及持久化卷。也有了所谓的“除非死掉 才去重启”的策略，这次方便去管理那些讨厌的错误。现在Kubernetes 和 Swarm之间的差异又少了3个。实际上，现如今，Kubernetes 相对于 Swarm的优势很少了。另一方面，Swarm使用了Docker API意味着你可以共用命令的配置。个人认为，我倾向于押宝于Docker引擎变得越来越好，这样Docker Swarm也会受益。这两者之间的差异已经非常小。两个都是可用于生产环境，但是Swarm更易于去配置，易于使用，并且可以重用在上集群之前的配置，不需要在集群和非集群环境下重复工作。</p>
<p>我个人的建议是使用Docker Swarm。而 Kubernetes太“任性”了，不易于配置，与Docker CLI，API差别太大，并且在Docker1.0之后，相对于Swarm来说没有太多的优势。<code>他们之间其他的差距影响真的是不太大</code>。但是Docker Swarm更易于配置。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li>使用kubernetes的好处是在其前后基于Google对container管理几十年的经验，比如Borg。</li>
<li>使用某个特定容器其实并不是特别重要的事，最主要的还是集群技术。kubernetes类似于数据库操作领域的hibernate/ibates，即解耦合。在需要的时候我们可以使用Rocket替换Docker，对使用者透明。kubernetes这个功能在swarm中是找不到的。在生产环境中，如果需要，对于上层是透明的，没有任何影响。</li>
<li>不得不承认，Swarm更多的是一个部署工具，而Kubernetes是用于HA（高可用）架构的大规模的编配平台。</li>
<li>Kubernetes是介于中间的产品，没有Swarm那么简单友好，也没有Mesos那么功能强大。因此很有可能是在Mesos上层使用Docker，而非与Kubernetes集成。</li>
<li>人们使用Mesos是因为它本身不是为了Docker或者容器设计的，它只是个集群抽象层。人们用就是因为它是唯一一个既支持部署应用程序又可以同时管理hadoop。（将来有可能不一定）</li>
<li>如果我是个开发人员，我会选择 Compose+Swarm,它简单易用。但是如果我是CTO，我会选择k8s，因为这样我就不用关于Docker API的兼容性问题了。</li>
</ul>
<p>原文地址 ： <a href="https://technologyconversations.com/2015/11/04/docker-clustering-tools-compared-kubernetes-vs-docker-swarm/" target="_blank" rel="noopener">https://technologyconversations.com/2015/11/04/docker-clustering-tools-compared-kubernetes-vs-docker-swarm/</a></p>
]]></content>
      <tags>
        <tag>DevOps</tag>
        <tag>Mac</tag>
        <tag>shortcut</tag>
      </tags>
  </entry>
  <entry>
    <title>Head First Blockchina 1</title>
    <url>/2016-09-11-head-first-blockchian-1/</url>
    <content><![CDATA[<h1 id="深入浅出区块链系统：第一章"><a href="#深入浅出区块链系统：第一章" class="headerlink" title="深入浅出区块链系统：第一章."></a>深入浅出区块链系统：第一章.</h1><p><code>what you should know about blockchain</code></p>
<p>考虑的大家现在很多都是碎片化阅读，不知道大家如何，反正如果我是在在只有很短一段时间里，不太容易切换状态静下心来读一篇洋洋洒洒的长文章。因此此系统会保持短小精悍，把整套分成一系列小文章，每个文章有分成若干个段（sections）。既KISS原则，查看<a href="http://cloudsdocker.github.io/2016/09/02/2016-09-02-Design-Principals/" target="_blank" rel="noopener">这里</a>什么是KISS.</p>
<p>目前<code>区块链（blockchain）</code>应该是在最近比较火的新技术之一了，这个不光在银行金融行业，也在其他诸多行业逐渐成为热点。区块链基于被认为是<code>继互联网之后最重要的技术发明之一</code>。看到过很多关于区块链的文章，要么是太过于学术，要么又局限于某个行业领域。对于一般人来说不太容易去理解其所以然。因此，笔者提笔自己写一个关于区块链的系列文章，以方便大家。</p>
<h2 id="比特币"><a href="#比特币" class="headerlink" title="比特币"></a>比特币</h2><p>说到区块链就不得不提比特币。在进入讨论blockchain之前，先上张图片。<br><img src="https://qph.ec.quoracdn.net/main-qimg-6290fccef5f018b22672e7d1c9179350-c?convert_to_webp=true" alt></p>
<p>这个是在说雷曼兄弟公司的破产，背景是发生于2008年金融危机。当时被媒体及世人厌恶的贪婪，低效的传统金融体系垮塌，与此同时，不知道是不是巧合，比特币（bitcoin）诞生了（其实电子货币已经有几十年的历史了）。</p>
<p><img src="http://bitcoinspace.net/wp-content/uploads/2016/03/bitcoin.jpg" alt></p>
<p>比特币，就像是美元，人民币一样是个货币，只是这个是数字化的货币，没有一个具体的国家或者机构管理。既然是货币就要拿来用，要流通。当有任何变动，就会产生所谓的 <em>money in money out， balance changed</em>。即这些比特币的变动，最新的余额是多少，等都要记录下来。在现实世界中，这些记录在具体你的每个银行账户中，由一些监管机构监视并确保准确性。</p>
<p>但是比特币是个电子货币，没有一个具体的营业监管机构。怎么破？</p>
<p>这时区块链就被发明出来（大约是在2009年），区块链起源于比特币，就是当比特币从一个人转移到另一个人时，用于记录这些变动。换句话说，区块链（Blockchain） 就是比特币（bitcoin）的不可变动（immutable）的记账系统。</p>
<h2 id="记账"><a href="#记账" class="headerlink" title="记账"></a>记账</h2><p>有人可能会觉得“记账系统”太过于笼统，不太明白，因此首先这里说一下什么是记账，举个例子，你在淘宝上买东西，整个过程需要有多个记账操作，包括可能需要在购物车里添加一条记录，你买好了需要在商家那里记一笔账，然后支付时需要记下一笔，快递再需要记录一笔。如果你买的不是一般的小东西，比如是一个房子，那样还要在相关管理部门还要记录一笔。<br>有没有发现这个是非常低效的，需要花费很多的重复资源的过程？换句话说，这些低效都是最终都要转嫁到我们消费者头上。区块链却在设计之初很好的解决上面这些弊端。</p>
<h2 id="什么是区块链"><a href="#什么是区块链" class="headerlink" title="什么是区块链"></a>什么是区块链</h2><p>区块链是专门针对比特币设计开发的记账系统，用于所有比特币的记账。因为区块链本身良好的设计，区块链被服务于比特币仅仅只是一个用例和开端，其还可以用于很多地方。</p>
<h3 id="记住这几个词可以帮助理解什么是区块链"><a href="#记住这几个词可以帮助理解什么是区块链" class="headerlink" title="记住这几个词可以帮助理解什么是区块链"></a>记住这几个词可以帮助理解什么是区块链</h3><ul>
<li>chain/链。 像下面这个图，数据的组织是由一个一个<code>大小相同</code>的块(block)组成一个链条(chain)，就像是DNA里每个基因有机的组织在一起。   <img src="https://image.spreadshirtmedia.com/image-server/v1/designs/12710632,width=190,height=190,version=1395590038.png/bitcoin-lego-block-chain-t-shirt_design.png" alt>.</li>
</ul>
<p>下面使用一个例子来解释一下。当有如下三个操作时就会在区块链中添加三条记录。</p>
<p><img src="http://cloudsdocker.github.io/images/BlockChain_1.jpg" alt><br><img src="http://cloudsdocker.github.io/images/BlockChain_Chain2.png" alt></p>
<ul>
<li><p>去中心化，或者说是“分布式” ， 也就是具体的这些记账数据是分布式的散落在各个节点，而且每个节点都存有一份<code>所有的</code>交易。这样有个好处，就是每个交易有多份副本，互相之间可以对比查对，那些欺诈，篡改数据就没有可能了。其实，传统金融业有一个问题就是各个金融机构间互相的<code>不信任</code>，想像一下在2008年金融危机时，各个金融机构竞相抢购那些credit default derivatives等产品，就是因为大家对对方的不信任所引起的。</p>
</li>
<li><p>挖矿。 “矿工”，其实就是链中一个个能够保存对账信息的<code>节点</code>的别名. 当有新的对账或者交易时，应该就是把数据写到某个节点，然后再需要加入到区块链中时。但问题是“链”只有一个，节点有很多，到底由哪个节点来完成这个任务呢？解决办法就是“打”，看谁厉害。其实就是许多的矿工节点会互相竞争，使用一些非常耗费计算资源，后台使用复杂的算法，最后使用一种叫做 PoW （Proof Of Work,是一种快速断定工作量的技术，比如你安排工人来给把一车箱子从仓库搬到车间，你并不需要从一开始紧盯着他去搬每一个箱子，只要看到最终的所有的箱子都已经在车间，即可证明他做完了工作，可以给相应的报酬了。这个我们在后续章节详细解释）的机制来决定最终哪个节点获胜，由它有资格来写这个区块，并加入到区块链中，同时这个获胜的节点可以得到相应财务上的奖励，即若干的比特币，这也正是不断激励人们投入更加强大计算能力的机器来挖矿的原因。这个过程被比特币平台很好的控制节奏，也就是大概每10分钟左右产生一个新的“区块”以添加到区块链路中。</p>
</li>
</ul>
<p>可以参考<a href="https://blockchain.info/?currency=CNY，" target="_blank" rel="noopener">https://blockchain.info/?currency=CNY，</a> 这里是以人民币滚动显示当前所有挖矿的更新，下图是此屏幕截图。<br><img src="http://cloudsdocker.github.io/images/blockchain_info.gif" alt></p>
<h2 id="区块链的应用领域"><a href="#区块链的应用领域" class="headerlink" title="区块链的应用领域"></a>区块链的应用领域</h2><h3 id="金融业"><a href="#金融业" class="headerlink" title="金融业"></a>金融业</h3><p>对于金融业来说，在进行远程转账时一直在使用的所谓“关系银行”，比如你想要通过中国工商银行给朋友在澳洲的汇丰银行的账户转账，这时在中间可能要经过在香港的汇丰以及悉尼的银行等多个第三方机构来中转，不光要多花手续费，真正拿到手时可能已经1周时间过去了。如果使用区块链，转账其实就是添加一个“对账”信息块并加入到区块链中即可，对方银行可以立即在链中发现此交易。这样此过程就流水化（streamline）了，就跟发个电子邮件似的。 相对于之前，区块链会有3个优势，（1）不需要经过第三方 （2）快 （3）省钱</p>
<p><img src="http://fintechnews.ch/wp-content/uploads/2016/05/Centralized-vs-Distributed-Ledger-Bitcoin-pressure.png" alt></p>
<h3 id="一般商业公司"><a href="#一般商业公司" class="headerlink" title="一般商业公司"></a>一般商业公司</h3><p>设想一下普通办公场景，一般业务处理都会涉及到许多纸制的表格，文件，请多文件的复印件等等。一是方便文件信息的传递，记录，另外一个原因是为了应付内部外部的审计。如果使用区块链，这些问题都得到很好的解决。比如，由于区块链的系统架构，其本身数据就是自动审计的。简言之，在这个领域，区块链有3大优势，（1）数据透明（2）数据安全性验证（3）审计。</p>
<h3 id="对于零售行业"><a href="#对于零售行业" class="headerlink" title="对于零售行业"></a>对于零售行业</h3><p>比如说你想知道这个食品是不是有机食品，而每个环节的数据都是散落在各个地方，不便于统一追踪。另外，数据的来源又是多种多样，又容易被篡改，比如作为一个钻石加工商，我是无法确定这批钻石是不是血钻。而“区块链”本身的特性保证了可以跟踪产品生命周期的每个阶段详细信息，而且区块链的“只能添加”的属性也确保了数据数据的准确性，不容易被后期篡改。因此区块链也可以用以政府类的投票，这样就更加具有合法性，不可能被人为篡改结果。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>以上的案例都涉及到一个关键词 “信任”。 你不信任供应链路，你不信任 “相关银行”， 等。但是你可以信任 “区块链”，它是允许多个不同的机构一起协同工作，但是不需要他们之间相互信任。</p>
<h2 id="FAQ-（常问的问题）"><a href="#FAQ-（常问的问题）" class="headerlink" title="FAQ （常问的问题）"></a>FAQ （常问的问题）</h2><h3 id="这些-“区块”-具体是什么样子的？"><a href="#这些-“区块”-具体是什么样子的？" class="headerlink" title="这些 “区块” 具体是什么样子的？"></a>这些 “区块” 具体是什么样子的？</h3><p>首先每个区块包含有一个时间戳，包含一个哈希码，指向其前面链接的区块，然后就是对账交易数据本身。每个区块都有一个唯一编号，生成这个编号是需要大量的计算工作及验证。我们在后续章节详细介绍此功能。</p>
<h3 id="什么样新的块才能够加入"><a href="#什么样新的块才能够加入" class="headerlink" title="什么样新的块才能够加入"></a>什么样新的块才能够加入</h3><p>当需要添加新的块时，需要有所有节点中50%认为正确同意才可以。这样可以保证恶意的数据被加入到链中。</p>
<h3 id="每个节点都存一份不也是有额外的成本吗"><a href="#每个节点都存一份不也是有额外的成本吗" class="headerlink" title="每个节点都存一份不也是有额外的成本吗"></a>每个节点都存一份不也是有额外的成本吗</h3><p>其实在2010年，1P (Peta byte)数据存储一个月是 $80,000/month,预计在2020年，也就是10年后，同样的1P的数据存储一个月只要 $4/month. 可见，存储本身的成本几乎可以越来越忽略不计了。</p>
<h3 id="总之，BlockChain的出现，是由于人们的预期，-技术的进步。"><a href="#总之，BlockChain的出现，是由于人们的预期，-技术的进步。" class="headerlink" title="总之，BlockChain的出现，是由于人们的预期， 技术的进步。"></a>总之，BlockChain的出现，是由于人们的预期， 技术的进步。</h3><p>所有上面提到的东西，包括此文章的markdown源代码，mindmap思维导图等等都可以在我的github上找到。此文章是我在<code>GitBook</code>上此系统的第一篇，<a href="https://www.gitbook.com/book/cloudsdocker/head-first-blockchain/details" target="_blank" rel="noopener">链接</a>。如果有任何建议或者想法，请联系我。</p>
<h2 id="联系我："><a href="#联系我：" class="headerlink" title="联系我："></a>联系我：</h2><ul>
<li><a href="mailto:phray.zhang@gmail.com" target="_blank" rel="noopener">phray.zhang@gmail.com</a> (email/邮件，whatsapp, linkedin)</li>
<li>helloworld_2000 (wechat/微信)</li>
<li><a href="https://github.com/CloudsDocker/" target="_blank" rel="noopener">github</a></li>
<li>[简书 jianshu]（<a href="http://www.jianshu.com/users/a9e7b971aafc）" target="_blank" rel="noopener">http://www.jianshu.com/users/a9e7b971aafc）</a></li>
<li>微信公众号：vibex</li>
</ul>
]]></content>
      <tags>
        <tag>MyBlog</tag>
        <tag>blockchain</tag>
        <tag>hyperledger</tag>
      </tags>
  </entry>
  <entry>
    <title>JetBrains/IntelliJ tips</title>
    <url>/2016-09-14-JetBrains-Tips/</url>
    <content><![CDATA[<h1 id="Shortcuts"><a href="#Shortcuts" class="headerlink" title="Shortcuts"></a>Shortcuts</h1><h2 id="Open-files-by-name"><a href="#Open-files-by-name" class="headerlink" title="Open files by name"></a>Open files by name</h2><p>To navigate to a class, file or symbol with the specified name:</p>
<p>On the main menu, point to Navigate, and then choose Class, File, or Symbol respectively, or use the following shortcuts:<br>Class: ⌘O<br>File (directory): ⇧⌘O<br>Symbol: ⌥⌘O</p>
<h2 id="Search-keywords-in-files"><a href="#Search-keywords-in-files" class="headerlink" title="Search keywords in files"></a>Search keywords in files</h2><p>Shift+Command+F: Fine in path</p>
<h2 id="Re-open-files"><a href="#Re-open-files" class="headerlink" title="Re-open files"></a>Re-open files</h2><p>Command +E</p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Coding</tag>
        <tag>JetBrains</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈软件单元测试中的“断言” (assert)，从石器时代进步到黄金时代。</title>
    <url>/2016-09-17-Assert-In-Unit-Test-CN/</url>
    <content><![CDATA[<p>大家都知道，在软件测试特别是在单元测试时,必用的一个功能就是“断言”（Assert)，可能有些人觉得不就一个Assert语句，没啥花头，也有很多人用起来也是懵懵懂懂，认为只要是Assert开头的方法，拿过来就用。一个偶然的机会跟人聊到此功能，觉得还是有必要在此整理一下如何使用以及对“断言”的理解。希望可以帮助大家对此有一个系统的理解，也趁机聊聊“断言”发展一路过来的心路历程。</p>
<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>首先稍微介绍一下断言相关知识，对于有经验的程序员请移步到下面的“断言”进化史部分。</p>
<h2 id="什么是断言"><a href="#什么是断言" class="headerlink" title="什么是断言"></a>什么是断言</h2><p>在单元测试时，程序员预计在程序运行到某个节点位置，需要判断某些逻辑条件必须满足，这样下面的一些业务逻辑才可以进行下去，如果不满足，程序就会”报错”甚至是”崩溃”。比如说，一段程序是负责“转账”，在真正开始转账操作前首先需要“断言”这个账户是一个“合法”的账户，比如账户不是<code>null</code>。当出现些状况时，程序开发人员就可以在第一时间知道这个问题，可以去<code>debug</code>除错，而非等到交付给用户后才发现问题。其实这个功能是TDD (Test Driven Develop)的基石之一。</p>
<h2 id="“断言”-vs-“异常”或者错误，-即-Assert-vs-Exception-Error"><a href="#“断言”-vs-“异常”或者错误，-即-Assert-vs-Exception-Error" class="headerlink" title="“断言” vs “异常”或者错误， 即 Assert vs. Exception/Error"></a>“断言” vs “异常”或者错误， 即 Assert vs. Exception/Error</h2><ul>
<li>“断言”通常是给程序开发人员自己使用，并且在开发测试期间使用。而异常等在程序运行期间触发</li>
<li>通常“断言”触发后程序“崩溃”退出，不需要从错误中恢复。而“异常”通常会使用try/catch等结构从错误中恢复并继续运行程序。</li>
</ul>
<h1 id="“断言”进化史"><a href="#“断言”进化史" class="headerlink" title="“断言”进化史"></a>“断言”进化史</h1><h2 id="“石器时代”"><a href="#“石器时代”" class="headerlink" title="“石器时代”"></a>“石器时代”</h2><p>一开始的一些单元测试框架（比如JUnit）提供的断言语句，这样在程序某个地方确保某个逻辑关系肯定返回是true,如果不是true,这个单元测试就是没有测试通过。如下就是一个例子,如果程序运行到此行时返回false程序就会抛出一个错误（如下图一）并停止运行，开发人员可以去检查下为什么出现此问题。非常的简单粗爆。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span>(x=y);</span><br></pre></td></tr></table></figure>

<p><img src="http://cloudsdocker.github.io/images/blog_assert_1.png" alt></p>
<h2 id="“青铜时代”"><a href="#“青铜时代”" class="headerlink" title="“青铜时代”"></a>“青铜时代”</h2><p>上面这种断言除了简单之外，是有一个问题，就是当断言被触发时显示出来的错误消息不是很友好。如上图一，只是知道出错了，但是并没有太多有用的信息，比如最好是能显示出x与y的值来，这样好更快的理解为啥出错。后来，支持断言的单元测试框架升级版本出现了，它们提供了一系列的高级”断言“语句，添加了一些更加友好的程序接口，同时还提供比较亲民的错误消息，比如下面的例子使用了两个单独的断言语句。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x=<span class="number">111</span>;</span><br><span class="line"><span class="keyword">int</span> y=<span class="number">222</span>;      </span><br><span class="line">assertEquals(x, y);</span><br><span class="line">assertNotEquals(x, y);</span><br></pre></td></tr></table></figure>

<p>执行的结果如下图二，你可以看到这个错误结果相对于上面“石器时代”已经包括了不少有用的信息，比如除了知道断言失败外还显示了<code>期望的值</code>以及<code>实际值</code>。</p>
<p><img src="http://cloudsdocker.github.io/images/blog_assert_2.jpg" alt></p>
<h2 id="“黄金时代”"><a href="#“黄金时代”" class="headerlink" title="“黄金时代”"></a>“黄金时代”</h2><p>但是上面这种方式有一个弊端，就是需要大量的预置断言方法（比如判断相等一个方法，判断不相等一个方法等），去支持各种场景。接下来又出现了新的解决方案，其中的明星就是<code>Hamcrest</code> (其实这个词是使用一种叫做<a href="https://en.wikipedia.org/wiki/Anagram" target="_blank" rel="noopener">angram</a>的文字游戏，即把一个原来单词中的字母顺序改变，这个Hamcrest就是从Matchers的变形)框架。是使用一种<code>assertThat</code>组合上<code>Matcher</code>来使用。</p>
<p>这个有多个好处， </p>
<ul>
<li>首先是支持了在Java8中才迟迟引入的<code>流式编程(Stream)</code>，即每个Matcher执行完后会再返回一个Matcher，这样可以一个套一个组成一个Matcher链</li>
<li>另外Hamcrest还使用了非常接近于人类自然语言以及使用and/or/not等逻辑判断的方式来写测试方法，比如当你看到下面的测试语句肯定会一目了然：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">assertThat(actual, is(not(equalTo(expected)));</span><br></pre></td></tr></table></figure>

<ul>
<li>还有一个好处是输出的断言消息更加易读。</li>
<li>另外还有一个好处即Hamcrest框架支持泛型<code>TypeSafe</code>，即在编译时就会找到类型不匹配的错误。比如下面第一个是传统的断言，在编译期不会报错，但是运行时会失败，而第二个会在编译时报错，就不用等到运行期。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">assertEquals(<span class="string">"abc"</span>, <span class="number">123</span>); <span class="comment">// 1</span></span><br><span class="line">assertThat(<span class="number">123</span>, is(<span class="string">"abc"</span>)); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<p><img src="http://cloudsdocker.github.io/images/blog_assert_3.jpg" alt></p>
<ul>
<li>使用Hamcrest的最后一个好处是对测试框架的“解耦合”，即，使用此框架你可以现在使用Junit后面可以转到TestNG。甚至你自己去扩展自己实现。</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>上面说了这么多，是不是感觉平时经常使用的一个看似简简单单的Assert还有不少的东西可以深挖一下滴。这个只是抛砖引玉，如果大家还有什么点子或建议请使用下面的方式。</p>
<blockquote>
<p>联系我：</p>
<ul>
<li><a href="mailto:phray.zhang@gmail.com" target="_blank" rel="noopener">phray.zhang@gmail.com</a> (email/邮件，whatsapp, linkedin)</li>
<li>helloworld_2000 (wechat/微信)</li>
<li><a href="http://cloudsdocker.github.io" target="_blank" rel="noopener">blog on github pages</a></li>
<li><a href="http://www.jianshu.com/users/a9e7b971aafc/latest_articles" target="_blank" rel="noopener">简书 jianshu</a></li>
<li><a href="https://github.com/CloudsDocker/" target="_blank" rel="noopener">github</a></li>
<li>微信公众号：vibex</li>
</ul>
</blockquote>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h3><ul>
<li><a href="https://objectpartners.com/2013/09/18/the-benefits-of-using-assertthat-over-other-assert-methods-in-unit-tests/" target="_blank" rel="noopener">benefit of assertThat</a></li>
</ul>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>MyBlog</tag>
        <tag>testing</tag>
      </tags>
  </entry>
  <entry>
    <title>How to customize Sublime syntax highlights</title>
    <url>/2016-10-06-Sublime-Syntax-Highlights/</url>
    <content><![CDATA[<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://www.sublimetext.com/docs/3/scope_naming.html" target="_blank" rel="noopener">Sublime Scope Naming</a></li>
<li><a href="https://www.sublimetext.com/docs/3/syntax.html" target="_blank" rel="noopener">Syntax Guide</a></li>
</ul>
]]></content>
      <tags>
        <tag>tag</tag>
        <tag>efficiency</tag>
      </tags>
  </entry>
  <entry>
    <title>【原创】深入浅出区块链系统：第二章</title>
    <url>/2016-10-13-head-first-blockchian-2/</url>
    <content><![CDATA[<blockquote>
<p>使用Solidity创建以太坊(Ethereum)智能合约(Smart Contract)</p>
</blockquote>
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>前面第一章 (<a href="http://weibo.com/ttarticle/p/show?id=2309404030129192967736#_0" target="_blank" rel="noopener">位于微博上的链接</a>)主要介绍了区块链的概念，我们知道区块链分为两大类，一是以公有链为代表的<code>无权限控制区块链</code>，第二是<code>有权限控制的区块链</code>，这个又包括了<code>私有链</code>(Private Blockchain,以Overstock为代表)和<code>联盟链</code>(Consortium Blockchain,以R3为代表)，相对于公有链来说，这些链一般都是没有电子货币，因为他们不需要像公有链那样要靠电子货币作为挖矿的奖励来激励参与，所以速度也是比较快的。</p>
<p>上一章都是讲的抽象的概括，下面我们就深入讲一些具体的东西，这样以便于大家有一个形象的概念，方便理解。我们这一章主要讲讲公有链，以方便讲解以及大家去继续研究，尝试，这里选择在公有链领域社区最为活跃以太坊（Ethereum），对于中国用户来说，其于2016年9月19号刚刚在中国上海举办了DevCon 2区块链峰会，很多人可能有所印象。第一步，这个东西怎么读啊？其实这是新构造的一个单词，而非一个已有的英语单词，其读作[i’θi:’riəm]。接下来我们会一起过一下涉及的一些概念，后面我会介绍几个如何进行太坊开发的技术工具，以及两个比较好用的应用框架。</p>
<p>大家都知道，学习一个新技术最好的方式就是亲自动手试一把，几乎学习所有新编程语言上来都会写个<code>HelloWorld</code>并运行一把，在这一章最后一部分我会手把手的带领大家创建并运行一个智能合约。</p>
<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="Ethereum"><a href="#Ethereum" class="headerlink" title="Ethereum:"></a>Ethereum:</h2><p>Ethereum (<a href="https://www.ethereum.org" target="_blank" rel="noopener">官方链接</a>) ，是个区块链公有链解决方案，如果比特币的区块链称作区块链1.0的话，那Ethereum可以称为区块链2.0 。 其主要特色就是支持<code>可编程</code>的智能合约。这个开源的系统相当于计算机中的操作系统一样，其是一个平台，提供了API及接口，以供其上运行不同的程序共享使用。同时因为它本质上是<code>去中心化的区块链</code>，因此号称是零宕机，零审查，以及不会有欺诈与人为篡改。就像所有的公有链需要激励机制的“代币”一样，它除了底层的区块链外，还有自己的加密电子货币，Ether，即<code>以太币</code>，在国内有些人戏称为“姨太”。目前一个“姨太”大约11美元，实时的价格趋势可以参见 <a href="https://www.coingecko.com/en/price_charts/ethereum/usd" target="_blank" rel="noopener">这个交易所链接</a></p>
<p><img src="http://cloudsdocker.github.io/images/EtherUSD.png" alt></p>
<h2 id="智能合约"><a href="#智能合约" class="headerlink" title="智能合约"></a>智能合约</h2><p>智能合约 (<a href="https://en.wikipedia.org/wiki/Smart_contract" target="_blank" rel="noopener">解释链接</a> )，其实这个概念本身是远远早于区块链产生的（早在1994年就出现了）。智能合约，说白了就是自己写的一段代码放到区块链上，在这里可以添加自己需要的业务逻辑等，只是这段代码在创建后不像传统应用是部署到服务器上运行，而是放到区块链上，并且自动执行(其运行部署都会消耗Gas(气，也就是若干的以太币))。各个参与方不需要像以前需要一个或若干个中心节点/服务器，大家都各自在自己那里完全按照“合约”执行，中间没有人可以去篡改或者停止，此设计会大大提高flexibility(灵活性）以及互相不信任的问题。比如有一个智能合约定义的逻辑是：当A收到钱后，B就会收到货物，这些操作都是按照合约自动执行，中间不再会有违约或者被人为修改的风险。</p>
<p>这些智能合约是以DAPP (Decentralized  Application)的形式存在。智能合约是部署在区块链上，由于区块链的透明性，这些合约对任何人都是可见的，当然这个有利有弊。如果其有bug或者漏洞，就有可能被人抓住并利用，比如2016年6月的The DAO攻击，就造成相当于5千万美元的以太币丢失，这也直接导致了以太坊后面的一次更分叉，这块笔者后面会撰文详解。</p>
<h2 id="Web-3-0"><a href="#Web-3-0" class="headerlink" title="Web 3.0"></a>Web 3.0</h2><p>大家可能听说过web 1.0， 其是指之前传统的网页技术，比如HTML，传统的JavaScript,VBScript,CSS。而web 2.0 是使用所谓的DHMTL,HTML5, Ajax,等众多的JavaScript技术，来创作类似于桌面程序效果般的网页应用。Web 2.0这些技术有个问题，就是<code>过于依赖</code>中心化的服务器/第三方机构，比如除了其应该做的提供网页访问服务外，还有验证，用户行为记录分析等。 而这里提出的web 3.0是有如下几个特性，首先是<code>去中心化</code>，比如通用的后台端，使用Swarm与bzz来作为<code>内容寻址的存储系统</code>，基于区块链的<code>共识形成机制</code>，基于Whisper的异步消息机制等，这样具体的业务逻辑都会分发到每个客户端去执行，而非位于昂贵且易于出问题的少数中心节点。 </p>
<p>这是刚刚提到的架构图</p>
<p><img src="https://blog.ethereum.org/wp-content/uploads/2016/07/Screen-Shot-2016-07-08-at-5.37.32-PM.png" alt> </p>
<h2 id="Solidity"><a href="#Solidity" class="headerlink" title="Solidity"></a>Solidity</h2><p>上面说到的这些智能合约一般来说是使用一种特殊的编程语言来创建的，即Solidity，这个语言是以太坊提出并创造的，面向对象的DSL特定领域编程语言(Domain Specific Language),它是以太坊支持的4种语言（另外三个是Serpent, LLL 和 Mutan），只不过其是最流行的一个语言。从技术上来讲，solidify源代码会编译成字节码，然后运行于EVM（Ethereum Virtual Machine）上面。如果你看到源代码后就会觉得其实Solidity是与JavaScript十分类似的语言，如下是一段代码：</p>
<p><img src="http://cloudsdocker.github.io/images/Solidity.png" alt></p>
<p>Gavin Wood (Solidity之父)说Solidity就是根据ECMAScript（是JavaScript,ActionScript等的标准祖先）所创建的，这样对于大多数开发人员来说学习曲线会很平滑。</p>
<h1 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h1><p>由于发展时间不是很长，目前市面上可用的开发环境IDE不太多。下面介绍下稍微比较成熟可靠的开发工具。</p>
<h2 id="Microsoft-Visual-Studio-Ethereum-插件"><a href="#Microsoft-Visual-Studio-Ethereum-插件" class="headerlink" title="Microsoft Visual Studio Ethereum 插件"></a>Microsoft Visual Studio Ethereum 插件</h2><p>没错，就是那个市面上已经非常常见的visual studio，也就是dot net的开发工具，不是一个全新的开发工具。此开发集成环境只需要安装solidify插件即可。 这个也从侧面可以看到微软对于以太坊以及区块链的野心。</p>
<p>安装此插件后在微软的Visual Studio后就可以在新建项目时的模板里看到这个Solidity 选项：</p>
<p><img src="http://cloudsdocker.github.io/images/VisualStudio-Overview.png" alt></p>
<p>当选择此模板后，visual studio他会自动构造出一个应用的基本文件结构。这样你可以省去一些每次开发一个智能合约都要重复的工作。你就可以集中时间精力到真正业务代码上。</p>
<p>如下就是这个IDE自动生成的代码</p>
<p><img src="http://cloudsdocker.github.io/images/VisualStudio-Outline.png" alt></p>
<h2 id="Ethereum-Studio"><a href="#Ethereum-Studio" class="headerlink" title="Ethereum Studio"></a>Ethereum Studio</h2><p>除了背靠微软这个大旗的visual studio集成开发环境外，还有一个方便大家使用的免费的IDE。这个是基于Cloud9平台的一个在线IDE，其完全运行于浏览器中，不用安装，可以用于任何的操作系统。如下就是这个在线集成开发环境的样子。这个还是比较推荐的开发环境：</p>
<p><img src="http://cloudsdocker.github.io/images/Cloud9.png" alt></p>
<h1 id="智能合约应用开发框架"><a href="#智能合约应用开发框架" class="headerlink" title="智能合约应用开发框架"></a>智能合约应用开发框架</h1><p>目前比较常用的智能合约构架有如下几个，都是开源并且免费的。这里我们来手把手的创建并运行一个智能合约，来体会一下。</p>
<h2 id="Embark"><a href="#Embark" class="headerlink" title="Embark"></a>Embark</h2><p>首先推荐的是这个叫做Embark的框架，他是一个让你可以轻松开发部署Dapps的平台，它支持的功能包括，在JS代码中部署智能合约，智能合约的热部署，可以集成grunt等构造工具。支持TDD（即测试驱动的开发）比如支持mocha等测试框架，可以方便的使用IPFS等去中心化的系统，支持增量，智能的部署修改过的智能合约等。这个工具是使用nodejs写的，因此你需要先安装nodejs的环境。这个平台会在你本地启动一个区块链服务模拟器，这样你就可以完全在本地开发测试，大大提高了工作效率。如下是启动后的截图。Embark的安装及源代码位于<a href="https://github.com/CloudsDocker/embark-framework" target="_blank" rel="noopener">Gitub这里</a></p>
<p>首先你需要来安装Embark以及区块链模拟器。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装Embark</span></span><br><span class="line">npm -g install embark-framework</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装区块链模拟器</span></span><br><span class="line">npm -g install ethersim</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动RPC模拟器</span></span><br><span class="line">embark simulator</span><br></pre></td></tr></table></figure>

<p>启动的模拟器是下面这个样子<br><img src="http://cloudsdocker.github.io/images/Ethersim.png" alt></p>
<p>然后我们去创建一个新的智能合约：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个叫做demo的智能合约基础结构</span></span><br><span class="line">embark demo</span><br><span class="line"><span class="comment"># 进入这个目录，下面含有配置文件 embark.yaml</span></span><br><span class="line"><span class="built_in">cd</span> embark_demo</span><br><span class="line"><span class="comment"># 启动应用</span></span><br><span class="line">embark run</span><br></pre></td></tr></table></figure>

<p>启动后,首先在后台看，Emark帮忙使用coffee script等构造并部署了合约。</p>
<p><img src="http://cloudsdocker.github.io/images/EmbarkStart.png" alt></p>
<p>你可以使用浏览器试验一下，比如打开<code>http://localhost:8000</code>，然后你可以试着输入个数值，去试试看看它是不是已经能够响应处理你的输入了：</p>
<p><img src="http://cloudsdocker.github.io/images/EmbarkApp.png" alt></p>
<p>是不是很神奇，短短两三分钟，已经从零开始构造出一个可以运行的以太坊DAPP<br>，并运行于区块链之上。 接下来我们介绍另外一个框架选择方案。</p>
<h2 id="Truffle"><a href="#Truffle" class="headerlink" title="Truffle"></a>Truffle</h2><p>Truffle,是跟前面提到的 Ethereum Studio 同一个公司（ConsenSys）开发的一个框架， 这个跟前面的embark类似，也是可以提供一个智能合约的开发测试平台,他的一个特色就是它可以集成nodejs里面强大的测试功能，比如Mocha, Chai等等. 像Embark一样，你需要另外安装运行其他软件，来启动以太坊客户端模拟器，最常用的是EthereumJS TestRPC  <a href="https://github.com/ethereumjs/testrpc" target="_blank" rel="noopener">Github link</a>, 它会在内存中启动一个Ethereum的客户端， 这样可以快速测试你开发的应用。</p>
<p>因为这个也是使用nodejs创建的应用，因此使用如下命令来安装此程序，安装好了启动此应用</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装以太坊模拟器</span></span><br><span class="line">npm install -g ethereumjs-testrpc</span><br><span class="line"><span class="comment"># 启动模拟器</span></span><br><span class="line">testrpc</span><br></pre></td></tr></table></figure>

<p>启动后是这样子的<br><img src="http://cloudsdocker.github.io/images/Testrpc.png" alt></p>
<p>模拟器启动好了，接下来执行下面的命令来初始化truffle应用。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir firstApp</span><br><span class="line"><span class="built_in">cd</span> firstApp</span><br><span class="line">truffle init</span><br></pre></td></tr></table></figure>

<p>上面最后一个命令就会自动帮你构造好的程序框架，包括一些最基本的JavaScript文件，几个智能合约源代码，主应用程序的HTML代码及配套的CSS等文件 。如下是这个基本框架：<br><img src="http://cloudsdocker.github.io/images/Truffle_Window.png" alt></p>
<p>接下来你可以添加自己的代码到<code>contracts</code>目录下的智能合约文件，也可以什么都不动，因为truffle已经自动生成了最基本的框架。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#这个命令会把智能合约源代码编译成字节码</span></span><br><span class="line">truffle compile</span><br></pre></td></tr></table></figure>

<p>编译好的代码需要部署到区块链上才可以执行，在truffle中这个工作是由<code>migrates</code>目录下定义的migrate作业执行的，我们去修改文件<code>2_deploy_contracts.js</code>为如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">deployer</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// deployer.deploy(ConvertLib);</span></span><br><span class="line">  <span class="comment">// deployer.autolink();</span></span><br><span class="line">  <span class="comment">// deployer.deploy(MetaCoin);</span></span><br><span class="line">  deployer.deploy(HelloEthereum);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>然后执行如下命令去执行代码部署，它除了把你的智能合约发布到区块链之外，还会做一些相关工作，比如link用到的library等。deployer可以使用<code>promise</code>的方式 (e.g. .then(function(xx)))来执行其他额外的工作等，比如创建一个其他的合约并调用，等。这个便于你来灵活的扩展应用。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">truffle migrate</span><br><span class="line">truffle build</span><br></pre></td></tr></table></figure>

<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>好了，至此我们已经了解了什么是以太坊已经其上运行的智能合约，DAPP等概念。后面又介绍了开发智能合约的工具已经可复用的框架，最后又手把手亲自做了一个智能合约。这样大家应该对区块链以及以太坊等公有链有了一个形象具体的感觉了吧。如果这里有什么问题或者建议，欢迎通过下面的联系方式与我沟通。</p>
<h1 id="Referece"><a href="#Referece" class="headerlink" title="Referece"></a>Referece</h1><ul>
<li><a href="https://solidity.readthedocs.io/en/develop/introduction-to-smart-contracts.html" target="_blank" rel="noopener">Introduction to Smart Contracts</a></li>
<li><a href="https://solidity.readthedocs.io/en/develop/installing-solidity.html" target="_blank" rel="noopener">Installing Solidity</a></li>
<li><a href="https://blog.ethereum.org/2016/07/12/build-server-less-applications-mist/" target="_blank" rel="noopener">以太坊官方教程</a></li>
<li><a href="http://swarm-gateways.net/bzz:/swarm/" target="_blank" rel="noopener">Swarm</a></li>
<li><a href="http://truffle.readthedocs.io/en/latest/" target="_blank" rel="noopener">Truffle Official Doc</a></li>
</ul>
<h2 id="联系我："><a href="#联系我：" class="headerlink" title="联系我："></a>联系我：</h2><ul>
<li><a href="mailto:phray.zhang@gmail.com" target="_blank" rel="noopener">phray.zhang@gmail.com</a> (email/邮件，whatsapp, linkedin)</li>
<li>helloworld_2000 (wechat/微信)</li>
<li><a href="https://github.com/CloudsDocker/" target="_blank" rel="noopener">github</a></li>
<li>[简书 jianshu]（<a href="http://www.jianshu.com/users/a9e7b971aafc）" target="_blank" rel="noopener">http://www.jianshu.com/users/a9e7b971aafc）</a></li>
<li>微信公众号：vibex</li>
<li><a href="http://weibo.com/cloudsdocker" target="_blank" rel="noopener">webo/微博</a>: cloudsdocker</li>
</ul>
]]></content>
      <tags>
        <tag>MyBlog</tag>
        <tag>blockchain</tag>
        <tag>ethereum</tag>
      </tags>
  </entry>
  <entry>
    <title>Head First Blockchina 3</title>
    <url>/2016-10-19-head-first-blockchian-3/</url>
    <content><![CDATA[<blockquote>
<p>Hyperledger Fabric for Mortals</p>
</blockquote>
<p>HyperLedger, from Arvind Krishna, Director of IBM research lab, meant to cross borders. e.g. for credit ledger, the importer and exporter in China need to make preparations few months beforehand, this is similiar to Marco Polo went to China 300 years ago.</p>
<p>Another usage in stock market is stock loan, by using blockchain, we are going to know whose the stock came from. And the borrowers need to know who can borrow, and I need to prepare collaterials, need to check whether it comply with the processes, when I pay it back, etc. there are lots of things. right now they are handled by people manually, so going forward, if I have some stocks and I want to borrow it to earn some money, those can be programmed in blockchain. they’ll be processed by machines automatically.  this will help to show there are no inside tradings, etc. </p>
<p>but initially as blockchian are annoymous, we are not sure whthere there are any money laundering, regulators may have concerns. So we need permisisoned blockchains. we need to one identity put aside of the transactions, so if reuiqred, can be recorded and checked, e.g. whether this is dealing with corrupted governments, etc. in addtion, it’s not requried that only one player or government to provide identity, there are many entities can provide identity service, but off couse need to follow some standards agreed.</p>
<p>JPMorgan Chase &amp; Co has announced its second entrant into the blockchain fray, this time utilizing the smart contract enabled ethereum blockchain in creating a system called Quorum.</p>
<p>前面第一章讲过了基本概念，可能有此抽象。接下来我们来看一些目前已经存在的真实项目和案例，好有一些形象的理解，以便为后面深入一些概念准备。</p>
<ol>
<li>JPMorgan 的 Juno</li>
<li>Ripple 全球化交割网络</li>
<li>R3 DEV</li>
<li>以态坊</li>
<li>万象Lab</li>
</ol>
<p>All of the advantages derived from basic blockchain technology can be boiled down to only two benefits; corruption resistance and redundancy.</p>
<p>All of the advantages derived from basic blockchain technology can be boiled down to only two benefits; corruption resistance and redundancy.</p>
<p>The crux of the issue comes down to whether or not private blockchains can ever be made secure enough to use for large amounts of value. No hacker is going to bother to attack your blockchain if it’s only being used for bingo night at a retirement home. However, the moment the world finds out that your blockchain has millions of dollars worth of payments flowing across it, you’ve basically just launched the latest hackathon, complete with a multi-million dollar, winner-take-all grand prize.</p>
<p>For instance, a public blockchain is a transparency engine. In Vitalik Buterin’s blog post ‘On Public and Private Blockchains’ ‘On Public and Private Blockchains’ written last August, he pointed out that public blockchains “protect the users of an application from the developers, establishing that there are certain things that even the developers of an application have no authority to do.” A good example of this is a user of a social network or some other membership site where the owner changing </p>
<p><a href="http://www.youtube.com/watch?v=810aKcfM__Q" target="_blank" rel="noopener">http://www.youtube.com/watch?v=810aKcfM__Q</a></p>
<p>The main takeaway is that permissioned blockchains create an environment where malware has an advantage,so security problems are constant and sometimes completely overcome your network.</p>
<p>First of all, the transaction speed of a privately-run blockchain can be faster than any other blockchain solution, approaching even the speeds of a normal database that isn’t a blockchain. This is because there are few nodes all with high trust levels. No need for every node to verify a transaction, in fact, they’re all mostly trusted so there is no need to do all of the meticulous work.</p>
<p>Complete agreement between nodes isn’t required, so fewer nodes need to do the work for any one transaction. Lastly, and perhaps most importantly in the current environment of banks embracing private blockchains so readily, choosing a private blockchain can help protect their underlying product from disruption.</p>
<p>Lastly, there is the desktop route, deploying a private blockchain on your desktop computer, even in a windows environment, with Multichain. It allows rapid design, deployment and operation of private blockchains to your custom specification.</p>
<p><a href="http://r3members.com/" target="_blank" rel="noopener">http://r3members.com/</a></p>
<p>like unique keys and check constraints cannot protect a database against malicious modifications. The bottom line is this:<br>We need a whole bunch of new stuff for shared write databases to work, and it just so happens that blockchains provide them.</p>
<p>Some key elements include regular peer-to-peer techniques, grouping transactions into blocks, one-way cryptographic hash functions, a multi-party consensus algorithm, Some key elements include regular peer-to-peer techniques, grouping transactions into blocks, one-way cryptographic hash functions, a multi-party consensus algorithm,</p>
<p>These types of rules can be expressed as bitcoin-style transaction constraints or Ethereum-style enforced stored procedures (“smart contracts”), each of which has advantages and disadvantages.</p>
<p>One key difference is that private blockchains don’t need proof of work mining,since blocks are created by a closed set of identified participants.</p>
<p>First, fear of the loss of raw power they would sustain if they went with public blockchains. Second, the fear of being supplanted by a new rising, bitcoin-centric financial industry. In fact, they would prefer that blockchain technology had never been invented.    </p>
<p>区块链都足以产生影响和改变金融业的力量。这是由于区块链具有以下特点：（1）去中心化：区块链技术不依赖额外的第三方管理机构或硬件设施，没有中心管制，除了自成一体的区块链本身，通过分布式核算和存储，各个节点实现了信息自我验证、传递和管理。（2）开放性：区块链技术基础是开源的，除了交易各方的私有信息被加密外，区块链的数据对所有人开放，任何人都可以通过公开的接口查询区块链数据和开发相关应用，因此整个系统信息高度透明。（3）独立性：基于协商一致的规范和协议（类似比特币采用的哈希算法等各种数学算法），整个区块链系统不依赖其他第三方，所有节点能够在系统内自动安全地验证、交换数据，不需要任何人为的干预。（4）安全性：只要不能掌控全部数据节点的51%，就无法肆意操控修改网络数据，这是区块链本身变得相对安全，避免了主观人为的数据变更。（5）匿名 区块链都足以产生影响和改变金融业的力量。这是由于区块链具有以下特点：（1）去中心化：区块链技术不依赖额外的第三方管理机构或硬件设施，没有中心管制，除了自成一体的区块链本身，通过分布式核算和存储，各个节点实现了信息自我验证、传递和管理。（2）开放性：区块链技术基础是开源的，除了交易各方的私有信息被加密外，区块链的数据对所有人开放，任何人都可以通过公开的接口查询区块链数据和开发相关应用，因此整个系统信息高度透明。（3）独立性：基于协商一致的规范和协议（类似比特币采用的哈希算法等各种数学算法），整个区块链系统不依赖其他第三方，所有节点能够在系统内自动安全地验证、交换数据，不需要任何人为的干预。（4）安全性：只要不能掌控全部数据节点的51%，就无法肆意操控修改网络数据，这是区块链本身变得相对安全，避免了主观人为的数据变更。（5）匿名.  正是这些优势特点，决定区块链技术能够提高系统的追责性，降低系统的信任风险，对优化金融机构业务流程、提高金融机构的竞争力具有相当重要的意义；通过使用区块链技术，金融信息和金融价值能够得到更加严格的保护，能够实现更加高效、更低成本的流动，从而实现价值和信息的共享。</p>
<p>区块链技术可通过程序化记录、存储、传递、核实、分析信息数据，从而形成信用，可以大量省去人力成本、中介成本，信用记录完整、难以造假，同时摧毁某些节点对系统没有影响。目前最大区块链比特币链存在费用增加、容量限制、确认时间变长、能耗走高的缺点。但例如Ripple、以太坊等另类区块链，以及公共、私有、联盟链等多种形式的涌现将区块链在金融领域造成颠覆式创新变成可能。</p>
<p><a href="https://ripple.com/" target="_blank" rel="noopener">https://ripple.com/</a></p>
<p>只要诚实的节点所控制的计算能力的总和，大于有合作关系的(cooperating)攻击者的计算能力的总和，该系统就是安全的</p>
<p>Retail Giant Overstock to Issue its Own Stock on Blockchain Platform    </p>
<h1 id="Referece"><a href="#Referece" class="headerlink" title="Referece"></a>Referece</h1><ul>
<li><a href="https://docs.google.com/document/d/1Z4M_qwILLRehPbVRUsJ3OF8Iir-gqS-ZYe7W-LE9gnE/pub?cm_mc_uid=46896667284114692531747&cm_mc_sid_50200000=1477673527" target="_blank" rel="noopener">Hyperledger Whitepaper</a></li>
<li><a href="https://console.ng.bluemix.net/docs/services/blockchain/ibmblockchain_overview.html" target="_blank" rel="noopener">About blockchain</a></li>
<li><a href="https://developer.ibm.com/courses/all-courses/blockchain-for-developers/" target="_blank" rel="noopener">IBM Blockchain for developers</a></li>
<li><a href="https://console.ng.bluemix.net/docs/services/blockchain/index.html" target="_blank" rel="noopener">Getting started with IBM Blockchain</a></li>
<li><a href="https://www.ibm.com/developerworks/cloud/library/cl-ibm-blockchain-101-quick-start-guide-for-developers-bluemix-trs/index.html" target="_blank" rel="noopener">IBM Blockchain 101: Quick-start guide for developers</a></li>
</ul>
]]></content>
      <tags>
        <tag>blockchain</tag>
        <tag>hyperledger</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Scraphy</title>
    <url>/2016-11-04-Python-Scrapy/</url>
    <content><![CDATA[<h1 id="Python-Scraphy"><a href="#Python-Scraphy" class="headerlink" title="Python Scraphy"></a>Python Scraphy</h1><p>‘<a href="https://www.seek.com.au/jobs-in-information-communication-technology?highpay=True&amp;salaryrange=150000-999999&amp;salarytype=annual&#39;" target="_blank" rel="noopener">https://www.seek.com.au/jobs-in-information-communication-technology?highpay=True&amp;salaryrange=150000-999999&amp;salarytype=annual&#39;</a></p>
<p>scrapy shell httxxxx<br>scrapy extrac </p>
<blockquote>
<blockquote>
<blockquote>
<p>response.css(‘title::text’).re(r’Quotes.*’)<br>[‘Quotes to Scrape’]</p>
</blockquote>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>response.css(‘title::text’)[0].extract()<br>‘Quotes to Scrape’</p>
</blockquote>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>response.xpath(‘//title’)</p>
</blockquote>
</blockquote>
</blockquote>
<p>view(response)</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://doc.scrapy.org/en/latest/intro/tutorial.html" target="_blank" rel="noopener">https://doc.scrapy.org/en/latest/intro/tutorial.html</a></li>
<li></li>
</ul>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>scraphy</tag>
      </tags>
  </entry>
  <entry>
    <title>Simpler chronicle of CI(Continuous Integration) “乱弹系列”之持续集成工具</title>
    <url>/2016-10-26-Continuous-Integretaion-Simpler-Chronicle/</url>
    <content><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>有句话说<code>有人的地方就有江湖</code>，同样，有江湖的地方就有恩怨。在软件行业历史长河（虽然相对于其他行业来说，软件行业的历史实在太短了，但是确是充满了智慧的碰撞也是十分的精彩）中有一些恩怨情愁，分分合合的小故事，比如类似的有，从一套代码发展出来后面由于合同到期就分道扬镳，然后各自发展成独门产品的Sybase DB和微软的SQL Server；另外一个例子是，当时JBPM的两个主要开发的小伙伴离开当时的RedHat，在JBPM基础上自立门户新创建的Java工作流管理软件Activiti，等等。在持续集成工具龙头老大这个宝座，也曾经发生过合作合并，吵架分家，再对着干的事情，今天分享一下这前前后后有趣的故事。</p>
<h1 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h1><p>首先，防止<strong><code>先入为主</code></strong>,以为大家都知道这个那个的。先普及下相关背景知识，如果已经了解的同学可以跳过。目前在软件工程领域已经火了好几年的<code>DevOps</code>领域，核心的模块就是<code>CI</code>与’CD’，即Continuous Integration与Continuous Deployment,也就是持续集成与持续部署，这个对于处于<code>敏捷</code>开发环境下尤其是互联网等需要高速迭代是个核心的功能，可以说没有CI，就不可能达到像Google或者Facebook这些一天有多个release的情况。</p>
<h1 id="CI"><a href="#CI" class="headerlink" title="CI"></a>CI</h1><p>CI(Continuous Integration) 持续集成起源于 XP(极限编程)与 TDD (Test Driven Develop)也就是<strong>以测试驱动</strong>的开发模式，是防止出现所谓的’集成地狱’,即防止程序员在正常编码工作中，需要写新的业务逻辑，添加新的代码，但是同时也新引入了bug。CI会持续的（重复的）进行一些小的工作，比如不断的跑测试用例，去扫描代码等工作。以减轻或者很大程度上避免这个个新引入的bug对软件交付质量引起的负面影响。目前，市场上有很多的CI解决方案及工具，常用的如下几个，</p>
<p><img src="http://cloudsdocker.github.io/images/travis-ci.jpg" alt><br><img src="http://cloudsdocker.github.io/images/Jenkins-Logo.png" alt><br><img src="http://cloudsdocker.github.io/images/Hudson-Logo.jpg" alt></p>
<h1 id="CI-的进化史"><a href="#CI-的进化史" class="headerlink" title="CI 的进化史"></a>CI 的进化史</h1><p>世界上本来没有CI,用的人多了也就成就了CI。本来软件工程里是没有这个概念的。最开始，就像下图中描述的帝国时代里，整个社会节奏平稳而缓慢，每个程序员自己做自己的开发，然后各自把自己的工作上次（提交），整个团队把代码放在一起，然后整个人过来，启动make/build，后面有个人去把编译好的代码放到测试机器上，每个程序员自己或者单独的测试团队去测试程序，如果没有问题，另外的人去发布到生产环境上。这些都是或多或少由人手工去做的。</p>
<p><img src="http://cloudsdocker.github.io/images/newcheats.gif" alt></p>
<p>但是就像很多人类的发明就是为了人类”偷懒”一样，CI慢慢在一些想偷懒的牛人脑子里形成。这其中就有Kent Beck （多说一句，这个现在工作于Facebook的牛人，还发明创造了很多到现在还在流行的东西，比如Agile敏捷开发，以JUnit为代码的xUnit测试理念，TDD测试驱动开发等等），在上个世纪最后几年，Kent Beck创造了XP（注意这个不是Bill的那个XP操作系统），是eXtreme Programming，即极限编程。虽然现在看起来极限编程有很多很诡异不太现实的方式，比如两个程序员坐在一起，使用一台电脑一起写一段程序等天马行空的想法。但是其中一个理念就是“持续集成”（CI)。以此理念，后面出现了使用各种语言写的CI的工具，其中的老大是CruiseControl。这个就像是上图中那个跑车一样，在当时整个缓慢的大环境下其提升工作效率的效果十分的吸眼。</p>
<p><img src="http://cloudsdocker.github.io/images/kohsuke-kawaguchi_2.jpg" alt></p>
<p>到了2005年，当时就职于Sun(没错，就是创造了Java的那家公司)的一个叫川口浩介（Kohsuke Kawaguchi）的日本人，就是上图这位“霓虹金”，敢于冒险，重新“发明轮子”，不顾如日中天的CruiseControl，设计并开发了一个新的持续集成的软件，起名叫做Hudson。它提供了很多强大的功能，比如提供插件机制，这样就使其几乎集成了市面上所有的源代码管理工具，比如CVS, Subversion, Git, Perforce等。除此之外，它还提供了界面的扩展能力，另外还支持基于Apache Ant 和 Apache Maven的项目，除了xNix,还支持Windows环境等一众强大功能。听起来这么牛逼的工具，很快，在大约2007年的时候Hudson已经超越CruiseControl。然后在2008年5月的JavaOne大会上，Hudson获得了开发解决方案类的Duke’s Choice奖项。从此，小弟翻身做大哥，Hudson成为CI的代名词。其主要开发者 Kohsuke Kawaguchi 还获得了Google-O’Reilly Open Source Award。他后来也不用自己苦逼的写代码了，只要到处受邀去演讲做是如何受什么启发创造并发明了这么好的工具，造福大批程序员。再后来他还离职创立了公司CloudBees，出任CEO，迎娶白富美，走上人生新巅峰。（也难怪上图中他笑的如此开心）</p>
<p>一切看起来都是那么美好。但是，天有不测风云，在2009年6月，Oracle收购Sun，所有人都蒙逼了，是不是写反了？一个传统数据库的公司收购了在Java及开源老大的Sun？！！这个消息公布之后，两个公司内部各个产品及项目就被整合，调整，Hudson也不例外。这也就算了，反正谁给钱不是干活哪，但是在2010年9月，Oracle竟然暗戳啜的把Hudson变成了注册商标。2010年11月，Hudson社区的核心开发人员发现了这个事情，他们觉得这对于一个一直标榜自己是开源CI领域“诚实可靠小郎君”的Hudson来说是个玷污。双方进行了会谈，过程不太友好，然后就不出意料的谈崩了。2011年圣诞节过后，几个秃顶的大叔觉得不要再跟Oracle的律师在这里瞎扯淡了，他们决定自立门户，自己起个新的名字叫Jenkins。然后凑钱注册网址，买服务器，列出下面的清单，统统改名，</p>
<ul>
<li>hudson-labs.org -&gt; jenkins-ci.org</li>
<li>@hudsonci -&gt; @jenkinsci</li>
<li><a href="http://github.com/hudson" target="_blank" rel="noopener">http://github.com/hudson</a> -&gt; <a href="http://github.com/jenkinsci" target="_blank" rel="noopener">http://github.com/jenkinsci</a></li>
<li>hudson-dev -&gt; jenkins-dev</li>
<li>hudson-users -&gt; jenkins-users</li>
<li>hudson-commits -&gt; jenkins-commits</li>
<li>hudson-issues -&gt; jenkins-issues</li>
</ul>
<p>然后把代码fork出一份来（这里好笑的是Hudson与Jenkins都声称对方是自己这里的子分叉，都跟孩子斗气似的），即便分出来了，但是绝大部分还是基于之前的核心代码，所以你可以通过下图看到Hudson与Jenkins的界面都十分类似。</p>
<h2 id="Jenkins的界面"><a href="#Jenkins的界面" class="headerlink" title="Jenkins的界面"></a>Jenkins的界面</h2><p><img src="http://cloudsdocker.github.io/images/jenkins_jobs.png" alt></p>
<h2 id="Hudson的界面"><a href="#Hudson的界面" class="headerlink" title="Hudson的界面"></a>Hudson的界面</h2><p><img src="http://cloudsdocker.github.io/images/hudson_gui.jpg" alt></p>
<p>但是有一个值得注意的地方就是两个系统的logo，其中Hudson是一个高傲的老头子，而Jenkins是一个谦卑为你服务的老头子。</p>
<p><img src="http://cloudsdocker.github.io/images/Jenkins-Logo.png" alt><br><img src="http://cloudsdocker.github.io/images/Hudson-Logo.jpg" alt></p>
<p>分家之后，Hudson有Oracle和Sonatype’s corporate的支持和Hudson的注册商标，而Jenkins拥有的是大多数的核心开发者，社区，和后续更多的commit。比如下图是分家之后两个软件的对比。两个软件的活跃程度十分明显，Jenkins遥遥领先。</p>
<p><img src="http://cloudsdocker.github.io/images/hudson_vs_jenkins_submit.png" alt></p>
<h1 id="CI持续集成的工作原理"><a href="#CI持续集成的工作原理" class="headerlink" title="CI持续集成的工作原理"></a>CI持续集成的工作原理</h1><p>上面讲完了主流CI工具的江湖故事后，我们来看下这类工具本身的技术情况。其实这类工具的工作原理大同小异，比如下图，一个典型的用例是</p>
<ul>
<li>程序员在本地开发完成后把代码提交到VCS (Version Control System)比如SVN, Git, Perforce, RTS等</li>
<li>CI工具发现有新的check in 自动启动去抓取最新的代码。当然这里有很多不同的配置，比如除了主动监视VSC外，还可以使用CRON等配置按时启动，比如每隔一个小时启动一次，或者每两次check in 启动一次，等等很多的策略。</li>
<li>CI可以配置使用集群的编译机器，去选择最合适的机器（有不同的策略，比如找到最清闲或者离代码文件距离最近的机器等）来编译源代码</li>
<li>根据不同的配置，CI有可能会调用配置好的测试用例，如果测试失败，根据策略（比如少于几个错误就先忽略）要么通知用户，要么继续跑测试用例</li>
<li>根据配置，CI可能会去执行其他操作，比如静态源代码分析，如代码有没有不符合公司安全要求，把连接密码写在代码里面等等，还有比如生成文档，测试报告，等。</li>
<li>如果所有定义好的jobs跑完，去生成最终报告并送给用户</li>
<li>生成一些分析报表，比如最近成功率，最近哪些程序员造成的错误最多等等。</li>
<li>一些高级的CI,比如Jenkinsg还支持自定义扩展，也会去按配置去执行。</li>
</ul>
<p><img src="http://cloudsdocker.github.io/images/jenkins-plugin-diagram-saci.png" alt="jenkins-plugin-diagram-saci"></p>
<p>这其中如果任何一步出现了错误，比如某个程序员在提交代码时忘记同时提交一个新写的类，造成失败，首先在CI（比如Jekins，或者Travis）上会显示错误 （比如下图），同时还可以配置CI工具会发出邮件提醒，甚至可以根据提交信息智能的显示出来是哪个程序员搞砸的。</p>
<p><img src="http://cloudsdocker.github.io/images/0082OS_02_14.png" alt></p>
<p>总而言之，这个自动化的过程就像是一个可以配置的流水线，在其上可以添加任意个不同类型的节点，在每个节点可以通过灵活的配置来设置需要完成的工作，还提供了统计及报表，邮件通知等功能，方便团队高效的管理软件的持续集成。</p>
<h1 id="发展及未来"><a href="#发展及未来" class="headerlink" title="发展及未来"></a>发展及未来</h1><p>目前的CI也在处于高速发展期，比如最新的Jenkins 2 可以支持使用Groovy编写插件，pipeline等。同时也出现了像是开源的<strong>Travis</strong>之类的持续集成service，即你不用自己去安装调试Jenkins，直接写个YAML文件 （.travis.yaml）放到云上，自动就可以使用其提供的服务了。</p>
<p>另外，持续集成也在跟其他新兴技术相结合使用，比如结合云计算及分布式处理，可以提高CI的运行速度和容错能力，比如下图中的各个服务器可以分别使用cluster(集群)而非一台机器，这样就可以避免所谓的SPOF (Single Point of Failure)单点故障。</p>
<p><img src="http://cloudsdocker.github.io/images/ci-architecture-pantheon.png" alt></p>
<p>如果有什么问题或者想要跟我讨论，请通过如下方式找到我。</p>
<h2 id="联系我："><a href="#联系我：" class="headerlink" title="联系我："></a>联系我：</h2><ul>
<li><a href="mailto:phray.zhang@gmail.com" target="_blank" rel="noopener">phray.zhang@gmail.com</a> (email/邮件，whatsapp, linkedin)</li>
<li>helloworld_2000 (wechat/微信)</li>
<li><a href="https://github.com/CloudsDocker/" target="_blank" rel="noopener">github</a></li>
<li>[简书 jianshu]（<a href="http://www.jianshu.com/users/a9e7b971aafc）" target="_blank" rel="noopener">http://www.jianshu.com/users/a9e7b971aafc）</a></li>
<li>微信公众号：vibex</li>
<li><a href="http://weibo.com/cloudsdocker" target="_blank" rel="noopener">webo/微博</a>: cloudsdocker</li>
</ul>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://en.wikipedia.org/wiki/Continuous_integration" target="_blank" rel="noopener">CI in wikipedia</a></li>
<li><a href="http://image.slidesharecdn.com/continuousintegration-100503045436-phpapp01/95/continuous-integration-system-6-728.jpg?cb=1272862514" target="_blank" rel="noopener">Slide share</a></li>
</ul>
]]></content>
      <tags>
        <tag>DevOps</tag>
        <tag>MyBlog</tag>
        <tag>CI</tag>
      </tags>
  </entry>
  <entry>
    <title>JSON lines</title>
    <url>/2016-11-05-JSON-Lines/</url>
    <content><![CDATA[<h1 id="JSON-lines"><a href="#JSON-lines" class="headerlink" title="JSON lines"></a>JSON lines</h1><p>The JSON Lines format is useful because it’s stream-like, you can easily append new records to it. It doesn’t have the same problem of JSON when you run twice. Also, as each record is a separate line, you can process big files without having to fit everything in memory, there are tools like JQ to help doing that at the command-line.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="http://jsonlines.org" target="_blank" rel="noopener">http://jsonlines.org</a></li>
<li><a href="https://en.wikipedia.org/wiki/JSON_Streaming" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/JSON_Streaming</a></li>
<li></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Eslastic Search</title>
    <url>/2016-11-12-elastic/</url>
    <content><![CDATA[<h1 id="Eslastic-Search"><a href="#Eslastic-Search" class="headerlink" title="Eslastic Search"></a>Eslastic Search</h1><p>`Elastic Search notes</p>
<h3 id="List-indices"><a href="#List-indices" class="headerlink" title="List indices"></a>List indices</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">http://localhost:9200/_cat/indices?v</span><br></pre></td></tr></table></figure>

<h3 id="pretty-print-JSON-message-if-any"><a href="#pretty-print-JSON-message-if-any" class="headerlink" title="pretty-print JSON message (if any)"></a>pretty-print JSON message (if any)</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -XPUT <span class="string">'localhost:9200/customer?pretty'</span></span><br></pre></td></tr></table></figure>

<p>如果有任何建议或者想法，请联系我。</p>
<h2 id="联系我："><a href="#联系我：" class="headerlink" title="联系我："></a>联系我：</h2><ul>
<li><a href="mailto:phray.zhang@gmail.com" target="_blank" rel="noopener">phray.zhang@gmail.com</a> (email/邮件，whatsapp, linkedin)</li>
<li>helloworld_2000 (wechat/微信)</li>
<li><a href="https://github.com/CloudsDocker/" target="_blank" rel="noopener">github</a></li>
<li>[简书 jianshu]（<a href="http://www.jianshu.com/users/a9e7b971aafc）" target="_blank" rel="noopener">http://www.jianshu.com/users/a9e7b971aafc）</a></li>
<li>微信公众号：vibex</li>
<li>微博: cloudsdocker</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Java new features</title>
    <url>/2016-12-01-Java-New-Features-Chronicle/</url>
    <content><![CDATA[<h1 id="JDK-Versions"><a href="#JDK-Versions" class="headerlink" title="JDK Versions"></a>JDK Versions</h1><ul>
<li>JDK 1.5 in 2005</li>
<li>JDK 1.6 in 2006</li>
<li>JDK 1.7 in 2011</li>
<li>JDK 1.8 in 2014<br>Sun之前风光无限，但是在2010年1月27号被Oracle收购。<br>在被Oracle收购后对外承诺要回到每2年一个realse的节奏。但是2014年就公布由于Java Security的问题delay一年</li>
</ul>
<h1 id="Java新功能一览"><a href="#Java新功能一览" class="headerlink" title="Java新功能一览"></a>Java新功能一览</h1><ul>
<li>Generics</li>
<li>Concurrent Framework</li>
<li>Numberic Literal</li>
<li>Lambda</li>
</ul>
<h1 id="JDK-New-release-vs-Stock-Price"><a href="#JDK-New-release-vs-Stock-Price" class="headerlink" title="JDK New release vs. Stock Price"></a>JDK New release vs. Stock Price</h1><p>最近在做一个Java项目的相关工作，发现很多程序员还在使用一些最基本的Java语言特性，其实可以理解为很多人入门Java要么在学校里要么通过某些书籍，而这些在国内的学习资料更新比较慢，很多都还是基于JDK1.4或者更老。其实Java这个语言一直在进步。下面我就以Java最近几个主版本引入的新功能来梳理一下这些“黑科技”</p>
<h2 id="Java-1-5"><a href="#Java-1-5" class="headerlink" title="Java 1.5"></a>Java 1.5</h2><p>这个版本个人认为在Java最近10年的历史中是一个最重要的升级。JDK1.5，内部版本号是Tiger，引入了一些颠覆性的功能，列在如下：<br>Generics<br>Conncurrecnt Framework，应该是继Collection Framework后又一个块头的“框架”了。</p>
<h2 id="Java-1-6"><a href="#Java-1-6" class="headerlink" title="Java 1.6"></a>Java 1.6</h2><p>所有上面提到的东西，包括此文章的markdown源代码，mindmap思维导图等等都可以在我的github上找到。联系我：</p>
<ul>
<li><a href="mailto:phray.zhang@gmail.com" target="_blank" rel="noopener">phray.zhang@gmail.com</a> (email/邮件，whatsapp, linkedin)</li>
<li>helloworld_2000 (wechat/微信)</li>
<li><a href="https://github.com/CloudsDocker/" target="_blank" rel="noopener">github</a></li>
</ul>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://en.wikipedia.org/wiki/Java_version_history" target="_blank" rel="noopener">JDK History</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>用10几行代码自己写个人脸识别程序</title>
    <url>/2016-11-22-Facial-Recognition/</url>
    <content><![CDATA[<h1 id="用10几行代码自己写个人脸识别程序"><a href="#用10几行代码自己写个人脸识别程序" class="headerlink" title="用10几行代码自己写个人脸识别程序"></a>用10几行代码自己写个人脸识别程序</h1><h2 id="CV-Computer-Vision"><a href="#CV-Computer-Vision" class="headerlink" title="CV (Computer Vision)"></a>CV (Computer Vision)</h2><p>最近在研究CV的一些开源库(OpenCV)，有一个体会就是在此领域，除了一些非常学术的<em>机器学习</em>, _深度学习_等概念外，其实还有一些很有趣的_现实的_应用场景。比如之前很流行的微软的 <a href="https://how-old.net" target="_blank" rel="noopener">https://how-old.net</a>, 你使用自己指定或者上传的照片进行面部识别_猜年龄_。 如下图所示：<br><img src="http://cloudsdocker.github.io/images/facial_howold.jpg" alt></p>
<p>细想一下这个很吸引眼球的程序，其实技术本身打散了就包括两大块，一是从图片中扫描并进行面部识别，二是对找到的人脸根据算法去猜个年龄。大家可以猜猜实现第一个功能需要多少核心代码量？其实不用<del>上万行</del>，在这里我就使用短短<strong>几行代码</strong>（去除空格换行什么的，有效代码只要10行）就实现一个_高大上_面部识别的功能。在此文容我细述一下具体实现代码以及我对机器识别图像领域技术的理解。</p>
<h3 id="面部识别-刷脸"><a href="#面部识别-刷脸" class="headerlink" title="面部识别,刷脸"></a>面部识别,刷脸</h3><p> _人脸识别_技术大家应该都不陌生，之前大家使用的数码相机，或者现在很多手机自带的相机都有人脸识别的功能。其效果就像是下图这样。近的看，_剁手节_刚刚过了没有多久 , 背后的马老板一直在力推的刷脸支付也是一个此领域的所谓“黑科技”。比如在德国汉诺威电子展上，马云用支付宝“刷脸”买了一套纪念邮票。人脸识别应用市场也从爆发。随后，各大互联网巨头也纷纷推出了刷脸相关的应用。</p>
<p><img src="http://cloudsdocker.github.io/images/iPhone-camera-face-recognition.jpg" alt></p>
<p>如果要加个定义，人脸识别又叫做人像识别、面部识别，是一种通过用摄像机或摄像头采集含有人脸的图像或视频流，并自动在图像中检测和跟踪人脸，进而对检测到的人脸进行脸部的一系列相关技术。</p>
<h2 id="我的十行代码程序"><a href="#我的十行代码程序" class="headerlink" title="我的十行代码程序"></a>我的十行代码程序</h2><p>OK，长话短说，先上 <em>干货</em> ，下面就是此程序的<em>带注释</em> 版本，完整的程序以及相关配套文件可以在 <a href="https://github.com/CloudsDocker/pyFacialRecognition" target="_blank" rel="noopener">这个github库</a> <a href="https://github.com/CloudsDocker/pyFacialRecognition" target="_blank" rel="noopener">https://github.com/CloudsDocker/pyFacialRecognition</a> 中找到，有兴趣可以<em>fork</em> 下来玩玩。下面是整个程序的代码样子，后面我会逐行去解释分析。</p>
<p><img src="http://cloudsdocker.github.io/images/facial_code_preview.png" alt></p>
<p>就这短短的十行代码代码？seriously？“有图有真相”，我们先来看下运行的效果：</p>
<h3 id="首先是原始的图片"><a href="#首先是原始的图片" class="headerlink" title="首先是原始的图片"></a>首先是原始的图片</h3><p><img src="http://cloudsdocker.github.io/images/facial_oriImage.jpg" alt></p>
<h3 id="运行程序后识别出面部并高亮显示的结果"><a href="#运行程序后识别出面部并高亮显示的结果" class="headerlink" title="运行程序后识别出面部并高亮显示的结果"></a>运行程序后识别出面部并高亮显示的结果</h3><p>请注意 <em>K歌二人组</em> 的脸上的红色框框，这就是上面十行代码的成果。<br><img src="http://cloudsdocker.github.io/images/facial_postProcessImage.png" alt></p>
<h2 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>因为此程序使用是的Python,因此你需要去安装Python。这里就不赘述了。除此之外，还需要安装 <a href="http://opencv.org/downloads.html" target="_blank" rel="noopener">OpenCV</a> (<a href="http://opencv.org/downloads.html)。" target="_blank" rel="noopener">http://opencv.org/downloads.html)。</a><br>多说一句,这个 OpenCV正如其名，是一个开源的机器识别的深度学习框架。这是Intel（英特尔）实验室里的一个俄罗斯团队创造的，目前在开源社区非常的活跃。</p>
<p>特别提一下，对于Mac的用户，推荐使用brew去安装 （下面第一条语句可能会执行报错，我当时也是搞了好久。如果遇到第一条命令不过可以通过文尾的方式联系作者）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">brew tap homebrew/science</span><br><span class="line">brew install opencv</span><br></pre></td></tr></table></figure>

<p>安装完成之后,在python的命令行中输入如下代码验证，如果没有报错就说明安装好了。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import cv2</span><br></pre></td></tr></table></figure>

<h3 id="程序代码“庖丁解牛”"><a href="#程序代码“庖丁解牛”" class="headerlink" title="程序代码“庖丁解牛”"></a>程序代码“庖丁解牛”</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> cv2,sys</span><br></pre></td></tr></table></figure>

<ul>
<li>由于这里注释及窗口标题中使用了中文，因此加上utf-8字符集的支持</li>
<li>引入Opencv库以及Python的sys内建库，用于解析输入的图片参数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">inputImageFile=sys.argv[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li>在运行程序时将需要测试的照片文件名作为一个参数传进来</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">faceClassifier=cv2.CascadeClassifier(<span class="string">'haarcascade_frontalface_default.xml'</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>加载OpenCV中自带预先培训好的人脸识别层级分类器 HAAR Casscade Classifier，这个会用来对我们输入的图片进行人脸判断。</li>
</ul>
<p>这里有几个在深度学习及机器图像识别领域中的几个概念，稍微分析一下，至于深入的知识，大家可以自行搜索或者联系作者。</p>
<h3 id="Classifer"><a href="#Classifer" class="headerlink" title="Classifer"></a>Classifer</h3><p>在机器深度学习领域，针对识别不同物体都有不同的classifier,比如有的classifier来识别洗车，还有识别飞机的classifier，有classifier来识别照片中的笑容，眼睛等等。而我们这个例子是需要去做人脸识别，因此需要一个面部识别的classifier。</p>
<h3 id="物体识别的原理"><a href="#物体识别的原理" class="headerlink" title="物体识别的原理"></a>物体识别的原理</h3><p>一般来说，比如想要机器学习着去识别“人脸”，就会使用大量的样本图片来事先培训，这些图片分为两大类，positive和negative的，也就是分为包“含有人脸”的图片和“不包含人脸”的图片，这样当使用程序去一张一张的分析这些图片，然后分析判断并对这些图片“分类” (classify),即合格的图片与不合格的图片，这也就其为什么叫做 <em>classifier</em> ， 这样学习过程中积累的”知识”，比如一些判断时的到底临界值多少才能判断是positive还是negative什么的，都会存储在一个个XML文件中，这样使用这些前人经验（这里我们使用了 <em>哈尔</em> 分类器）来对新的图片进行‘专家判断’分析，是否是人脸或者不是人脸。</p>
<h3 id="Cascade"><a href="#Cascade" class="headerlink" title="Cascade"></a>Cascade</h3><p>这里的 Cascade是 <em>层级分类器</em> 的意思。为什么要 <em>分层</em> 呢？刚才提到在进行机器分析照片时，其实是对整个图片从上到下，从左到右，一个像素一个像素的分析，这些分析又会涉及很多的 <em>特征分析</em> ，比如对于人脸分析就包含识别眼睛，嘴巴等等，一般为了提高分析的准确度都需要有成千上万个特征，这样对于每个像素要进行成千上万的分析，对于整个图片都是百万甚至千万像素，这样总体的计算量会是个天文数字。但是，科学家很聪明，就想到分级的理念，即把这些特征分层，这样分层次去验证图片，如果前面层次的特征没有通过，对于这个图片就不用判断后面的特征了。这有点像是系统架构中的 <em>FF (Fail Fast)</em>,这样就提高了处理的速度与效率。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">objImage=cv2.imread(inputImageFile)</span><br></pre></td></tr></table></figure>

<ul>
<li>使用OpenCV库来加载我们传入的测试图片</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cvtImage=cv2.cvtColor(objImage,cv2.COLOR_BGR2GRAY)</span><br></pre></td></tr></table></figure>

<ul>
<li>首先将图片进行灰度化处理，以便于进行图片分析。这种方法在图像识别领域非常常见，比如在进行验证码的机器识别时就会先灰度化，去除不相关的背景噪音图像，然后再分析每个像素，以便抽取出真实的数据。不对针对此，你就看到非常多的验证码后面特意添加了很多的噪音点，线，就是为了防止这种程序来灰度化图片进行分析破解。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">foundFaces=faceClassifier.detectMultiScale(cvtImage,scaleFactor=<span class="number">1.3</span>,minNeighbors=<span class="number">9</span>,minSize=(<span class="number">50</span>,<span class="number">50</span>),flags = cv2.cv.CV_HAAR_SCALE_IMAGE)</span><br></pre></td></tr></table></figure>

<ul>
<li>执行detectMultiScale方法来识别物体，因为我们这里使用的是人脸的cascade classifier分类器，因此调用这个方法会来进行面部识别。后面这几个参数来设置进行识别时的配置，比如<ul>
<li>scaleFactor: 因为在拍照，尤其现在很多都是自拍，这样照片中有的人脸大一些因为离镜头近，而有些离镜头远就会小一些，因为这个参数用于设置这个因素，如果你在使用不同的照片时如果人脸远近不同，就可以修改此参数，请注意此参数必须要大于1.0</li>
<li>minNeighbors: 因为在识别物体时是使用一个移动的小窗口来逐步判断的，这个参数就是决定是不是确定找到物体之前需要判断多少个周边的物体</li>
<li>minSize：刚才提到识别物体时是合作小窗口来逐步判断的，这个参数就是设置这个小窗口的大小</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">" 在图片中找到了 &#123;&#125; 个人脸"</span>.format(len(foundFaces)))</span><br></pre></td></tr></table></figure>

<ul>
<li>显示出查找到多少张人脸，需要提到的识别物体的方法返回的一个找到的物体的位置信息的列表，因此使用 <em>len</em> 来打印出找到了多少物体。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (x,y,w,h) <span class="keyword">in</span> foundFaces:</span><br><span class="line">    cv2.rectangle(objImage,(x,y),(x+w,y+h),(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>),<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>遍历发现的“人脸”，需要说明的返回的是由4部分组成的位置数据，即这个“人脸”的横轴，纵轴坐标，宽度与高度。</li>
<li>然后使用 <em>OpenCV</em> 提供的方法在原始图片上画出个矩形。其中 <em>(0,0,255)</em> 是使用的颜色，这里使用的是R/G/B的颜色表示方法，比如 (0,0,0)表示黑色，(255,255,255)表示白色，有些网页编程经验的程序员应该不陌生。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cv2.imshow(<span class="string">u'面部识别的结果已经高度框出来了。按任意键退出'</span>.encode(<span class="string">'gb2312'</span>), objImage)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>接下来是使用 <em>opencv</em> 提供的imshow方法来显示这个图片，其中包括我们刚刚画的红色的识别的结果</li>
<li>最后一个语句是让用户按下键盘任意一个键来退出此图片显示窗口</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>好了，上面是这个程序的详细解释以及相关的知识的讲解。其实这个只是个_抛砖引玉_的作用，还用非常多的应用场景，比如程序解析网页上的图片验证码，雅虎前几个月开源的 <a href="https://github.com/yahoo/open_nsfw" target="_blank" rel="noopener">NSFW</a>, Not Suitable for Work (NSFW)，即判断那些不适合工作场所的图片，内容你懂的。 :-)</p>
<p>最后，再提一下，所有这些源代码及相关文件都开源在 <a href="https://github.com/CloudsDocker/pyFacialRecognition" target="_blank" rel="noopener">https://github.com/CloudsDocker/pyFacialRecognition</a> ，在fork并下载到本地后执行下面代码来测试运行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/CloudsDocker/pyFacialRecognition.git</span><br><span class="line"><span class="built_in">cd</span> pyFacialRecognition</span><br><span class="line">./run.sh</span><br></pre></td></tr></table></figure>

<p>如果有任何建议或者想法，请联系我。</p>
<h2 id="联系我："><a href="#联系我：" class="headerlink" title="联系我："></a>联系我：</h2><ul>
<li><a href="mailto:phray.zhang@gmail.com" target="_blank" rel="noopener">phray.zhang@gmail.com</a> (email/邮件，whatsapp, linkedin)</li>
<li>helloworld_2000 (wechat/微信)</li>
<li>微博: cloudsdocker</li>
<li><a href="https://github.com/CloudsDocker/" target="_blank" rel="noopener">github</a></li>
<li>[简书 jianshu]（<a href="http://www.jianshu.com/users/a9e7b971aafc）" target="_blank" rel="noopener">http://www.jianshu.com/users/a9e7b971aafc）</a></li>
<li>微信公众号：vibex</li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://docs.opencv.org/trunk/index.html" target="_blank" rel="noopener">OpenCV</a></li>
<li><a href="https://zh.wikipedia.org/wiki/哈尔特征" target="_blank" rel="noopener">HAAR 哈尔特征</a></li>
<li><a href="http://docs.opencv.org/trunk/d7/d8b/tutorial_py_face_detection.html" target="_blank" rel="noopener">Face Detection using Haar Cascades</a></li>
<li><a href="https://github.com/yahoo/open_nsfw" target="_blank" rel="noopener">NSFW</a></li>
</ul>
]]></content>
      <tags>
        <tag>MyBlog</tag>
        <tag>DeepLearning</tag>
        <tag>FacialRecognition</tag>
      </tags>
  </entry>
  <entry>
    <title>Random number in java</title>
    <url>/2016-12-09-HeadsFirst-RandomNumber-In-Java/</url>
    <content><![CDATA[<p>ThreadLocalRandom, SecureRandm, java.util.Random, java.math.Random</p>
<p>Instances of java.util.Random are threadsafe. However, the concurrent use of the same java.util.Random instance across threads may encounter contention and consequent poor performance. Consider instead using ThreadLocalRandom in multithreaded designs. </p>
<p>The Java Math library function Math.random() generates a double value in the range [0,1). Notice this range does not include the 1.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> rand = ThreadLocalRandom.current().nextInt(x,y);</span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="http://www.javaguru.co/2014/12/how-to-generate-range-of-random.html" target="_blank" rel="noopener">How to generate a range of random integers in Java</a></li>
<li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/Random.html" target="_blank" rel="noopener">Random JavaDoc</a></li>
<li><a href="http://docs.oracle.com/javase/8/docs/api/java/security/SecureRandom.html" target="_blank" rel="noopener">SecureRandom JavaDoc</a></li>
<li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadLocalRandom.html" target="_blank" rel="noopener">ThreadLocalRandom JavaDoc</a></li>
<li><a href="http://commons.apache.org/proper/commons-math/" target="_blank" rel="noopener">Apache Common Math</a></li>
<li><a href="https://en.wikipedia.org/wiki/Linear_congruential_generator" target="_blank" rel="noopener">LCG wikipedia</a></li>
<li><a href="http://www.programering.com/a/MDN1ETMwATM.html" target="_blank" rel="noopener">Blog about this topic</a></li>
<li><a href="http://www.importnew.com/12460.html" target="_blank" rel="noopener">ImportNew</a></li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>MyBlog</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache Tips</title>
    <url>/2016-12-24-Apache-Tips/</url>
    <content><![CDATA[<h1 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo su -</span><br><span class="line">apachectl start</span><br><span class="line">apachectl stop</span><br></pre></td></tr></table></figure>

<p>Open a browser to access <a href="http://localhost/" target="_blank" rel="noopener">http://localhost/</a></p>
]]></content>
      <tags>
        <tag>DevOps</tag>
        <tag>Apache</tag>
      </tags>
  </entry>
  <entry>
    <title>Angulary Misc</title>
    <url>/2016-12-12-Angular/</url>
    <content><![CDATA[<h1 id="Dependency-Injection"><a href="#Dependency-Injection" class="headerlink" title="Dependency Injection"></a>Dependency Injection</h1><p>Angular doesn’t automatically know how you want to create instances of your services or the injector to create your service. You must configure it by specifying providers for every service.</p>
<p>Providers tell the injector how to create the service. Without a provider, the injector would not know that it is responsible for injecting the service nor be able to create the service.</p>
<h1 id="What-is-difference-between-declarations-providers-and-import-in-NgModule"><a href="#What-is-difference-between-declarations-providers-and-import-in-NgModule" class="headerlink" title="What is difference between declarations, providers and import in NgModule"></a>What is difference between declarations, providers and import in NgModule</h1><ul>
<li>imports: is used to import supporting modules likes FormsModule, RouterModule, CommonModule, or any other custom-made feature module. makes the exported declarations of other modules available in the current module</li>
<li>declarations are to make directives (including components and pipes) from the current module available to other directives in the current module. Selectors of directives, components or pipes are only matched against the HTML if they are declared or imported. declaration is used to declare components, directives, pipes that belongs to the current module. Everything inside declarations knows each other. For example, if we have a component, say UsernameComponent, which display list of the usernames, and we also have a pipe, say toupperPipe, which transform string to uppercase letter string. Now If we want to show usernames in uppercase letters in our UsernameComponent, we can use the toupperPipe which we had created before but how UsernameComponent know that the toupperPipe exist and how we can access and use it, here comes the declarations, we can declare UsernameComponent and toupperPipe.</li>
<li>providers are to make services and values known to DI. They are added to the root scope and they are injected to other services or directives that have them as dependency.provider is used to inject the services required by components, directives, pipes in our module.</li>
</ul>
<h1 id="CLI-to-create-new-component"><a href="#CLI-to-create-new-component" class="headerlink" title="CLI to create new component"></a>CLI to create new component</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ng generate component components/xxx-table -m deposit.module.ts --spec</span><br><span class="line">ng generate component components/comp1 -m core.module.ts --spec</span><br><span class="line"><span class="built_in">Error</span>: Specified <span class="built_in">module</span> does not exist</span><br><span class="line">Specified <span class="built_in">module</span> does not exist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ ng generate component core/components/comp1 -m core/core.module --spec</span><br><span class="line"><span class="built_in">Error</span>: dryRunSink.commit(...).ignoreElements is not a <span class="function"><span class="keyword">function</span></span></span><br><span class="line"><span class="function"><span class="title">dryRunSink</span>.<span class="title">commit</span>(<span class="params">...</span>).<span class="title">ignoreElements</span> <span class="title">is</span> <span class="title">not</span> <span class="title">a</span> <span class="title">function</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">ng</span> <span class="title">generate</span> <span class="title">component</span> <span class="title">app</span>/<span class="title">core</span>/<span class="title">components</span>/<span class="title">comp1</span> -<span class="title">m</span> <span class="title">app</span>/<span class="title">core</span>/<span class="title">core</span>.<span class="title">module</span> --<span class="title">spec</span></span></span><br></pre></td></tr></table></figure>

<h1 id="Angular-JS-notes"><a href="#Angular-JS-notes" class="headerlink" title="Angular JS notes"></a>Angular JS notes</h1><p>AngularJS applications are built around a design pattern called Model-View-Controller (MVC), which places an emphasis on creating applications that are</p>
<ul>
<li>Extendable: It is easy to figure out how even a complex AngularJS app works once you understand the basics—and that means you can easily enhance applications to create new and useful features for your users.</li>
<li>Maintainable: AngularJS apps are easy to debug and fix, which means that long-term maintenance is simplified.</li>
<li>Testable: AngularJS has good support for unit and end-to-end testing, meaning that you can find and fix defects before your users do.</li>
<li>Standardized: AngularJS builds on the innate capabilities of the web browser without getting in your way, allowing you to create standards-compliant web apps that take advantage of the latest features (such as HTML5 APIs) and popular tools and frameworks.</li>
</ul>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>Hash Code Misc</title>
    <url>/2016-12-30-HashCode-Contract/</url>
    <content><![CDATA[<h1 id="contract-of-hashCode"><a href="#contract-of-hashCode" class="headerlink" title="contract of hashCode :"></a>contract of hashCode :</h1><ul>
<li>Whenever it is <strong>invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer</strong>, provided no information used in equals comparisons on the object is modified. This <em>integer need <strong>not</strong> remain consistent from one execution of an application to another execution of the <strong>same</strong> application</em>.</li>
<li>If two objects <strong>are equal</strong> according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the <strong>same integer</strong> result.</li>
<li>It is <strong>not required</strong> that <strong>if two objects are unequal</strong> according to the equals(java.lang.Object) method, then calling the hashCode method on each of the two objects <strong>must produce distinct integer results</strong>. However, the programmer should be aware that producing distinct integer results for unequal objects <em>may improve the performance of hash tables</em>.</li>
</ul>
<p>As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by <strong>converting the internal address</strong> of the object into an integer, but this implementation technique is not required by the JavaTM programming language.)</p>
<h1 id="Hashcode-in-Java-Collections"><a href="#Hashcode-in-Java-Collections" class="headerlink" title="Hashcode in Java Collections"></a>Hashcode in Java Collections</h1><h2 id="Hashcode-vs-equals"><a href="#Hashcode-vs-equals" class="headerlink" title="Hashcode vs. equals"></a>Hashcode vs. equals</h2><h3 id="Equals"><a href="#Equals" class="headerlink" title="Equals"></a>Equals</h3><p>For usage in java collections framework, <strong>equals()</strong> used in following scenarios:</p>
<ul>
<li>contains or not</li>
<li>to remove one item</li>
</ul>
<p>Below is one implementation of a Equals</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(o==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(!(o <span class="keyword">instanceof</span> Employee)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        Employee other=(Employee)o;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.employeeID==other.employeeID;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Hashcode"><a href="#Hashcode" class="headerlink" title="Hashcode"></a>Hashcode</h3><p>When insert data into HashTable, HashMap, HashSet, the hashcode used to determine <strong>where</strong> to <strong>store/search</strong> the value in list/bucket. The hashcode only <strong>point to an area</strong> in list/bucket of data. The hashtable then iterates this area (all keys with the same hash code) and uses the key’s equals() method to find the right key. Once the right key is found, the object stored for that key is returned. </p>
<p>After you override the hashcode, you are still be able to get origional hashcode via calling <strong>int originalHashCode = System.identityHashCode(emp1);</strong></p>
<h3 id="Rules"><a href="#Rules" class="headerlink" title="Rules"></a>Rules</h3><p>In this regard there is a rule of thumb that if you are going to overide the one of the methods (equals, hashcode), you have to override both, othersise it’s a violation of contract .</p>
<h2 id="HashMap-tips"><a href="#HashMap-tips" class="headerlink" title="HashMap tips"></a>HashMap tips</h2><ul>
<li>Since searching inlined list is O(n) operation, in worst case hash collision reduce a map to linked list. This issue is recently addressed in Java 8 by replacing linked list to the tree to search in O(logN)</li>
<li><strong>HashMap works on the principle of hashing</strong>.</li>
<li>HashMap  stores both Key and Value in LinkedList node or as Map</li>
<li>using immutable, final object with proper equals() and hashcode() implementation would act as perfect Java HashMap  keys and improve the performance of Java HashMap  by reducing collision. <strong>Immutability also allows caching their hashcode of different keys which makes overall retrieval process very fast</strong> and suggest that String and various wrapper classes e.g. Integer very good keys in Java HashMap.</li>
<li>if the load factor is .75 it will act to re-size the map once it filled 75%. Java HashMap re-size itself by creating a new bucket array of size twice of the previous size of HashMap and then start putting every old element into that new bucket array. This process is called rehashing because it also applies the hash function to find new bucket location. </li>
<li>there is potential race condition exists while resizing HashMap in Java, if two thread at the same time found that now HashMap needs resizing and they both try to resizing. on the process of resizing of HashMap in Java, the element in the bucket which is stored in linked list get reversed in order during their migration to new bucket because Java HashMap  doesn’t append the new element at tail instead it append new element at the head to avoid tail traversing.</li>
<li>If race condition happens then you will end up with an infinite loop. </li>
</ul>
<h2 id="Why-String-Integer-and-other-wrapper-classes-are-considered-good-keys"><a href="#Why-String-Integer-and-other-wrapper-classes-are-considered-good-keys" class="headerlink" title="Why String, Integer and other wrapper classes are considered good keys?"></a>Why String, Integer and other wrapper classes are considered good keys?</h2><ul>
<li>String, Integer and other wrapper classes are natural candidates of HashMap key, and String is most frequently used key as well because String is immutable and final, and overrides equals and hashcode() method. </li>
<li>Immutability is best as it offers other advantages as well like thread-safety, If you can  keep your hashCode same by only making certain fields final, then you go for that as well.</li>
</ul>
<h1 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h1><ul>
<li>ConcurrentHashMap provides better concurrency by only locking portion of map determined by concurrency level. </li>
<li>but Hashtable provides stronger thread-safety than ConcurrentHashMap</li>
<li>ConcurrentHashMap performs better than earlier two because it only locks a portion of Map, instead of whole Map, which is the case with Hashtable and synchronized Map. </li>
<li>provided all functions supported by Hashtable with an additional feature called “concurrency level”, which allows ConcurrentHashMap to partition Map.</li>
<li>ConcurrentHashMap allows multiple readers to read concurrently without any blocking. This is achieved by partitioning Map into different parts based on concurrency level and locking only a portion of Map during updates. </li>
<li><strong>Default concurrency level is 16</strong>, and accordingly Map is divided into 16 part and each part is governed with a different lock. This means, 16 thread can operate on Map simultaneously until they are operating on different part of Map. </li>
<li>Since update operations like put(), remove(), putAll() or clear() is not synchronized, concurrent retrieval may not reflect most recent change on Map.</li>
<li>ConcurrentHashMap also uses ReentrantLock to internally lock its segments.</li>
<li>In hashmap and hashtable, you can check one item first and add it if not present. Though this code will work fine in HashMap and Hashtable, This won’t work in ConcurrentHashMap; because, during put operation whole map is not locked, and while one thread is putting value, other thread’s get() call can still return null which result in one thread overriding value inserted by other thread. Ofcourse, you can wrap whole code in synchronized block and make it thread-safe but that will only make your code single threaded. ConcurrentHashMap provides putIfAbsent(key, value) which does same thing but atomically and thus eliminates above race condition</li>
<li>ConcurrentHashMap is best suited when you have <strong>multiple readers</strong> and <strong>few writers</strong>. If writers outnumber reader, or writer is equal to reader, than performance of ConcurrentHashMap <strong>effectively reduces to synchronized map or Hashtable</strong>. Performance of CHM drops, because you got to <strong>lock all portion of Map</strong>, and effectively each reader will wait for another writer, operating on that portion of Map. ConcurrentHashMap is a good choice for caches, which can be initialized during application start up and later accessed my many request processing threads.</li>
<li>ConcurrentHashMap allows <strong>concurrent read</strong> and <strong>thread-safe update</strong> operation.</li>
<li>Iterator returned by ConcurrentHashMap is weekly consistent, fail-safe and never throw ConcurrentModificationException. </li>
<li>In Java.ConcurrentHashMap <strong>doesn’t allow null as key or value</strong>.</li>
</ul>
<h1 id="How-null-work-in-HashMap"><a href="#How-null-work-in-HashMap" class="headerlink" title="How null work in HashMap"></a>How null work in HashMap</h1><p> How null key is handled in HashMap? Since equals() and hashCode() are used to store and retrieve values, how does it work in case of the null key?</p>
<p>The null key is handled specially in HashMap, there are two separate methods for that putForNullKey(V value)<br>and getForNullKey()<br>. Later is offloaded version of get() to look up null keys.  Null keys always map to index 0.  This null case is split out into separate methods for the sake of performance in the two most commonly used operations (get and put), but incorporated with conditionals in others. In short, equals()<br>and hashcode() method are not used in case of null keys in HashMap.</p>
<h1 id="Performance-changes-in-JDK-1-7-and-1-8"><a href="#Performance-changes-in-JDK-1-7-and-1-8" class="headerlink" title="Performance changes in JDK 1.7 and 1.8"></a>Performance changes in JDK 1.7 and 1.8</h1><ul>
<li>There is some performance improvement done on HashMap and ArrayList from JDK 1.7, which reduce memory consumption. Due to this empty Map are lazily initialized and will cost you less memory. Earlier, when you create HashMap e.g. new HashMap() it automatically creates an array of default length e.g. 16. After some research, Java team found that most of this Map are temporary and never use that many elements, and only end up wasting memory. Also, From JDK 1.8 onwards HashMap has introduced an improved strategy to deal with high collision rate. Since a poor hash function e.g. which always return location of same bucket, can turn a HashMap into linked list, i.e. converting get() method to perform <strong>in O(n) instead of O(1)</strong> and someone can take advantage of this fact, Java now internally replace linked list to a binary true once certain threshold is breached. This ensures performance or order O(log(n)) even in the worst case where a hash function is not distributing keys properly.</li>
<li>such change is creating empty ArrayList and HashMap with size zero in JDK 1.7.0_40 update.</li>
<li>If you are running on Java 1.6 or earlier version of Java 1.7, you can open code of java.util.ArrayList and check that, currently empty ArrayList is initialized with Object array of <strong>size 10</strong>. If you create several temporary list in your program, which remains uninitialized, due to any reason then you are not only losing memory but also losing performance by giving your garbage collector more work.</li>
<li>Same is true for empty HashMap, which was initialized by <strong>default initial capacity of 16</strong>. This changes are result of observation made by Nathan Reynolds, and Architect at Oracle, which apparently analysed 670 Java heap dumps from different Java programs to find out memory hogs.</li>
<li>By the way, it’s not just memory, it’s also extra work-load for Garbage collector</li>
</ul>
<h1 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h1><ul>
<li>One of the major differences between HashMap and Hashtable is that HashMap is non-synchronized whereas Hashtable is synchronized</li>
<li>Another difference is HashMap allows <strong>one</strong> null key and null values but *<em>Hashtable doesn’t allow null *</em> key or values.</li>
<li>Another significant difference between HashMap vs Hashtable is that Iterator in the <strong>HashMap is  a fail-fast ** iterator  while the enumerator for the **Hashtable is not and throw ConcurrentModificationException</strong> if any other Thread modifies the map structurally  by adding or removing any element except Iterator’s own remove() method</li>
</ul>
<h1 id="ConcurrentHashMap-vs-Hashtable-vs-Synchronized-Map"><a href="#ConcurrentHashMap-vs-Hashtable-vs-Synchronized-Map" class="headerlink" title="ConcurrentHashMap vs Hashtable vs Synchronized Map"></a>ConcurrentHashMap vs Hashtable vs Synchronized Map</h1><ul>
<li>Though all three collection classes are thread-safe and can be used in multi-threaded, concurrent Java application, there is a significant difference between them, which arise from the fact that <strong>how they achieve their thread-safety</strong>. </li>
<li>Hashtable is a legacy class from JDK 1.1 itself, which uses <strong>synchronized methods</strong> to achieve thread-safety. All methods of Hashtable are synchronized which makes them quite slow due to contention if a number of thread increases. </li>
<li>Synchronized Map is also <strong>not very different than Hashtable</strong> and provides similar performance in concurrent Java programs. The only difference between Hashtable and Synchronized Map is that later is not a legacy and you <strong>can wrap any Map</strong> to create it’s synchronized version by using Collections.synchronizedMap()</li>
<li>Unlike Hashtable and Synchronized Map, it <strong>never locks whole Map</strong>, instead, it divides the map into segments and locking is done on those. Though it performs better if a number of <strong>reader threads are greater than</strong> the number of writer threads.</li>
<li><strong>ConcurrentHashMap and CopyOnWriteArrayList</strong> implementations provide much <strong>higher concurrency while preserving thread safety</strong>, with some minor compromises in their promises to callers. ConcurrentHashMap and CopyOnWriteArrayList are not necessarily useful everywhere you might use HashMap or ArrayList, but are designed to optimize specific common situations. </li>
<li><strong>ConcurrentHashMap does not allow null</strong> keys or null values while <strong>synchronized HashMap allows one null key</strong>.</li>
</ul>
<h1 id="Synchronized-List"><a href="#Synchronized-List" class="headerlink" title="Synchronized List"></a>Synchronized List</h1><ul>
<li><p>CopyOnWriteArrayList and CopyOnWriteArraySet<br>CopyOnWriteArrayList is a concurrent alternative of synchronized List. CopyOnWriteArrayList provides better concurrency than synchronized List by allowing <strong>multiple concurrent reader</strong> and <strong>replacing the whole list on write</strong> operation. Yes, write operation is costly on CopyOnWriteArrayList but it <strong>performs better when there are multiple reader</strong> and requirement of <strong>iteration is more than writing</strong>. Since CopyOnWriteArrayList Iterator also don’t throw ConcurrencModificationException <strong>it eliminates need to lock the collection during iteration</strong>. Remember both ConcurrentHashMap and CopyOnWriteArrayList doesn’t provides same level of locking as Synchronized Collection and achieves thread-safety by there locking and mutability strategy. So they perform better if requirements suits there nature. Similarly, CopyOnWriteArraySet is a concurrent replacement to Synchronized Set. See What is CopyOnWriteArrayList in Java for more details</p>
</li>
<li><p>BlockingQueue<br>BlockingQueue is also one of better known collection class in Java 5. BlockingQueue makes it easy <strong>to implement producer-consumer design pattern</strong> by providing inbuilt <strong>blocking support for put() and take() method</strong>. put() method will block if Queue is full while take() method will block if Queue is empty. Java 5 API provides two concrete implementation of BlockingQueue in form of <strong>ArrayBlockingQueue and LinkedBlockingQueue</strong>, both of them implement <strong>FIFO ordering</strong> of element. ArrayBlockingQueue <strong>is backed by Array</strong> and its <strong>bounded</strong> in nature while <strong>LinkedBlockingQueue is optionally bounded</strong>. Consider <strong>using BlockingQueue to solve producer Consumer problem</strong> in Java instead of writing your won wait-notify code. Java 5 also provides <strong>PriorityBlockingQueue</strong>, another implementation of BlockingQueue which is ordered on priority and useful if you want to process elements on order other than FIFO.</p>
</li>
<li><p>Deque interface<br>is added in Java 6 and it extends Queue interface to support <strong>insertion and removal from both end of Queue</strong> referred as <strong>head and tail</strong>. Java6 also provides concurrent implementation of Deque like <strong>ArrayDeque and LinkedBlockingDeque</strong>. Deque Can be used efficiently <strong>to increase parallelism in program by allowing set of worker thread *<em>to help each other by taking some of work load from other thread by utilizing Deque double end consumption property. So if all Thread has there *</em>own set of task Queue and they are consuming from head</strong>; helper thread can also share some work load via <strong>consumption from tail</strong>.</p>
</li>
<li><p>ConcurrentSkipListMap and ConcurrentSkipListSet<br>Just like ConcurrentHashMap provides a concurrent alternative of synchronized HashMap. <strong>ConcurrentSkipListMap and ConcurrentSkipListSet provide concurrent alternative</strong> for synchronized version of <strong>SortedMap and SortedSet</strong>. For example instead of using TreeMap or TreeSet wrapped inside synchronized Collection, You can consider using ConcurrentSkipListMap or ConcurrentSkipListSet from java.util.concurrent package. They also implement NavigableMap and NavigableSet to add additional navigation method we have seen in our post How to use NavigableMap in Java.</p>
</li>
</ul>
<h1 id="To-sort-hashmap-by-key-and-value"><a href="#To-sort-hashmap-by-key-and-value" class="headerlink" title="To sort hashmap by key and value"></a>To sort hashmap by key and value</h1><ul>
<li>Why can’t we use TreeMap in place of HashMap is the question appears in most Java programmer’s mind when they asked to sort HashMap in Java. Well, TreeMap is way slower than HashMap because it runs sorting operation with each insertion, update and removal and sometimes you don’t really need an all time sorted Map, What you need is an ability to sort any Map implementation based upon its key and value.<h2 id="Sort-by-Key"><a href="#Sort-by-Key" class="headerlink" title="Sort by Key"></a>Sort by Key</h2></li>
<li>As I said Map or HashMap in Java can be sorted either on keys or values. Sorting Map on keys is rather easy than sorting on values because Map <strong>allows duplicate values but doesn’t allow duplicates keys</strong>. You can sort Map, be it HashMap or Hashtable by copying keys into List than sorting List by using Collections.sort() method, here you can use either Comparator or Comparable based upon whether you want to sort on a custom order or natural order. </li>
<li>Once List of keys is sorted, we can create another Map, particularly LinkedHashMap to insert keys in sorted order. LinkedHashMap will maintain the order on which keys are inserted, the result is a sorted Map based on keys. This is shown in the following example by writing a generic parameterized method to sort Map based on keys. You can also sort Map in Java by using TreeMap and Google Collection API (Guava). The advantage of using Guava is that you get some flexibility on specifying ordering.<h2 id="Sorting-Map-in-Java-By-Value"><a href="#Sorting-Map-in-Java-By-Value" class="headerlink" title="Sorting Map in Java - By Value"></a>Sorting Map in Java - By Value</h2></li>
<li>To implement Collection.sort(map, new Comparator&lt;Map.Entry&lt;K,V&gt;&gt;(){ o1.getValue().compareTo(o2.getValue())</li>
<li>But need to take care of null and duplication</li>
</ul>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="http://javarevisited.blogspot.in/2011/02/how-hashmap-works-in-java.html" target="_blank" rel="noopener">http://javarevisited.blogspot.in/2011/02/how-hashmap-works-in-java.html</a></li>
<li><a href="http://javarevisited.blogspot.in/2011/04/difference-between-concurrenthashmap.html" target="_blank" rel="noopener">http://javarevisited.blogspot.in/2011/04/difference-between-concurrenthashmap.html</a></li>
<li><a href="http://javarevisited.blogspot.com/2013/02/concurrent-collections-from-jdk-56-java-example-tutorial.html#ixzz4WBYzKelD" target="_blank" rel="noopener">http://javarevisited.blogspot.com/2013/02/concurrent-collections-from-jdk-56-java-example-tutorial.html#ixzz4WBYzKelD</a></li>
<li><a href="http://javarevisited.blogspot.com/2012/12/how-to-sort-hashmap-java-by-key-and-value.html#ixzz4WBgfeGVM" target="_blank" rel="noopener">http://javarevisited.blogspot.com/2012/12/how-to-sort-hashmap-java-by-key-and-value.html#ixzz4WBgfeGVM</a></li>
</ul>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>hashcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Java GC notes</title>
    <url>/2016-12-30-Java-GC/</url>
    <content><![CDATA[<h1 id="verbose-gc"><a href="#verbose-gc" class="headerlink" title="verbose:gc"></a>verbose:gc</h1><p><code>verbose:gc</code> prints right after each gc collection and prints details about each generation memory details. Here is blog on how to read verbose gc</p>
<p>If you are trying to look for memory leak, verbose:gc may not be enough. Use some visualization tools like jhat (or) visualvm etc.,</p>
<p> 4416K-&gt;512K(4928K), 0.0081170 secs</p>
<p>Before GC used memory is 4416K<br>After GC used memory is 512K<br>Total allocated memory is 4928K</p>
<p>-verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:C:/Users/tzhang17/temp/gc/gc.log</p>
<p>a typical ratio of YoungGen vs. OldGen is 1:3 or 33%.</p>
<p>Minimizing the frequency of major GC collections is a key aspect for optimal performance so it is very important that you understand and estimate how much memory you need during your peak volume.</p>
<p>Again, your type of application and data will dictate how much memory you need. Shopping cart type of applications (long lived objects) involving large and non-serialized session data typically need large Java Heap and lot of OldGen space. Stateless and XML processing heavy applications (lot of short lived objects) require proper YoungGen space in order to minimize frequency of major collections.</p>
<h2 id="Generational-collection"><a href="#Generational-collection" class="headerlink" title="Generational collection"></a>Generational collection</h2><p>According to the generational hypothesis [21], most objects die young and consequently older objects tend to live longer. Generational collection capitalises on the generational hypothesis by dividing the available memory space into multiple regions called generations. Garbage collector passes are less frequent as the generations grow older and objects are always allocated into the newest generation. If the object survives a garbage collection, it is promoted to an older generation. Each generation can have a<br>separate garbage collection strategy.</p>
<h2 id="Reference-counting"><a href="#Reference-counting" class="headerlink" title="Reference counting"></a>Reference counting</h2><p> Reference counting uses a counter per object to record the number of<br>references to the object. The pointer is incremented each time a reference towards the<br>object is created. The object is reclaimed when its reference count drops to zero. Reference<br>counting is being extensively used by scripting languages such as Perl.</p>
<h2 id="GC-strategy"><a href="#GC-strategy" class="headerlink" title="GC strategy"></a>GC strategy</h2><p>Mark-Sweep garbage collection is most times followed by a compaction phase in order to avoid memory fragmentation. The compaction phase requires moving the objects to adjacent memory locations, thus making Mark-Sweep quite an expensive algorithm for large memory multiprocessor environments, unless a multithreaded heap compactor is employed.<br>Simple reference counting is also unsuitable for high throughput environments because it requires objects to be reclaimed on pointer updates; if a pointer is removed and the reference count of the pointed object drops to zero, the runtime system is required to collect both that object and the objects it references. Furthermore, a major drawback of reference counting is its inability to collect circular data structures, such as doubly linked lists. Despite its drawbacks, the simplicity in the implementation of reference counting made it the preferred garbage collection strategy in runtime environments with a limited lifetime, such as scripting languages.</p>
<h2 id="mutable-memory"><a href="#mutable-memory" class="headerlink" title="mutable memory"></a>mutable memory</h2><p>Memory in a typical JVM is organised in a series of mutable (garbage collected) and immutable zones. Class code is usually loaded in immutable space1 and remains there until the JVM is stopped. Also, the code emitted from the JIT compiler is temporarily stored in immutable space. The actual allocations take place in the heap, which is a contiguous memory area.</p>
<p>Apart from the class member values, each object also contains<br>additional data such as a pointer to the respective class methods and flags related to locking and<br>garbage collection. In most virtual machines, object headers take up to 8–12 bytes of additional<br>storage space for each object, and can therefore sadle a program with significant performance<br>and space overhead. A lot of work has been put into compacting the object header [6], which,<br>in some cases, resulted in space savings of up to 20%.</p>
<p>A failure to allocate space for an object triggers a garbage collection cycle. The root set<br>is determined by conservatively scanning the stacks of running or suspended threads and the<br>current values of the processor registers for potential pointers to the heap. Root set acquisition<br>can also be a performance bottleneck in the case when a large number of threads is executed<br>concurrently, though these costs can be amortised using clever co-operation of the garbage<br>collector with the JIT.</p>
<h2 id="JDK-1-5"><a href="#JDK-1-5" class="headerlink" title="JDK 1.5"></a>JDK 1.5</h2><p>Sun’s JVM is an implementation of the 1.5 version of the Java language specification. It features an adaptive optimising JIT compiler, the well-known Hotspot engine, and a choice of three garbage collectors [2, 12]. Sun’s JVM is based upon a generational copying garbage collector that utilises two generations  Figure 1 presents the heap organisation, which is shared among all collectors. Allocations initially occur in the eden space and survivors are promoted to one of the survivor spaces in a copying fashion. Optionally, portions of the heap space can be allocated to individual threads (Thread-Local Heaps (TLHs)), in order to speed up allocations on large-heap multithreaded environments. Objects that reach a certain age threshold, usually measured in minor garbage collection cycles, are copied to the tenured generation where they are left untouched until a major collection occurs. A mark-compact garbage collector is used for the tenured generation.</p>
<h1 id="Tuning-advise"><a href="#Tuning-advise" class="headerlink" title="Tuning advise"></a>Tuning advise</h1><ul>
<li>Unless you have specific hardware constraints, devote as much memory as you can to the virtual machine. A big heap size offers the opportunity for less frequent, albeit more time consuming, full heap collections. In a throughput-oriented environment sacrificing pause times to allow more CPU time for the executed application is often a good compromise. Do not allow the virtual machine to be swapped out to disk, as this is catastrophic for performance. In an application server that only runs a single virtual machine, you could devote about 90% of its available RAM to it and turn off paging, without risking the failure of either the virtual machine or the operating system.</li>
<li>Calculate the memory allocation rate for your application. It is a significant measurement that you should perform by exposing the application to full workload. Its impact varies depending on the underlying hardware. As a rule of thumb, on a multiprocessor machine, each processor could easily generate more than 150MB of garbage per second. High allocation rates can be efficiently dealt with by using parallel collectors or large eden heap sizes.</li>
</ul>
<h2 id="Committed-heap"><a href="#Committed-heap" class="headerlink" title="Committed heap"></a>Committed heap</h2><p>A MemoryUsage object represents a snapshot of memory usage. Instances of the MemoryUsage class are usually constructed by methods that are used to obtain memory usage information about individual memory pool of the Java virtual machine or the heap or non-heap memory of the Java virtual machine as a whole.<br>A MemoryUsage object contains four values:</p>
<p>init    represents the initial amount of memory (in bytes) that the Java virtual machine requests from the operating system for memory management during startup. The Java virtual machine may request additional memory from the operating system and may also release memory to the system over time. The value of init may be undefined.<br>used    represents the amount of memory currently used (in bytes).<br>committed    represents the amount of memory (in bytes) that is guaranteed to be available for use by the Java virtual machine. The amount of committed memory may change over time (increase or decrease). The Java virtual machine may release memory to the system and committed could be less than init. committed will always be greater than or equal to used.<br>max    represents the maximum amount of memory (in bytes) that can be used for memory management. Its value may be undefined. The maximum amount of memory may change over time if defined. The amount of used and committed memory will always be less than or equal to max if max is defined. A memory allocation may fail if it attempts to increase the used memory such that used &gt; committed even if used &lt;= max would still be true (for example, when the system is low on virtual memory).<br>Below is a picture showing an example of a memory pool:<br>        +———————————————-+<br>        +////////////////           |                  +<br>        +////////////////           |                  +<br>        +———————————————-+</p>
<pre><code>|--------|
   init
|---------------|
       used
|---------------------------|
          committed
|----------------------------------------------|</code></pre><h1 id="Garbage-Collection-for-JVM"><a href="#Garbage-Collection-for-JVM" class="headerlink" title="Garbage Collection for JVM"></a>Garbage Collection for JVM</h1><h2 id="Interpreting-vs-compile"><a href="#Interpreting-vs-compile" class="headerlink" title="Interpreting vs compile"></a>Interpreting vs compile</h2><ul>
<li>The HotSpot JVM (and other modern JVMs) uses a combination of bytecode interpretation and dynamic compilation. When a class is first loaded, the JVM executes it by interpreting the bytecode. At some point, if a method is run often enough, the dynamic compiler kicks in and converts it to machine code; when compilation completes, it switches from interpretation to direct execution.</li>
<li>Code may also be decompiled (reverting to interpreted execution) and recompiled for various reasons, such as loading a class that invalidates assumptions made by prior compilations, or gathering sufficient profiling data to decide that a code path should be recompiled with different optimizations.</li>
<li>One of the challenges of writing good benchmarks (in any language) is that optimizing compilers are adept at spotting and eliminating dead code—code that has no effect on the outcome. Since benchmarks often don’t compute anything, they are an easy target for the optimizer. Most of the time, it is a good thing when the optimizer prunes dead code from a program, but for a benchmark this is a big problem because then you are measuring less execution than you think.</li>
<li>Many microbenchmarks perform much “better” when run with HotSpot’s -server compiler than with -client, not just because the server compiler can produce more efficient code, but also because it is more adept at optimizing dead code.</li>
<li>Writing effective performance tests requires tricking the optimizer into not optimizing away your benchmark as dead code. This requires every computed result to be used somehow by your program—in a way that does not require synchronization or substantial computation.</li>
<li>We happen to need it to verify the correctness of the algorithm, but <strong>you can ensure that a value is used by printing it out</strong>. However, you should avoid doing I/O while the test is actually running, so as not to distort the run time measurement.</li>
<li>A cheap trick for preventing a calculation from being optimized away without introducing too much overhead is to compute the hashCode of the field of some derived object, compare it to an arbitrary value such as the current value of System. nanoTime, and print a useless and ignorable message if they happen to match:<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(foo.x.hashCode()==System.nanoTime())</span><br><span class="line">	System.out.println(<span class="string">" "</span>);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>The comparison will rarely succeed, and if it does, its only effect will be to insert a harmless space character into the output. (The print method buffers output until println is called, so in the rare case that hashCode and System.nanoTime are equal no I/O is actually performed.)</p>
<ul>
<li>Not only should every computed result be used, but <strong>results should also be unguessable</strong>. Otherwise, a smart dynamic optimizing compiler is allowed to replace actions with precomputed results. </li>
</ul>
<h1 id="Java-GC"><a href="#Java-GC" class="headerlink" title="Java GC"></a>Java GC</h1><p>Java’s GC considers objects “garbage” <strong>if they aren’t reachable through a chain starting at a garbage collection root</strong>, so these objects will be collected. Even though objects may point to each other to form a cycle, they’re <strong>still garbage if they’re cut off from the root</strong>.</p>
<p>See the section on unreachable objects in Appendix A: The Truth About Garbage Collection in Java Platform Performance: Strategies and Tactics (free ebook, also available on Safari) for the gory details.</p>
<h3 id="Java-Garbage-collector-handles-circular-reference"><a href="#Java-Garbage-collector-handles-circular-reference" class="headerlink" title="Java Garbage collector handles circular-reference!"></a>Java Garbage collector handles circular-reference!</h3><p>How?</p>
<p>There are special objects called called <strong>garbage-collection roots (GC roots)</strong>. These are always reachable and so is any object that has them at its own root.</p>
<p>A simple Java application has the following GC roots:</p>
<pre><code>Local variables in the main method
The main thread
Static variables of the main class</code></pre><p>To determine which objects are no longer in use, the JVM intermittently runs what is very aptly called a <strong>mark-and-sweep algorithm</strong>. It works as follows</p>
<pre><code>The algorithm traverses all object references, starting with the GC roots, and marks every object found as alive.
All of the heap memory that is not occupied by marked objects is reclaimed. It is simply marked as free, essentially swept free of unused objects.</code></pre><p>So if any object is not reachable from the GC roots(even if it is self-referenced or cyclic-referenced) it will be subjected to garbage collection.<br>Ofcourse sometimes this may led to memory leak if programmer forgets to dereference an object.</p>
<hr>
<p>The actual answer to this is implementation dependent. The Sun JVM keeps track of some set of root objects (threads and the like), and when it needs to do a garbage collection, traces out which objects are reachable from those and saves them, discarding the rest. It’s actually more complicated than that to allow for some optimizations, but that is the basic principle. This version does not care about circular references: as long as no live object holds a reference to a dead one, it can be GCed.</p>
<p>Other JVMs can use a method known as reference counting. When a reference is created to the object, some counter is incremented, and when the reference goes out of scope, the counter is decremented. If the counter reaches zero, the object is finalized and garbage collected. This version, however, does allow for the possibility of circular references that would never be garbage collected. As a safeguard, many such JVMs include a backup method to determine which objects actually are dead which it runs periodically to resolve self-references and defrag the heap.</p>
<hr>
<p>A garbage collector starts from some “root” set of places that are always considered “reachable”, such as the <strong>CPU registers, stack, and global variables</strong>. It works by finding any pointers in those areas, and <strong>recursively finding everything they point at</strong>. Once it’s found all that, everything else is garbage.</p>
<p>There are, of course, quite a few variations, mostly for the sake of speed. For example, most modern garbage collectors are “generational”, meaning that they divide objects into generations, and as an object gets older, the garbage collector goes longer and longer between times that it tries to figure out whether that object is still valid or not – it just starts to assume that if it has lived a long time, chances are pretty good that it’ll continue to live even longer.</p>
<p>Nonetheless, the basic idea remains the same: it’s all based on starting from some root set of things that it takes for granted could still be used, and then chasing all the pointers to find what else could be in use.</p>
<p>Interesting aside: may people are often surprised by the degree of similarity between this part of a garbage collector and code for marshaling objects for things like remote procedure calls. In each case, you’re starting from some root set of objects, and chasing pointers to find all the other objects those refer to…</p>
<hr>
<h3 id="How-Garbage-Collection-Really-Works"><a href="#How-Garbage-Collection-Really-Works" class="headerlink" title="How Garbage Collection Really Works"></a>How Garbage Collection Really Works</h3><p>Many people think garbage collection collects and discards <strong>dead</strong> objects. In reality, Java garbage collection is <strong>doing the opposite</strong>! <strong>Live</strong> objects are <strong>tracked</strong> and everything else designated garbage. As you’ll see, this fundamental misunderstanding can lead to many performance problems.</p>
<h4 id="Garbage-Collection-Roots—The-Source-of-All-Object-Trees"><a href="#Garbage-Collection-Roots—The-Source-of-All-Object-Trees" class="headerlink" title="Garbage-Collection Roots—The Source of All Object Trees"></a>Garbage-Collection Roots—The Source of All Object Trees</h4><p>Every object tree must have one or more root objects. As long as the application can reach those roots, the whole tree is reachable. But when are those root objects considered reachable? Special objects called <strong>garbage-collection roots (GC roots; see Figure 2.2) are always reachable</strong> and so is any object that has a garbage-collection root at its own root.</p>
<p>There are <strong>four</strong> kinds of GC roots in Java:</p>
<ol>
<li><strong>Local variables</strong> are kept alive by the stack of a thread. This is not a real object virtual reference and thus is not visible. For all intents and purposes, local variables are GC roots.</li>
<li><strong>Active Java threads</strong> are always considered live objects and are therefore GC roots. This is especially important for thread local variables.</li>
<li><strong>Static variables</strong> are referenced by their classes. This fact makes them de facto GC roots. Classes themselves can be garbage-collected, which would remove all referenced static variables. This is of special importance when we use application servers, OSGi containers or class loaders in general. We will discuss the related problems in the Problem Patterns section.</li>
<li><strong>JNI References</strong> are Java objects that the native code has created as part of a JNI call. Objects thus created are treated specially because the JVM does not know if it is being referenced by the native code or not. Such objects represent a very special form of GC root, which we will examine in more detail in the Problem Patterns section below.</li>
</ol>
<p>Therefore, a simple Java application has the following GC roots:</p>
<ul>
<li>Local variables in the main method</li>
<li>The main thread</li>
<li>Static variables of the main class</li>
</ul>
<h4 id="Marking-and-Sweeping-Away-Garbage"><a href="#Marking-and-Sweeping-Away-Garbage" class="headerlink" title="Marking and Sweeping Away Garbage"></a>Marking and Sweeping Away Garbage</h4><p>To determine which objects are no longer in use, the JVM intermittently runs what is very aptly called a <strong>mark-and-sweep algorithm</strong>. As you might intuit, it’s a straightforward, two-step process:</p>
<ol>
<li>The algorithm traverses all object references, <strong>starting with the GC roots</strong>, and <strong>marks every object found as alive</strong>.</li>
<li>All of the heap memory that is <strong>not occupied by marked objects is <em>reclaimed</em></strong>. It is simply marked as free, essentially swept free of unused objects.</li>
</ol>
<hr>
<p>Garbage collectors which rely solely on <strong>reference counting</strong> are generally <strong>vulnerable to failing to collection self-referential structures</strong> such as this. These GCs rely on a count of the number of references to the object in order to calculate whether a given object is reachable.</p>
<p>Non-reference counting approaches apply a more comprehensive reachability test to determine whether an object is eligible to be collected. These systems define an object (or set of objects) which are always assumed to be reachable. Any object for which references are available from this object graph is considered ineligible for collection. Any object not directly accessible from this object is not. Thus, cycles do not end up affecting reachability, and can be collected.</p>
<hr>
<h3 id="Tracing-collector-vs-countering-collector"><a href="#Tracing-collector-vs-countering-collector" class="headerlink" title="Tracing collector vs. countering collector"></a>Tracing collector vs. countering collector</h3><p>There are two primary types of garbage collectors, although often a hybrid approach is found between these to suit particular needs. The first type, the one which might be the most intuitive, is a reference counting collector. The second one, which is most similar to what we described above, is a tracing collector.</p>
<h4 id="Reference-Counting-Collector"><a href="#Reference-Counting-Collector" class="headerlink" title="Reference Counting Collector"></a>Reference Counting Collector</h4><p>When a new memory object is allocated by the GC, it is given an integer count field. Every time a pointer is made to that object, a reference, the count is increased. So long as the count is a positive non-zero integer, the object is actively being referenced and is still alive.<br>When a reference to the object is removed, the count is decremented. When the count reaches zero, the object is dead and can be immediately reclaimed.<br>There are a number of points to remember about Reference Counting collectors:</p>
<ol>
<li><strong>Circular references will never be reclaimed</strong>, even if the entire set of objects is dead.</li>
<li><strong>Reference counting is pervasive</strong>: The entire program must be made aware of the system, and every pointer reference or dereference must be accompanied by an appropriate increment or decrement. Failing to maintain the count, even once in a large program, will create memory problems for your program.</li>
<li>Reference counting can be <strong>costly</strong>, because counts must be manipulated for every pointer operation, and the count must be tested against zero on ever decrement. These operations can, if used often enough, create a performance penalty for your program.</li>
</ol>
<p>These types of collectors are often called <strong>cooperative collectors</strong> because they require cooperation from the rest of the system to maintain the counts.</p>
<h4 id="Tracing-Collector"><a href="#Tracing-Collector" class="headerlink" title="Tracing Collector"></a>Tracing Collector</h4><p>Tracing collectors are entirely dissimilar from reference counting collectors, and have opposite strengths and weaknesses.<br>When the Tracing GC allocates a new memory chunk, the GC does not create a counter, but it does create a flag to determine when the item has been marked, and a pointer to the object that the GC keeps. The flags are not manipulated by the program itself, but are only manipulated by the GC when it performs a run.</p>
<p>During a GC run, the program execution typically halts. This can cause intermittent pauses in the program, pauses which can be quite long if there are many memory objects to trace.</p>
<p>The GC selects a set of root objects which are available to the current program scope and parent scopes. Starting from these objects, the GC identifies all pointers within the objects, called children. The object itself is marked as being alive, and then the collector moves to each child and marks it in the same way. The memory objects form a sort of tree structure, and the GC traverses this tree using recursive or stack-based methods.</p>
<p>At the end of the GC run, when there are no more children to be marked, all unmarked objects are considered unreachable and therefore dead. All dead objects are collected.</p>
<p>A few points to remember about Tracing GCs:</p>
<ol>
<li>Tracing GCs can be used <strong>to find cycles</strong>, memory objects whose pointers form circular structures. Reference Counting schemes cannot do this.</li>
<li>Tracing GCs <strong>cause pauses</strong> in the program, and these pauses can become unbearably long in some complex programs that use many small memory objects.</li>
<li><strong>Dead objects are not reclaimed immediately</strong>. Reclamation only occurs after a GC run. This causes a certain inefficiency in memory usage.</li>
<li>Tracing collectors do not require the program to account explicitly for memory counts or memory status updates. All memory tracking logic is stored inside the GC itself. This makes it easier to write extensions for these systems, and also makes it easier to install a Tracing GC in an existing system then to install a Reference Counting one.</li>
</ol>
<p>Tracing GCs are often called <strong>uncooperative</strong> collectors because they do not require cooperation from the rest of the system to function properly.<br>Hybrid Collectors</p>
<p>Sometimes, reference counting schemes will utilize Tracing systems to find cyclical garbage. Tracing systems may employ reference counts on very large objects to ensure they are reclaimed quickly. These are just two examples of hybridized garbage collectors that are more common then either of the two “pure” types described above.</p>
<p>In later chapters, we will discuss garbage collectors and their algorithms in more detail.</p>
<h1 id="Java-runtime-data-area"><a href="#Java-runtime-data-area" class="headerlink" title="Java runtime data area"></a>Java runtime data area</h1><p>There are 5 areas</p>
<ol>
<li>Heap</li>
<li>Java Stack</li>
<li>Method Area</li>
<li>Native method area</li>
<li>PC/Register</li>
</ol>
<h1 id="Java-GC-1"><a href="#Java-GC-1" class="headerlink" title="Java GC"></a>Java GC</h1><p>Java’s GC considers objects “garbage” <strong>if they aren’t reachable through a chain starting at a garbage collection root</strong>, so these objects will be collected. Even though objects may point to each other to form a cycle, they’re <strong>still garbage if they’re cut off from the root</strong>.</p>
<p>See the section on unreachable objects in Appendix A: The Truth About Garbage Collection in Java Platform Performance: Strategies and Tactics (free ebook, also available on Safari) for the gory details.</p>
<h3 id="Java-Garbage-collector-handles-circular-reference-1"><a href="#Java-Garbage-collector-handles-circular-reference-1" class="headerlink" title="Java Garbage collector handles circular-reference!"></a>Java Garbage collector handles circular-reference!</h3><p>How?</p>
<p>There are special objects called called <strong>garbage-collection roots (GC roots)</strong>. These are always reachable and so is any object that has them at its own root.</p>
<p>A simple Java application has the following GC roots:</p>
<pre><code>Local variables in the main method
The main thread
Static variables of the main class</code></pre><p>To determine which objects are no longer in use, the JVM intermittently runs what is very aptly called a <strong>mark-and-sweep algorithm</strong>. It works as follows</p>
<pre><code>The algorithm traverses all object references, starting with the GC roots, and marks every object found as alive.
All of the heap memory that is not occupied by marked objects is reclaimed. It is simply marked as free, essentially swept free of unused objects.</code></pre><p>So if any object is not reachable from the GC roots(even if it is self-referenced or cyclic-referenced) it will be subjected to garbage collection.<br>Ofcourse sometimes this may led to memory leak if programmer forgets to dereference an object.</p>
<hr>
<p>The actual answer to this is implementation dependent. The Sun JVM keeps track of some set of root objects (threads and the like), and when it needs to do a garbage collection, traces out which objects are reachable from those and saves them, discarding the rest. It’s actually more complicated than that to allow for some optimizations, but that is the basic principle. This version does not care about circular references: as long as no live object holds a reference to a dead one, it can be GCed.</p>
<p>Other JVMs can use a method known as reference counting. When a reference is created to the object, some counter is incremented, and when the reference goes out of scope, the counter is decremented. If the counter reaches zero, the object is finalized and garbage collected. This version, however, does allow for the possibility of circular references that would never be garbage collected. As a safeguard, many such JVMs include a backup method to determine which objects actually are dead which it runs periodically to resolve self-references and defrag the heap.</p>
<hr>
<p>A garbage collector starts from some “root” set of places that are always considered “reachable”, such as the <strong>CPU registers, stack, and global variables</strong>. It works by finding any pointers in those areas, and <strong>recursively finding everything they point at</strong>. Once it’s found all that, everything else is garbage.</p>
<p>There are, of course, quite a few variations, mostly for the sake of speed. For example, most modern garbage collectors are “generational”, meaning that they divide objects into generations, and as an object gets older, the garbage collector goes longer and longer between times that it tries to figure out whether that object is still valid or not – it just starts to assume that if it has lived a long time, chances are pretty good that it’ll continue to live even longer.</p>
<p>Nonetheless, the basic idea remains the same: it’s all based on starting from some root set of things that it takes for granted could still be used, and then chasing all the pointers to find what else could be in use.</p>
<p>Interesting aside: may people are often surprised by the degree of similarity between this part of a garbage collector and code for marshaling objects for things like remote procedure calls. In each case, you’re starting from some root set of objects, and chasing pointers to find all the other objects those refer to…</p>
<hr>
<h3 id="How-Garbage-Collection-Really-Works-1"><a href="#How-Garbage-Collection-Really-Works-1" class="headerlink" title="How Garbage Collection Really Works"></a>How Garbage Collection Really Works</h3><p>Many people think garbage collection collects and discards <strong>dead</strong> objects. In reality, Java garbage collection is <strong>doing the opposite</strong>! <strong>Live</strong> objects are <strong>tracked</strong> and everything else designated garbage. As you’ll see, this fundamental misunderstanding can lead to many performance problems.</p>
<h4 id="Garbage-Collection-Roots—The-Source-of-All-Object-Trees-1"><a href="#Garbage-Collection-Roots—The-Source-of-All-Object-Trees-1" class="headerlink" title="Garbage-Collection Roots—The Source of All Object Trees"></a>Garbage-Collection Roots—The Source of All Object Trees</h4><p>Every object tree must have one or more root objects. As long as the application can reach those roots, the whole tree is reachable. But when are those root objects considered reachable? Special objects called <strong>garbage-collection roots (GC roots; see Figure 2.2) are always reachable</strong> and so is any object that has a garbage-collection root at its own root.</p>
<p>There are <strong>four</strong> kinds of GC roots in Java:</p>
<ol>
<li><strong>Local variables</strong> are kept alive by the stack of a thread. This is not a real object virtual reference and thus is not visible. For all intents and purposes, local variables are GC roots.</li>
<li><strong>Active Java threads</strong> are always considered live objects and are therefore GC roots. This is especially important for thread local variables.</li>
<li><strong>Static variables</strong> are referenced by their classes. This fact makes them de facto GC roots. Classes themselves can be garbage-collected, which would remove all referenced static variables. This is of special importance when we use application servers, OSGi containers or class loaders in general. We will discuss the related problems in the Problem Patterns section.</li>
<li><strong>JNI References</strong> are Java objects that the native code has created as part of a JNI call. Objects thus created are treated specially because the JVM does not know if it is being referenced by the native code or not. Such objects represent a very special form of GC root, which we will examine in more detail in the Problem Patterns section below.</li>
</ol>
<p>Therefore, a simple Java application has the following GC roots:</p>
<ul>
<li>Local variables in the main method</li>
<li>The main thread</li>
<li>Static variables of the main class</li>
</ul>
<h4 id="Marking-and-Sweeping-Away-Garbage-1"><a href="#Marking-and-Sweeping-Away-Garbage-1" class="headerlink" title="Marking and Sweeping Away Garbage"></a>Marking and Sweeping Away Garbage</h4><p>To determine which objects are no longer in use, the JVM intermittently runs what is very aptly called a <strong>mark-and-sweep algorithm</strong>. As you might intuit, it’s a straightforward, two-step process:</p>
<ol>
<li>The algorithm traverses all object references, <strong>starting with the GC roots</strong>, and <strong>marks every object found as alive</strong>.</li>
<li>All of the heap memory that is <strong>not occupied by marked objects is <em>reclaimed</em></strong>. It is simply marked as free, essentially swept free of unused objects.</li>
</ol>
<hr>
<p>Garbage collectors which rely solely on <strong>reference counting</strong> are generally <strong>vulnerable to failing to collection self-referential structures</strong> such as this. These GCs rely on a count of the number of references to the object in order to calculate whether a given object is reachable.</p>
<p>Non-reference counting approaches apply a more comprehensive reachability test to determine whether an object is eligible to be collected. These systems define an object (or set of objects) which are always assumed to be reachable. Any object for which references are available from this object graph is considered ineligible for collection. Any object not directly accessible from this object is not. Thus, cycles do not end up affecting reachability, and can be collected.</p>
<hr>
<h3 id="Tracing-collector-vs-countering-collector-1"><a href="#Tracing-collector-vs-countering-collector-1" class="headerlink" title="Tracing collector vs. countering collector"></a>Tracing collector vs. countering collector</h3><p>There are two primary types of garbage collectors, although often a hybrid approach is found between these to suit particular needs. The first type, the one which might be the most intuitive, is a reference counting collector. The second one, which is most similar to what we described above, is a tracing collector.</p>
<h4 id="Reference-Counting-Collector-1"><a href="#Reference-Counting-Collector-1" class="headerlink" title="Reference Counting Collector"></a>Reference Counting Collector</h4><p>When a new memory object is allocated by the GC, it is given an integer count field. Every time a pointer is made to that object, a reference, the count is increased. So long as the count is a positive non-zero integer, the object is actively being referenced and is still alive.<br>When a reference to the object is removed, the count is decremented. When the count reaches zero, the object is dead and can be immediately reclaimed.<br>There are a number of points to remember about Reference Counting collectors:</p>
<ol>
<li><strong>Circular references will never be reclaimed</strong>, even if the entire set of objects is dead.</li>
<li><strong>Reference counting is pervasive</strong>: The entire program must be made aware of the system, and every pointer reference or dereference must be accompanied by an appropriate increment or decrement. Failing to maintain the count, even once in a large program, will create memory problems for your program.</li>
<li>Reference counting can be <strong>costly</strong>, because counts must be manipulated for every pointer operation, and the count must be tested against zero on ever decrement. These operations can, if used often enough, create a performance penalty for your program.</li>
</ol>
<p>These types of collectors are often called <strong>cooperative collectors</strong> because they require cooperation from the rest of the system to maintain the counts.</p>
<h4 id="Tracing-Collector-1"><a href="#Tracing-Collector-1" class="headerlink" title="Tracing Collector"></a>Tracing Collector</h4><p>Tracing collectors are entirely dissimilar from reference counting collectors, and have opposite strengths and weaknesses.<br>When the Tracing GC allocates a new memory chunk, the GC does not create a counter, but it does create a flag to determine when the item has been marked, and a pointer to the object that the GC keeps. The flags are not manipulated by the program itself, but are only manipulated by the GC when it performs a run.</p>
<p>During a GC run, the program execution typically halts. This can cause intermittent pauses in the program, pauses which can be quite long if there are many memory objects to trace.</p>
<p>The GC selects a set of root objects which are available to the current program scope and parent scopes. Starting from these objects, the GC identifies all pointers within the objects, called children. The object itself is marked as being alive, and then the collector moves to each child and marks it in the same way. The memory objects form a sort of tree structure, and the GC traverses this tree using recursive or stack-based methods.</p>
<p>At the end of the GC run, when there are no more children to be marked, all unmarked objects are considered unreachable and therefore dead. All dead objects are collected.</p>
<p>A few points to remember about Tracing GCs:</p>
<ol>
<li>Tracing GCs can be used <strong>to find cycles</strong>, memory objects whose pointers form circular structures. Reference Counting schemes cannot do this.</li>
<li>Tracing GCs <strong>cause pauses</strong> in the program, and these pauses can become unbearably long in some complex programs that use many small memory objects.</li>
<li><strong>Dead objects are not reclaimed immediately</strong>. Reclamation only occurs after a GC run. This causes a certain inefficiency in memory usage.</li>
<li>Tracing collectors do not require the program to account explicitly for memory counts or memory status updates. All memory tracking logic is stored inside the GC itself. This makes it easier to write extensions for these systems, and also makes it easier to install a Tracing GC in an existing system then to install a Reference Counting one.</li>
</ol>
<p>Tracing GCs are often called <strong>uncooperative</strong> collectors because they do not require cooperation from the rest of the system to function properly.<br>Hybrid Collectors</p>
<p>Sometimes, reference counting schemes will utilize Tracing systems to find cyclical garbage. Tracing systems may employ reference counts on very large objects to ensure they are reclaimed quickly. These are just two examples of hybridized garbage collectors that are more common then either of the two “pure” types described above.</p>
<p>In later chapters, we will discuss garbage collectors and their algorithms in more detail.</p>
<h1 id="to-be-callibrated"><a href="#to-be-callibrated" class="headerlink" title="to be callibrated"></a>to be callibrated</h1><p>G1 is a concurrent collector that operates on discrete regions within the heap. Each region (there are by default around 2,048 of them) can belong to either the old or new generation, and the generational regions need not be contiguous. The idea behind having regions in the old generation is that when the concurrent background threads look for unreferenced objects, some regions will contain more garbage than other regions. The actual collection of a region still requires that application threads be stopped, but G1 can focus on the regions that are mostly garbage and only spend a little bit of time emptying those regions. This approach—clearing out only the mostly garbage regions—is what gives G1 its name: Garbage First.<br>That doesn’t apply to the regions in the young generation: during a young GC, the entire young generation is either freed or promoted (to a survivor space or to the old generation). Still, the young generation is defined in terms of regions, in part because it makes resizing the generations much easier if the regions are predefined.<br>G1 has four main operations:<br>A young collection<br>A background, concurrent cycle<br>A mixed collection<br>If necessary, a full GC<br>We’ll look at each of those in turn, starting with the G1 young collection shown in Figure 6-6.</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://www.ibm.com/developerworks/java/library/j-jtp10283/" target="_blank" rel="noopener">http://www.ibm.com/developerworks/java/library/j-jtp10283/</a></li>
<li><a href="https://blogs.oracle.com/jonthecollector/entry/our_collectors" target="_blank" rel="noopener">https://blogs.oracle.com/jonthecollector/entry/our_collectors</a></li>
<li><a href="https://en.wikipedia.org/wiki/Garbage_collection_%28computer_science%29#Tracing_garbage_collectors" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Garbage_collection_%28computer_science%29#Tracing_garbage_collectors</a></li>
<li><a href="http://users.cecs.anu.edu.au/~steveb/pubs/papers/urc-oopsla-2003.pdf" target="_blank" rel="noopener">http://users.cecs.anu.edu.au/~steveb/pubs/papers/urc-oopsla-2003.pdf</a></li>
<li><a href="https://www.dynatrace.com/resources/ebooks/javabook/" target="_blank" rel="noopener">https://www.dynatrace.com/resources/ebooks/javabook/</a></li>
<li><a href="https://en.wikipedia.org/wiki/Tracing_garbage_collection" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Tracing_garbage_collection</a></li>
<li><a href="https://en.wikibooks.org/wiki/Memory_Management/Garbage_Collection" target="_blank" rel="noopener">https://en.wikibooks.org/wiki/Memory_Management/Garbage_Collection</a></li>
<li><a href="http://flyingfrogblog.blogspot.com/2013/09/how-do-reference-counting-and-tracing.html" target="_blank" rel="noopener">http://flyingfrogblog.blogspot.com/2013/09/how-do-reference-counting-and-tracing.html</a></li>
<li><a href="https://www.dynatrace.com/resources/ebooks/javabook/how-garbage-collection-works/" target="_blank" rel="noopener">https://www.dynatrace.com/resources/ebooks/javabook/how-garbage-collection-works/</a></li>
<li><a href="http://stackoverflow.com/questions/1910194/how-does-java-garbage-collection-work-with-circular-references" target="_blank" rel="noopener">http://stackoverflow.com/questions/1910194/how-does-java-garbage-collection-work-with-circular-references</a></li>
<li><a href="http://www.java-books.us/j2ee_0003.php" target="_blank" rel="noopener">http://www.java-books.us/j2ee_0003.php</a></li>
<li><a href="http://www.ibm.com/developerworks/java/library/j-jtp10283/" target="_blank" rel="noopener">http://www.ibm.com/developerworks/java/library/j-jtp10283/</a></li>
<li><a href="https://blogs.oracle.com/jonthecollector/entry/our_collectors" target="_blank" rel="noopener">https://blogs.oracle.com/jonthecollector/entry/our_collectors</a></li>
<li><a href="https://en.wikipedia.org/wiki/Garbage_collection_%28computer_science%29#Tracing_garbage_collectors" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Garbage_collection_%28computer_science%29#Tracing_garbage_collectors</a></li>
<li><a href="http://users.cecs.anu.edu.au/~steveb/pubs/papers/urc-oopsla-2003.pdf" target="_blank" rel="noopener">http://users.cecs.anu.edu.au/~steveb/pubs/papers/urc-oopsla-2003.pdf</a></li>
<li><a href="https://www.dynatrace.com/resources/ebooks/javabook/" target="_blank" rel="noopener">https://www.dynatrace.com/resources/ebooks/javabook/</a></li>
<li><a href="https://en.wikipedia.org/wiki/Tracing_garbage_collection" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Tracing_garbage_collection</a></li>
<li><a href="https://en.wikibooks.org/wiki/Memory_Management/Garbage_Collection" target="_blank" rel="noopener">https://en.wikibooks.org/wiki/Memory_Management/Garbage_Collection</a></li>
<li><a href="http://flyingfrogblog.blogspot.com/2013/09/how-do-reference-counting-and-tracing.html" target="_blank" rel="noopener">http://flyingfrogblog.blogspot.com/2013/09/how-do-reference-counting-and-tracing.html</a></li>
<li><a href="https://www.dynatrace.com/resources/ebooks/javabook/how-garbage-collection-works/" target="_blank" rel="noopener">https://www.dynatrace.com/resources/ebooks/javabook/how-garbage-collection-works/</a></li>
<li><a href="http://stackoverflow.com/questions/1910194/how-does-java-garbage-collection-work-with-circular-references" target="_blank" rel="noopener">http://stackoverflow.com/questions/1910194/how-does-java-garbage-collection-work-with-circular-references</a></li>
<li><a href="http://www.java-books.us/j2ee_0003.php" target="_blank" rel="noopener">http://www.java-books.us/j2ee_0003.php</a></li>
</ul>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>GC</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ Tips</title>
    <url>/2017-01-03-IntelliJ-Tips/</url>
    <content><![CDATA[<h1 id="Shortcuts"><a href="#Shortcuts" class="headerlink" title="Shortcuts"></a>Shortcuts</h1><ul>
<li>Ctrl+J: To show JavaDoc</li>
<li>Cmd+Alt+B: To show interface implementations</li>
<li>Alt+Enter: when cursor on class declare line, press Alt+Enter can quickly create a unit test against this test class</li>
</ul>
<ul>
<li><p>Ctrl+Shift+A: Action window, just like sublime, search IDE actions</p>
</li>
<li><p>F11: add bookmark,</p>
</li>
<li><p>Shift+F11: show bookmarks</p>
</li>
<li><p>Shift + Escape: close bottom source pannel or left side barGo to settings, Editor-&gt;General-&gt;Mouse-&gt; change font size (Zoom)</p>
</li>
<li><p>Alt + F: Git refresh : Assign it in Intellij key map</p>
</li>
<li><p>Ctrl + T: swich different editorsAlt + F1: Show in , then preses ‘1’ to show file in project viewer, like “scroll from source”use Ctrl+Q to show quick documentation for the element at caret. to show javadocAlt + F12: to open terminal window, then ‘mvn package’</p>
</li>
<li><p>Ctrl+I: implement methodsAlt+A: code completion, this is customized in keymap, for ‘basic’Press Tab / Shift+Tab. To change indentation of a text fragmentCtrl+Alt+I To fix indentationCtrl+D  Duplicate Line or SelectionAlt + Insert: generate code (getter or setter, toString)Ctrl+F12: List all opened files, press Enter to selectAlt+1: to show the project tree window, press Alt+1 again will close the project structureAlt+7: show structureGo to interface implementations, the shortcut In PC, it is CTRL + ALT + B: JetBrains navigation documentation.</p>
</li>
<li><p>maximize edito pane: Ctrl + Shift + F12 (Default keymap).- Ctrl+R: repalce- F6: move file, Shift+F6: rename file- Ctrl+Alt+ &lt;-: go back to previous position- Ctrl+Alt+S: show settings- bookmakr: F11 toggle for annonymous bookmark, Shift+F11: show all bookmarks. Ctrl+F11: then press 0,1,2,3, etc. then Ctrl +1, Ctrl +3, to go to that bookmarkmaster password: hello123- copy file name: focus file in “project view”, press Ctrl+C- Incremental search: Ctrl+F, then use up/down arrow keys to navigate- Ctrl+Shift+N: open files by file name pattern- Press Ctrl+Shift+B . Press the Ctrl+Shift keys and hover your mouse pointer over the symbol. When the symbol turns to a hyperlink, click it without releasing Ctrl+Shift keys. The type declaration of the symbol opens in the editor.</p>
</li>
<li><p>Ctrl+Shift+F7: highlight all references (of selected method)<br>put carpet on a name, Ctrl+B will show the definition<br>Ctrl+Shift+Alt+F: copy current file name</p>
</li>
<li><ul>
<li>go to matching braceCtrl+} will move to the close bracket.Ctrl+{ will move to the open bracket</li>
</ul>
</li>
<li><ul>
<li>split editorgo to menu “window” -&gt; “editor tabs” -&gt; split<br>Firslty open wealth-access-ui project, which only contains files at root, then right click in left pane, and chose import wealth-acecss-ui, it will load module.Use F2/Shift+F2 keys to jump between highlighted syntax errors.Use Ctrl+Alt+Up/Ctrl+Alt+Down shortcuts to jump between compiler error messages or search operation results.Use Ctrl+J to complete any valid Live Template abbreviation if you don’t remember it. For example, type it and press Ctrl+J to see what happens.</li>
</ul>
</li>
<li><p>Navigating to the declaration of a symbol<br>Place the caret at the desired symbol in the editor.Do one of the following:On the main menu, choose Navigate | Declaration.Press Ctrl+B.Click the middle mouse button.Keeping Ctrl pressed, point to the symbol, and click, when it turns to a hyperlink. You can also see declaration at the tooltip while keeping Ctrl pressed.</p>
</li>
</ul>
<p>Ctrl+Shift+A: Action window, just like sublime, search IDE actions<br>F11: add bookmark,<br>Shift+F11: show bookmarks<br>Shift + Escape: close bottom source pannel or left side bar<br>Go to settings, Editor-&gt;General-&gt;Mouse-&gt; change font size (Zoom)<br>Alt + F: Git refresh : Assign it in Intellij key map<br>Ctrl + T: swich different editors<br>Alt + F1: Show in , then preses ‘1’ to show file in project viewer, like “scroll from source”<br>use Ctrl+Q to show quick documentation for the element at caret. to show javadoc<br>Alt + F12: to open terminal window, then ‘mvn package’<br>Ctrl+I: implement methods<br>Alt+A: code completion, this is customized in keymap, for ‘basic’<br>Press Tab / Shift+Tab. To change indentation of a text fragment<br>Ctrl+Alt+I To fix indentation<br>Ctrl+D  Duplicate Line or Selection<br>Alt + Insert: generate code (getter or setter, toString)<br>Ctrl+F12: List all opened files, press Enter to select<br>Alt+1: to show the project tree window, press Alt+1 again will close the project structure<br>Alt+7: show structure<br>Go to interface implementations, the shortcut In PC, it is CTRL + ALT + B: JetBrains navigation documentation.</p>
<ul>
<li><p>maximize edito pane: Ctrl + Shift + F12 (Default keymap).</p>
</li>
<li><p>Ctrl+R: repalce</p>
</li>
<li><p>F6: move file, Shift+F6: rename file</p>
</li>
<li><p>Ctrl+Alt+ &lt;-: go back to previous position</p>
</li>
<li><p>Ctrl+Alt+S: show settings</p>
</li>
<li><p>bookmakr: F11 toggle for annonymous bookmark, Shift+F11: show all bookmarks. Ctrl+F11: then press 0,1,2,3, etc. then Ctrl +1, Ctrl +3, to go to that bookmark<br>master password: hello123</p>
</li>
<li><p>copy file name: focus file in “project view”, press Ctrl+C</p>
</li>
<li><p>Incremental search: Ctrl+F, then use up/down arrow keys to navigate</p>
</li>
<li><p>Ctrl+Shift+N: open files by file name pattern</p>
</li>
<li><p>Press Ctrl+Shift+B . Press the Ctrl+Shift keys and hover your mouse pointer over the symbol. When the symbol turns to a hyperlink, click it without releasing Ctrl+Shift keys. The type declaration of the symbol opens in the editor.</p>
</li>
<li><p>Ctrl+Shift+F7: highlight all references (of selected method)</p>
</li>
</ul>
<p>put carpet on a name, Ctrl+B will show the definition</p>
<p>Ctrl+Shift+Alt+F: copy current file name</p>
<p>– go to matching brace<br>Ctrl+} will move to the close bracket.<br>Ctrl+{ will move to the open bracket</p>
<p>– split editor<br>go to menu “window” -&gt; “editor tabs” -&gt; split</p>
<p>Firslty open wealth-access-ui project, which only contains files at root, then right click in left pane, and chose import wealth-acecss-ui, it will load module.<br>Use F2/Shift+F2 keys to jump between highlighted syntax errors.<br>Use Ctrl+Alt+Up/Ctrl+Alt+Down shortcuts to jump between compiler error messages or search operation results.<br>Use Ctrl+J to complete any valid Live Template abbreviation if you don’t remember it. For example, type it and press Ctrl+J to see what happens.</p>
<ul>
<li>Navigating to the declaration of a symbol</li>
</ul>
<p>Place the caret at the desired symbol in the editor.<br>Do one of the following:<br>On the main menu, choose Navigate | Declaration.<br>Press Ctrl+B.<br>Click the middle mouse button.<br>Keeping Ctrl pressed, point to the symbol, and click, when it turns to a hyperlink. You can also see declaration at the tooltip while keeping Ctrl pressed.</p>
<p>By defining a Scope when searching, you can include/exclude arbitrary files/folders from that scope.<br>Detailed Answer<br>One way to achieve your requirement (excluding files and folders from a search) is to define a custom scope. This is specifically useful because sometimes you just want to exclude a folder from your search and not from the whole project.<br>Follow these steps:<br>Edit -&gt; Find -&gt; Find in path or press Ctrl+Shift+F.Choose Custom in the Scope section and then choose <unknown scope></unknown></p>
<h2 id="how-to-add-xx-properties-project-to-xx-project-as-dependencies"><a href="#how-to-add-xx-properties-project-to-xx-project-as-dependencies" class="headerlink" title="how to add xx-properties project to xx project as dependencies"></a>how to add xx-properties project to xx project as dependencies</h2><p>select project and press F4 to open properites, chose ‘module’ in left pane and then click “+”, chose ‘import module’, then chose the properties project</p>
<h1 id="Intelij-classes"><a href="#Intelij-classes" class="headerlink" title="Intelij classes"></a>Intelij classes</h1><h2 id="Annotation-Nullable"><a href="#Annotation-Nullable" class="headerlink" title="Annotation Nullable"></a>Annotation Nullable</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright 2000-2009 JetBrains s.r.o.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.jetbrains.annotations;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * An element annotated with Nullable claims &lt;code&gt;null&lt;/code&gt; value is perfectly &lt;em&gt;valid&lt;/em&gt;</span></span><br><span class="line"><span class="comment"> * to return (for methods), pass to (parameters) and hold (local variables and fields).</span></span><br><span class="line"><span class="comment"> * Apart from documentation purposes this annotation is intended to be used by static analysis tools</span></span><br><span class="line"><span class="comment"> * to validate against probable runtime errors and element contract violations.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> max</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.CLASS)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD, ElementType.FIELD, ElementType.PARAMETER, ElementType.LOCAL_VARIABLE&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Nullable &#123;</span><br><span class="line">  <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>java</tag>
        <tag>intelliJ</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Enum Misc</title>
    <url>/2017-01-02-Enum-Misc/</url>
    <content><![CDATA[<h1 id="Enum-Misc"><a href="#Enum-Misc" class="headerlink" title="Enum Misc"></a>Enum Misc</h1><ul>
<li>All enums implicitely extends <strong>java.lang.Enum</strong></li>
<li>Enum in Java are <strong>type-safe</strong></li>
<li>You can specify values of enum constants at the <strong>creation</strong> time. <strong>Enum.values()</strong> returns an array of MyEnum’s values.</li>
<li>Enum constants are implicitly static and final and can not be changed once created.</li>
<li>Enum can be safely compare using:<ul>
<li>Switch-Case Statement</li>
<li>== Operator</li>
<li>.equals() method</li>
</ul>
</li>
<li>You can not create instance of enums by using new operator in Java because constructor of Enum in Java can only be private and Enums constants can only be created inside Enums itself.</li>
<li>Instance of Enum in Java <strong>is created when</strong> any Enum constants are <strong>first called or referenced</strong> in code.</li>
<li>An enum can be declared outside or inside a class, but NOT in a method.</li>
<li>An enum declared outside a class must NOT be marked static, final , abstract, protected , or private</li>
<li>Enums can contain constructors, methods, variables, and constant class bodies.</li>
<li>enum constructors can have arguments, and can be overloaded.</li>
<li>enum constructors can NEVER be invoked directly in code. They are always called automatically when an enum is initialized.</li>
<li>The semicolon at the end of an enum declaration is optional.</li>
</ul>
<p>These are legal:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> Foo &#123; ONE, TWO, THREE&#125;</span><br><span class="line"><span class="keyword">enum</span> Foo &#123; ONE, TWO, THREE&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="type-safe"><a href="#type-safe" class="headerlink" title="type safe"></a>type safe</h1><p>The advantage of this style of enumeration over the C/C++-style enum or constants is that they are <strong>type-safe</strong>, meaning that, for example, if you define a method</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuit</span><span class="params">(Suit suit)</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure>

<p>the caller cannot pass in a value that does not correspond to an enumeration value</p>
<h1 id="Language-level-features"><a href="#Language-level-features" class="headerlink" title="Language level features"></a>Language level features</h1><ul>
<li>Since enumeration instances are all effectively <strong>singletons</strong>, they can be compared for equality using identity (“==”).</li>
<li>In Java 5.0, the enum keyword is introduced as a special type of class that always extends <strong>java.lang.Enum</strong>.</li>
<li>Note that the enumeration values are still <strong>static class members</strong>, though not declared as such.</li>
<li>Enum is implemented using <strong>Arrays and common operations result in constant time</strong>. So if you are thinking of an high-performance Map, EnumMap could be a decent choice for enumeration data. We have already seen many examples of Java enum in our article 10 Examples of enum in Java  and using Enum as thread-safe Singleton. In this Java tutorial, we will see simple examples of using EnumMap in Java. </li>
<li>All keys used in EnumMap must be  from same Enum type which is specified while creating EnumMap in Java. For example if you can not use different enum instances from two different enum.</li>
<li>EnumMap is ordered collection and they are maintained in the natural order of their keys( natural order of keys means  the order on which enum constant are declared inside enum type ). you can verify this while Iterating over an EnumMap in Java.</li>
<li>Iterators of EnumMap are fail-fast Iterator , much like of ConcurrentHashMap and doesn’t throw ConcurrentModificationException and may not show effect of any modification on EnumMap during Iteration process.</li>
<li>You can not insert null keys inside EnumMap in Java.  EnumMap doesn’t allow null key and throw NullPointerException, at same time null values are permitted.</li>
<li>EnumMap is not synchronized and it has to be synchronized manually before using it in a concurrent or multi-threaded environment. like synchronized Map in Java  you can also make EnumMap synchronized by using Collections.synchronizedMap() method and as per javadoc this should be done while creating EnumMap in java to avoid accidental non synchronized access.</li>
<li>The constructor of enum in java must be private any other access modifier will result in compilation error. Now to get the value associated with each coin you can define a public getValue() method inside Java enum like any normal Java class. Also, the semicolon in the first line is optional.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Currency &#123;</span><br><span class="line">        PENNY(<span class="number">1</span>), NICKLE(<span class="number">5</span>), DIME(<span class="number">10</span>), QUARTER(<span class="number">25</span>);</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> value;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Currency</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>Since constants defined inside Enum in Java are <strong>final</strong> you can <strong>safely compare them using “==”</strong>, the equality operator as shown in following example of  Java Enum:</li>
<li>Java compiler automatically generates static values() method for every enum in java. Values() method returns array of Enum constants in the same order they have listed in Enum and you can use values() to iterate over values of Enum  in Java as shown in below example. Notice <strong>the order is exactly the same as defined order</strong> in the Enum.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(Currency coin: Currency.values())&#123;</span><br><span class="line">   System.out.println(<span class="string">"coin: "</span> + coin);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>In Java, Enum can override methods also. Let’s see an example of overriding toString() method inside Enum in Java to provide a meaningful description for enums constants.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Currency &#123;</span><br><span class="line">  ........</span><br><span class="line">      </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">switch</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">         <span class="keyword">case</span> PENNY:</span><br><span class="line">              System.out.println(<span class="string">"Penny: "</span> + value);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> NICKLE:</span><br><span class="line">              System.out.println(<span class="string">"Nickle: "</span> + value);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> DIME:</span><br><span class="line">              System.out.println(<span class="string">"Dime: "</span> + value);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> QUARTER:</span><br><span class="line">              System.out.println(<span class="string">"Quarter: "</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">super</span>.toString();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>EnumSet doesn’t have any public constructor instead it provides <strong>factory methods to create instance e.g. EnumSet.of()</strong> methods. This design allows EnumSet to internally choose between two different implementations depending upon the size of Enum constants.</li>
</ul>
<p>If Enum has <strong>less than 64 constants than EnumSet uses RegularEnumSet</strong> class which internally uses a long variable to store those 64 Enum constants and if Enum has more keys than 64 then it uses JumboEnumSet. See my article the difference between RegularEnumSet and JumboEnumSet for more details.</p>
<ul>
<li>An instance of Enum in Java is created when any Enum constants are first called or referenced in code.</li>
<li>Enum in Java can *<em>implement the interface and override any method *</em>like normal class It’s also worth noting that Enum in java implicitly implements both Serializable and Comparable interface. Let’s see and example of how to implement interface using Java Enum:</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Currency implements Runnable&#123;</span><br><span class="line">  PENNY(<span class="number">1</span>), NICKLE(<span class="number">5</span>), DIME(<span class="number">10</span>), QUARTER(<span class="number">25</span>);</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> value;</span><br><span class="line">  ............</span><br><span class="line">        </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  System.out.println(<span class="string">"Enum in Java implement interfaces"</span>);</span><br><span class="line">                </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>You can define abstract methods inside Enum in Java and can also provide a different implementation for different instances of enum in java.  Let’s see an example of using abstract method inside enum in java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">enum</span> Currency &#123;</span><br><span class="line">        PENNY(<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">color</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"copper"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        NICKLE(<span class="number">5</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">color</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"bronze"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        DIME(<span class="number">10</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">color</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"silver"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        QUARTER(<span class="number">25</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">color</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"silver"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> value;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">color</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Currency</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>In this example since every coin will have the different color we made the color() method abstract and let each instance of Enum to define  their own color. You can get color of any coin by just calling the color() method as shown in below example of Java Enum:</p>
<p>System.out.println(“Color: “ + Currency.DIME.color());</p>
<p>So that was the comprehensive list of properties, behavior and capabilities of Enumeration type in Java. I know, it’s not easy to remember all those powerful features and that’s why I have prepared this small Microsoft powerpoint slide containing all important properties of Enum in Java. You can always come back and check this slide to revise important features of Java Enum.</p>
<h1 id="RegularEnumSet-vs-JumboEnumSet"><a href="#RegularEnumSet-vs-JumboEnumSet" class="headerlink" title="RegularEnumSet vs. JumboEnumSet"></a>RegularEnumSet vs. JumboEnumSet</h1><ul>
<li>Since Enum always has fixed number of instances, data-structure which is used to store Enum can be optimized depending upon number of instances and that’s why we have two different implementation of EnumSet in Java. We will take a closer look on this concept in next paragraph.</li>
<li>How EnumSet is implemented in Java<br>EnumSet is an abstract class and it provides two concrete implementations, java.util.RegularEnumSet and java.util.JumboEnumSet. Main difference between RegularEnumSet and JumboEnumSet is that former uses a long variable to store elements while later uses a long[] to store its element. Since RegularEnumSet uses long variable, which is a 64 bit data type, it can only hold that much of element. That’s why when an empty EnumSet is created using EnumSet.noneOf() method, it choose RegularEnumSet if key universe (number of enum instances in Key Enum) is less than or equal to 64 and JumboEnumSet if key universe is more than 64. Here is the code which does that :</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Enum&lt;E&gt;&gt; <span class="function">EnumSet&lt;E&gt; <span class="title">noneOf</span><span class="params">(Class&lt;E&gt; elementType)</span> </span>&#123;   </span><br><span class="line">        .. ............ </span><br><span class="line">        <span class="keyword">if</span> (universe.length &lt;= <span class="number">64</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> RegularEnumSet&lt;E&gt;(elementType, universe);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> JumboEnumSet&lt;E&gt;(elementType, universe);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>EnumSet is <strong>not thread-safe</strong>, which means if it needs to be externally synchronized, when multiple thread access it and one of them modifies the Collection.</li>
<li>EnumSet can not be used to store any other object <strong>except Enum</strong>, at the same time you can not store instances of two different Enum.</li>
<li>EnumSet doesn’t allow Null elements.</li>
<li>EnumSet Iterators are fail-safe in nature.</li>
</ol>
<h1 id="Difference-between-EnumMap-vs-HashMap"><a href="#Difference-between-EnumMap-vs-HashMap" class="headerlink" title="Difference between EnumMap vs HashMap"></a>Difference between EnumMap vs HashMap</h1><ul>
<li>Internally EnumMap is represented using Array and provides constant time performance for common methods e.g. get() or put(). Now let’s see few differences between EnumMap vs HashMap :</li>
<li>As said earlier, first and foremost difference between EnumMap and HashMap is that EnumMap is optimized for enum keys while HashMap is a general purpose Map implementation similar to Hashtable. you can not use any type other than Enum as key in EnumMap but you can use both Enum and any other Object as key in HashMap.</li>
<li>Another difference between EnumMap and HashMap is <strong>performance</strong>. as discussed in the previous point, due to specialized optimization done for Enum keys, EnumMap is likely to perform better than HashMap when using enum as key object.</li>
<li>One more thing which can be considered as the difference between HashMap and EnumMap is <strong>the probability of Collision</strong>. Since <strong>Enum is internally maintained as array ** and they are **stored in their natural order using ordinal()</strong>, as shown in following code which is taken from put() method of EnumMap.<br>Since EnumMap doesn’t call hashCode method on keys, there is no chance of collision.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> index = ((Enum)key).ordinal();</span><br><span class="line">    Object oldValue = vals[index];</span><br><span class="line">    vals[index] = maskNull(value);</span><br></pre></td></tr></table></figure>

<ul>
<li>you can use both == and equals() method to compare Enum, they will produce same result because equals() method of Java.lang.Enum internally uses == to compare enum in Java. Since every Enum in Java implicitly extends java.lang.Enum ,and since equals() method is declared final, there is no chance of overriding equals method in user defined enum</li>
<li>But there are still some slight difference, because  ==  (equality operator) being operator and equals() being method.</li>
<li><ul>
<li>Using == for comparing Enum can prevent NullPointerException</li>
</ul>
</li>
<li><ul>
<li>== method provides type safety during compile time</li>
</ul>
</li>
</ul>
<ul>
<li>A <strong>fail-fast</strong> system is nothing but immediately report any failure that is likely to lead to failure. When a problem occurs, a fail-fast system fails immediately. In Java, we can find this behavior with iterators. Incase, you have called iterator on a collection object, and another thread tries to modify the collection object, then concurrent modification exception will be thrown. This is called fail-fast. - See more at: </li>
</ul>
<h1 id="Real-world-Examples-of-Enum-in-Java"><a href="#Real-world-Examples-of-Enum-in-Java" class="headerlink" title="Real world Examples of Enum in Java"></a>Real world Examples of Enum in Java</h1><ol>
<li>Enum as Thread Safe Singleton</li>
<li>Strategy Pattern using Enum. to implement the Strategy interface and define individual strategy</li>
<li>Enum as replacement of Enum String or int pattern. There is now no need to use String or integer constant to represent fixed set of things e.g. status of object like ON and OFF for a button or START, IN PROGRESS and DONE for a Task. Enum is much better suited for those needs as it provide compile time type safety and better debugging assistent than String or Integer.</li>
<li>Enum as State Machine</li>
<li>Enum Java valueOf example. “You could also include valueOf() method of enum in java which is added by compiler in any enum along with values() method. Enum valueOf() is a static method which takes a string argument and can be used to convert a String into an enum. One think though you would like to keep in mind is that valueOf(String) method of enum will throw “Exception in thread “main” java.lang.IllegalArgumentException: No enum const class” if you supply any string other than enum values.</li>
</ol>
<h1 id="Reverse-lookup"><a href="#Reverse-lookup" class="headerlink" title="Reverse lookup"></a>Reverse lookup</h1><p>Often in your object model it is common to have data that is naturally “associated” with an enumeration. Since an enum is a class, it is easy to represent this associated information as class fields. Often it is desirable to “lookup” the associated enumeration using the field value. This is easy to do using a static java.util.Map. Take, for example, a Status enum that has an associated status code.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Status</span><br><span class="line">&#123;</span><br><span class="line">     WAITING(<span class="number">0</span>),</span><br><span class="line">     READY(<span class="number">1</span>),</span><br><span class="line">     SKIPPED(-<span class="number">1</span>),</span><br><span class="line">     COMPLETED(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Integer,Status&gt; lookup</span><br><span class="line">          = <span class="keyword">new</span> HashMap&lt;Integer,Status&gt;();</span><br><span class="line"></span><br><span class="line">     <span class="keyword">static</span> &#123;</span><br><span class="line">          <span class="keyword">for</span>(Status s : EnumSet.allOf(Status.class))</span><br><span class="line">               lookup.put(s.getCode(), s);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">private</span> <span class="title">Status</span><span class="params">(<span class="keyword">int</span> code)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">this</span>.code = code;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCode</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> code; &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Status <span class="title">get</span><span class="params">(<span class="keyword">int</span> code)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> lookup.get(code);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Sleek-EnumMap"><a href="#Sleek-EnumMap" class="headerlink" title="Sleek EnumMap"></a>Sleek EnumMap</h1><p>Why would I use an EnumMap rather than a HashMap?  The primary reasons boil down to some inherent advantages of Java’s enum as stated in the Javadoc documentation for EnumMap: “Enum maps are represented internally as arrays. This representation is extremely compact and efficient.” Later in the same Javadoc documentation, there is an “Implementation Note” that states: “All basic operations execute in constant time. They are likely (though not guaranteed) to be faster than their HashMap counterparts.”</p>
<p>The Javadoc documentation states similar advantages for the EnumSet over the HashSet:</p>
<blockquote>
<p>Enum sets are represented internally as <strong>bit vectors</strong>. This representation is extremely <strong>compact and efficient</strong>. The space and time performance of this class should be good enough to allow its use as a high-quality, typesafe alternative to traditional int-based ‘bit flags.’  … Implementation note: All basic operations execute <strong>in constant time</strong>. They are likely (though not guaranteed) to be much faster than their HashSet counterparts. Even <strong>bulk operations execute in constant time</strong> if their argument is also an enum set.</p>
</blockquote>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://crunchify.com/why-and-for-what-should-i-use-enum-java-enum-examples/" target="_blank" rel="noopener">http://crunchify.com/why-and-for-what-should-i-use-enum-java-enum-examples/</a></li>
<li><a href="http://www.ajaxonomy.com/2007/java/making-the-most-of-java-50-enum-tricks" target="_blank" rel="noopener">http://www.ajaxonomy.com/2007/java/making-the-most-of-java-50-enum-tricks</a></li>
<li><a href="http://www.javaworld.com/article/2073430/the-sleek-enummap-and-enumset.html" target="_blank" rel="noopener">http://www.javaworld.com/article/2073430/the-sleek-enummap-and-enumset.html</a></li>
<li><a href="http://javarevisited.blogspot.com/2011/08/enum-in-java-example-tutorial.html#ixzz4W6bC2mUV" target="_blank" rel="noopener">http://javarevisited.blogspot.com/2011/08/enum-in-java-example-tutorial.html#ixzz4W6bC2mUV</a></li>
<li><a href="http://javarevisited.blogspot.in/2011/08/enum-in-java-example-tutorial.html" target="_blank" rel="noopener">http://javarevisited.blogspot.in/2011/08/enum-in-java-example-tutorial.html</a></li>
<li><a href="http://www.java67.com/2013/11/difference-between-regularenumset-and-jumboenumset-java.html#ixzz4WANO22q5" target="_blank" rel="noopener">http://www.java67.com/2013/11/difference-between-regularenumset-and-jumboenumset-java.html#ixzz4WANO22q5</a></li>
<li><a href="http://javarevisited.blogspot.com/2011/08/enum-in-java-example-tutorial.html#ixzz4WAP43bUB" target="_blank" rel="noopener">http://javarevisited.blogspot.com/2011/08/enum-in-java-example-tutorial.html#ixzz4WAP43bUB</a></li>
<li><a href="http://javarevisited.blogspot.com/2012/09/difference-between-enummap-and-hashmap-in-java-vs.html#ixzz4WAQcrjkC" target="_blank" rel="noopener">http://javarevisited.blogspot.com/2012/09/difference-between-enummap-and-hashmap-in-java-vs.html#ixzz4WAQcrjkC</a></li>
<li><a href="http://javarevisited.blogspot.com/2013/04/how-to-compare-two-enum-in-java-equals.html#ixzz4WARs9slQ" target="_blank" rel="noopener">http://javarevisited.blogspot.com/2013/04/how-to-compare-two-enum-in-java-equals.html#ixzz4WARs9slQ</a></li>
</ul>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>enum</tag>
      </tags>
  </entry>
  <entry>
    <title>Arbitrage vs Heading</title>
    <url>/2017-01-04-Arbitrage-vs-Hedging/</url>
    <content><![CDATA[<h1 id="What-is-the-difference-between-arbitrage-and-hedging"><a href="#What-is-the-difference-between-arbitrage-and-hedging" class="headerlink" title="What is the difference between arbitrage and hedging?"></a>What is the difference between arbitrage and hedging?</h1><ul>
<li><strong>Hedging</strong> involves the concurrent use of more than one bet in opposite directions <strong>to limit risk</strong> of serious investment loss. </li>
<li><strong>Arbitrage is the practice of trading a price difference between more than one market for the same good in an attempt **to profit</strong> from the <strong>imbalance</strong>. 
These two concepts play important roles in finance, economics and investments.</li>
</ul>
<p>Each transaction relies involves two competing types of trades: <strong>betting</strong> short versus betting long (hedging) and *<em>buying versus selling *</em>(arbitrage). Both are used by traders who operate in volatile, dynamic market environments. Other than these two similarities, however, they are very different techniques that are used for very different purposes.</p>
<h2 id="Arbitrage"><a href="#Arbitrage" class="headerlink" title="Arbitrage"></a>Arbitrage</h2><p>Arbitrage involves <strong>both purchase and sale within a very short period of time</strong>. If a good is being sold for $100 in one market and $108 in another market, a savvy trader could purchase the $100 item and then sell it in the other market for $108. The trader enjoys <strong>a risk-free return</strong> of 8% ($8 / $100), minus any transaction or transportation expenses.</p>
<p>With the proliferation of high-speed computing technology and constant price information, arbitrage is much more difficult in financial markets than it used to be. Still, arbitrage opportunities can be found in the forex market, in bonds, in futures markets and sometimes in equities.</p>
<h2 id="Hedging"><a href="#Hedging" class="headerlink" title="Hedging"></a>Hedging</h2><p>Hedging is <strong>not the pursuit of risk-free *<em>trades; instead, it is an attempt to *</em>reduce known risks</strong> while trading. Options contacts, forward contracts, swaps and derivatives are all used by traders to purchase opposite positions in the market. By betting against both upward and downward movement, the hedger can ensure a certain amount of *<em>reduced gain or loss *</em> on a trade.</p>
<p>Hedging can take place almost anywhere, but it has become a particularly important aspect of financial markets, business management and gambling. Much like any other risk/reward trade, hedging results in lower returns for the party involved, but it can offer significant protection against downside risk.</p>
]]></content>
  </entry>
  <entry>
    <title>HashMap in JDK</title>
    <url>/2017-01-16-Java-HashMap/</url>
    <content><![CDATA[<h1 id="Hashmap-in-JDK"><a href="#Hashmap-in-JDK" class="headerlink" title="Hashmap in JDK"></a>Hashmap in JDK</h1><h2 id="Some-note-worth-points-about-hashmap"><a href="#Some-note-worth-points-about-hashmap" class="headerlink" title="Some note worth points about hashmap"></a>Some note worth points about hashmap</h2><ul>
<li>Lookup process<ul>
<li>Step# 1: Quickly determine the bucket number in which this element may reside (using key.hashCode()).</li>
<li>Step# 2: Go over the mini-list and return the element that matches the key (using key.equals()).</li>
</ul>
</li>
<li>Immutability of keys</li>
<li>In Node&lt;K,V&gt; node of hashMap, besides key, value, hash, there is Node next link inside. So undelrying table is a linked list.</li>
<li>For <strong>get()</strong>, firstly using hashcode calculation, divide by bucket number and get reminder, to locate the bucket, then compare key via “.euqals()”, if matched, the value will be returned.</li>
<li>Load factor and resize<br>When new hashHap is being populated, the linkedList associated with each bucket of source hashMap is iterated and nodes are copied to the destination bucket. However, note that these new nodes are prepended to the head of the destination linkedList. So resizing has an side effect of reversing the order of the items in the list. Default load factor for hashMap is 0.75.</li>
<li>Worst-case performance:<br>In the worst case, a hashMap reduces to a linkedList.<br>However with Java 8, there is a change,<br>Java 8 intelligently determines if we are running in the worst-case performance scenario and converts the list into a binary search tree.</li>
<li>Collisions<br>Collisions happen when 2 distinct keys generate the same hashCode() value. Multiple collisions are the result of bad hashCode() algorithm.There are many collision-resolution strategies - chaining, double-hashing, clustering.<br>However, java has chosen chaining strategy for hashMap, so in case of collisions, items are chained together just like in a linkedList.</li>
<li>Some specialized hashMaps for specific purposes:</li>
<li><ul>
<li>ConcurrentHashMap: HashMap to be used in multithreaded applications.</li>
</ul>
</li>
<li><ul>
<li>EnumMap: HashMap with Enum values as keys.</li>
</ul>
</li>
<li><ul>
<li>LinkedHashMap: HashMap with predictable iteration order (great for FIFO/LIFO caches)</li>
</ul>
</li>
</ul>
<h2 id="WeakReferenceMap-SoftReference-Map-etc"><a href="#WeakReferenceMap-SoftReference-Map-etc" class="headerlink" title="WeakReferenceMap, SoftReference Map etc."></a>WeakReferenceMap, SoftReference Map etc.</h2><p>Weak references (a WeakHashMap) aren’t particularly good for this either, because as the elements in the cache become dereferenced by the application code they will quickly be removed from the cache by the garbage collector. This basically means there will be cache faults often (in other words, the cache lookups will fail).</p>
<p>Soft references can be very handy in situations such as this. Because soft references only exist if the memory is available, they can make very effective use of the space that is available. Unfortunately, although there is a WeakHashMap , there is no java.util.SoftHashMap . Why? I’m not really sure. Thankfully, a little trip back over to Jakarta-Commons-Collections digs up the org.apache.commons.collections.map.ReferenceMap .</p>
<p>SoftReferences are typically used for implementing memory caching. The JVM should try to keep softly referenced objects in memory as long as possible, and when memory is low clear the oldest soft references first. According to the JavaDoc, there are no guarantees though.</p>
<p>WeakReferences is the reference type I use most frequently. It’s typically used when you want weak listeners or if you want to connect additional information to an object (using WeakHashMap for example). Very useful stuff when you want to reduce class coupling. </p>
<p>Phantom references can be used to perform pre-garbage collection actions such as freeing resources. Instead, people usually use the finalize() method for this which is not a good idea. Finalizers have a horrible impact on the performance of the garbage collector and can break data integrity of your application if you’re not very careful since the “finalizer” is invoked in a random thread, at a random time.</p>
<p>In the constructor of a phantom reference, you specify a ReferenceQueue where the phantom references are enqueued once the referenced objects becomes “phantom reachable”. Phantom reachable means unreachable other than through the phantom reference. The initially confusing thing is that although the phantom reference continues to hold the referenced object in a private field (unlike soft or weak references), its getReference() method always returns null. This is so that you cannot make the object strongly reachable again.</p>
<p>From time to time, you can poll the ReferenceQueue and check if there are any new PhantomReferences whose referenced objects have become phantom reachable. In order to be able to to anything useful, one can for example derive a class from java.lang.ref.PhantomReference that references resources that should be freed before garbage collection. The referenced object is only garbage collected once the phantom reference becomes unreachable itself. </p>
<h2 id="Source-code-analysis"><a href="#Source-code-analysis" class="headerlink" title="Source code analysis"></a>Source code analysis</h2><h3 id="Internal-data-structure"><a href="#Internal-data-structure" class="headerlink" title="Internal data structure"></a>Internal data structure</h3><ul>
<li>transient Entry&lt;K, V&gt;[] elementData;</li>
<li>transient int modCount = 0;</li>
<li>private transient V[] cache;</li>
</ul>
<h3 id="Put"><a href="#Put" class="headerlink" title="Put"></a>Put</h3><p>It will call return putImpl(key, value); directly</p>
<h4 id="V-putImpl-K-key-V-value"><a href="#V-putImpl-K-key-V-value" class="headerlink" title="V putImpl(K key, V value)"></a>V putImpl(K key, V value)</h4><ul>
<li>if(key == null)</li>
<li><ul>
<li>entry = findNullKeyEntry();<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">entry = findNullKeyEntry();</span><br><span class="line">            <span class="keyword">if</span> (entry == <span class="keyword">null</span>) &#123;</span><br><span class="line">                modCount++;</span><br><span class="line">                entry = createHashedEntry(<span class="keyword">null</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span> (++elementCount &gt; threshold) &#123;</span><br><span class="line">                    rehash();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<p>— findNullKeyEntry<br>Iterate the internal array to locate null entry</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">findNullKeyEntry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Entry&lt;K,V&gt; m = elementData[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">while</span> (m != <span class="keyword">null</span> &amp;&amp; m.key != <span class="keyword">null</span>) &#123;</span><br><span class="line">            m = m.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>else (if key is not null)</li>
</ul>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Collections Misc</title>
    <url>/2017-01-17-Java-Collections-Misc/</url>
    <content><![CDATA[<h1 id="Difference-between-equals-and-deepEquals-of-Arrays-in-Java"><a href="#Difference-between-equals-and-deepEquals-of-Arrays-in-Java" class="headerlink" title="Difference between equals and deepEquals of Arrays in Java"></a>Difference between equals and deepEquals of Arrays in Java</h1><ul>
<li>Arrays.equals() method does not compare recursively if an array contains another array </li>
<li>on other hand Arrays.deepEquals() method compare recursively if an array contains another array. </li>
<li>Arrays.equals() check is if element is null or not and then calls equals() method, it does not check for Array type. </li>
<li>It’s better to use <strong>Arrays.equals()</strong> to compare <strong>non-nested</strong> Array and Arrays.<strong>deepEquals() to compare nested Array</strong>, as former is faster than later in the case of non-nested Array.</li>
</ul>
<h1 id="Checking-Array-for-duplicate-elements-Java"><a href="#Checking-Array-for-duplicate-elements-Java" class="headerlink" title="Checking Array for duplicate elements Java"></a>Checking Array for duplicate elements Java</h1><ol>
<li><p><strong>brute force</strong> method which compares each element of Array to all other elements and returns true if it founds duplicates. Though this is not an efficient choice it is the one which first comes to mind. complexity on order of O(n^2) not advised in production</p>
</li>
<li><p>Another quick way of checking if a Java array contains duplicates or not is to <strong>convert that array into Set</strong>. Since Set doesn’t allow duplicates size of  the corresponding Set will be smaller than original Array if Array contains duplicates otherwise the size of both Array and Set will be same. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List inputList = Arrays.asList(input);</span><br><span class="line">Set inputSet = <span class="keyword">new</span> HashSet(inputList);</span><br></pre></td></tr></table></figure>
</li>
<li><p>One more way to detect duplication in java array is adding every element of the <strong>array into HashSet</strong> which is a Set implementation. Since the add(Object obj) method of Set returns false if Set already contains an element to be added, it can be used to find out if the array contains duplicates in Java or not.</p>
</li>
</ol>
<ul>
<li>If you don’t prefer converting List to Set than you can still go with copying data <strong>from one ArrayList to other ArrayList ** and removing duplicates **by checking with ArrayList.contains()</strong> method.<h1 id="List-vs-Set"><a href="#List-vs-Set" class="headerlink" title="List vs Set"></a>List vs Set</h1>In short main difference between List and Set in Java is that List is an <strong>ordered</strong> collection which <strong>allows duplicates</strong> while <strong>Set is an unordered</strong> collection which <strong>doesn’t allow duplicates</strong>.</li>
</ul>
<h1 id="how-to-sort-list-in-reverse-order"><a href="#how-to-sort-list-in-reverse-order" class="headerlink" title="how to sort list in reverse order"></a>how to sort list in reverse order</h1><ul>
<li>Collections.sort(unsortedList, Collections.reverseOrder());</li>
<li>customized comparator</li>
<li>Collections.sort(unsortedList, String.CASE_INSENSITIVE_ORDER); // search insensitive order</li>
</ul>
<h1 id="Find-length-of-a-linked-list"><a href="#Find-length-of-a-linked-list" class="headerlink" title="Find length of a linked list"></a>Find length of a linked list</h1><h2 id="Iterative-Solutions"><a href="#Iterative-Solutions" class="headerlink" title="Iterative Solutions"></a>Iterative Solutions</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"> Node current = <span class="keyword">this</span>.head;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">while</span>(current != <span class="keyword">null</span>)&#123;</span><br><span class="line">  count++;</span><br><span class="line">  current=current.next()</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Recursive-Solution"><a href="#Recursive-Solution" class="headerlink" title="Recursive Solution:"></a>Recursive Solution:</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">(Node current)</span></span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(current == <span class="keyword">null</span>)&#123; <span class="comment">//base case</span></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">1</span>+length(current.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>You can see that we have used the fact that last node will point to null to terminate the recursion. This is called the <strong>base case</strong>. It’s very important to identify a base case while coding a recursive solution, without a base case, your program will never terminate and result in StackOverFlowError.</p>
<h1 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h1><ul>
<li>is nothing but a traversing object, made specifically for Collection objects like List and Set. </li>
<li>we have already aware about different kind of traversing methods like for-loop ,while loop,do-while,for each lop etc,they all are  index based traversing but as we know Java is purely object oriented language there is always possible ways of doing things <strong>using objects so Iterator is a way to traverse as well as access the data from the collection</strong>. </li>
</ul>
<h1 id="ListIterator"><a href="#ListIterator" class="headerlink" title="ListIterator"></a>ListIterator</h1><ul>
<li>in Java is an Iterator which allows user to traverse Collection like ArrayList and HashSet in both direction by using method <strong>previous() and next ()</strong>. You can obtain ListIterator from all List implementation <strong>including ArrayList and LinkedList</strong>. ListIterator doesn’t keep current index and its current position is determined by call to next() or previous() based on direction of traversing.<ul>
<li>List collection type also supports ListIterator which has add() method to add elements** in collection while Iterating. </li>
</ul>
</li>
</ul>
<h1 id="Blocking-queue"><a href="#Blocking-queue" class="headerlink" title="Blocking queue"></a>Blocking queue</h1><ul>
<li>BlockingQueue in Java doesn’t allow null elements, various implementation of BlockingQueue like ArrayBlockingQueue, LinkedBlockingQueue throws NullPointerException when you try to add null on queue.<h2 id="BlockingQueue-can-be-bounded-or-unbounded"><a href="#BlockingQueue-can-be-bounded-or-unbounded" class="headerlink" title="BlockingQueue can be bounded or unbounded."></a>BlockingQueue can be bounded or unbounded.</h2></li>
<li>A <strong>bounded</strong> BlockingQueue is one which is <strong>initialized with initial capacity</strong> and call to <strong>put() will be blocked</strong> if BlockingQueue is full and size is equal to capacity. This bounding nature makes it <strong>ideal to use a shared queue between multiple threads</strong> like in most common Producer consumer solutions in Java. </li>
<li>An <strong>unbounded Queue</strong> is one which is <strong>initialized without capacity</strong>, actually by default it initialized with Integer.MAX_VALUE. most common example of BlockingQueue uses bounded BlockingQueue as shown in below example.<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BlockingQueue&lt;String&gt; bQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;String&gt;(<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="BlockingQueue-implementations-like-ArrayBlockingQueue-LinkedBlockingQueue-and-PriorityBlockingQueue-are-thread-safe"><a href="#BlockingQueue-implementations-like-ArrayBlockingQueue-LinkedBlockingQueue-and-PriorityBlockingQueue-are-thread-safe" class="headerlink" title="BlockingQueue implementations like ArrayBlockingQueue, LinkedBlockingQueue and PriorityBlockingQueue are thread-safe."></a>BlockingQueue implementations like ArrayBlockingQueue, LinkedBlockingQueue and PriorityBlockingQueue are <strong>thread-safe</strong>.</h2><ul>
<li>All queuing method uses concurrency control and internal locks to perform operation atomically. </li>
</ul>
<h2 id="BlockingQueue-interface-extends-Collection-Queue-and-Iterable-interface-which-provides-it-all-Collection-and-Queue-related-methods-like-poll-and-peak-unlike-take-peek-method-returns-head-of-the-queue-without-removing-it-poll-also-retrieves-and-removes-elements-from-head-but-can-wait-till-specified-time-if-Queue-is-empty"><a href="#BlockingQueue-interface-extends-Collection-Queue-and-Iterable-interface-which-provides-it-all-Collection-and-Queue-related-methods-like-poll-and-peak-unlike-take-peek-method-returns-head-of-the-queue-without-removing-it-poll-also-retrieves-and-removes-elements-from-head-but-can-wait-till-specified-time-if-Queue-is-empty" class="headerlink" title="BlockingQueue interface extends Collection, Queue and Iterable interface which provides it all Collection and Queue related methods like poll(), and peak(), unlike take(), peek() method returns head of the queue without removing it, poll() also retrieves and removes elements from head but can wait till specified time if Queue is empty."></a>BlockingQueue interface extends Collection, Queue and Iterable interface which provides it all Collection and Queue related methods like <strong>poll(), and peak()</strong>, unlike take(), <strong>peek()</strong> method returns head of the queue <strong>without removing it</strong>, <strong>poll() also retrieves and removes elements from head but can wait till specified time if Queue is empty</strong>.</h2><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="http://javarevisited.blogspot.com/2012/12/how-to-compare-arrays-in-java-equals-deepequals-primitive-object.html#ixzz4WBifkyjg" target="_blank" rel="noopener">http://javarevisited.blogspot.com/2012/12/how-to-compare-arrays-in-java-equals-deepequals-primitive-object.html#ixzz4WBifkyjg</a></li>
<li><a href="http://javarevisited.blogspot.in/2012/02/how-to-check-or-detect-duplicate.html" target="_blank" rel="noopener">http://javarevisited.blogspot.in/2012/02/how-to-check-or-detect-duplicate.html</a></li>
<li><a href="http://javarevisited.blogspot.com/2012/12/how-to-remove-duplicates-elements-from-ArrayList-Java.html#ixzz4WBkudSwR" target="_blank" rel="noopener">http://javarevisited.blogspot.com/2012/12/how-to-remove-duplicates-elements-from-ArrayList-Java.html#ixzz4WBkudSwR</a></li>
<li><a href="http://javarevisited.blogspot.in/2012/04/difference-between-list-and-set-in-java.html" target="_blank" rel="noopener">http://javarevisited.blogspot.in/2012/04/difference-between-list-and-set-in-java.html</a></li>
<li><a href="http://javarevisited.blogspot.in/2012/01/how-to-sort-arraylist-in-java-example.html" target="_blank" rel="noopener">http://javarevisited.blogspot.in/2012/01/how-to-sort-arraylist-in-java-example.html</a></li>
<li><a href="http://javarevisited.blogspot.in/2016/05/how-do-you-find-length-of-singly-linked.html" target="_blank" rel="noopener">http://javarevisited.blogspot.in/2016/05/how-do-you-find-length-of-singly-linked.html</a></li>
<li><a href="http://javarevisited.blogspot.in/2011/10/java-iterator-tutorial-example-list.html" target="_blank" rel="noopener">http://javarevisited.blogspot.in/2011/10/java-iterator-tutorial-example-list.html</a></li>
<li><a href="http://javarevisited.blogspot.in/2012/12/blocking-queue-in-java-example-ArrayBlockingQueue-LinkedBlockingQueue.html" target="_blank" rel="noopener">http://javarevisited.blogspot.in/2012/12/blocking-queue-in-java-example-ArrayBlockingQueue-LinkedBlockingQueue.html</a></li>
</ul>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>Collections</tag>
      </tags>
  </entry>
  <entry>
    <title>Compare-In-Java</title>
    <url>/2017-01-19-Compare-In-Java/</url>
    <content><![CDATA[<h1 id="Concepts"><a href="#Concepts" class="headerlink" title="Concepts"></a>Concepts</h1><ul>
<li>If you implement Comparable interface and override compareTo() method it <strong>must be consistent with equals()</strong> method i.e. for equal object by equals() method compareTo() must return zero. failing to so will affect contract of SortedSet e.g. TreeSet and SortedMap like TreeMap, which uses compareTo() method for checking equality</li>
<li>Remember to use Collections.reverseOrder() comparator for sorting Object in reverse order or descending order, as shown in this example.</li>
<li>Use Generics while implementing Comparator and Comparable interface, that prevents error of accidentally overloading compareTo() and compare() method instead of overriding it because both of these methods accept Object as a parameter. By using Generics and @Override annotation we effectively remove that subtle error.</li>
</ul>
<h1 id="Comparable-vs-Comparator"><a href="#Comparable-vs-Comparator" class="headerlink" title="Comparable vs Comparator"></a>Comparable vs Comparator</h1><ol>
<li>Comparator in Java is defined in java.util package while Comparable interface in Java is defined in java.lang package, which very much says that Comparator should be used as an utility to sort objects which Comparable should be provided by default</li>
<li>Comparator interface in Java has method public int compare (Object o1, Object o2) which returns a negative integer, zero, or a positive integer as the first argument is less than, equal to, or greater than the second. While Comparable interface has method public int compareTo(Object o) which returns a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object.</li>
<li>If any class implement Comparable interface in Java then collection of that object either List or Array can be sorted automatically by using  Collections.sort() or Arrays.sort() method and object will be sorted based on there natural order defined by CompareTo method.</li>
<li>Objects which implement Comparable in Java  can be used as keys in a SortedMap like TreeMap or elements in a SortedSet  for example TreeSet, without specifying any Comparator.</li>
<li>Generally you should not use difference of integers to decide output of compareTo method as result of *<em>integer subtraction can overflow *</em> but if you are sure that both operands are positive then its one of the quickest way to compare two objects. </li>
<li>Some time you write code to sort object of a class for which you are not the original author, or you don’t have access to code. In these cases you can not implement Comparable and Comparator is only way to sort those objects.</li>
<li>Beware with the fact that How those object will behave if stored in SorteSet or SortedMap like TreeSet and TreeMap. If an object doesn’t implement Comparable than while putting them into SortedMap, always provided corresponding Comparator which can provide sorting logic.</li>
<li>Comparator has a distinct advantage of being self descriptive  for example if you are writing Comparator to compare two Employees based upon there salary than name that comparator as SalaryComparator, on the other hand compareTo()</li>
</ol>
<p>So in Summary if you want to sort objects based on <strong>natural order then use Comparable</strong> in Java and if you want to *<em>sort on some other attribute of object then use Comparator *</em> in Java.</p>
<h1 id="Samples-of-Java-class"><a href="#Samples-of-Java-class" class="headerlink" title="Samples of Java class"></a>Samples of Java class</h1><ul>
<li>How to Compare String in Java<br>String is immutable in Java and one of the most used value class. For comparing String in Java we should not be worrying because String implements Comparable interface and provides a lexicographic implementation for CompareTo method which compare two strings based on contents of characters or you can say in lexical order. You just need to call String.compareTo(AnotherString) and Java will determine whether specified String is greater than , equal to or less than current object. </li>
<li>Dates are represented by java.util.Date class in Java and like String,  Date also implements Comparable in Java so they will be automatically sorted based on there natural ordering if they got stored in any sorted collection like TreeSet or TreeMap. If you explicitly wants to compare two dates in Java you can call Date.compareTo(AnotherDate) method in Java and it will tell whether specified date is greater than , equal to or less than current String.</li>
</ul>
<h1 id="Exceptions"><a href="#Exceptions" class="headerlink" title="Exceptions"></a>Exceptions</h1><p>One example where compareTo is not consistent with equals in JDK is BigDecimal class. two BigDecimal number for which compareTo returns zero, equals returns false as clear from following BigDecimal comparison example:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BigDecimal bd1 = <span class="keyword">new</span> BigDecimal(<span class="string">"2.0"</span>);</span><br><span class="line">BigDecimal bd2 = <span class="keyword">new</span> BigDecimal(<span class="string">"2.00"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"comparing BigDecimal using equals: "</span> + bd1.equals(bd2));</span><br><span class="line">System.out.println(<span class="string">"comparing BigDecimal using compareTo: "</span> + bd1.compareTo(bd2));</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line"></span><br><span class="line">comparing BigDecimal using equals: <span class="keyword">false</span></span><br><span class="line">comparing BigDecimal using compareTo: <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p> How does it affect BigDecimal ? well if you store these two BigDecimal in HashSet you will end up with duplicates (violation of Set Contract) i.e. two elements while if you store them in TreeSet you will end up with just 1 element because HashSet uses equals to check duplicates while TreeSet uses compareTo to check duplicates. That’s why its suggested to keep compareTo consistent with equals method in java.</p>
<ul>
<li>Another important point to note is don’t use subtraction for comparing integral values because result of subtraction can overflow as every int operation in Java is modulo 2^32. use either Integer.compareTo()  or logical operators for comparison. </li>
<li>In summary compareTo should provide natural ordering and compareTo must be consistent with equals() method in Java. </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Java program to test Object sorting in Java. This Java program</span></span><br><span class="line"><span class="comment"> * test Comparable and Comparator implementation provided by Order</span></span><br><span class="line"><span class="comment"> * class by sorting list of Order object in ascending and descending order.</span></span><br><span class="line"><span class="comment"> * Both in natural order using Comparable and custom Order using Comparator in Java</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> http://java67.blogspot.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectSortingExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">//Creating Order object to demonstrate Sorting of Object in Java</span></span><br><span class="line">        Order ord1 = <span class="keyword">new</span> Order(<span class="number">101</span>,<span class="number">2000</span>, <span class="string">"Sony"</span>);</span><br><span class="line">        Order ord2 = <span class="keyword">new</span> Order(<span class="number">102</span>,<span class="number">4000</span>, <span class="string">"Hitachi"</span>);</span><br><span class="line">        Order ord3 = <span class="keyword">new</span> Order(<span class="number">103</span>,<span class="number">6000</span>, <span class="string">"Philips"</span>);</span><br><span class="line">     </span><br><span class="line">        <span class="comment">//putting Objects into Collection to sort</span></span><br><span class="line">        List&lt;Order&gt; orders = <span class="keyword">new</span> ArrayList&lt;Order&gt;();</span><br><span class="line">        orders.add(ord3);</span><br><span class="line">        orders.add(ord1);</span><br><span class="line">        orders.add(ord2);</span><br><span class="line">     </span><br><span class="line">        <span class="comment">//printing unsorted collection</span></span><br><span class="line">        System.out.println(<span class="string">"Unsorted Collection : "</span> + orders);</span><br><span class="line">     </span><br><span class="line">        <span class="comment">//Sorting Order Object on natural order - ascending</span></span><br><span class="line">        Collections.sort(orders);</span><br><span class="line">     </span><br><span class="line">        <span class="comment">//printing sorted collection</span></span><br><span class="line">        System.out.println(<span class="string">"List of Order object sorted in natural order : "</span> + orders);</span><br><span class="line">     </span><br><span class="line">        <span class="comment">// Sorting object in descending order in Java</span></span><br><span class="line">        Collections.sort(orders, Collections.reverseOrder());</span><br><span class="line">        System.out.println(<span class="string">"List of object sorted in descending order : "</span> + orders);</span><br><span class="line">             </span><br><span class="line">        <span class="comment">//Sorting object using Comparator in Java</span></span><br><span class="line">        Collections.sort(orders, <span class="keyword">new</span> Order.OrderByAmount());</span><br><span class="line">        System.out.println(<span class="string">"List of Order object sorted using Comparator - amount : "</span> + orders);</span><br><span class="line">     </span><br><span class="line">        <span class="comment">// Comparator sorting Example - Sorting based on customer</span></span><br><span class="line">        Collections.sort(orders, <span class="keyword">new</span> Order.OrderByCustomer());</span><br><span class="line">        System.out.println(<span class="string">"Collection of Orders sorted using Comparator - by customer : "</span> + orders);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Order class is a domain object which implements</span></span><br><span class="line"><span class="comment"> * Comparable interface to provide sorting on the natural order.</span></span><br><span class="line"><span class="comment"> * Order also provides couple of custom Comparators to</span></span><br><span class="line"><span class="comment"> * sort object based upon amount and customer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Order</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> orderId;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> amount;</span><br><span class="line">    <span class="keyword">private</span> String customer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Comparator implementation to Sort Order object based on Amount</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderByAmount</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Order</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Order o1, Order o2)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> o1.amount &gt; o2.amount ? <span class="number">1</span> : (o1.amount &lt; o2.amount ? -<span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Anohter implementation or Comparator interface to sort list of Order object</span></span><br><span class="line"><span class="comment">     * based upon customer name.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderByCustomer</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Order</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Order o1, Order o2)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> o1.customer.compareTo(o2.customer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">(<span class="keyword">int</span> orderId, <span class="keyword">int</span> amount, String customer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderId = orderId;</span><br><span class="line">        <span class="keyword">this</span>.amount = amount;</span><br><span class="line">        <span class="keyword">this</span>.customer = customer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAmount</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> amount; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAmount</span><span class="params">(<span class="keyword">int</span> amount)</span> </span>&#123;<span class="keyword">this</span>.amount = amount;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCustomer</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> customer;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomer</span><span class="params">(String customer)</span> </span>&#123;<span class="keyword">this</span>.customer = customer;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrderId</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> orderId;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderId</span><span class="params">(<span class="keyword">int</span> orderId)</span> </span>&#123;<span class="keyword">this</span>.orderId = orderId;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Sorting on orderId is natural sorting for Order.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Order o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.orderId &gt; o.orderId ? <span class="number">1</span> : (<span class="keyword">this</span>.orderId &lt; o.orderId ? -<span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * implementing toString method to print orderId of Order</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(orderId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Output</span><br><span class="line">Unsorted Collection : [<span class="number">103</span>, <span class="number">101</span>, <span class="number">102</span>]</span><br><span class="line">List of Order object sorted in natural order : [<span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>]</span><br><span class="line">List of object sorted in descending order : [<span class="number">103</span>, <span class="number">102</span>, <span class="number">101</span>]</span><br><span class="line">List of Order object sorted using Comparator - amount : [<span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>]</span><br><span class="line">Collection of Orders sorted using Comparator - by customer : [<span class="number">102</span>, <span class="number">103</span>, <span class="number">101</span>]</span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="http://www.java67.com/2012/10/how-to-sort-object-in-java-comparator-comparable-example.html" target="_blank" rel="noopener">http://www.java67.com/2012/10/how-to-sort-object-in-java-comparator-comparable-example.html</a></li>
</ul>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>compare</tag>
      </tags>
  </entry>
  <entry>
    <title>NavigableMap Misc</title>
    <url>/2017-01-19-Java-NavigableMap/</url>
    <content><![CDATA[<h1 id="What-is-NavigableMap"><a href="#What-is-NavigableMap" class="headerlink" title="What is NavigableMap"></a>What is NavigableMap</h1><ul>
<li>NavigableMap in <strong>Java 6</strong> is an <strong>extension of SortedMap</strong>  like TreeMap which provides convenient navigation method like lowerKey, floorKey, ceilingKey and higherKey. </li>
<li>NavigableMap is added on Java 1.6 and along with these popular navigation method it also provide ways <strong>to create a Sub Map from existing Map</strong> in Java e.g. <strong>headMap whose keys are less than specified key</strong>, <strong>tailMap whose keys are greater than specified key and a subMap which is strictly contains keys which falls between toKey and fromKey</strong>. All of these methods also provides a boolean to include specified key or not. TreeMap and ConcurrentSkipListMap are two concrete implementation of NavigableMap in Java 1.6 API.</li>
</ul>
<h1 id="use-NavigableMap"><a href="#use-NavigableMap" class="headerlink" title="use NavigableMap"></a>use NavigableMap</h1><p>How to create subMap from Map using Navigable Map in Java with Example<br>In this Java tutorial we will explore some API methods of NavigableMap to show its functionality. This Java program shows example of lowerKey which returns keys less than specified, floorKey returns key less than or equal to, ceilingKey return greater than or equal to and higherKey which returns keys which are greater than specified key. </p>
<p>This Java example also demonstrate use of headMap(), tailMap() and subMap() method which is used to create Map from an existing Map in Java. headMap returns a Map whose keys are lower than specified keys while tailMap returns Map which contains keys, those are higher than specified. Here is complete code example of How to use NavigableMap in Java.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.NavigableMap;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Java program to demonstrate What is NavigableMap in Java and How to use NavigableMap</span></span><br><span class="line"><span class="comment"> * in Java. NavigableMap provides two important features navigation methods</span></span><br><span class="line"><span class="comment"> * like lowerKey(), floorKey, ceilingKey() and higherKey().</span></span><br><span class="line"><span class="comment"> * There Entry counterpart and methods to create subMap e.g. headMap(), tailMap()</span></span><br><span class="line"><span class="comment"> * and subMap().</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Javin Paul</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NavigableMapExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">//NavigableMap extends SortedMap to provide useful navigation methods</span></span><br><span class="line">        NavigableMap&lt;String, String&gt; navigableMap = <span class="keyword">new</span> TreeMap&lt;String, String&gt;();</span><br><span class="line">     </span><br><span class="line">        navigableMap.put(<span class="string">"C++"</span>, <span class="string">"Good programming language"</span>);</span><br><span class="line">        navigableMap.put(<span class="string">"Java"</span>, <span class="string">"Another good programming language"</span>);</span><br><span class="line">        navigableMap.put(<span class="string">"Scala"</span>, <span class="string">"Another JVM language"</span>);</span><br><span class="line">        navigableMap.put(<span class="string">"Python"</span>, <span class="string">"Language which Google use"</span>);</span><br><span class="line">     </span><br><span class="line">        System.out.println(<span class="string">"SorteMap : "</span> + navigableMap);</span><br><span class="line">     </span><br><span class="line">        <span class="comment">//lowerKey returns key which is less than specified key</span></span><br><span class="line">        System.out.println(<span class="string">"lowerKey from Java : "</span> + navigableMap.lowerKey(<span class="string">"Java"</span>));</span><br><span class="line">     </span><br><span class="line">        <span class="comment">//floorKey returns key which is less than or equal to specified key</span></span><br><span class="line">        System.out.println(<span class="string">"floorKey from Java: "</span> + navigableMap.floorKey(<span class="string">"Java"</span>));</span><br><span class="line">     </span><br><span class="line">        <span class="comment">//ceilingKey returns key which is greater than or equal to specified key</span></span><br><span class="line">        System.out.println(<span class="string">"ceilingKey from Java: "</span> + navigableMap.ceilingKey(<span class="string">"Java"</span>));</span><br><span class="line">     </span><br><span class="line">        <span class="comment">//higherKey returns key which is greater specified key</span></span><br><span class="line">        System.out.println(<span class="string">"higherKey from Java: "</span> + navigableMap.higherKey(<span class="string">"Java"</span>));</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">        <span class="comment">//Apart from navigagtion methodk, it also provides useful method</span></span><br><span class="line">        <span class="comment">//to create subMap from existing Map e.g. tailMap, headMap and subMap</span></span><br><span class="line">     </span><br><span class="line">        <span class="comment">//an example of headMap - returns NavigableMap whose key is less than specified</span></span><br><span class="line">        NavigableMap&lt;String, String&gt; headMap = navigableMap.headMap(<span class="string">"Python"</span>, <span class="keyword">false</span>);</span><br><span class="line">        System.out.println(<span class="string">"headMap created form navigableMap : "</span> + headMap);</span><br><span class="line">             </span><br><span class="line">        <span class="comment">//an example of tailMap - returns NavigableMap whose key is greater than specified</span></span><br><span class="line">        NavigableMap&lt;String, String&gt; tailMap = navigableMap.tailMap(<span class="string">"Scala"</span>, <span class="keyword">false</span>);</span><br><span class="line">        System.out.println(<span class="string">"tailMap created form navigableMap : "</span> + tailMap);</span><br><span class="line">     </span><br><span class="line">        <span class="comment">//an example of subMap - return NavigableMap from toKey to fromKey</span></span><br><span class="line">        NavigableMap&lt;String, String&gt; subMap = navigableMap.subMap(<span class="string">"C++"</span>, <span class="keyword">false</span> ,</span><br><span class="line">                                                                  <span class="string">"Python"</span>, <span class="keyword">false</span>);</span><br><span class="line">        System.out.println(<span class="string">"subMap created form navigableMap : "</span> + subMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">SorteMap : &#123;C++=Good programming language, Java=Another good programming language, Python=Language which Google use, Scala=Another JVM language&#125;</span><br><span class="line">lowerKey from Java : C++</span><br><span class="line">floorKey from Java: Java</span><br><span class="line">ceilingKey from Java: Java</span><br><span class="line">higherKey from Java: Python</span><br><span class="line">headMap created form navigableMap : &#123;C++=Good programming language, Java=Another good programming language&#125;</span><br><span class="line">tailMap created form navigableMap : &#123;&#125;</span><br><span class="line">subMap created form navigableMap : &#123;Java=Another good programming language&#125;</span><br></pre></td></tr></table></figure>

<p> That’s all on What is NavigableMap in Java and How to use NavigableMap with example. We have seen examples of popular navigation method on TreeMap e.g. floorKey. You can also use similar method like lowerEntry, floorEntry, ceilingEntry and higherEntry to retrieve Entry instead of key. NavigableMap is also a good utility to create subset of a Map in Java.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="http://javarevisited.blogspot.com/2013/01/what-is-navigablemap-in-java-6-example-submap-head-tail.html#ixzz4WBdqjJCC" target="_blank" rel="noopener">http://javarevisited.blogspot.com/2013/01/what-is-navigablemap-in-java-6-example-submap-head-tail.html#ixzz4WBdqjJCC</a></p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>NavigableMap</tag>
      </tags>
  </entry>
  <entry>
    <title>Dead Lock</title>
    <url>/2017-01-20-DeadLock/</url>
    <content><![CDATA[<h1 id="Concept"><a href="#Concept" class="headerlink" title="Concept"></a>Concept</h1><ul>
<li>Two or more threads are <strong>waiting</strong> for <strong>each other</strong> to <strong>release lock</strong> and get <strong>stuck for infinite time</strong>.</li>
<li>It will only happen in case of <strong>multitasking</strong>.</li>
</ul>
<h2 id="One-screnario-of-dead-lock"><a href="#One-screnario-of-dead-lock" class="headerlink" title="One screnario of dead lock"></a>One screnario of dead lock</h2><p>If method1() and method2() both will be called by two or many threads , there is a good chance of deadlock because if thread 1 acquires lock on Sting object while executing method1() and thread 2 acquires lock on Integer object while executing method2() both will be waiting for each other to release lock on Integer and String to proceed further which will never happen.</p>
<h3 id="The-root-cause-is-NOT-multithreading-but-the-way-they-are-requiring-lock"><a href="#The-root-cause-is-NOT-multithreading-but-the-way-they-are-requiring-lock" class="headerlink" title="The root cause is NOT multithreading, but the way they are requiring lock"></a>The root cause is NOT multithreading, but <strong>the way they are requiring lock</strong></h3><p>Now there would not be any deadlock because both methods are accessing lock on Integer and String class literal in same order. So, if thread A acquires lock on Integer object , thread B will not proceed until thread A releases Integer lock, same way thread A will not be blocked even if thread B holds String lock because now thread B will not expect thread A to release Integer lock to proceed further.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="http://javarevisited.blogspot.in/2010/10/what-is-deadlock-in-java-how-to-fix-it.html" target="_blank" rel="noopener">http://javarevisited.blogspot.in/2010/10/what-is-deadlock-in-java-how-to-fix-it.html</a></li>
</ul>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>dead lock</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-Tricky-Tech-Questions.md</title>
    <url>/2017-01-19-Java-Tricky-Tech-Questions/</url>
    <content><![CDATA[<h1 id="What-is-the-difference-between-Serializable-and-Externalizable-in-Java"><a href="#What-is-the-difference-between-Serializable-and-Externalizable-in-Java" class="headerlink" title="What is the difference between Serializable and Externalizable in Java?"></a>What is the difference between Serializable and Externalizable in Java?</h1><ul>
<li>In earlier version of Java, reflection was very slow, and so serializaing large object graphs (e.g. in client-server RMI applications) was a bit of a performance problem. To handle this situation, the java.io.Externalizable interface was provided, which is like java.io.Serializable but with custom-written mechanisms to perform the marshalling and unmarshalling functions (you need to implement readExternal and writeExternal methods on your class). This gives you the means to get around the reflection performance bottleneck.</li>
<li>In recent versions of Java (1.3 onwards, certainly) the performance of reflection is vastly better than it used to be, and so this is much less of a problem. I suspect you’d be hard-pressed to get a meaningful benefit from Externalizable with a modern JVM.</li>
<li>Also, the built-in Java serialization mechanism isn’t the only one, you can get third-party replacements, such as JBoss Serialization, which is considerably quicker, and is a drop-in replacement for the default.</li>
<li>A big downside of Externalizable is that you have to maintain this logic yourself - if you add, remove or change a field in your class, you have to change your writeExternal/readExternal methods to account for it.</li>
<li>In summary, Externalizable is a relic of the Java 1.1 days. There’s really no need for it any more.</li>
</ul>
<h2 id="write-transcient-fields"><a href="#write-transcient-fields" class="headerlink" title="write transcient fields"></a>write transcient fields</h2><ul>
<li>Storing and reconstituting the transient data can also be achieved by implementing the Externalizable interface and implementing the writeExternal( ) and the readExternal( ) methods of that interface. </li>
</ul>
<h1 id="Java-Class"><a href="#Java-Class" class="headerlink" title="Java Class"></a>Java Class</h1><ul>
<li><p>Class objects for known types can also be written as “class literals”:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Express a class literal as a type name followed by ".class"</span></span><br><span class="line">c = <span class="keyword">int</span>.class; <span class="comment">// Same as Integer.TYPE</span></span><br><span class="line">c = String.class; <span class="comment">// Same as "a string".getClass()</span></span><br><span class="line">c = <span class="keyword">byte</span>[].class; <span class="comment">// Type of byte arrays</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>For primitive types and void, we also have class objects that are represented as literals:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Obtain a Class object for primitive types with various </span></span><br><span class="line"><span class="comment">// predefined constants</span></span><br><span class="line">c = Void.TYPE; <span class="comment">// The special "no-return-value" type</span></span><br><span class="line">c = Byte.TYPE; <span class="comment">// Class object that represents a byte</span></span><br><span class="line">c = Integer.TYPE; <span class="comment">// Class object that represents an int</span></span><br><span class="line">c = Double.TYPE; <span class="comment">// etc; see also Short, Character, Long, Float</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="Convert-arrays-to-ArrayList-two-different-approaches"><a href="#Convert-arrays-to-ArrayList-two-different-approaches" class="headerlink" title="Convert arrays to ArrayList, two different approaches"></a>Convert arrays to ArrayList, two different approaches</h1><p>// View array as an ungrowable list<br>List<string> l = Arrays.asList(a);<br>// Make a growable copy of the view<br>List<string> m = new ArrayList<string>(l);</string></string></string></p>
<h1 id="What’s-seed-in-Java"><a href="#What’s-seed-in-Java" class="headerlink" title="What’s seed in Java"></a>What’s seed in Java</h1><p>Since the next number in a pseudorandom generator is determined by the pre- vious number(s), such a generator always needs <strong>a place to start, which is called its seed</strong>. The sequence of numbers generated for <strong>a given seed will always be the same</strong>. The seed for an instance of the java.util.Random class can be set in its constructor or with its setSeed() method.</p>
<h1 id="Cipher"><a href="#Cipher" class="headerlink" title="Cipher"></a>Cipher</h1><ul>
<li>Given a variable c that is known to be an uppercase letter, the Java computation, j = c − ‘A’ produces the desired index j. <strong>As a sanity check</strong>, if character c is ‘A’, then j = 0. When c is ‘B’, the difference is 1.</li>
</ul>
<h1 id="Uncaught-exception-handler"><a href="#Uncaught-exception-handler" class="headerlink" title="Uncaught exception handler"></a>Uncaught exception handler</h1><ul>
<li>The Thread API also provides <strong>the UncaughtExceptionHandler facility, which lets you detect when a thread dies due to an uncaught exception</strong>. The two approaches are complementary: taken together, they provide defense-in- depth against thread leakage.</li>
<li>When <strong>a thread exits due to an uncaught exception</strong>, the <strong>JVM reports this event to an application-provided UncaughtExceptionHandler</strong> (see Listing 7.24); if no handler exists, the default behavior is to print the stack trace to System.err</li>
<li>In long-running applications, always use uncaught exception handlers for all threads that at least log the exception.</li>
<li>To set an UncaughtExceptionHandler for pool threads, provide a ThreadFac- tory to the ThreadPoolExecutor constructor.</li>
<li>Somewhat confusingly, exceptions thrown from tasks make it to the uncaught exception handler <strong>only for tasks submitted with execute</strong> ; for tasks submitted with submit, any thrown exception, checked or not, is considered to be part of the task’s return status. If a task submitted with submit terminates with an exception, it is rethrown by Future.get, wrapped in an ExecutionException.<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UEHLogger</span> <span class="keyword">implements</span> <span class="title">Thread</span>.<span class="title">UncaughtExceptionHandler</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uncaughtException</span><span class="params">(Thread t, Throwable e)</span></span>&#123;</span><br><span class="line">    Logger logger=Logger.getAnonymousLogger();</span><br><span class="line">    logger.log(Level.SEVERE, <span class="string">"Thread terminated with exception:"</span>+e.getName(),e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="What-is-the-difference-between-Iterator-and-Enumeration"><a href="#What-is-the-difference-between-Iterator-and-Enumeration" class="headerlink" title="What is the difference between Iterator and Enumeration"></a>What is the difference between Iterator and Enumeration</h2><ul>
<li>Iterator duplicate functionality of Enumeration with one addition of <strong>remove() method</strong></li>
<li>Another difference is that Iterator is more safe than Enumeration and doesn’t allow another thread to modify collection object during iteration except remove() method and <strong>throws ConcurrentModificaitonException</strong>.</li>
</ul>
<h2 id="How-does-HashSet-is-implemented-in-Java-How-does-it-use-Hashing"><a href="#How-does-HashSet-is-implemented-in-Java-How-does-it-use-Hashing" class="headerlink" title="How does HashSet is implemented in Java, How does it use Hashing"></a>How does HashSet is implemented in Java, How does it use Hashing</h2><ul>
<li>HashSet is built on top of HashMap. If you look at source code of java.util.HashSet class, you will find that that it uses a HashMap with same values for all keys, as shown below:<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> HashMap map;</span><br><span class="line"><span class="comment">// Dummy value to associate with an Object in the backing Map</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object PRESENT = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="comment">// When you call add() method of HashSet, it put entry in HashMap :</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> map.put(e, PRESENT)==<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="What-do-you-need-to-do-to-use-a-custom-object-as-a-key-in-Collection-classes-like-Map-or-Set-answer"><a href="#What-do-you-need-to-do-to-use-a-custom-object-as-a-key-in-Collection-classes-like-Map-or-Set-answer" class="headerlink" title="What do you need to do to use a custom object as a key in Collection classes like Map or Set? (answer)"></a>What do you need to do to use a custom object as a key in Collection classes like Map or Set? (answer)</h2><ul>
<li>If you are using any custom object in Map as key, you need to <strong>override equals() and hashCode() method</strong>, and make sure they <strong>follow their contract</strong>. </li>
<li>On the other hand if you are storing a custom object <strong>in Sorted Collection</strong> e.g. SortedSet or SortedMap, you also need to make sure that your <strong>equals() method is consistent to compareTo() method</strong>, otherwise that collection will not follow there contacts e.g. Set may allow duplicates.</li>
</ul>
<h1 id="Java-Generics-E-and-T-what-is-the-difference"><a href="#Java-Generics-E-and-T-what-is-the-difference" class="headerlink" title="Java Generics ? , E and T what is the difference?"></a>Java Generics ? , E and T what is the difference?</h1><p>Well there’s no difference between the first two - they’re just using different names for the type parameter (E or T).</p>
<p>The third isn’t a valid declaration - ? is used as a wildcard which is used when providing a type argument, e.g. List&lt;?&gt; foo = … means that foo refers to a list of some type, but we don’t know what.</p>
<h1 id="Question-What-does-the-following-Java-program-print"><a href="#Question-What-does-the-following-Java-program-print" class="headerlink" title="Question: What does the following Java program print?"></a>Question: What does the following Java program print?</h1><p>public class Test {<br>    public static void main(String[] args) {<br>        System.out.println(Math.min(Double.MIN_VALUE, 0.0d));<br>    }<br>}</p>
<h2 id="Anwser-0-0d"><a href="#Anwser-0-0d" class="headerlink" title="Anwser 0.0d"></a>Anwser 0.0d</h2><p>The Double.MIN_VALUE is 2^(-1074), a double constant whose magnitude is the least among all double values. </p>
<h1 id="What-will-happen-if-you-put-return-statement-or-System-exit-on-try-or-catch-block-Will-finally-block-execute"><a href="#What-will-happen-if-you-put-return-statement-or-System-exit-on-try-or-catch-block-Will-finally-block-execute" class="headerlink" title="What will happen if you put return statement or System.exit () on try or catch block? Will finally block execute?"></a>What will happen if you put return statement or System.exit () on try or catch block? Will finally block execute?</h1><p>Answer of this tricky question in Java is that <strong>finally block will execute even if you put a return statement</strong> in the try block or catch block but finally block <strong>won’t run if you call System.exit()</strong> from try or catch block. </p>
<h1 id="Question-Can-you-override-a-private-or-static-method-in-Java"><a href="#Question-Can-you-override-a-private-or-static-method-in-Java" class="headerlink" title="Question: Can you override a private or static method in Java?"></a>Question: Can you override a private or static method in Java?</h1><p>Another popular Java tricky question, As I said method overriding is a good topic to ask trick questions in Java. Anyway, you <strong>can not override a private or static method</strong> in Java, if you <strong>create a similar method with same return type and same method arguments in child class</strong> then it will <strong>hide the superclass method</strong>, this is known as <strong>method hiding</strong>.</p>
<p>Similarly, you cannot override a private method in sub class because it’s not accessible there, what you do is create another private method with the same name in the child class. See Can you override a private method in Java or more details</p>
<h1 id="Question-What-do-the-expression-1-0-0-0-will-return-will-it-throw-Exception-any-compile-time-error"><a href="#Question-What-do-the-expression-1-0-0-0-will-return-will-it-throw-Exception-any-compile-time-error" class="headerlink" title="Question: What do the expression 1.0 / 0.0 will return? will it throw Exception? any compile time error?"></a>Question: What do the expression 1.0 / 0.0 will return? will it throw Exception? any compile time error?</h1><p>Answer: This is another tricky question from Double class. Though Java developer knows about the double primitive type and Double class, while doing floating point arithmetic they don’t pay enough attention to Double.INFINITY , NaN, and -0.0<br>and other rules that govern the arithmetic calculations involving them. The simple answer to this question is that it will not throw ArithmeticExcpetion and <strong>return Double.INFINITY</strong>.</p>
<p>Also, note that the comparison <strong>x == Double.NaN always evaluates to false</strong>, even if x itself is a NaN. To test if x is a NaN, one should use the method call Double.isNaN(x) to check if given number is NaN or not. If you know SQL, this is very close to NULL there. </p>
<h1 id="Overloading-vs-Overriding"><a href="#Overloading-vs-Overriding" class="headerlink" title="Overloading vs Overriding"></a>Overloading vs Overriding</h1><ul>
<li>Main difference comes from the fact that method <strong>overloading is resolved during compile time</strong>, while method <strong>overriding is resolved at runtime</strong></li>
<li>Also rules of overriding or overloading a method are different in Java. <ul>
<li>a private, static and final method cannot be overriding in Java but you can still overload them</li>
<li>overriding both name and signature of the method must remain same, but in for overloading method, the signature must be different</li>
<li>call to <strong>overloaded</strong> methods are <strong>resolved using static binding</strong> while the call to <strong>overridden method is resolved using dynamic binding</strong> in Java.</li>
</ul>
</li>
<li>Java programmer to declare method with same name but different behavior. Method overloading and method overriding is based on Polymorphism in Java.</li>
<li>In case of method overloading, method with same name co-exists in <strong>same class</strong> but they must have <strong>different method signature</strong>, while in case of method <strong>overriding</strong>, method with <strong>same name</strong> is declared in <strong>derived class or sub class</strong></li>
<li>If you have <strong>two methods with same name</strong> in one Java class <strong>with different method signature</strong> than its called <strong>overloaded</strong> method in Java. You can also overload constructor in Java</li>
<li>Since <strong>return type is not part of method signature</strong> simply changing return type will result in duplicate method and you will get compile time error in Java.</li>
<li>you can also <strong>overload private and final method</strong> in Java but you <strong>can not override</strong> them</li>
<li>When you <strong>override a method</strong> in Java its signature remains exactly same <strong>including return type</strong>. Rules of override:<ul>
<li>Method signature must be same including return type, number of method parameters, type of parameters <strong>and order of parameters</strong> . Be advised: as of Java 5, you’re allowed to change the return type in the overriding method as long as the new return type is a subtype of the declared return type of the overridden (super class) method</li>
<li>Overriding method <strong>can not throw higher Exception</strong> than original or overridden method. means if original method throws IOException than overriding method can not throw super class of IOException e.g. Exception but it can throw any sub class of IOException or simply does not throw any Exception. This rule only applies to checked Exception in Java, overridden method is free to throw any unchecked Exception. </li>
<li>Overriding method <strong>can not reduce accessibility of overridden method</strong> , means if original or overridden method is public than overriding method <strong>can not make it protected</strong>. </li>
</ul>
</li>
<li>Another important point is that you <strong>can not override static method</strong> in Java because <strong>they are associated with Class</strong> <strong>rather than object</strong> and resolved and <strong>bonded during compile time</strong> and that’s the reason you cannot override main method in Java</li>
<li>From Java 5 onwards you can use annotation in Java to declare overridden method just like we did with @override. ** @override annotation allows compiler** , IDE like NetBeans and Eclipse <strong>to cross verify or check</strong>  if this method is really overrides super class method or not.</li>
</ul>
<h1 id="Static-vs-Dynamic-binding"><a href="#Static-vs-Dynamic-binding" class="headerlink" title="Static vs. Dynamic binding"></a>Static vs. Dynamic binding</h1><ul>
<li><strong>private, final and static methods and variables uses static binding</strong> and bonded by compiler while <strong>virtual methods</strong> are bonded during <strong>runtime</strong> based upon runtime object.</li>
<li>Here is sample of static binding <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticBindingTest</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span>  </span>&#123;</span><br><span class="line">       Collection c = <span class="keyword">new</span> HashSet();</span><br><span class="line">       StaticBindingTest et = <span class="keyword">new</span> StaticBindingTest();</span><br><span class="line">       et.sort(c);</span><br><span class="line">          &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//overloaded method takes Collection argument</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection <span class="title">sort</span><span class="params">(Collection c)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Inside Collection sort method"</span>);</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//another overloaded method which takes HashSet argument which is sub class</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection <span class="title">sort</span><span class="params">(HashSet hs)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Inside HashSet sort method"</span>);</span><br><span class="line">        <span class="keyword">return</span> hs;</span><br><span class="line">    &#125;</span><br><span class="line">      &#125;</span><br><span class="line">Output: Inside Collection sort method</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>because it was bonded on compile time based on type of variable (Static binding)  which was collection.</strong></p>
<ul>
<li>Here is sample of dynamic binding <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicBindingTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Vehicle vehicle = <span class="keyword">new</span> Car(); <span class="comment">//here Type is vehicle but object will be Car</span></span><br><span class="line">        vehicle.start();       <span class="comment">//Car's start called because start() is overridden method</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Inside start method of Vehicle"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Inside start method of Car"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Output: Inside start method of Car</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>In summary, bottom line is static binding is a compile time operation while dynamic binding is a runtime. one uses Type and other uses Object to bind. static, private and final methods and variables are resolved using static binding which makes there execution fast because no time is wasted to find correct method during runtime.</p>
<h1 id="Static-in-Java"><a href="#Static-in-Java" class="headerlink" title="Static in Java"></a>Static in Java</h1><ul>
<li><p>static keyword can not be applied on top level class. Making a top level class static in Java will result in compile time error.</p>
</li>
<li><p>Beware that if your static initialize block throws Exception than you may <strong>get java.lang.NoClassDefFoundError</strong> when you try to access the class which failed to load.</p>
</li>
<li><p><strong>Static method can not be overridden</strong> in Java as they belong to class and not to object</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TradingSystem</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TradingSystem system = <span class="keyword">new</span> DirectMarketAccess();</span><br><span class="line">        DirectMarketAccess dma = <span class="keyword">new</span> DirectMarketAccess();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// static method of Instrument class will be called,</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// even though object is of sub-class DirectMarketAccess</span></span><br><span class="line">        system.printCategory();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//static method of EquityInstrument class will be called</span></span><br><span class="line">        dma.printCategory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printCategory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"inside super class static method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DirectMarketAccess</span> <span class="keyword">extends</span> <span class="title">TradingSystem</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printCategory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"inside sub class static method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">inside <span class="keyword">super</span> <span class="class"><span class="keyword">class</span> <span class="title">static</span> <span class="title">method</span></span></span><br><span class="line"><span class="class"><span class="title">inside</span> <span class="title">sub</span> <span class="title">class</span> <span class="title">static</span> <span class="title">method</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>This shows that static method can not be overridden in Java and concept of method overloading doesn’t apply to static methods. Instead declaring same static method on Child class <strong>is known as method hiding</strong> in Java</p>
</li>
<li><p>Consider <strong>making a static variable final</strong> in Java to make it constant and avoid changing it from anywhere in the code</p>
</li>
<li><p>when to use Singleton vs Static Class in Java for those purpose,answer is that if its <strong>completely stateless</strong> and it work on provided data then you can <strong>go for static class</strong> <strong>otherwise Singleton</strong> pattern is a better choice.</p>
<h2 id="When-to-make-a-method-static-in-Java"><a href="#When-to-make-a-method-static-in-Java" class="headerlink" title="When to make a method static in Java"></a>When to make a method static in Java</h2></li>
<li><p>Method <strong>doesn’t depends on object’s state</strong>, in other words <strong>doesn’t depend on any member variable</strong> and <strong>everything they need is passes as parameter</strong> to them</p>
</li>
<li><p>Utility methods are good candidate of making static in Java because then they can directly be accessed using class name without even creating any instance. Classic example is java.lang.Math</p>
</li>
<li><p>Static method in Java is very popular to implement Factory design pattern. Since Generics also provides type inference during method invocation, use of static factory method to create object is popular Java idiom. </p>
</li>
</ul>
<h1 id="Phone"><a href="#Phone" class="headerlink" title="Phone"></a>Phone</h1><ul>
<li>Key to success in telephonic is <strong>to the point</strong> and <strong>concise answer</strong>.</li>
</ul>
<h2 id="Difference-between-String-StringBuffer-and-StringBuilder-in-Java"><a href="#Difference-between-String-StringBuffer-and-StringBuilder-in-Java" class="headerlink" title="Difference between String, StringBuffer and StringBuilder in Java"></a>Difference between String, StringBuffer and StringBuilder in Java</h2><ul>
<li>String is <strong>immutable</strong> while both StringBuffer and StringBuilder <strong>is mutable</strong>, which means any change e.g. converting String to upper case or trimming white space will <strong>produce another instance</strong> rather than changing the same instance. On later two, <strong>StringBuffer is synchronized</strong> while <strong>StringBuilder is not</strong>, in fact its a ditto replacement of StringBuffer added in Java 1.5.<h2 id="Difference-between-extends-Thread-vs-implements-Runnable-in-Java"><a href="#Difference-between-extends-Thread-vs-implements-Runnable-in-Java" class="headerlink" title="Difference between extends Thread vs implements Runnable in Java?"></a>Difference between extends Thread vs implements Runnable in Java?</h2></li>
<li>Difference comes from the fact that you <strong>can only extend one class</strong> in Java, which means if you extend Thread class you lose your opportunity to extend another class, on the other hand if you implement Runnable, you can still extend another class.</li>
</ul>
<h2 id="Difference-between-Runnable-and-Callable-interface-in-Java"><a href="#Difference-between-Runnable-and-Callable-interface-in-Java" class="headerlink" title="Difference between Runnable and Callable interface in Java?"></a>Difference between Runnable and Callable interface in Java?</h2><ul>
<li>Runnable was the only way to implement a task in Java which can be executed in parallel before JDK 1.5 adds Callable. Just like Runnable, Callable also defines a single <strong>call() method</strong> but unlike run() it <strong>can return values and throw exceptions</strong>.</li>
</ul>
<h2 id="Difference-between-ArrayList-and-LinkedList-in-Java"><a href="#Difference-between-ArrayList-and-LinkedList-in-Java" class="headerlink" title="Difference between ArrayList and LinkedList in Java?"></a>Difference between ArrayList and LinkedList in Java?</h2><ul>
<li>In short, ArrayList is backed by array in Java, while <strong>LinkedList is just collection of nodes</strong>, similar to linked list data structure. ArrayList also provides <strong>random search</strong> if you know the index, while <strong>LinkedList only allows sequential search</strong>. On other hand, <strong>adding and removing element from middle</strong> is <strong>efficient in LinkedList</strong> as compared to ArrayList because it only require to modify links and no other element is rearranged.</li>
</ul>
<h2 id="What-is-difference-between-wait-and-notify-in-Java"><a href="#What-is-difference-between-wait-and-notify-in-Java" class="headerlink" title="What is difference between wait and notify in Java?"></a>What is difference between wait and notify in Java?</h2><ul>
<li>Both wait and notify methods are used for <strong>inter thread communication</strong>, where <strong>wait is used to pause</strong> the thread on a condition and <strong>notify is used to send notification</strong> to waiting threads. Both must be called from synchronized context e.g. <strong>synchronized method or block</strong>.</li>
</ul>
<h2 id="Difference-between-HashMap-and-Hashtable-in-Java"><a href="#Difference-between-HashMap-and-Hashtable-in-Java" class="headerlink" title="Difference between HashMap and Hashtable in Java?"></a>Difference between HashMap and Hashtable in Java?</h2><ul>
<li>Though both HashMap and Hashtable are based upon hash table data structure, there are subtle difference between them. HashMap is non synchronized while Hashtable is synchronized and because of that HashMap is faster than Hashtable, as there is no cost of synchronization associated with it. One more minor difference is that HashMap allows a null key but Hashtable doesn’t.</li>
</ul>
<h1 id="Check-a-number-is-prime-or-not"><a href="#Check-a-number-is-prime-or-not" class="headerlink" title="Check a number is prime or not"></a>Check a number is prime or not</h1><ul>
<li><p>We learned numbers are prime if the only divisors they have are 1 and itself. Trivially, we can check every integer from 1 to itself (exclusive) and test whether it divides evenly. Check the source code of ** PrimeTester.java**</p>
<ul>
<li><p>naive approach:  We learned numbers are prime if the only divisors they have are 1 and itself. Trivially,  we can check every integer from 1 to itself (exclusive)  and test whether it divides evenly.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;<span class="number">2</span>*i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(n%i==<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>power of 2 approach:    further enhance, as if 2 divides some interger n, then (n/2) divides n as well so we’ll times of 2. Please be advised in for loop, should use 2*i&lt;=n, rather than “&lt;n”,   otherwise, 4 will be return as ture mistakely</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;<span class="number">2</span>*i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(n%i==<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>isPrimeSquare approach:       we notice that you really only have to go up to the square root of n,   because if you list out all of the factors of a number,  the square root will always be in the middle Finally, we know 2 is the “oddest” prime - it happens to be the only even prime number. Because of this, we need only check 2 separately, then traverse  odd numbers up to the square root of n.  In the end, our code will resemble this:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// check if n is a multiple of 2</span></span><br><span class="line"> <span class="keyword">if</span>(n&gt;<span class="number">2</span>&amp;&amp;n%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">false</span>;		</span><br><span class="line"><span class="comment">// if not, then just check the odds</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i*i&lt;=n;i+=<span class="number">2</span>)&#123;</span><br><span class="line">	<span class="keyword">if</span>(n%i==<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h1 id="Difference-between-abstract-class-and-interface"><a href="#Difference-between-abstract-class-and-interface" class="headerlink" title="Difference between abstract class and interface?"></a>Difference between abstract class and interface?</h1><ul>
<li>From Java 8 onwards difference between abstract class and interface in Java has minimized, now even interface can have implementation in terms of default and static method. BTW, in Java you can still extend just one class but can extend multiple inheritance. Abstract class is used to provide default implementation with just something left to customize, while interface is used heavily in API to define contract of a class.</li>
</ul>
<h1 id="How-to-Swap-Two-Numbers-without-Temp-or-Third-variable-in-Java"><a href="#How-to-Swap-Two-Numbers-without-Temp-or-Third-variable-in-Java" class="headerlink" title="How to Swap Two Numbers without Temp or Third variable in Java"></a>How to Swap Two Numbers without Temp or Third variable in Java</h1><h2 id="Swapping-two-numbers-without-using-temp-variable-in-Java"><a href="#Swapping-two-numbers-without-using-temp-variable-in-Java" class="headerlink" title="Swapping two numbers without using temp variable in Java"></a>Swapping two numbers without using temp variable in Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">System.out.println(<span class="string">"value of a and b before swapping, a: "</span> + a +<span class="string">" b: "</span> + b);</span><br><span class="line"></span><br><span class="line"><span class="comment">//swapping value of two numbers without using temp variable</span></span><br><span class="line">a = a+ b; <span class="comment">//now a is 30 and b is 20</span></span><br><span class="line">b = a -b; <span class="comment">//now a is 30 but b is 10 (original value of a)</span></span><br><span class="line">a = a -b; <span class="comment">//now a is 20 and b is 10, numbers are swapped</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"value of a and b after swapping, a: "</span> + a +<span class="string">" b: "</span> + b);</span><br><span class="line">Output:</span><br><span class="line">value of a and b before swapping, a: <span class="number">10</span> b: <span class="number">20</span></span><br><span class="line">value of a and b after swapping, a: <span class="number">20</span> b: <span class="number">10</span></span><br></pre></td></tr></table></figure>

<h2 id="Swapping-two-numbers-without-using-temp-variable-in-Java-with-bitwise-operator"><a href="#Swapping-two-numbers-without-using-temp-variable-in-Java-with-bitwise-operator" class="headerlink" title="Swapping two numbers without using temp variable in Java with bitwise operator"></a>Swapping two numbers without using temp variable in Java with bitwise operator</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">2</span>; <span class="comment">//0010 in binary</span></span><br><span class="line"><span class="keyword">int</span> b = <span class="number">4</span>; <span class="comment">//0100 in binary</span></span><br><span class="line">System.out.println(<span class="string">"value of a and b before swapping, a: "</span> + a +<span class="string">" b: "</span> + b);</span><br><span class="line"><span class="comment">// 6  is     0110</span></span><br><span class="line"><span class="comment">//swapping value of two numbers without using temp variable and XOR bitwise operator     </span></span><br><span class="line">a = a^b; <span class="comment">//now a is 6 (0110) and b is 4(0100)</span></span><br><span class="line">b = a^b; <span class="comment">//now a is 6 but b is 2 (0010) (original value of a)</span></span><br><span class="line">a = a^b; <span class="comment">//now a is 4 and b is 2, numbers are swapped</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"value of a and b after swapping using XOR bitwise operation, a: "</span> + a +<span class="string">" b: "</span> + b);</span><br><span class="line">value of a and b before swapping, a: <span class="number">2</span> b: <span class="number">4</span></span><br><span class="line">value of a and b after swapping using XOR bitwise operation, a: <span class="number">4</span> b: <span class="number">2</span></span><br></pre></td></tr></table></figure>

<h2 id="Swapping-two-numbers-without-using-temp-variable-in-Java-with-division-and-multiplication"><a href="#Swapping-two-numbers-without-using-temp-variable-in-Java-with-division-and-multiplication" class="headerlink" title="Swapping two numbers without using temp variable in Java with division and multiplication"></a>Swapping two numbers without using temp variable in Java with division and multiplication</h2><ul>
<li><p>There is another, third way of swapping two numbers without using third variable, which involves multiplication and division operator. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">3</span>;</span><br><span class="line">System.out.println(<span class="string">"value of a and b before swapping, a: "</span> + a +<span class="string">" b: "</span> + b);</span><br><span class="line"></span><br><span class="line"><span class="comment">//swapping value of two numbers without using temp variable using multiplication and division</span></span><br><span class="line">a = a*b; <span class="comment">//now a is 18 and b is 3</span></span><br><span class="line">b = a/b; <span class="comment">//now a is 18 but b is 6 (original value of a)</span></span><br><span class="line">a = a/b; <span class="comment">//now a is 3 and b is 6, numbers are swapped</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"value of a and b after swapping using multiplication and division, a: "</span> + a +<span class="string">" b: "</span> + b);</span><br><span class="line">Output:</span><br><span class="line">value of a and b before swapping, a: <span class="number">6</span> b: <span class="number">3</span></span><br><span class="line">value of a and b after swapping using multiplication and division, a: <span class="number">3</span> b: <span class="number">6</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>That’s all on 3 ways to swap two variables without using third variable in Java. Its good to know multiple ways of swapping two variables without using temp or third variable to handle any follow-up question. Swapping numbers <strong>using bitwise operator is the fastest</strong> among three, because it <strong>involves bitwise operation</strong>. It’s also great way to show your knowledge of bitwise operator in Java and impress interviewer, which then may ask some question on bitwise operation. A nice trick to drive interview on your expert area.</p>
</li>
</ul>
<h1 id="Bitwise-operator"><a href="#Bitwise-operator" class="headerlink" title="Bitwise operator"></a>Bitwise operator</h1><ul>
<li>“~” inverts a bit pattern; it can be applied to any of the integral types, making every “0” a “1” and every “1” a “0”.</li>
<li>The bitwise &amp; operator performs a bitwise AND operation.</li>
<li>The bitwise ^ operator performs a bitwise exclusive OR operation.</li>
<li>The bitwise | operator performs a bitwise inclusive OR operation.</li>
</ul>
<h1 id="How-to-check-if-linked-list-contains-loop-in-Java"><a href="#How-to-check-if-linked-list-contains-loop-in-Java" class="headerlink" title="How to check if linked list contains loop in Java?"></a>How to check if linked list contains loop in Java?</h1><ul>
<li>Algorithm to find if linked list contains loops or cycles. Two pointers, fast and slow is used while iterating over linked list. <strong>Fast pointer moves two nodes</strong> in each iteration, while <strong>slow pointer moves to one node</strong>. If linked list contains loop or cycle than both <strong>fast and slow pointer will meet</strong> at some point during iteration. If they don’t meet and fast or slow will point to null, then linked list is not cyclic and it doesn’t contain any loop. </li>
</ul>
<ol>
<li>Use two pointers fast and slow</li>
<li>Move fast two nodes and slow one node in each iteration</li>
<li>If fast and slow meet then linked list contains cycle</li>
<li>if fast points to null or fast.next points to null then linked list is not cyclic</li>
</ol>
<ul>
<li>This algorithm is also known as Floyd’s cycle finding algorithm and popularly <strong>known as tortoise and hare algorithm</strong> to find cycles in linked list. Sample can be found via “LoopInList.java”</li>
</ul>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="http://www.java67.com/2012/09/top-10-tricky-java-interview-questions-answers.html" target="_blank" rel="noopener">http://www.java67.com/2012/09/top-10-tricky-java-interview-questions-answers.html</a></li>
<li><a href="http://javarevisited.blogspot.in/2012/03/what-is-static-and-dynamic-binding-in.html" target="_blank" rel="noopener">http://javarevisited.blogspot.in/2012/03/what-is-static-and-dynamic-binding-in.html</a></li>
<li><a href="http://www.java67.com/2015/03/top-40-core-java-interview-questions-answers-telephonic-round.html" target="_blank" rel="noopener">http://www.java67.com/2015/03/top-40-core-java-interview-questions-answers-telephonic-round.html</a></li>
<li><a href="http://www.mkyong.com/java/how-to-determine-a-prime-number-in-java/" target="_blank" rel="noopener">http://www.mkyong.com/java/how-to-determine-a-prime-number-in-java/</a></li>
<li><a href="http://javarevisited.blogspot.in/2013/02/swap-two-numbers-without-third-temp-variable-java-program-example-tutorial.html" target="_blank" rel="noopener">http://javarevisited.blogspot.in/2013/02/swap-two-numbers-without-third-temp-variable-java-program-example-tutorial.html</a></li>
<li><a href="http://docs.oracle.com/javase/tutorial/java/nutsandbolts/op3.html" target="_blank" rel="noopener">http://docs.oracle.com/javase/tutorial/java/nutsandbolts/op3.html</a></li>
<li><a href="http://javarevisited.blogspot.in/2013/05/find-if-linked-list-contains-loops-cycle-cyclic-circular-check.html" target="_blank" rel="noopener">http://javarevisited.blogspot.in/2013/05/find-if-linked-list-contains-loops-cycle-cyclic-circular-check.html</a></li>
</ul>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>Questions</tag>
      </tags>
  </entry>
  <entry>
    <title>IT-Architect</title>
    <url>/2017-01-26-IT-Architect/</url>
    <content><![CDATA[<h1 id="SOA"><a href="#SOA" class="headerlink" title="SOA"></a>SOA</h1><ul>
<li>SOA is a set of design principles for building a suite of interoperable, flexible and reusable services based architecture.</li>
<li>top-down and bottom-up approach SOA patterns</li>
</ul>
<h1 id="Design-Patterns"><a href="#Design-Patterns" class="headerlink" title="Design Patterns"></a>Design Patterns</h1><h2 id="Singleton"><a href="#Singleton" class="headerlink" title="Singleton"></a>Singleton</h2><ul>
<li>Being single sometimes has its advantages you know. I’m often used to manage pools of resources, like connection or thread pools.</li>
<li>The Singleton Pattern ensures a class has only one instance, and provides <strong>a global point of access to it</strong>.</li>
<li>WATCH IT!</li>
</ul>
<p><strong>Double-checked locking doesn’t work in Java 1.4 or earlier</strong>!
Unfortunately, in Java version 1.4 and earlier, many JVMs contain implementations of the <strong>volatile keyword that allow improper synchronization for double-checked locking</strong>. If you must use a JVM earlier than Java 5, consider other methods of implementing your Singleton.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1>]]></content>
      <tags>
        <tag>Architect</tag>
        <tag>Questions</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm</title>
    <url>/2017-01-21-Algorithm/</url>
    <content><![CDATA[<h1 id="This-page-is-about-key-points-about-Algorithm"><a href="#This-page-is-about-key-points-about-Algorithm" class="headerlink" title="This page is about key points about Algorithm"></a>This page is about key points about Algorithm</h1><h2 id="Methodology"><a href="#Methodology" class="headerlink" title="Methodology"></a>Methodology</h2><ul>
<li>The easiest way to improve search efficiency on a set of data is to put it in a data structure that allows more efficient searching.<br>What data structures can be searched more efficiency than O(n)? Binary tree can be searched in O(log(n)). Arrays and hash tables both have constant time element look up (has tables have worse-case lookup of O(n) but the average case is O(1)).</li>
<li>Then need to determine which data structure to be used. If the underlying characters are just ASCII, then a array[128] would be enough. But characters are UNICODe, then it need 100,000 (100K) array, which is a concern of memory, so hash table would be a better option, which only keep exist characters.<br>In general, arrays are a better choice for long strings with a limited set of possible characters values, hash tables are more efficient for shorter strings or when there are many possible character values.  </li>
<li>For some problems, obvious iterative alternatives like the one just shown don’t exist, but it’s always possible to implement a recursive algorithm without using recursive calls.</li>
<li>For a simple recursive function like factorial, many computer architectures spend more time on call overhead than on the actual calculation. Iterative functions, which use looping constructs instead of recursive function calls, do not suffer from this overhead and are frequently more efficient.</li>
<li>NOTE Iterative solutions are usually more efficient than recursive solutions.</li>
<li>NOTE Every recursive case must eventually lead to a base case.</li>
<li>NOTE Recursive algorithms have two cases: recursive cases and base cases</li>
</ul>
<h1 id="Sort"><a href="#Sort" class="headerlink" title="Sort"></a>Sort</h1><h2 id="I-collections-sort"><a href="#I-collections-sort" class="headerlink" title="I collections.sort()"></a>I collections.sort()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object[] a = list.toArray();</span><br><span class="line">        Arrays.sort(a);</span><br><span class="line">        ListIterator&lt;T&gt; i = list.listIterator();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;a.length; j++) &#123;</span><br><span class="line">            i.next();</span><br><span class="line">            i.set((T)a[j]);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h2 id="Arrays-sort"><a href="#Arrays-sort" class="headerlink" title="Arrays.sort"></a>Arrays.sort</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Object[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (LegacyMergeSort.userRequested)</span><br><span class="line">            legacyMergeSort(a);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ComparableTimSort.sort(a);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(Object[] src,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  Object[] dest,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  <span class="keyword">int</span> low,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  <span class="keyword">int</span> high,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  <span class="keyword">int</span> off)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = high - low;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Insertion sort on smallest arrays</span></span><br><span class="line">        <span class="keyword">if</span> (length &lt; INSERTIONSORT_THRESHOLD) &#123; <span class="comment">// threshold is 7</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=low; i&lt;high; i++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j=i; j&gt;low &amp;&amp;</span><br><span class="line">                         ((Comparable) dest[j-<span class="number">1</span>]).compareTo(dest[j])&gt;<span class="number">0</span>; j--)</span><br><span class="line">                    swap(dest, j, j-<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// else use mergeSort</span></span><br></pre></td></tr></table></figure>

<h1 id="Self-review"><a href="#Self-review" class="headerlink" title="Self review"></a>Self review</h1><h2 id="CeasarCipher"><a href="#CeasarCipher" class="headerlink" title="CeasarCipher:"></a>CeasarCipher:</h2><p>Generally: it’s a rotation of English alphabic. E.g. if rotation is 2, the encode is start from A+2, i.e. A is at -2 of the encode array.<br>And decode is start with 26-2, and “A” start at positon 2, then the increase by 1 character to constitute the array<br>That’s why need to “%26”, to make it loop across 26 characters</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">If rotation is 2:</span><br><span class="line">--- encrytpion code is:[C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, A, B]</span><br><span class="line">--- decrytpion code is:[Y, Z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X]</span><br><span class="line">If rotation is 4:</span><br><span class="line">--- encrytpion code is:[E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, A, B, C, D]</span><br><span class="line">--- decrytpion code is:[W, X, Y, Z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V]</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ABC:</span><br><span class="line">Msg =&#123;‘A’,’B’,’C’&#125;;</span><br><span class="line">Char[] encode=’A’+(k+rotation)%<span class="number">26</span>);</span><br><span class="line">Char[] decode=’A’+(k-rotation+<span class="number">26</span>)%<span class="number">26</span>); <span class="comment">// +26 to avoid negative</span></span><br><span class="line"></span><br><span class="line">Encode=&#123;‘C’,’D’,’E’&#125;; <span class="comment">// rotation=3, so A+3, A+4,A+5,xxx, A+26=&gt;3,4,5,6,xxx,0</span></span><br><span class="line">Decode=&#123;‘M’,’N’,’O’&#125;;<span class="comment">//as k-rotation+26 % 26, so it’s 26-3+0,26-3+1 ,xx: =&gt; 23,24,25,0,1,2,3,4,is: A+23,A+24,A+25=&gt;‘M’,’N’,’O’. that’s rotation, rotain-1, rotaion -2 xxxx</span></span><br><span class="line">For(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;msg.length;i++)&#123;</span><br><span class="line">  Int j=msg[i]-‘A’; <span class="comment">// to remove the base ‘A”, so sync with the “k” in encode, 3,4,5,xxx 3+26</span></span><br><span class="line">  Msg[i]=codes[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// encode</span></span><br><span class="line">Int j=’A’-‘A’; <span class="comment">//0</span></span><br><span class="line">Msg[<span class="number">0</span>]=’C’;</span><br><span class="line">Msg[<span class="number">1</span>]=’D’;</span><br><span class="line">Msg[<span class="number">2</span>]=’E’;</span><br><span class="line"></span><br><span class="line"><span class="comment">//decode</span></span><br><span class="line">Int j=msg[i]-‘A’; <span class="comment">//’C’-‘A’=3</span></span><br><span class="line">Msg[i]=decode[j]; <span class="comment">// correspoindg to the postion 0,-xxx, 26 in decode, </span></span><br><span class="line">Msg[<span class="number">0</span>]=</span><br></pre></td></tr></table></figure>

<ul>
<li>If you says “tree,” it’s a good idea to clarify whether she is referring to a generic tree or a binary tree.</li>
</ul>
<h1 id="To-print-content-of-Array"><a href="#To-print-content-of-Array" class="headerlink" title="To print content of Array"></a>To print content of Array</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Import java.util.Arrays;</span><br><span class="line">Arrays.toString(ary);</span><br><span class="line">Arrays.deepToString(ary);</span><br></pre></td></tr></table></figure>

<h1 id="search-without-recursive"><a href="#search-without-recursive" class="headerlink" title="search without recursive"></a>search without recursive</h1><p>Node findNode( Node root, int value ){<br>    while( root != null ){<br>        int currval = root.getValue();<br>        if( currval == value ) break;<br>        if( currval &lt; value ){<br>            root = root.getRight();<br>        } else { // currval &gt; value<br>            root = root.getLeft();<br>        }<br>    }</p>
<pre><code>return root;</code></pre><p>}</p>
<ul>
<li><p>preceding lookup operation can be reimplemented recursively as follows:<br>Node findNode( Node root, int value ){<br>  if( root == null ) return null;<br>  int currval = root.getValue();<br>  if( currval == value ) return root;<br>  if( currval &lt; value ){</p>
<pre><code>return findNode( root.getRight(), value );</code></pre><p>  } else { // currval &gt; value</p>
<pre><code>return findNode( root.getLeft(), value );</code></pre><p>  }<br>}</p>
</li>
<li><p>This subtree property is conducive to recursion because recursion generally involves solving a problem in terms of similar subproblems and a base case. </p>
</li>
</ul>
<h1 id="Big-O-sequencey"><a href="#Big-O-sequencey" class="headerlink" title="Big O sequencey"></a>Big O sequencey</h1><p>1, logn, n, n log n, n2, n3, 2n(2 power n).</p>
<h1 id="Big-O"><a href="#Big-O" class="headerlink" title="Big O"></a>Big O</h1><ul>
<li>It is also considered poor taste to include constant factors and lower-order terms in the big-Oh notation. For example, it is not fashionable to say that the function 2n2 is O(4n2 + 6n log n), although this is completely correct. We should strive instead to describe the function in the big-Oh <strong>in simplest terms</strong>.</li>
<li>So, for example, we would say that an algorithm that runs in worst-case time 4n2 + n log n is a quadratic-time algorithm, since it runs in O(n2) time. Likewise, an algorithm running in time at most 5n + 20logn + 4 would be called a linear-time algorithm.</li>
</ul>
<h1 id="Big-Omega"><a href="#Big-Omega" class="headerlink" title="Big Omega"></a>Big Omega</h1><ul>
<li>Just as the big-Oh notation provides an asymptotic way of saying that a function is “less than or equal to” another function, the following notations provide <strong>an asymptotic way</strong> of saying that a function grows at a rate that is “<strong>greater than or equal to</strong>” that of another.</li>
<li>Example 4.14: 3n log n ? 2n is Ω(n log n).</li>
</ul>
<h1 id="Big-Theta"><a href="#Big-Theta" class="headerlink" title="Big-Theta"></a>Big-Theta</h1><ul>
<li>In addition, there is a notation that allows us to say that two functions grow at the same rate, up to constant factors. We say that f(n) is Θ(g(n)), pronounced “f(n) is big-Theta of g(n),”</li>
</ul>
<h1 id="Comparative-Analysis"><a href="#Comparative-Analysis" class="headerlink" title="Comparative Analysis"></a>Comparative Analysis</h1><ul>
<li>asymptotically[,?simp’t?tik,-k?l] better</li>
<li>Suppose two algorithms solving the same problem are available: an algorithm A, which has a running time of O(n), and an algorithm B, which has a running time of O(n2). Which algorithm is better? We know that n is O(n2), which implies that algorithm A <strong>is asymptotically better</strong> than algorithm B, although for a small value of n, B may have a lower running time than A.</li>
</ul>
<h1 id="Some-Words-of-Caution"><a href="#Some-Words-of-Caution" class="headerlink" title="Some Words of Caution"></a>Some Words of Caution</h1><ul>
<li>First, note that the use of the big-Oh and related notations can be somewhat misleading should the constant factors they “hide” be very large. For example, while it is true that the function 10100n is O(n), if this is the running time of an algorithm being compared to one whose running time is 10n log n, we should prefer the O(nlog n)-time algorithm, even though the linear-time algorithm is asymptotically faster. This preference is because the constant factor, 10100, which is called “one googol,” is believed by many astronomers to be an upper bound on the number of atoms in the observable universe. So we are unlikely to ever have a real-world problem that has this number as its input size.</li>
</ul>
<h1 id="Exponential-eksp-’nen-l-Running-Times"><a href="#Exponential-eksp-’nen-l-Running-Times" class="headerlink" title="Exponential [,eksp?’nen?(?)l] Running Times"></a>Exponential [,eksp?’nen?(?)l] Running Times</h1><ul>
<li>To see how fast the function 2n grows, consider the famous story about the inventor of the game of chess. He asked only that his king pay him 1 grain of rice for the first square on the board, 2 grains for the second, 4 grains for the third, 8 for the fourth, and so on. The number of grains in the 64th square would be<br>263 = 9, 223, 372, 036, 854, 775, 808,<br>which is about nine billion billions!</li>
<li>If we must draw a line between efficient and inefficient algorithms, therefore, it is natural to make this distinction be that between those algorithms running in <strong>polynomial [,p?l?’n??m??l] time</strong> and those running in <strong>exponential time</strong>. That is, make the distinction between algorithms with a running time that is <strong>O(nc)</strong> (power c based on n), for some constant c &gt; 1, and those with a running time that is <strong>O(bn)</strong> (power n based on b), for some constant b &gt; 1. Like so many notions we have discussed in this section, this too should be taken with a “grain of salt,” for an algorithm running in O(n100) time should probably not be considered “efficient.” Even so, the distinction between polynomial-time and exponential-time algorithms is considered a robust measure of tractability.</li>
</ul>
<h1 id="Examples-of-Algorithm-Analysis"><a href="#Examples-of-Algorithm-Analysis" class="headerlink" title="Examples of Algorithm Analysis"></a>Examples of Algorithm Analysis</h1><h2 id="constant-time-operation"><a href="#constant-time-operation" class="headerlink" title="constant time operation"></a>constant time operation</h2><ul>
<li>All of the primitive operations, originally described on page 154, are assumed to run in constant time; Assume that variable A is an array of n elements. The expression A.length in Java is evaluated in constant time, because arrays are represented internally with an explicit variable that records the length of the array. Another central behavior of arrays is that for any valid index j, the individual element, A[j], can be accessed in constant time. This is because an array uses a consecutive block of memory. The jth element can be found, not by iterating through the array one element at a time, but by validating the index, and using it as an offset from the beginning of the array in determining the appropriate memory address. Therefore, we say that the expression A[j] is evaluated in O(1) time for an array.</li>
</ul>
<h2 id="Finding-the-Maximum-of-an-Array"><a href="#Finding-the-Maximum-of-an-Array" class="headerlink" title="Finding the Maximum of an Array"></a>Finding the Maximum of an Array</h2><p>Proposition 4.16: The algorithm, arrayMax, for computing the maximum element of an array of n numbers, runs in O(n) time.</p>
<p>Justification: The initialization at lines 3 and 4 and the return statement at line 8 require only a constant number of primitive operations. Each iteration of the loop also requires only a constant number of primitive operations, and the loop executes n ? 1 times.</p>
<h2 id="Composing-Long-Strings"><a href="#Composing-Long-Strings" class="headerlink" title="Composing Long Strings"></a>Composing Long Strings</h2><ul>
<li><p>Therefore, the overall time taken by this algorithm is proportional to<br>1 + 2 + ··· + n,<br>which we recognize as the familiar O(n<sup>2</sup>) summation from Proposition 4.3. Therefore, the total time complexity of the repeat1 algorithm is O(n<sup>2</sup>).</p>
</li>
<li><p>x = logbn if and only if bx = n.<br>The value b is known as the base of the logarithm. Note that by the above definition, for any base b &gt; 0, we have that logb 1 = 0.</p>
</li>
</ul>
<h1 id="Three-Way-Set-Disjointness"><a href="#Three-Way-Set-Disjointness" class="headerlink" title="Three-Way Set Disjointness"></a>Three-Way Set Disjointness</h1><h2 id="Origional-solution"><a href="#Origional-solution" class="headerlink" title="Origional solution"></a>Origional solution</h2><p>Suppose we are given three sets, A, B, and C, stored in three different integer arrays. We will assume that no individual set contains duplicate values, but that there may be some numbers that are in two or three of the sets. The three-way set disjointness problem is to determine if the intersection of the three sets is empty, namely, that there is no element x such that x ∈ A, x ∈ B, and x ∈ C.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">disjoint1</span><span class="params">(<span class="keyword">int</span>[]  groupA, <span class="keyword">int</span>[] groupB, <span class="keyword">int</span>[] groupC)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i : groupA) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j : groupB) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k : groupC) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i==j &amp;&amp; j==k)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>This simple algorithm loops through each possible triple of values from the three sets to see if those values are equivalent. If each of the original sets has size n, then the worst-case running time of this method is O(n<sup>3</sup>) .<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">disjoint2</span><span class="params">(<span class="keyword">int</span>[]  groupA, <span class="keyword">int</span>[] groupB, <span class="keyword">int</span>[] groupC)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i : groupA) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j : groupB) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i==j)&#123;</span><br><span class="line">                    <span class="comment">// add this checking to reduce complexitiy</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k : groupC) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(j==k)&#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>In the improved version, it is not simply that we save time if we get lucky. We claim that the worst-case running time for disjoint2 is O(n<sup>2</sup>).</p>
<h1 id="by-sorting"><a href="#by-sorting" class="headerlink" title="by sorting"></a>by sorting</h1><p>Sorting algorithms will be the focus of Chapter 12. The best sorting algorithms (including those used by Array.sort in Java) guarantee a worst-case running time of O(nlog n). Once the data is sorted, the subsequent loop runs in O(n) time, and so the entire unique2 algorithm runs in O(n log n) time. Exercise C-4.35 explores the use of sorting to solve the three-way set disjointness problem in O(n log n) time.</p>
<h1 id="prefixAverage"><a href="#prefixAverage" class="headerlink" title="prefixAverage"></a>prefixAverage</h1><p>Check the source code at PrefixAverage.java, the inital implementation is two for loop, which is O(n<sup>2</sup>), while the better approach is reuse existing total sum.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// naiive approach,</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">			<span class="keyword">double</span> total=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;=i; j++) &#123; <span class="comment">// be awre it's &lt;=, instead of "&lt;"</span></span><br><span class="line">				total+=x[j];				</span><br><span class="line">			&#125;</span><br><span class="line">			a[i]=total/(i+<span class="number">1</span>);			</span><br><span class="line">		&#125;</span><br><span class="line"><span class="comment">// better approach</span></span><br><span class="line"><span class="keyword">double</span> total=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">			total += x[i];</span><br><span class="line">			a[i]=total/(i+<span class="number">1</span>);			</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Recursive"><a href="#Recursive" class="headerlink" title="Recursive"></a>Recursive</h1><h2 id="Definitions"><a href="#Definitions" class="headerlink" title="Definitions"></a>Definitions</h2><ol>
<li>We have one or more <strong>base cases</strong>, which refer to fixed values of the function. e.g. for n!=1 as  n=1 is base.</li>
<li>Then we have one or more <strong>recursive cases</strong>, which define the function in terms of itself. for n!, it’s =n*(n-1)! for n&gt;=1</li>
</ol>
<ul>
<li>Repetition is achieved through repeated recursive invocations of the method. The process i finite because each time the method is invoked, its argument is smaller by one, and when a base case is reached, no further recursive calls are made.</li>
<li>In the case of computing the factorial function, there is no compelling reason for prefereing recursion over a direct iteration with a loop.</li>
</ul>
<h1 id="Tree"><a href="#Tree" class="headerlink" title="Tree"></a>Tree</h1><h2 id="ADT-Abstract-Data-Type"><a href="#ADT-Abstract-Data-Type" class="headerlink" title="ADT (Abstract Data Type)"></a>ADT (Abstract Data Type)</h2><ul>
<li>we define a tree ADT using the concept of a position as an abstraction for a node of a tree. An element is stored at each position, and positions satisfy parent-child relationships that define the tree structure. </li>
</ul>
<h2 id="Depth-and-Height"><a href="#Depth-and-Height" class="headerlink" title="Depth and Height"></a>Depth and Height</h2><h3 id="Depth"><a href="#Depth" class="headerlink" title="Depth"></a>Depth</h3><ul>
<li>The depth of p is the number of ancestors of p, other than p itself.</li>
<li>The running time of depth(p) for position p is O(dp + 1), where dp denotes the depth of p in the tree, because the algorithm performs a constant-time recursive step for each ancestor of p. Thus, algorithm depth(p) runs in O(n) worst-case time, where n is the total number of positions of T, because a position of T may have depth n - 1 <strong>if all nodes form a single branch</strong>. </li>
<li>Method depth, as implemented within the AbstractTree class.<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">depth</span><span class="params">(Position&lt;E&gt; p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(isRoot(p))</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>+depth(parent(p));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Height"><a href="#Height" class="headerlink" title="Height"></a>Height</h3><ul>
<li>We next define the height of a tree to be equal to the maximum of the depths of its positions (or zero, if the tree is empty).</li>
<li>Folloing worst time cost is O(n), it progresses in a <strong>top-down</strong> fashion.</li>
<li>If the method is initially called on the root of T, it will eventually be called once for each position of T. This is because the root eventually invokes the recursion on each of its children, which in turn invokes the recursion on each of their children, and so on.<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">height</span><span class="params">(Position&lt;E&gt; p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> h=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(Position&lt;E&gt; c: children(p))</span><br><span class="line">		h=Math.max(h,<span class="number">1</span>+height(c));</span><br><span class="line">	<span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="Binary-Tree"><a href="#Binary-Tree" class="headerlink" title="Binary Tree"></a>Binary Tree</h2><ul>
<li><p>A binary tree is an ordered tree with the following properties:</p>
<ul>
<li>Every node has at most two children.</li>
<li>Each child node is labeled as being either a left child or a right child.</li>
<li>A left child precedes a right child in the order of children of a node.</li>
</ul>
</li>
<li><p>A binary <strong>tree is proper if each node has either zero or two children</strong>. Some people also refer to <strong>such trees as being full binary trees</strong>. Thus, <strong>in a proper binary tree, every internal node has exactly two children</strong>. A binary tree that is not proper is <strong>improper</strong>.</p>
<h3 id="Some-binary-trees"><a href="#Some-binary-trees" class="headerlink" title="Some binary trees"></a>Some binary trees</h3><h4 id="decision-tree"><a href="#decision-tree" class="headerlink" title="decision tree"></a>decision tree</h4></li>
<li><p>An important class of binary trees arises in contexts where we wish to represent a number of different outcomes that can result from answering a series of yes-or-no questions. Each internal node is associated with a question. Starting at the root, we go to the left or right child of the current node, depending on whether the answer to the question is “Yes” or “No.” With each decision, we follow an edge from a parent to a child, eventually tracing a path in the tree from the root to a leaf. Such binary trees are known as decision trees, because a leaf position p in such a tree represents a decision of what to do if the questions associated with p’s ancestors are answered in a way that leads to p. <strong>A decision tree is a proper binary tree</strong>. </p>
<h4 id="Arithmetic-expression"><a href="#Arithmetic-expression" class="headerlink" title="Arithmetic expression"></a>Arithmetic expression</h4></li>
<li><p>An arithmetic expression can be represented by a binary tree whose leaves are associated with variables or constants, and whose internal nodes are associated with one of the operators +, ?, *, and /, as demonstrated in Figure 8.6. Each node in such a tree has a value associated with it.</p>
<ul>
<li>If a node is leaf, then its value is that of its variable or constant.</li>
<li>If a node is internal, then its value is defined by applying its operation to the values of its children.<h3 id="Properties-of-Binary-trees"><a href="#Properties-of-Binary-trees" class="headerlink" title="Properties of Binary trees"></a>Properties of Binary trees</h3></li>
</ul>
</li>
<li><p>level d has at most 2<sup>d</sup> nodes</p>
</li>
<li><p>Let T be a nonempty binary tree, and let n, nE, nI, and h denote the number of nodes, number of external nodes, number of internal nodes, and height of T, respectively. Then T has the following properties:</p>
<ul>
<li>h + 1 ≤ n ≤ 2<sup>h+1</sup> - 1</li>
<li>1 ≤ nE ≤ 2<sup>h</sup></li>
<li>h ≤ nI ≤ 2<sup>h</sup> - 1</li>
<li>log(n + 1) - 1 ≤ h ≤ n - 1</li>
</ul>
</li>
<li><p>Also, if T is proper, then T has the following properties:</p>
<ul>
<li>2h + 1 ≤ n ≤ 2<sup>h+1</sup> - 1</li>
<li>h + 1 ≤ nE ≤ 2<sup>h</sup></li>
<li>h ≤ nI ≤ 2<sup>h</sup> - 1</li>
<li>log(n + 1) - 1 ≤ h ≤ (n - 1)/2</li>
</ul>
</li>
<li><p>In a nonempty proper binary tree T, with nE external nodes and nI internal nodes, we have nE = nI + 1.</p>
</li>
</ul>
<h1 id="Why-use-tree"><a href="#Why-use-tree" class="headerlink" title="Why use tree"></a>Why use tree</h1><ul>
<li>You can search, insert/delete items quickly in a tree</li>
<li>Ordered Arrays are bad at Insertions/Deletions</li>
<li>Finding items in a Linkedlist is slow</li>
<li>Time needed to perform an operation on a tree is O(log N)</li>
<li>On average a tree is more efficient if you need to perform many different types of operations.</li>
</ul>
<h1 id="Code-practice"><a href="#Code-practice" class="headerlink" title="Code practice"></a>Code practice</h1><p><a href="http://www.practice.geeksforgeeks.org/problem-page.php?pid=700159" target="_blank" rel="noopener">http://www.practice.geeksforgeeks.org/problem-page.php?pid=700159</a></p>
<h1 id="Geek-IDE"><a href="#Geek-IDE" class="headerlink" title="Geek IDE"></a>Geek IDE</h1><p><a href="http://code.geeksforgeeks.org/index.php" target="_blank" rel="noopener">http://code.geeksforgeeks.org/index.php</a></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="http://www.geeksforgeeks.org/maximum-width-of-a-binary-tree/" target="_blank" rel="noopener">http://www.geeksforgeeks.org/maximum-width-of-a-binary-tree/</a></li>
</ul>
]]></content>
      <tags>
        <tag>Dev</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Network Protocols</title>
    <url>/2017-01-28-Network-Protocols/</url>
    <content><![CDATA[<h1 id="Net-Protocols"><a href="#Net-Protocols" class="headerlink" title="Net Protocols"></a>Net Protocols</h1><ul>
<li>Like most models, this OSI physical layer contains the electrical, mechanical, and functional means to establish physical connections between Layer-2 devices.</li>
<li>In addition to interfacing with the Network Layer, the data link connection can be built upon one or more physical layer interfaces.</li>
<li></li>
</ul>
]]></content>
      <tags>
        <tag>TCP</tag>
        <tag>Protocols</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Concurrent Column 2</title>
    <url>/2017-02-01-Concurrent-In-Java-col-2/</url>
    <content><![CDATA[<h1 id="This-is-the-second-half-about-Java-Concurrent-of-my-blog"><a href="#This-is-the-second-half-about-Java-Concurrent-of-my-blog" class="headerlink" title="This is the second half about Java Concurrent of my blog"></a>This is the second half about Java Concurrent of my blog</h1><h2 id="non-blocking-synchronization"><a href="#non-blocking-synchronization" class="headerlink" title="non-blocking synchronization"></a>non-blocking synchronization</h2><ul>
<li>Much of the recent research on concurrent algorithms has focused on nonblock- ing algorithms, which use low-level atomic machine instructions such as compare- and-swap instead of locks to ensure data integrity under concurrent access. Non- blocking algorithms are used extensively in operating systems and JVMs for thread and process scheduling, garbage collection, and to implement locks and other concurrent data structures.</li>
<li>Nonblocking algorithms are considerably more complicated to design and im- plement than lock-based alternatives, but they can <strong>offer significant scalability and liveness advantages</strong>. They coordinate at a finer level of granularity and can greatly reduce scheduling overhead because they don’t block when multiple threads contend for the same data. Further, they are <code>immune to deadlock and other liveness problems</code>. In lock-based algorithms, other threads cannot make progress if a thread goes to sleep or spins while holding a lock, whereas <code>nonblocking algorithms are impervious to individual thread failures</code>. As of Java 5.0, it is possible to build efficient <strong>nonblocking algorithms in Java using the atomic variable classes such as AtomicInteger and AtomicReference</strong>.</li>
<li>Atomic variables can also be used as <strong>“better volatile variables”</strong> even if you are not developing nonblocking algorithms. <code>Atomic variables offer the same memory semantics as volatile variables</code>, but with additional support for atomic updates— making them ideal for counters, sequence generators, and statistics gathering while offering better scalability than lock-based alternatives.</li>
<li>Coordinating access to shared state using a consistent locking protocol ensures that whichever thread holds the lock guarding a set of variables has exclusive access to those variables, and that any changes made to those variables are visible to other threads that subsequently acquire the lock.</li>
<li><code>Volatile variables are a lighter-weight synchronization mechanism</code> than locking <code>because they do not involve context switches or thread scheduling</code>. However, volatile variables have some limitations compared to locking: while they provide similar visibility guarantees, they <code>cannot be used to construct atomic compound actions</code>. This means that volatile variables cannot be used when one variable de- pends on another, or when the new value of a variable depends on its old value. This limits when volatile variables are appropriate, since they cannot be used to reliably implement common tools such as counters or mutexes.</li>
<li>This can be a serious problem <strong>if the blocked thread is a high-priority thread but the thread holding the lock is a lower-priority thread—a performance hazard known as priority inversion</strong>. Even though the higher-priority thread should have precedence, it must wait until the lock is released, and this effectively down- grades its priority to that of the lower-priority thread. If a thread holding a lock is permanently blocked (due to an infinite loop, deadlock, livelock, or other liveness failure), any threads waiting for that lock can never make progress.</li>
</ul>
<h1 id="hardware"><a href="#hardware" class="headerlink" title="hardware"></a>hardware</h1><ul>
<li><code>Exclusive locking is a pessimistic technique</code>—it assumes the worst (if you don’t lock your door, gremlins will come in and rearrange your stuff) and doesn’t proceed until you can guarantee, by acquiring the appropriate locks, that other threads will not interfere.</li>
<li>For fine-grained operations, there is an alternate approach that is often more efficient—<code>the optimistic approach</code>, whereby you proceed with an update, hopeful that you can complete it without interference. <code>This approach relies on collision detection to determine if there has been interference from other parties during the update</code>, in which case the operation fails and can be retried (or not). The optimistic approach is like the old saying, <code>“It is easier to obtain forgiveness than permission”</code>, where “easier” here means “more efficient”.</li>
<li>Processors designed for multiprocessor operation provide special instructions for managing concurrent access to shared variables. Early processors had atomic <strong>test-and-set, fetch-and-increment, or swap</strong> instructions sufficient for implementing mutexes that could in turn be used to implement more sophisticated concurrent objects. Today, nearly every modern processor has some form of atomic read- modify-write instruction, such as <strong>compare-and-swap or load-linked/store-conditional</strong>. Operating systems and JVMs use these instructions to implement locks and con- current data structures, but until Java 5.0 they had not been available directly to Java classes.</li>
</ul>
<h1 id="Compare-and-swap"><a href="#Compare-and-swap" class="headerlink" title="Compare and swap"></a>Compare and swap</h1><ul>
<li>The approach taken by most processor architectures, including IA32 and Sparc, is to implement a <strong>compare-and-swap (CAS)</strong> instruction. (Other processors, such as PowerPC, implement the same functionality with a pair of instructions: load- linked and store-conditional.) <code>CAS has three operands—a memory location V on which to operate, the expected old value A, and the new value B. CAS atomically updates V to the new value B, but only if the value in V matches the expected old value A; otherwise it does nothing</code>. In either case, it returns the value currently in V. (The <code>variant called compare-and-set instead returns whether the operation succeeded</code>.) <strong>CAS means “I think V should have the value A; if it does, put B there, otherwise don’t change it but tell me I was wrong.” CAS is an optimistic technique</strong>—<code>it proceeds with the update in the hope of success</code>, and can detect failure if another thread has updated the variable since it was last examined. SimulatedCAS in Listing 15.1 illustrates the semantics (but not the implementation or performance) of CAS.</li>
<li><code>When multiple threads attempt to update the same variable simultaneously using CAS, one wins and updates the variable’s value, and the rest lose</code>. But the losers are not punished by suspension, as they could be if they failed to acquire a lock; instead, they are told that they didn’t win the race this time but can try again. Because a thread that loses a CAS is not blocked, it can decide whether it wants to try again, take some other recovery action, or do nothing.3 This flexibility eliminates many of the liveness hazards associated with locking (though in unusual cases can introduce the risk of livelock—see Section 10.3.3).</li>
<li>CAS addresses the problem of <strong>implementing atomic read-modify-write sequences without locking</strong>, <code>because it can detect interference from other threads</code>.</li>
</ul>
<h2 id="counter-implemented-by-CAS"><a href="#counter-implemented-by-CAS" class="headerlink" title="counter implemented by CAS"></a>counter implemented by CAS</h2><ul>
<li>At first glance, the CAS-based counter looks as if it should perform worse than a lock-based counter; it has more operations and a more complicated control flow, and depends on the seemingly complicated CAS operation. But in reality, CAS-based counters significantly outperform lock-based counters if there is even a small amount of contention, and often even if there is no contention. The fast path for uncontended lock acquisition typically requires at least one CAS plus other lock-related housekeeping, so more work is going on in the best case for a lock-based counter than in the normal case for the CAS-based counter. Since the CAS succeeds most of the time (assuming low to moderate contention), the hardware will correctly predict the branch implicit in the while loop, minimizing the overhead of the more complicated control logic.</li>
<li>The language syntax for locking may be compact, but the work done by the JVM and OS to manage locks is not. Locking entails traversing a relatively com- plicated code path in the JVM and may entail OS-level locking, thread suspension, and context switches. In the best case, locking requires at least one CAS, so using locks moves the CAS out of sight but doesn’t save any actual execution cost. On the other hand, executing a CAS from within the program involves no JVM code, system calls, or scheduling activity. What looks like a longer code path at the ap- plication level is in fact a much shorter code path when JVM and OS activity are taken into account. <code>The primary disadvantage of CAS is that it forces the caller to deal with contention (by retrying, backing off, or giving up), whereas locks deal with contention automatically by blocking until the lock is available</code>.</li>
<li>Competitive forces will likely result in continued CAS performance improvement over the next sev- eral years. A good rule of thumb is that the <strong>cost of the “fast path” for uncontended lock acquisition and release on most processors is approximately twice the cost of a CAS</strong>.</li>
</ul>
<h2 id="CAS-support-in-JVM"><a href="#CAS-support-in-JVM" class="headerlink" title="CAS support in JVM"></a>CAS support in JVM</h2><ul>
<li>So, how does Java code convince the processor to execute a CAS on its behalf? Prior to Java 5.0, there was no way to do this short of writing native code. <code>In Java 5.0, low-level support was added to expose CAS operations on int, long, and object references</code>, and the <code>JVM compiles these into the most efficient means provided by the underlying hardware</code>. On platforms supporting CAS, the run- time inlines them into the appropriate machine instruction(s); <code>in the worst case, if a CAS-like instruction is not available the JVM uses a spin lock</code>. This low-level JVM support is used by the atomic variable classes (AtomicXxx in java.util.con- current.atomic) to provide an efficient CAS operation on numeric and reference types; these atomic variable classes are used, directly or indirectly, to implement most of the classes in java.util.concurrent.</li>
</ul>
<h1 id="Other-liveness-hazards"><a href="#Other-liveness-hazards" class="headerlink" title="Other liveness hazards"></a>Other liveness hazards</h1><ul>
<li>While deadlock is the most widely encountered liveness hazard, there are sev- eral other liveness hazards you may encounter in concurrent programs including starvation, missed signals, and livelock.</li>
</ul>
<h2 id="Starvation"><a href="#Starvation" class="headerlink" title="Starvation"></a>Starvation</h2><ul>
<li>Starvation occurs when a thread is perpetually denied access to resources it needs in order to make progress; the most commonly starved resource is CPU cycles. Starvation in Java applications can be caused by inappropriate use of thread prior- ities. It can also be caused by executing nonterminating constructs (infinite loops or resource waits that do not terminate) with a lock held, since other threads that need that lock will never be able to acquire it.</li>
<li>The thread priorities defined in the Thread API are merely scheduling hints. The Thread API defines ten priority levels that the JVM can map to operating system scheduling priorities as it sees fit. This mapping is platform-specific, so two Java priorities can map to the same OS priority on one system and different OS priorities on another.</li>
<li><strong>Avoid the temptation to use thread priorities, since they increase platform dependence and can cause liveness problems</strong>. Most concurrent applica- tions can use the default priority for all threads.</li>
</ul>
<h2 id="Poor-responsiveness"><a href="#Poor-responsiveness" class="headerlink" title="Poor responsiveness"></a>Poor responsiveness</h2><ul>
<li>One step removed from starvation is poor responsiveness, which is not uncom- mon in GUI applications using background threads.</li>
<li>If the work done by other threads are truly background tasks, lowering their priority can make the foreground tasks more responsive.</li>
</ul>
<h2 id="Livelock"><a href="#Livelock" class="headerlink" title="Livelock"></a>Livelock</h2><ul>
<li><strong>Livelock is a form of liveness failure</strong> in which a thread, while <strong>not blocked</strong>, still <strong>cannot make progress</strong> because it keeps retrying an operation that <strong>will always fail</strong>. </li>
<li>Livelock often occurs in transactional messaging applications, where the messaging infrastructure rolls back a transaction if a message cannot be processed successfully, and puts it back at the head of the queue. If a bug in the message handler for a particular type of message causes it to fail, <strong>every time the message is dequeued and passed to the buggy handler, the transaction is rolled back</strong>. Since the message is now back at the head of the queue, the <strong>handler is called over and over with the same result</strong>. (This is sometimes called the <strong>poison message</strong> problem.) The <strong>message handling thread is not blocked, but it will never make progress either</strong>. This form of livelock often comes from <strong>overeager error-recovery code that mistakenly treats an unrecoverable error as a recoverable one</strong>.</li>
<li>This is similar to what happens when <strong>two overly polite people</strong> are walking in opposite directions in a hallway: each steps out of the other’s way, and now they are again in each other’s way. So they both step aside again, and again, and again. . .</li>
</ul>
<h3 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h3><ul>
<li>The solution for this variety of livelock is <strong>to introduce some randomness into the retry mechanism</strong>. For example, when two stations in an ethernet network try to send a packet on the shared carrier at the same time, the packets collide. The stations detect the collision, and each tries to send their packet again later. If they each retry exactly one second later, they collide over and over, and neither packet ever goes out, even if there is plenty of available bandwidth. To avoid this, we make each wait an amount of time that includes a random component. (The ethernet protocol also includes exponential backoff after repeated collisions, reducing both congestion and the risk of repeated failure with multiple colliding stations.) Retrying with random waits and backoffs can be equally effective for avoiding livelock in concurrent applications.</li>
</ul>
<h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><ul>
<li>Liveness failures are a serious problem because there is no way to recover from them short of aborting the application. The most common form of liveness failure is lock-ordering deadlock. Avoiding lock ordering deadlock starts at design time: ensure that when threads acquire multiple locks, they do so in a consistent order. The best way to do this is by using open calls throughout your program. This greatly reduces the number of places where multiple locks are held at once, and makes it more obvious where those places are.<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1></li>
</ul>
<h1 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h1><ul>
<li>One of the primary reasons to use threads is to improve performance.</li>
<li>First make your program right, then make it fast—and then only if your performance requirements and measurements tell you it needs to be faster. In designing a con- current application, squeezing out the last bit of performance is often the least of your concerns.</li>
<li>When the performance of an activity is limited by availability of a par- ticular resource, we say it is bound by that resource: CPU-bound, database-bound, etc.</li>
<li>using multiple threads always introduces some performance costs compared to the single-threaded approach. These include the overhead associated with coordinating between threads (locking, signaling, and memory synchronization), increased context switching,thread creation and teardown, and scheduling overhead. When threading is employed effectively, these costs are more than made up for by greater throughput, responsiveness, or capacity. On the other hand, a poorly designed concurrent application can perform even worse than a comparable sequential one.</li>
<li>we want to keep the CPUs busy with <strong>useful</strong> work</li>
</ul>
<h2 id="Scalability"><a href="#Scalability" class="headerlink" title="Scalability"></a>Scalability</h2><ul>
<li>Scalability describes the ability to improve throughput or capacity when additional computing resources (such as additional CPUs, memory, stor- age, or I/O bandwidth) are added.</li>
<li>Nearly all engineering decisions involve some form of tradeoff. </li>
<li>This is one of the reasons why most optimizations are premature: <strong>they are often undertaken before a clear set of requirements is available</strong>.</li>
<li>Avoid premature optimization. <strong>First make it right, then make it fast</strong>—if it is not already fast enough.</li>
<li>Measure, don’t guess.</li>
</ul>
<h3 id="Amdahl’s-law"><a href="#Amdahl’s-law" class="headerlink" title="Amdahl’s law"></a>Amdahl’s law</h3><ul>
<li>the theoretical speedup is always limited by the part of the task that cannot benefit from the improvement.</li>
<li>If F is the fraction of the calculation that must be executed serially, then Amdahl’s law says that on a machine with N processors, we can achieve a speedup of at most:<br>Speedup ≤ 1 / (F + (1 − F)/N)</li>
<li>As N approaches infinity, the maximum speedup converges to 1/F, meaning that <strong>a program in which fifty percent of the processing must be executed serially can be sped up only by a factor of two</strong>, regardless of how many processors are available, and a program in which ten percent must be executed serially can be sped up by at most a factor of ten. </li>
<li>Amdahl’s law also quantifies the efficiency cost of serialization. With ten processors, a program with 10% serialization can achieve at most a speedup of 5.3 (at 53% utilization), and with 100 processors it can achieve at most a speedup of 9.2 (at 9% utilization). It takes a lot of inefficiently utilized CPUs to never get to that factor of ten.</li>
<li>It is clear that as processor counts increase, even a small percentage of serialized execution limits how much throughput can be increased with additional computing resources.</li>
<li>All concurrent applications have some sources of serialization; if you think yours does not, look again.</li>
<li>Amdahl’s law tells us that the scalability of an application is driven by the proportion of code that must be executed serially. Since the primary source of serialization in Java programs is the exclusive resource lock, scalability can often be improved by spending less time holding locks, either by reducing lock granu- larity, reducing the duration for which locks are held, or replacing exclusive locks with nonexclusive or nonblocking alternatives.</li>
</ul>
<h1 id="Costs-introduced-by-threads"><a href="#Costs-introduced-by-threads" class="headerlink" title="Costs introduced by threads"></a>Costs introduced by threads</h1><h2 id="Context-switching"><a href="#Context-switching" class="headerlink" title="Context switching"></a>Context switching</h2><ul>
<li>Context switches are not free; thread scheduling requires manipulating shared data structures in the OS and JVM. The OS and JVM use the same CPUs your pro- gram does; more CPU time spent in JVM and OS code means less is available for your program.</li>
<li>When a new thread is switched in, the data it needs is unlikely to be in the local processor cache, so a context switch causes a flurry of cache misses, and thus threads run a little more slowly when they are first scheduled.</li>
<li>The actual cost of context switching varies across platforms, but a good rule of thumb is that a <strong>context switch costs the equivalent of 5,000 to 10,000 clock cycles</strong>, or several microseconds on most current processors.</li>
</ul>
<h2 id="memory-synchronization"><a href="#memory-synchronization" class="headerlink" title="memory synchronization"></a>memory synchronization</h2><ul>
<li>The performance cost of synchronization comes from several sources. The visibility guarantees provided by synchronized and volatile may entail using <strong>special instructions called memory barriers</strong> that can flush or invalidate caches, flush hard- ware write buffers, and stall execution pipelines. <strong>Memory barriers</strong> may also have indirect performance consequences because they <strong>inhibit other compiler optimizations</strong>; most operations cannot be reordered with memory barriers.</li>
<li>When assessing the performance impact of synchronization, it is <strong>important to distinguish between contended and uncontended synchronization</strong>. The synchronized mechanism is optimized for the uncontended case (<strong>volatile is always uncontended</strong>), and at this writing, the performance cost of <strong>a “fast-path” uncontended synchronization ranges from 20 to 250 clock cycles</strong> for most systems. While this is certainly not zero, the effect of needed, uncontended synchronization is rarely significant in overall application performance, and the alternative involves compromising safety and potentially signing yourself (or your succes- sor) up for some very painful bug hunting later.</li>
<li>Modern <strong>JVMs can reduce the cost of incidental synchronization</strong> by optimizing away locking that can be proven never to contend. If a lock object is accessible only to the current thread, the JVM is permitted to optimize away a lock acquisi- tion because there is no way another thread could synchronize on the same lock. For example, the lock acquisition in following Listing can always be eliminated by the JVM.</li>
</ul>
<p>Following synchronization has no effect</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">new</span> Object()) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>More sophisticated JVMs can use <strong>escape analysis</strong> to identify when a local object reference is never published to the heap and is therefore thread-local. As below sample:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getStoogeNames</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; stooges = <span class="keyword">new</span> Vector&lt;String&gt;(); stooges.add(<span class="string">"Moe"</span>);</span><br><span class="line">stooges.add(<span class="string">"Larry"</span>);</span><br><span class="line">stooges.add(<span class="string">"Curly"</span>);</span><br><span class="line"><span class="keyword">return</span> stooges.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>the only reference to the List is the local variable stooges, and <strong>stack-confined variables are automatically thread-local</strong>. A naive execution of getStoogeNames would acquire and release the lock on the Vector four times, once for each call to add or toString. However, a smart runtime compiler can inline these calls and then see <strong>that stooges and its internal state never escape</strong>, and therefore that <strong>all four lock acquisitions can be eliminated</strong>.</p>
</li>
<li><p>Even without escape analysis, compilers can also perform <strong>lock coarsening</strong>, the <strong>merging of adjacent synchronized blocks using the same lock</strong>. For getStooge- Names, a JVM that performs lock coarsening might combine the three calls to add and the call to toString into a single lock acquisition and release, using heuristics on the relative cost of synchronization versus the instructions inside the synch- ronized block.5 Not only does this reduce the synchronization overhead, but it also gives the optimizer a much larger block to work with, likely enabling other optimizations.</p>
</li>
</ul>
<blockquote>
<p>Don’t worry excessively about the cost of uncontended synchronization. The basic mechanism is already quite fast, and JVMs can perform addi- tional optimizations that further reduce or eliminate the cost. Instead, focus optimization efforts on areas where lock contention actually occurs.</p>
</blockquote>
<ul>
<li>Synchronization by one thread can also affect the performance of other threads. Synchronization creates traffic on the shared memory bus; this bus has a limited bandwidth and is shared across all processors. If threads must compete for synchronization bandwidth, all threads using synchronization will suffer.</li>
</ul>
<h2 id="Blocking"><a href="#Blocking" class="headerlink" title="Blocking"></a>Blocking</h2><ul>
<li><strong>Uncontended synchronization</strong> can be handled <strong>entirely within the JVM</strong> (Bacon et al., 1998); <strong>contended synchronization may require OS activity</strong>, which adds to the cost. When locking is contended, the losing thread(s) must block. The JVM can implement blocking either via spin-waiting (repeatedly trying to acquire the lock until it succeeds) or by suspending the blocked thread through the operating system. Which is more efficient depends on the relationship between context switch overhead and the time until the lock becomes available; spin-waiting is preferable for short waits and suspension is preferable for long waits. Some JVMs choose between the two adaptively based on profiling data of past wait times, but most just suspend threads waiting for a lock.</li>
</ul>
<h2 id="Reducing-lock-contention"><a href="#Reducing-lock-contention" class="headerlink" title="Reducing lock contention"></a>Reducing lock contention</h2><ul>
<li>We’ve seen that <strong>serialization hurts scalability</strong> and that <strong>context switches hurt performance</strong>. <strong>Contended locking causes both</strong>, so <strong>reducing lock contention can improve both performance and scalability</strong>.
Access to resources guarded by an exclusive lock is serialized—only one thread at a time may access it. Of course, we use locks for good reasons, such as preventing data corruption, but this safety comes at a price. Persistent contention for a lock limits scalability.</li>
<li>The principal threat to scalability in concurrent applications is the exclu- sive resource lock.</li>
<li>Two factors influence the likelihood of contention for a lock: how often that lock is requested and how long it is held once acquired.7 If the product of these factors is sufficiently small, then most attempts to acquire the lock will be uncon- tended, and lock contention will not pose a significant scalability impediment.</li>
</ul>
<h3 id="There-are-three-ways-to-reduce-lock-contention"><a href="#There-are-three-ways-to-reduce-lock-contention" class="headerlink" title="There are three ways to reduce lock contention:"></a>There are three ways to reduce lock contention:</h3><ul>
<li>Reduce the duration for which locks are held;</li>
<li>Reduce the frequency with which locks are requested; or</li>
<li>Replace exclusive locks with coordination mechanisms that permit<br>greater concurrency.</li>
</ul>
<h2 id="Narrowing-lock-scope"><a href="#Narrowing-lock-scope" class="headerlink" title="Narrowing lock scope"></a>Narrowing lock scope</h2><ul>
<li><strong>An effective way to reduce the likelihood of contention is to hold locks as briefly as possible</strong>. This can be done by moving code that doesn’t require the lock out of synchronized blocks, especially for expensive operations and potentially block- ing operations such as I/O.</li>
<li>It is easy to see how holding a “hot” lock for too long can limit scalability</li>
<li>Reducing the scope of the lock in userLocationMatches substantially reduces the number of instructions that are executed with the lock held. <strong>By Amdahl’s law, this removes an impediment to scalability because the amount of serialized code is reduced</strong>.</li>
<li>Because AttributeStore has only one state variable, attributes, we can im- prove it further by the technique of <strong>delegating thread safety</strong> (Section 4.3). By replacing attributes with a thread-safe Map (a Hashtable, synchronizedMap, or Con- currentHashMap), AttributeStore can delegate all its thread safety obligations to the underlying thread-safe collection.</li>
</ul>
<h2 id="Reducing-lock-granularity"><a href="#Reducing-lock-granularity" class="headerlink" title="Reducing lock granularity"></a>Reducing lock granularity</h2><ul>
<li>The other way to reduce the fraction of time that a lock is held (and therefore the likelihood that it will be contended) is to <strong>have threads ask for it less often</strong>. This can be accomplished <strong>by lock splitting and lock striping</strong>, which involve <strong>using separate locks to guard multiple independent state variables previously guarded by a single lock</strong>. These techniques reduce the granularity at which locking occurs, potentially allowing greater scalability—but using more locks also increases the risk of deadlock.</li>
<li>If a lock guards more than one <strong>independent</strong> state variable, you may be able to improve scalability by splitting it into multiple locks that each guard different variables. This results in each lock being requested less often.</li>
<li>After splitting the lock, each new finer-grained lock will see less locking traffic than the original coarser lock would have.</li>
</ul>
<h2 id="Lock-stripping"><a href="#Lock-stripping" class="headerlink" title="Lock stripping"></a>Lock stripping</h2><ul>
<li>Splitting a heavily contended lock into two is likely to result in two heavily contended locks. </li>
<li>Lock splitting can sometimes be extended to partition locking on a variable- sized set of independent objects, in which case it is called lock striping. For exam- ple, the implementation of ConcurrentHashMap uses an array of 16 locks, each of which guards 1/16 of the hash buckets; bucket N is guarded by lock N mod 16.</li>
<li>One of the downsides of lock striping is that locking the collection for ex- clusive access is more difficult and costly than with a single lock. Usually <strong>an operation can be performed by acquiring at most one lock</strong>, but <strong>occasionally you need to lock the entire collection</strong>, as when ConcurrentHashMap needs <strong>to expand the map and rehash the values</strong> into a larger set of buckets. This is typically done by acquiring all of the locks in the stripe set</li>
<li>common optimizations such as caching frequently computed values can introduce “hot fields” that limit scalability.</li>
<li>A common optimization is to update a separate counter as entries are added or removed; this slightly increases the cost of a put or remove operation to keep the counter up-to-date, but reduces the cost of the size operation from O(n) to O(1).</li>
<li>In this case, the counter is called a <strong>hot field</strong> because every mutative operation needs to access it.</li>
<li>ConcurrentHashMap avoids this problem by having size enumerate the stripes and add up the number of elements in each stripe, instead of maintaining a global count. To avoid enumerating every element, ConcurrentHashMap maintains a separate count field for each stripe, also guarded by the stripe lock.</li>
</ul>
<h2 id="Alternative-to-exclusive-lock"><a href="#Alternative-to-exclusive-lock" class="headerlink" title="Alternative to exclusive lock"></a>Alternative to exclusive lock</h2><ul>
<li>A third technique for mitigating the effect of lock contention <strong>is to forego the use of exclusive locks</strong> in favor of a more concurrency-friendly means of managing shared state. These include <strong>using the concurrent collections, read-write locks, immutable objects and atomic variables</strong>.</li>
</ul>
<h3 id="ReadWriteLock"><a href="#ReadWriteLock" class="headerlink" title="ReadWriteLock"></a>ReadWriteLock</h3><ul>
<li>enforces a <strong>multiple-reader, single-writer</strong> locking discipline: more than one reader can access the shared resource concurrently so long as none of them wants to modify it, but writers must acquire the lock excusively. For read-mostly data structures, ReadWriteLock can offer greater concurrency than exclusive locking; <strong>for read-only data structures, immutability can eliminate the need for locking entirely</strong>.</li>
<li>Atomic variables (see Chapter 15) offer a means of reducing the cost of updat- ing “hot fields” such as statistics counters, sequence generators, or the reference</li>
<li>If size is called frequently compared to mutative operations, striped data structures can optimize for this by caching the collection size in a volatile whenever size is called and invalidating the cache (setting it to -1) whenever the collection is modified. If the cached value is nonnegative on entry to size, it is accurate and can be returned; otherwise it is recomputed.</li>
<li>The atomic variable classes pro- vide very fine-grained (and therefore more scalable) atomic operations on integers or object references, and are implemented using low-level concurrency primitives (such as compare-and-swap) provided by most modern processors. If your class has a small number of hot fields that do not participate in invariants with other variables, replacing them with atomic variables may improve scalability.</li>
</ul>
<h1 id="Comparing-Map"><a href="#Comparing-Map" class="headerlink" title="Comparing Map"></a>Comparing Map</h1><ul>
<li>The single-threaded performance of ConcurrentHashMap is slightly better than that of a synchronized HashMap, but it is in concurrent use that it really shines. The implementation of ConcurrentHashMap assumes the most common operation is retrieving a value that already exists, and is therefore optimized to <strong>provide highest performance and concurrency for successful get operations</strong>.</li>
<li>The major scalability impediment for the synchronized Map implementations is that there is a single lock for the entire map, so only one thread can access the map at a time. On the other hand, ConcurrentHashMap does no locking for most successful read operations, and <strong>uses lock striping for write operations</strong> and those few read operations that do require locking. As a result, multiple threads can access the Map concurrently without blocking.</li>
<li>The numbers for the synchronized collections are not as encouraging. Perfor- mance for the one-thread case is comparable to ConcurrentHashMap, but once the load transitions from mostly uncontended to mostly contended—which happens here at two threads—the synchronized collections suffer badly. This is common behavior for code whose scalability is limited by lock contention. So long as contention is low, time per operation is dominated by the time to actually do the work and throughput may improve as threads are added. Once contention becomes significant, time per operation is dominated by context switch and scheduling delays, and adding more threads has little effect on throughput.</li>
</ul>
<h1 id="Building-a-asynchronous-log"><a href="#Building-a-asynchronous-log" class="headerlink" title="Building a asynchronous log"></a>Building a asynchronous log</h1><ul>
<li>Building a logger that moves the I/O to another thread may improve performance, but it also introduces a number of design complications, such as interruption (what happens if a thread blocked in a logging operation is interrupted?), service guarantees (does the logger guarantee that a success- fully queued log message will be logged prior to service shutdown?), saturation policy (what happens when the producers log messages faster than the logger thread can handle them?), and service lifecycle (how do we shut down the logger, and how do we communicate the service state to producers?).</li>
</ul>
<h1 id="Reducing-context-switching"><a href="#Reducing-context-switching" class="headerlink" title="Reducing context switching"></a>Reducing context switching</h1><ul>
<li>The “get in, get out” principle of Section 11.4.1 tells us that <strong>we should hold locks as briefly as possible</strong>, because <strong>the longer a lock is held, the more likely that lock will be contended</strong>. If a thread blocks waiting for I/O while holding a lock, another thread is more likely to want the lock while the first thread is holding it. Concurrent systems perform much better when most lock acquisitions are uncontended, because contended lock acquisition means more context switches. A coding style that encourages more context switches thus yields lower overall throughput.</li>
</ul>
<h1 id="Testing-concurrency"><a href="#Testing-concurrency" class="headerlink" title="Testing concurrency"></a>Testing concurrency</h1><ul>
<li>we defined safety as “nothing bad ever happens” and liveness as “something good eventually happens”.</li>
<li>when interrupted, it throws InterruptedException. This is one of the few cases in which it is appropriate to subclass Thread explicitly instead of using a Runnable in a pool: in order to test proper termination with join.</li>
<li>The result of <strong>Thread.getState should not be used</strong> for concurrency control, and is of limited usefulness for testing—its primary utility is as a source of debugging information.</li>
<li>a common error in implementing semaphore-controlled buffers is to forget that the code actually doing the insertion and extraction requires mutual exclu- sion (using synchronized or ReentrantLock). A sample run of PutTakeTest with a version of BoundedBuffer that omits making doInsert and doExtract synch- ronized fails fairly quickly. </li>
<li><strong>Tests should be run on multiprocessor systems to increase the diversity of potential interleavings. However, having more than a few CPUs does not necessarily make tests more effective. To maximize the chance of detecting timing-sensitive data races, there should be more active threads than CPUs, so that at any given time some threads are running and some are switched out, thus reducing the predicatability of interactions between threads</strong>.</li>
<li>Tests like PutTakeTest tend to be good at finding safety violations. For exam- ple, a common error in implementing semaphore-controlled buffers is to forget that the code actually doing the insertion and extraction requires mutual exclu- sion (using synchronized or ReentrantLock). A sample run of PutTakeTest with a version of BoundedBuffer that omits making doInsert and doExtract synch- ronized fails fairly quickly. Running PutTakeTest with a few dozen threads iterating a few million times on buffers of various capacity on various systems increases our confidence about the lack of data corruption in put and take.</li>
<li>The source code <strong>PutTakeTest.java</strong> demonstreated aforesaid logic.</li>
</ul>
<h2 id="Test-resource-management"><a href="#Test-resource-management" class="headerlink" title="Test resource management"></a>Test resource management</h2><ul>
<li><strong>The tests so far have been concerned with a class’s adherence to its specifica- tion—that it does what it is supposed to do. A secondary aspect to test is that it does not do things it is not supposed to do</strong>, such as leak resources. Any object that holds or manages other objects should not continue to maintain references to those objects longer than necessary. Such storage leaks prevent garbage collectors from reclaiming memory (or threads, file handles, sockets, database connections, or other limited resources) and can lead to resource exhaustion and application failure.</li>
</ul>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>concurrent</tag>
      </tags>
  </entry>
  <entry>
    <title>Java New IO</title>
    <url>/2017-02-02-Java-New-IO/</url>
    <content><![CDATA[<h1 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h1><ul>
<li>JDK 1.0 introduced <strong>rudimentary I/O facilities</strong> for accessing the file system (to create a directory, remove a file, or perform another task), accessing file content randomly (as opposed to sequentially), and streaming byte-oriented data between sources and destinations in a sequential manner.</li>
</ul>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>IO</tag>
      </tags>
  </entry>
  <entry>
    <title>Java JVM</title>
    <url>/2017-02-05-JVM/</url>
    <content><![CDATA[<h1 id="Class-loading-subsystem"><a href="#Class-loading-subsystem" class="headerlink" title="Class loading subsystem"></a>Class loading subsystem</h1><p>Consist of three sections</p>
<h2 id="load"><a href="#load" class="headerlink" title="load"></a>load</h2><p>There are three class loaders</p>
<ul>
<li>bootstrap class loader, e.g. rt.jar</li>
<li>extension class loader, e.g. jre/lib/ext</li>
<li>application class loader, e.g. -cp<h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2></li>
<li>Verify</li>
<li>Prepare</li>
<li>Resolve<h2 id="Initialize"><a href="#Initialize" class="headerlink" title="Initialize"></a>Initialize</h2></li>
<li>While deadlock is the most widely encountered liveness hazard, there are sev- eral other liveness hazards you may encounter in concurrent programs including starvation, missed signals, and livelock.</li>
</ul>
<h1 id="Metaspace"><a href="#Metaspace" class="headerlink" title="Metaspace"></a>Metaspace</h1><p>Since Java 8, the introduce of metaspace is kind of using memory or even virtual memory in OS, so theriotically there is no limit of metaspace. But PermGen is part of Method area, so that is upper limit for PermGen.</p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven-Notes</title>
    <url>/2017-02-03-Maven-Notes/</url>
    <content><![CDATA[<h1 id="Maven-philosophy"><a href="#Maven-philosophy" class="headerlink" title="Maven philosophy"></a>Maven philosophy</h1><ul>
<li>“It is important to note that in the pom.xml file you specify the what and not the how. The pom.xml file can also serve as a documentation tool, conveying your project dependencies and their versions.”</li>
</ul>
<h1 id="Concepts"><a href="#Concepts" class="headerlink" title="Concepts"></a>Concepts</h1><h2 id="Life-cycles"><a href="#Life-cycles" class="headerlink" title="Life cycles"></a>Life cycles</h2><p>Maven defines three Lifecycles ֠default, clean and site and each Lifecycle consists of predefined Phases. </p>
<p>The clean argument which we pass to mvn command is phase which is in lifecycle named clean.</p>
<p>Maven Lifecycle Phases clean lifecycle<br>The clean lifecycle contains three phases pre-clean, clean and post-clean .<br>When we invoke command mvn clean, Maven loads Clean Lifecycle and executes the phases pre-clean and clean.<br>We can invoke any of these three phases and all preceding phases up to and including the invoked phase are executed sequentially.</p>
<p>Lifecycle phases can’s do anything by themselves. For example, phase clean by itself doesnӴ have ability or functionality to delete the build directory. It delegate the task to a plugin named maven-clean-plugin. So, lifecycles phases are just some predefined steps which Maven invokes sequentially one after another. As we can see, phases are similar to the steps in a job which are executed one after another.</p>
<h1 id="Concepts-summary"><a href="#Concepts-summary" class="headerlink" title="Concepts summary"></a>Concepts summary</h1><p>Lifecycles, Lifecycle Phases, Plugins and Plugin Goals are the core of Maven. and we summarize the concepts learned so far:<br>Maven comes with three lifecycles ֠default, clean and site.<br>each lifecycle is made up of lifecycle phases and in all, there are 28 phases ֠default 21, clean 3 and site 4.<br>when a lifecycle phase is invoked using mvn command, all preceding phases are executed sequentially one after another.<br>lifecycle phases by themselves doesnӴ have any capabilities to accomplish some task and they rely on plugins to carryout the task.<br>depending on project and packaging type, Maven binds various plugin goals to lifecycle phases and goals carryout the task entrusted to them.</p>
<h3 id="default-lifecycle"><a href="#default-lifecycle" class="headerlink" title="default lifecycle"></a>default lifecycle</h3><p>Default Lifecycle<br>The most important of the three lifecycles is the Default Lifecycle . Maven uses default lifecycle to build, test and distribute the project. Default lifecycle contains 21 phases.</p>
<p>Project may contain resources such as properties, XML configuration files etc., and phases process-resources and process-test-resources copy and process such resources files.<br>The phases compile and test-compile complies the source Java files and test files respectively.<br>The phases package, install, and deploy are used to distribute the project. As we have already seen, the package phase creates JAR file of resources and compiled classes for distribution. The phase install, installs the artifacts of the project i.e jar and pom.xml to the local repository at $HOME/.m2 so that other projects can use them as dependencies. The phase deploy installs the artifacts of the project to a remote repository (probably on Internet) so that a wider group of projects can use it as dependency. We will cover these phases in a later chapter.</p>
<h2 id="goal"><a href="#goal" class="headerlink" title="goal"></a>goal</h2><p>If we see the usage description of mvn command, apart from the options it accepts only two things ֠goal or phase.<br>Maven Lifecycle Phases - mvn usage description</p>
<p>mvn [options] [&lt;goal(s)&gt;] [&lt;phase(s)&gt;]</p>
<p>For example, we can directly compile the source with the following command.<br>$ cd simple-app<br>$ mvn compiler:compile<br>To run a goal with mvn, use the format <plugin prefix>:<goal>. In the above example, compiler:compile, the compiler is plugin prefix of maven-compiler-plugin and compile is the goal name. We can get the prefix of all plugins from Maven Plugin Directory.</goal></plugin></p>
<p>–<br>When we invoke a goal directly, Maven executes just that goal, whereas when we invoke a lifecycle phase all the phases up to that phase are executed. We can see this in action with following example.<br>$ cd simple-app<br>$ mvn clean<br>$ mvn surefire:test</p>
<hr>
<p>In very few situations we invoke plugin goals directly and more often than not, lifecycle phases are preferred.</p>
<p>Lifecycle Phases and Plugin Goals<br>When a lifecycle phase is run, depending on project type and packaging type, Maven binds plugin goals to lifecycle phases.<br>When we run mvn package in a Java Project.</p>
<hr>
<p>To process-resources phase, Maven binds resources goal of maven-resources-plugin and to test phase, it binds test goal of maven-surefire-plugin and so on.<br>Whatӳ happens at package phase is bit interesting. In a Java Project, Maven binds jar goal of maven-jar-plugin. However, when we run the same command in a webapp project, up to test phase Maven binds same goals, but to the package phase Maven binds war goal of maven-war-plugin the war:war instead of jar:jar.</p>
<h3 id="Samples"><a href="#Samples" class="headerlink" title="Samples"></a>Samples</h3><p>For example, consider the command below. The clean and package arguments are build phases, while the dependency:copy-dependencies is a goal (of a plugin).</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn clean dependency:copy-dependencies package</span><br></pre></td></tr></table></figure>

<p>If this were to be executed, the clean phase will be executed first (meaning it will run all preceding phases of the clean lifecycle, plus the clean phase itself), and then the dependency:copy-dependencies goal, before finally executing the package phase (and all its preceding build phases of the default lifecycle).</p>
<p>Moreover, if a goal is bound to one or more build phases, that goal will be called in all those phases.</p>
<h3 id="To-see-what-goals-bined-to-lifecycle-phase"><a href="#To-see-what-goals-bined-to-lifecycle-phase" class="headerlink" title="To see what goals bined to lifecycle phase"></a>To see what goals bined to lifecycle phase</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn <span class="built_in">help</span>:describe -Dcmd=install</span><br></pre></td></tr></table></figure>

<p>[INFO] ‘install’ is a phase corresponding to this plugin:<br>org.apache.maven.plugins:maven-install-plugin:2.4:install</p>
<p>It is a part of the lifecycle for the POM packaging ‘pom’. This lifecycle includes the following phases:</p>
<ul>
<li>validate: Not defined</li>
<li>initialize: Not defined</li>
<li>generate-sources: Not defined</li>
<li>process-sources: Not defined</li>
<li>generate-resources: Not defined</li>
<li>process-resources: Not defined</li>
<li>compile: Not defined</li>
<li>process-classes: Not defined</li>
<li>generate-test-sources: Not defined</li>
<li>process-test-sources: Not defined</li>
<li>generate-test-resources: Not defined</li>
<li>process-test-resources: Not defined</li>
<li>test-compile: Not defined</li>
<li>process-test-classes: Not defined</li>
<li>test: Not defined</li>
<li>prepare-package: Not defined</li>
<li>package: Not defined</li>
<li>pre-integration-test: Not defined</li>
<li>integration-test: Not defined</li>
<li>post-integration-test: Not defined</li>
<li>verify: Not defined</li>
<li>install: org.apache.maven.plugins:maven-install-plugin:2.4:install</li>
<li>deploy: org.apache.maven.plugins:maven-deploy-plugin:2.7:deploy</li>
</ul>
<h2 id="Plugin"><a href="#Plugin" class="headerlink" title="Plugin"></a>Plugin</h2><p>Maven is ֠at its heart ֠a plugin execution framework; all work is done by plugins.</p>
<p>Plugins are broadly grouped as build plugins and reporting plugins. </p>
<p>Plugins are artifacts that provide goals to Maven. Furthermore, a plugin may have one or more goals wherein each goal represents a capability of that plugin. For example, the Compiler plugin has two goals: compile and testCompile. The former compiles the source code of your main code, while the latter compiles the source code of your test code.</p>
<p>Plugin Goals<br>Maven plugin is a collection of one or more goals which do some task or job. It is also known as Mojo ֠Maven Plain Old Java Object.</p>
<p>Similarly, Maven uses maven-compiler-plugin to compile the source and test files and it provides three goals ֠compiler:compile, compiler:testCompile and compiler:help.</p>
<p>Suffice it to say for now that a plugin is a collection of goals with a general common purpose. For example the jboss-maven-plugin, whose purpose is “deal with various jboss items”.</p>
<p>To configure plugins, we use project build element in pom.xml. The next listing shows the top level elements used to configure a plugin.<br>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">...</span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>...<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>...<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>...<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span>...<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span>        </span><br><span class="line">        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">execution</span>&gt;</span>...<span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>The elements are</p>
<ul>
<li>build : defines the project build.</li>
<li>plugins : parent element for one or more <plugin> elements.</plugin></li>
<li>plugin : the plugin to configure.</li>
<li>groupId, artifactId, version : coordinates of the plugin to configure.</li>
<li>configuration : holds the parameters and properties to be passed to the plugin.</li>
<li>executions : parent element for one or more <execution> element.</execution></li>
<li>execution : configures the execution of a goal of the plugin.</li>
</ul>
<p>In Maven, there are the build and the reporting plugins:</p>
<ul>
<li>Build plugins will be executed during the build and then, they should be configured in the <build> element.</build></li>
<li>Reporting plugins will be executed during the site generation and they should be configured in the <reporting> element.</reporting></li>
</ul>
<h3 id="position"><a href="#position" class="headerlink" title="position"></a>position</h3><p>Normally, the <build> block is placed after the project coordinates block and before the dependencies block.</build></p>
<h3 id="To-show-plugin-details-in-configuration"><a href="#To-show-plugin-details-in-configuration" class="headerlink" title="To show plugin details in configuration"></a>To show plugin details in configuration</h3><p>Easiest way to know the available parameters for a goal is to run plugin help goal.<br>$ mvn compiler:help -Dgoal=compile -Ddetail<br>It will list the available parameters for compile goal of compiler.<br>But it will not show the default value of the parameters and to know the available parameters and also, the default value for each parameter, run help:describe goal of Maven Help plugin (maven-help-plugin).<br>$ mvn help:describe -Dplugin=compiler -Dmojo=compile -Ddetail<br>Note that maven-help-plugins uses -Dmojo for goal, instead of -Dgoal,</p>
<h3 id="Help-Goal"><a href="#Help-Goal" class="headerlink" title="Help Goal"></a>Help Goal</h3><p>Recent Maven plugins have generally an help goal to have in the command line the description of the plugin, with their parameters and types. For instance, to understand the javadoc goal, you need to call:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn javadoc:<span class="built_in">help</span> -Ddetail -Dgoal=javadoc</span><br></pre></td></tr></table></figure>

<h4 id="Samples-1"><a href="#Samples-1" class="headerlink" title="Samples"></a>Samples</h4><ul>
<li><p>To include or exclude certain files or directories in the project Jar, configure Maven Jar Plugin with <include> and <exclude> parameters.<br>simple-app/pom.xml<br>…</exclude></include></p>
<build>
  <plugins>
    <plugin>
      <groupid>org.apache.maven.plugins</groupid>
      <artifactid>maven-jar-plugin</artifactid>
      <configuration>
        <includes>
          <include>**/service/*</include>
        </includes>
      </configuration>
    </plugin>
  </plugins>
</build>
...
</li>
<li><p>Maven Clean Plugin deletes the target directory by default and we may configure it to delete additional directories and files.<br>simple-app/pom.xml<br>…</p>
<build>
 <plugins>
  <plugin>
    <artifactid>maven-clean-plugin</artifactid>
    <configuration>
      <filesets>
      <filesets>
        <fileset>
          <directory>src/main/generated</directory>
          <followsymlinks>false</followsymlinks>
          <usedefaultexcludes>true</usedefaultexcludes>
          <includes>
            <include>*.java</include>
          </includes>
          <excludes>
            <exclude>Template*</exclude>
          </excludes>
        </fileset>
      </filesets>
    </filesets></configuration>
  </plugin>
 </plugins>
</build>
...
The above configuration forces the clean plugin to delete *.java files in src/main/generated directory, but excludes the Template*.

</li>
</ul>
<h3 id="plugin-execution"><a href="#plugin-execution" class="headerlink" title="plugin execution"></a>plugin execution</h3><p>Firstly demonstrate plugin execution with an example. In Apache Ant, itӳ quite easy to output echo any property or message during the build and many of us frequently use it to understand the build flow or to debug. But, Maven comes with no such feature, and only way to echo any message is to use Ant within Maven. The Apache AntRun Plugin provides the ability to run Ant tasks within Maven.<br>Letӳ configure maven-antrun-plugin to output message to console.<br>simple-app/pom.xml<br>  …<br>  <build><br>    <plugins><br>      <plugin><br>        <artifactid>maven-antrun-plugin</artifactid><br>        <executions><br>          <execution><br>            <goals><br>              <goal>run</goal><br>            </goals><br>            <phase>compile</phase><br>            <configuration><br>              <tasks><br>                <echo>Build Dir: ${project.build.directory}</echo><br>              </tasks><br>            </configuration><br>          </execution><br>        </executions><br>      </plugin><br>    </plugins><br>  </build><br>  …<br>Build the project with  mvn package and it echoes the build directory name in compile phase.</p>
<h4 id="sample"><a href="#sample" class="headerlink" title="sample"></a>sample</h4><p>The clean and package arguments are build phases, while the dependency:copy-dependencies is a goal (of a plugin).</p>
<p>mvn clean dependency:copy-dependencies package<br>If this were to be executed, the clean phase will be executed first (meaning it will run all preceding phases of the clean lifecycle, plus the clean phase itself), and then the dependency:copy-dependencies goal, before finally executing the package phase (and all its preceding build phases of the default lifecycle).</p>
<h4 id="concept"><a href="#concept" class="headerlink" title="concept"></a>concept</h4><p>The element <executions>/<execution> allows you to configure the execution of a plugin goal. With it, you can accomplish the following things.<br>bind a plugin goal to a lifecycle phase.<br>configure plugin parameters of a specific goal.<br>configure plugin parameters of a specific goal such as compiler:compile, surefire:test etc., that are by default binds to a lifecycle phase</execution></executions></p>
<ul>
<li><h2 id="core-concepts"><a href="#core-concepts" class="headerlink" title="core concepts"></a>core concepts</h2><h2 id="phase"><a href="#phase" class="headerlink" title="phase"></a>phase</h2><p>you may notice the second is simply a single word - package. Rather than a goal, this is a phase. A phase is a step in the build lifecycle, which is an ordered sequence of phases. When a phase is given, Maven will execute every phase in the sequence up to and including the one defined. For example, if we execute the compile phase, the phases that actually get executed are:</p>
</li>
<li><p>validate</p>
</li>
<li><p>generate-sources</p>
</li>
<li><p>process-sources</p>
</li>
<li><p>generate-resources</p>
</li>
<li><p>process-resources</p>
</li>
<li><p>compile</p>
</li>
</ul>
<p>Maven Phases<br>Although hardly a comprehensive list, these are the most common default lifecycle phases executed.</p>
<ul>
<li><p>validate: validate the project is correct and all necessary information is available</p>
</li>
<li><p>compile: compile the source code of the project</p>
</li>
<li><p>test: test the compiled source code using a suitable unit testing framework. These tests should not require the code be packaged or deployed</p>
</li>
<li><p>package: take the compiled code and package it in its distributable format, such as a JAR.</p>
</li>
<li><p>integration-test: process and deploy the package if necessary into an environment where integration tests can be run</p>
</li>
<li><p>verify: run any checks to verify the package is valid and meets quality criteria</p>
</li>
<li><p>install: install the package into the local repository, for use as a dependency in other projects locally</p>
</li>
<li><p>deploy: done in an integration or release environment, copies the final package to the remote repository for sharing with other developers and projects.<br>There are two other Maven lifecycles of note beyond the default list above. They are</p>
</li>
<li><p>clean: cleans up artifacts created by prior builds</p>
</li>
<li><p>site: generates site documentation for this project<br>Phases are actually mapped to underlying goals. The specific goals executed per phase is dependant upon the packaging type of the project. For example, package executes jar:jar if the project type is a JAR, and war:war if the project type is - you guessed it - a WAR.</p>
</li>
</ul>
<p>An interesting thing to note is that phases and goals may be executed in sequence.</p>
<p>mvn clean dependency:copy-dependencies package<br>This command will clean the project, copy dependencies, and package the project (executing all phases up to package, of course).</p>
<p>–</p>
<h2 id="Lifecycle-and-phases-are-just-formal-names-for-jobs-and-steps-Maven-calls-the-jobs-as-lifecycles-and-tasks-or-steps-as-phases"><a href="#Lifecycle-and-phases-are-just-formal-names-for-jobs-and-steps-Maven-calls-the-jobs-as-lifecycles-and-tasks-or-steps-as-phases" class="headerlink" title="Lifecycle and phases are just formal names for jobs and steps. Maven calls the jobs as lifecycles and tasks (or steps) as phases."></a>Lifecycle and phases are just formal names for jobs and steps. Maven calls the jobs as lifecycles and tasks (or steps) as phases.</h2><p>when a phase is invoked using mvn command, all preceding phases up to and including the invoked phase are executed sequentially. For example,<br>mvn compile ֠will run phases process-resources and then compile.<br>mvn test ֠will run phases process-resources, compile, process-test-resources, test-compile and finally test.<br>mvn install ֠will run phases process-resources, compile, process-test-resources, test-compile, test and finally install.<br>Like in clean lifecycle, in default lifecycle too, lifecycle phases by themselves donӴ have capabilities to accomplish some task. For example, compile phase by itself canӴ do anything but, it delegates compilation job to a plugin named maven-compiler-plugin.</p>
<h3 id="Some-Phases-Are-Not-Usually-Called-From-the-Command-Line"><a href="#Some-Phases-Are-Not-Usually-Called-From-the-Command-Line" class="headerlink" title="Some Phases Are Not Usually Called From the Command Line"></a>Some Phases Are Not Usually Called From the Command Line</h3><p>The phases named with hyphenated-words (pre-<em>, post-</em>, or process-*) are not usually directly called from the command line. These phases sequence the build, producing intermediate results that are not useful outside the build. In the case of invoking integration-test, the environment may be left in a hanging state.</p>
<h2 id="Maven-default-repository"><a href="#Maven-default-repository" class="headerlink" title="Maven default repository"></a>Maven default repository</h2><p><a href="http://repo.maven.apache.org/maven2/" target="_blank" rel="noopener">http://repo.maven.apache.org/maven2/</a></p>
<h1 id="Maven-Settings"><a href="#Maven-Settings" class="headerlink" title="Maven Settings"></a>Maven Settings</h1><p>The settings element in the settings.xml file contains elements used to define values which configure Maven execution in various ways, like the pom.xml, but should not be bundled to any specific project, or distributed to an audience. These include values such as the local repository location, alternate remote repository servers, and authentication information.</p>
<p>There are two locations where a settings.xml file may live:</p>
<ul>
<li>The Maven install: ${maven.home}/conf/settings.xml</li>
<li>A user’s install: ${user.home}/.m2/settings.xml<br>The former settings.xml are also called <code>global settings</code>, the latter settings.xml are referred to as user settings. If both files exists, their contents gets merged, with the user-specific settings.xml being dominant.</li>
</ul>
<p>Tip: If you need to create user-specific settings from scratch, it’s easiest to copy the global settings from your Maven installation to your ${user.home}/.m2 directory. Maven’s default settings.xml is a template with comments and examples so you can quickly tweak it to match your needs.</p>
<h2 id="The-contents-of-the-settings-xml-can-be-interpolated-using-the-following-expressions"><a href="#The-contents-of-the-settings-xml-can-be-interpolated-using-the-following-expressions" class="headerlink" title="The contents of the settings.xml can be interpolated using the following expressions:"></a>The contents of the settings.xml can be interpolated using the following expressions:</h2><p>${user.home} and all other system properties (since Maven 3.0)<br>${env.HOME} etc. for environment variables<br>Note that properties defined in profiles within the settings.xml cannot be used for interpolation.</p>
<h2 id="All-Maven-pom-xml-inherits-from-super-POM"><a href="#All-Maven-pom-xml-inherits-from-super-POM" class="headerlink" title="All Maven pom.xml inherits from super POM"></a>All Maven pom.xml inherits from super POM</h2><h1 id="Coc-Convention-over-Configuration"><a href="#Coc-Convention-over-Configuration" class="headerlink" title="Coc: Convention over Configuration"></a>Coc: Convention over Configuration</h1><ul>
<li>Convention over configuration is a simple concept. Systems, libraries, and frameworks should assume reasonable defaults without requiring that unnecessary configuration systems should “just work.” Popular frameworks such as Ruby on Rails and EJB3 have started to adhere to these principles in reaction to the configuration complexity of frameworks such as the initial Enterprise JavaBeans? (EJB) specifications. </li>
<li>“Popularized by the Ruby on Rails community, CoC emphasizes sensible defaults, thereby reducing the number of decisions to be made.”</li>
<li>“Gradle’s flexibility, like that of Ant, can be abused, which results in difficult and complex builds.<br>”</li>
</ul>
<h1 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h1><ul>
<li>This is the Project Object Model (POM), a declarative description of a project. </li>
</ul>
<h2 id="Coordinate"><a href="#Coordinate" class="headerlink" title="Coordinate"></a>Coordinate</h2><ul>
<li>“group, artifact, and version (<strong>GAV</strong>) coordinates”</li>
<li>We’ve highlighted the Maven coordinates for this project: <strong>groupId, artifactId, version and packaging. These combined identifiers make up a project’s coordinates</strong>.[3] Just as in any other coordinate system, a Maven coordinate is an address for a specific point in “space”: from general to specific. Maven pinpoints a project via its coordinates when one project relates to another, either as a dependency, a plugin, or a parent project reference. </li>
<li>Maven coordinates are often written using a colon as a delimiter in the following format: <strong>groupId:artifactId:packaging:version</strong>. </li>
<li>Projects undergoing active development can use a special identifier that marks <strong>a version as a SNAPSHOT</strong>.</li>
<li>The packaging format of a project is also an important component in the Maven coordinates, but it isn’t a part of a project’s unique identifiers. A project’s groupId:artifactId:version make that project unique; you can’t have a project with the same three groupId, artifactId, and version identifiers.</li>
<li><strong>packaging: The type of project, defaulting to jar</strong>, describing the packaged output produced by a project. A project with packaging jar produces a JAR archive; a project with packaging war produces a web application.</li>
<li>The core of Maven is pretty dumb; it doesn’t know how to do much beyond parsing a few XML documents and keeping track of a lifecycle and a few plugins. Maven has been designed to delegate most responsibility to a set of Maven plugins that can affect the Maven lifecycle and offer access to goals. Most of the action in Maven happens in plugin goals that take care of things like compiling source, packaging bytecode, publishing sites, and any other task that needs to happen in a build. </li>
<li>You benefit from the fact that plugins are downloaded from a remote repository and maintained centrally. This is what is meant by universal reuse through Maven plugins.</li>
<li>working developers are starting to realize that Maven not only simplifies the task of build management, it is helping to encourage a common interface between developers and software projects.</li>
</ul>
<h1 id="Maven-vs-Ant"><a href="#Maven-vs-Ant" class="headerlink" title="Maven vs Ant"></a>Maven vs Ant</h1><h2 id="The-differences-between-Ant-and-Maven-in-this-example-are"><a href="#The-differences-between-Ant-and-Maven-in-this-example-are" class="headerlink" title="The differences between Ant and Maven in this example are:"></a>The differences between Ant and Maven in this example are:</h2><h3 id="Apache-Ant"><a href="#Apache-Ant" class="headerlink" title="Apache Ant"></a>Apache Ant</h3><p>Ant doesn’t have formal conventions such as a common project directory structure; you have to tell Ant exactly where to find the source and where to put the output. Informal conventions have emerged over time, but they haven’t been codified into the product.</p>
<ul>
<li>Ant is procedural; you have to tell Ant exactly what to do and when to do it. You have to tell it to compile, then copy, then compress.</li>
<li>Ant doesn’t have a lifecycle; you have to define goals and goal dependencies. You have to attach a sequence of tasks to each goal manually.<h3 id="Apache-Maven"><a href="#Apache-Maven" class="headerlink" title="Apache Maven"></a>Apache Maven</h3></li>
<li>Maven has conventions: in the example, it already knew where your source code was because you followed the convention. It put the bytecode in target/classes, and it produced a JAR file in target.</li>
<li>Maven is declarative; all you had to do was create a pom.xml file and put your source in the default directory. Maven took care of the rest.</li>
<li>Maven has a lifecycle, which you invoked when you executed mvn install. This command told Maven to execute a series of sequence steps until it reached the lifecycle. As a side effect of this journey through the lifecycle, Maven executed a number of default plugin goals that did things such as compile and create a JAR.</li>
<li>A Maven plugin is a collection of one or more goals (see Figure 3-1). Examples of Maven plugins can be simple core plugins such as the Jar plugin that contains goals for creating JAR files, the Compiler plugin that contains goals for compiling source code and unit tests, or the Surefire plugin that contains goals for executing unit tests and generating reports.</li>
</ul>
<h4 id="Maven-life-cycle"><a href="#Maven-life-cycle" class="headerlink" title="Maven life cycle"></a>Maven life cycle</h4><ul>
<li>The second command we ran in the previous section was <strong>mvn install</strong>. This command didn’t specify a plugin goal; instead, it specified a Maven lifecycle phase. A phase is a step in what Maven calls the “build lifecycle.” The build lifecycle is an ordered sequence of phases involved in building a project.</li>
<li><strong>Plugin goals can be attached to a lifecycle phase</strong>. As Maven moves through the phases in a lifecycle, it will execute the goals attached to each particular phase. Each phase may have zero or more goals bound to it. In the previous section, when you ran mvn install, you might have noticed that more than one goal was executed. Examine the output after running mvn install and take note of the various goals that are executed. </li>
<li>Maven steps through the phases preceding package in the Maven lifecycle; <strong>executing a phase will first execute all proceeding phases in order</strong>, ending with the phase specified on the command line. Each phase corresponds to zero or more goals, and since we haven’t performed any plugin configuration or customization, this example binds a set of standard plugin goals to the default lifecycle. </li>
</ul>
<h1 id="Dependency"><a href="#Dependency" class="headerlink" title="Dependency"></a>Dependency</h1><ul>
<li>“Maven provides <strong>declarative dependency management</strong>. With this approach, you declare your project’s dependencies in an external file called pom.xml. Maven will automatically download those dependencies and hand them over to your project for the purpose of building, testing, or packaging.”</li>
<li>“The default remote repository with which Maven interacts is called Maven Central, and it is located at repo.maven.apache.org and uk.maven.org.”</li>
<li>“The <strong>internal repository manager</strong> acts as a proxy to remote repositories. Because you have full control over the internal repository, you can regulate the types of artifacts allowed in your company. Additionally, you can also push your organization’s artifacts onto the server, thereby enabling collaboration. ”, such as Nexus</li>
</ul>
<h2 id="Transitive-Dependcies"><a href="#Transitive-Dependcies" class="headerlink" title="Transitive Dependcies"></a>Transitive Dependcies</h2><ul>
<li>“A key benefit of Maven is that it automatically “deals with transitive dependencies and includes them in your project.</li>
<li>“Maven uses a technique known as <strong>dependency mediation</strong> to resolve version conflicts. Simply stated, dependency mediation allows Maven to pull the dependency that <strong>is closest to the project in the tree</strong>. In Figure 3-3, there are two versions of dependency B: 0.0.8 and 1.0.0. In this scenario, version 0.0.8 of dependency B is included in the project, because it is a direct dependency and closest to the tree. Now look at the three versions of dependency F: 0.1.3, 1.0.0, and 2.2.0. All three dependencies are at the same depth. In this scenario, Maven will use the <strong>first-found dependency</strong>, which would be 0.1.3, and not the latest 2.2.0 version.”</li>
</ul>
<h2 id="Dependency-Scope"><a href="#Dependency-Scope" class="headerlink" title="Dependency Scope"></a>Dependency Scope</h2><ul>
<li>“Maven uses the concept of scope, which allows you to specify <strong>when and where</strong> you need a particular dependency.” “Maven provides the following six scopes:”</li>
<li>“<strong>compile</strong>: Dependencies with the compile scope are available in the class path in all phases on a project build, test, and run. This is the default scope.”</li>
<li>“<strong>provided</strong>: Dependencies with the provided scope are available in the class path during the build and test phases. They don’t get bundled within the generated artifact. Examples of dependencies that use this scope include Servlet api, JSP api, and so on.”</li>
<li>“<strong>runtime</strong>: Dependencies with the runtime scope are not available in the class path during the build phase. Instead they get bundled in the generated artifact and are available during runtime.”</li>
<li>“<strong>test</strong>: Dependencies with the test scope are available during the test phase. JUnit and TestNG are good examples of dependencies with the test scope.”</li>
<li>“<strong>system</strong>: Dependencies with the system scope are similar to dependencies with the provided scope, except that these dependencies are not retrieved from the repository. Instead, a hard-coded path to the file system is specified from which the dependencies are used.”</li>
<li>“<strong>import</strong>: The import scope is applicable for .pom file dependencies only. It allows you to include dependency management information from a remote .pom file. The import scope is available only in Maven 2.0.9 or later.”</li>
</ul>
<h1 id="Common-errors"><a href="#Common-errors" class="headerlink" title="Common errors"></a>Common errors</h1><h2 id="Not-authorized-ReasonPhrase-Unauthorized"><a href="#Not-authorized-ReasonPhrase-Unauthorized" class="headerlink" title="Not authorized , ReasonPhrase:Unauthorized"></a>Not authorized , ReasonPhrase:Unauthorized</h2><p>This is likely you are behind corporate proxy, so you have to config to make Maven can connect to nexus successfully:</p>
<ul>
<li><p>Go to make sure your settings.xml is correct, normally, it’s under your home directory, e.g. tzhang/.m2/settings.xml to make sure the username and password same as the settings in nexus</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">id</span>&gt;</span>my-nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">username</span>&gt;</span>1jhAX6LZ<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">password</span>&gt;</span>V7MxFm3k9fiodhqNQDT/kSh8V81JT8bUWRHEel339rwq<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">server</span>&gt;</span>	</span><br><span class="line">	<span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>my-nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://nexus.internal.abc.com/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*,!sonar,!eclipse-misc,!m2-proxy,!eclipse-releases,!eclipse-snapshots,!mfs-m2-repository,!fsg_internal_repository,!fsg_snapshot_repository<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>double check your login token in nexus, log into nexus, click your login name in top right dropdown, chose “profile” and then trigger button “Access User Token”</p>
<h2 id="Newly-added-dependency-in-pom-not-working-class-not-found"><a href="#Newly-added-dependency-in-pom-not-working-class-not-found" class="headerlink" title="Newly added dependency in pom not working, class not found"></a>Newly added dependency in pom not working, class not found</h2><p>If you are in intellij, please go to the exact module (the child module, rather than parent pom), right click the pom.xml, chose maven -&gt; Reinstall</p>
<h1 id="Setup-Proxy"><a href="#Setup-Proxy" class="headerlink" title="Setup Proxy"></a>Setup Proxy</h1></li>
<li><p>“Maven requires an Internet connection to download plug-ins and dependencies. Some companies employ HTTP proxies to restrict access to the Internet. In those scenarios, running Maven will result in Unable to download artifact errors. To address this, edit the settings.xml file and add the proxy information specific to your company.”</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0</span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://maven.apache.org/xsd/settings-1.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">proxies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">proxy</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>companyProxy<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">active</span>&gt;</span>true<span class="tag">&lt;/<span class="name">active</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">protocol</span>&gt;</span>http<span class="tag">&lt;/<span class="name">protocol</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">host</span>&gt;</span>proxy.company.com<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">username</span>&gt;</span>proxyusername<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">password</span>&gt;</span>proxypassword<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">nonProxyHosts</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">proxy</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">proxies</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="Multimodule-projects"><a href="#Multimodule-projects" class="headerlink" title="Multimodule projects"></a>Multimodule projects</h1><h2 id="Generate-parent"><a href="#Generate-parent" class="headerlink" title="Generate parent"></a>Generate parent</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mvn archetype:generate -DgroupId=com.apress.gswmbook -DartifactId=gswm-parent -Dversion=1.0.0-SNAPSHOT -DarchetypeGroupId=org.codehaus.mojo.archetypes -DarchetypeArtifactId=pom-root</span><br></pre></td></tr></table></figure>

<p>Listing 6-5. Parent pom.xml File with Modules</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.apress.gswmbook<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gswm-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>gswm-parent<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>gswm-web<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>gswm-service<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>gswm-repository<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Generate-web-module"><a href="#Generate-web-module" class="headerlink" title="Generate web module"></a>Generate web module</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mvn archetype:generate -DgroupId=com.todzhang.mywebApp -DartifactId=main-web -Dversion=1.0.0-SNAPSHOT -Dpackage=war -DarchetypeArtifactId=maven-archetype-webapp</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.apress.gswmbook<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gswm-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.apress.gswmbook<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gswm-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>gswm-web Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>gswm-web<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Generate-a-service-jar-module"><a href="#Generate-a-service-jar-module" class="headerlink" title="Generate a service jar module"></a>Generate a service jar module</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mvn archetype:generate -DgroupId=com.todzhang.mywebApp -DartifactId=back-service -Dversion=1.0.0-SNAPSHOT -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=<span class="literal">false</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Notice that you didn’t provide the package parameter, as the maven-archetype-quickstart produces a JAR project by default.<h2 id="To-start-the-module"><a href="#To-start-the-module" class="headerlink" title="To start the module"></a>To start the module</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mvn packages</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="Create-archetype-from-project"><a href="#Create-archetype-from-project" class="headerlink" title="Create archetype from project"></a>Create archetype from project</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mvn archetype:create-from-project</span><br></pre></td></tr></table></figure>

<h1 id="Site-life-cycle"><a href="#Site-life-cycle" class="headerlink" title="Site life cycle"></a>Site life cycle</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mvn site</span><br></pre></td></tr></table></figure>

<ul>
<li>The site life cycle uses Maven’s site plug-in to generate the site for a single project. Once this command completes, a site folder gets created under the project’s target.</li>
<li>Open the index.html file to browse the generated site. You will notice that Maven used the information provided in the pom.xml file to generate most of the documentation. It also automatically applied the default skin and generated the corresponding images and CSS files. </li>
<li>To regenerate site<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mvn clean site</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="JavaDoc"><a href="#JavaDoc" class="headerlink" title="JavaDoc"></a>JavaDoc</h1><ul>
<li>Maven provides a Javadoc plug-in, which uses the Javadoc tool for generating Javadocs. Integrating the Javadoc plug-in simply involves declaring it in the reporting element of pom.xml file, as shown in Listing 7-4. Plug-ins declared in the pom reporting element are executed during site generation.<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">!—Content</span> <span class="attr">removed</span> <span class="attr">for</span> <span class="attr">brevity--</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">reporting</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-javadoc-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">reporting</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>Then run <strong>mvn clean site</strong> to generate javadoc,  the apidocs folder created under gswm /target/site</p>
<h1 id="Unit-test-report"><a href="#Unit-test-report" class="headerlink" title="Unit test report"></a>Unit test report</h1><ul>
<li><p>Maven offers the Surefire plug-in that provides a uniform interface for running tests created by frameworks such as JUnit or TestNG. It also generates execution results in various formats such as XML and HTML. These published results enable developers to find and fix broken tests quickly.<br>The Surefire plug-in is configured in the same way as the Javadoc plug-in in the reporting section of the pom file. Listing 7-5 shows the Surefire plug-in configuration.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">!—Content</span> <span class="attr">removed</span> <span class="attr">for</span> <span class="attr">brevity--</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">reporting</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-report-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">reporting</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>you will see a Surefire Reports folder generated under gswm\target. It contains the test execution results in XML and TXT formats. The same information will be available in HTML format in the surefire-report.html file under site folder.</p>
</li>
</ul>
<h1 id="Code-coverate-report"><a href="#Code-coverate-report" class="headerlink" title="Code coverate report"></a>Code coverate report</h1><ul>
<li>Code coverage is a measurement of how much source code is being exercised by automated tests. Essentially, it provides an indication of the quality of your tests. Emma and Cobertura are two popular open source code coverage tools for Java.<br>In this section, you will use Cobertura for measuring this project’s code coverage. Configuring Cobertura is similar to other plug-ins, as shown in<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">!—Content</span> <span class="attr">removed</span> <span class="attr">for</span> <span class="attr">brevity--</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">reporting</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cobertura-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">reporting</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="Find-bug-reports"><a href="#Find-bug-reports" class="headerlink" title="Find bug reports"></a>Find bug reports</h1><ul>
<li>FindBugs is a tool for detecting defects in Java code. It uses static analysis to detect bug patterns, such as infinite recursive loops and null pointer dereferences. Listing 7-7 shows the FindBugs configuration.</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">!—Content</span> <span class="attr">removed</span> <span class="attr">for</span> <span class="attr">brevity--</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">reporting</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>findbugs-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">reporting</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Integration-with-Nexus"><a href="#Integration-with-Nexus" class="headerlink" title="Integration with Nexus"></a>Integration with Nexus</h1><ul>
<li>Repository managers act as a proxy of public repositories, facilitate artifact sharing and team collaboration, ensure build stability, and enable the governance of artifacts used in the enterprise.</li>
<li>Nexus is a popular open source repository manager from Sonatype. It is a web application that allows you to maintain internal repositories and access external repositories. It allows repositories to be grouped and accessed via a single URL. This enables the repository administrator to add and remove new repositories behind the scenes without requiring developers to change the configuration on their computers. Additionally, it provides hosting capabilities for sites generated using Maven site and artifact search capabilities.</li>
</ul>
<h2 id="To-enable-nexus-in-Maven"><a href="#To-enable-nexus-in-Maven" class="headerlink" title="To enable nexus in Maven"></a>To enable nexus in Maven</h2><ul>
<li><p>You will start by adding a distributionManagement element in the pom.xml file, as shown in Listing 8-1. This element is used to declare the location where the project’s artifacts will be when deployed. The repository element indicates the location where released artifacts will be deployed. Similarly, the snapshotRepository element identifies the location where the SNAPSHOT versions of the project will be stored.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">http://www.w3.org/2001/XMLSchema-instance”</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"</span>&gt;</span>  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Content removed for brevity --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexusReleases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">name</span>&gt;</span>Releases<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/repositories/releases<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexusSnapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">name</span>&gt;</span>Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/repositories/snapshots<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Content removed for brevity --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Out of the box, Nexus comes with <strong>Releases and Snapshots repositories</strong>. By default, SNAPSHOT artifacts will be stored in the Snapshots Repository, and release artifacts will be stored in the Releases repository.<br>Like most repository managers, deployment to Nexus is a protected operation. You provide the credentials needed to interact with Nexus in the <strong>settings.xml</strong> file.</p>
</li>
<li><p>Listing 8-2. Settings.xml File with Server Information</p>
</li>
<li><p>Listing 8-2 shows the settings.xml file with the server information. The Nexus deployment user with password deployment123 is provided out of the box. Notice that the IDs declared in the server tag — nexusReleases and nexusSnapshots must match the IDs of the repository and snapshotRepository declared in the pom.xml file. Replace the contents of the settings.xml file in the C:\Users&lt;<user_name>&gt;.m2 folder with the code in Listing 8-2.</user_name></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexusReleases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">username</span>&gt;</span>deployment<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">password</span>&gt;</span>deployment123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexusSnapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">username</span>&gt;</span>deployment<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">password</span>&gt;</span>deployment123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>This concludes the configuration steps for interacting with Nexus. At the command line, run the command mvn deploy under the directory C:\apress\gswm-book\chapter8\gswm. Upon successful execution of the command, you will see the SNAPSHOT artifact under Nexus </p>
</li>
</ul>
<h1 id="POM"><a href="#POM" class="headerlink" title="POM"></a>POM</h1><h2 id="Effective-POM"><a href="#Effective-POM" class="headerlink" title="Effective POM"></a>Effective POM</h2><p>At the start of every build, Maven internally merges project pomx.ml with Super POM and constructs a new POM which is known as Effective POM .</p>
<p>Earlier in Maven Lifecycle and Plugin Goals, we learned that Maven binds plugins goals to lifecycle phases. Actually, this magic happens in effective POM and it is highly instructive to go through the effective POM to know the what goes on under the hood.</p>
<h3 id="To-dump-effective-POM"><a href="#To-dump-effective-POM" class="headerlink" title="To dump effective POM"></a>To dump effective POM</h3><p>use Maven Help Plugin to dump the effective POM to a file for investigation.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mvn <span class="built_in">help</span>:effective-pom -Doutput=target/effective-pom.xml</span><br></pre></td></tr></table></figure>

<h2 id="Packaging"><a href="#Packaging" class="headerlink" title="Packaging"></a>Packaging</h2><p>The first, and most common way, is to set the packaging for your project via the equally named POM element <packaging>. Some of the valid packaging values are jar, war, ear and pom. If no packaging value has been specified, it will default to jar.</packaging></p>
<p>Each packaging contains a list of goals to bind to a particular phase. For example, the jar packaging will bind the following goals to build phases of the default lifecycle.</p>
<h2 id="This-is-an-almost-standard-set-of-bindings-however-some-packagings-handle-them-differently-For-example-a-project-that-is-purely-metadata-packaging-value-is-pom-only-binds-goals-to-the-install-and-deploy-phases-for-a-complete-list-of-goal-to-build-phase-bindings-of-some-of-the-packaging-types-refer-to-the-Lifecycle-Reference"><a href="#This-is-an-almost-standard-set-of-bindings-however-some-packagings-handle-them-differently-For-example-a-project-that-is-purely-metadata-packaging-value-is-pom-only-binds-goals-to-the-install-and-deploy-phases-for-a-complete-list-of-goal-to-build-phase-bindings-of-some-of-the-packaging-types-refer-to-the-Lifecycle-Reference" class="headerlink" title="This is an almost standard set of bindings; however, some packagings handle them differently. For example, a project that is purely metadata (packaging value is pom) only binds goals to the install and deploy phases (for a complete list of goal-to-build-phase bindings of some of the packaging types, refer to the Lifecycle Reference)."></a>This is an almost standard set of bindings; however, some packagings handle them differently. For example, a project that is purely metadata (packaging value is pom) only binds goals to the install and deploy phases (for a complete list of goal-to-build-phase bindings of some of the packaging types, refer to the Lifecycle Reference).</h2><h1 id="build-tools-options"><a href="#build-tools-options" class="headerlink" title="build tools options"></a>build tools options</h1><p>Maven and Ant are just different approaches: imperative and declarative (see Imperative vs Declarative build systems)</p>
<p>Maven is better for managing dependencies (but Ant is ok with them too, if you use Ant+Ivy) and build artefacts. The main benefit from maven - its lifecycle. You can just add specific actions on correct phase, which seems pretty logical: just launch you integration tests on integration-test phase for example. Also, there are many existing plugins, which can could almost everything. Maven archetype is powerful feature, which allows you to quickly create project.</p>
<p>Ant is better for controlling of build process. Before your very first build you have to write you build.xml. If your build process is very specific, you have to create complicated scripts. For long-term projects support of ant-scripts could become really painful: scripts become too complicated, people, who has written them, could leave project, etc.</p>
<p>Both of them use xml, which could become too big in big long-term projects.</p>
<p>Anyway, you shoud read specific documentation (not hate-articles) on both. Also, there is ant-maven-plugin, which allow to launch ant-scripts with maven.</p>
<p>P.S. You can take a look on Gradle, which for me could provide more freedom than Maven, but is easier to use than Ant.</p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Eclipse notes</title>
    <url>/2017-02-06-Eclipse-tips/</url>
    <content><![CDATA[<h1 id="How-do-I-remove-a-plug-in"><a href="#How-do-I-remove-a-plug-in" class="headerlink" title="How do I remove a plug-in?"></a>How do I remove a plug-in?</h1><p>Run Help &gt; About Eclipse &gt; Installation Details, select the software you no longer want and click Uninstall. (On Macintosh it is Eclipse &gt; About Eclipse &gt; Installation Details.)</p>
<h1 id="Where-is-the-Eclipse-Plugin-update-error-log"><a href="#Where-is-the-Eclipse-Plugin-update-error-log" class="headerlink" title="Where is the Eclipse Plugin update error log?"></a>Where is the Eclipse Plugin update error log?</h1><p>The log is located at current workspace: {workspace_path}/.metadata/.log - also you can view this log in view “Error Log”: Window &gt; Show View &gt; Other &gt; Find here “Error Log”</p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Eclipse</tag>
      </tags>
  </entry>
  <entry>
    <title>SSH and Cryptography</title>
    <url>/2017-02-06-SSH-Cryptography/</url>
    <content><![CDATA[<h1 id="SFTP-versus-FTPS"><a href="#SFTP-versus-FTPS" class="headerlink" title="SFTP versus FTPS"></a>SFTP versus FTPS</h1><ul>
<li>SS: Secure Shell</li>
<li>An increasing number of our customers are looking to move away from standard FTP for transferring data, so we are often asked which secure FTP protocol we recommend. In the next few paragraphs, we will explain what options are available and their main differences.</li>
<li>The two mainstream protocols available for Secure FTP transfers are named SFTP (FTP over SSH) and FTPS (FTP over SSL). Both SFTP and FTPS offer a high level of protection since they implement strong algorithms such as AES and Triple DES to encrypt any data transferred. Both options also support a wide variety of functionality with a broad command set for transferring and working with files. So the most notable differences between SFTP and FTPS is how connections are authenticated and managed.</li>
</ul>
<h2 id="Authentication-SFTP-vs-FTPS"><a href="#Authentication-SFTP-vs-FTPS" class="headerlink" title="Authentication: SFTP vs. FTPS"></a>Authentication: SFTP vs. FTPS</h2><ul>
<li>With SFTP (FTP over SSH), a connection can be authenticated using a couple different techniques.  For basic authentication, you (or your trading partner) may just require a user id and password to connect to the SFTP server. Its important to note that any user ids and passwords supplied over the SFTP connection will be encrypted, which is a big advantage over standard FTP.</li>
<li>SSH keys can also be used to authenticate SFTP connections in addition to, or instead of, passwords. With key-based authentication, you will first need to generate a SSH private key and public key beforehand. If you need to connect to a trading partner’s SFTP server, you would send your SSH public key to them, which they will load onto their server and associate with your account. When you connect to their SFTP server, your client software will transmit your public key to the server for authentication. If the keys match, along with any user/password supplied, then the authentication will succeed.</li>
<li>With FTPS (FTP over SSL), a connection is authenticated using a user id, password and certificate(s).  Like SFTP, the users and passwords for FTPS connections will also be encrypted. When connecting to a trading partner’s FTPS server, your FTPS client will first check if the server’s certificate is trusted. The certificate is considered trusted if either the certificate was signed off by a known certificate authority (CA), like Verisign, or if the certificate was self-signed (by your partner) and you have a copy of their public certificate in your trusted key store.</li>
<li>Your partner may also require that you supply a certificate when you connect to them.  Your certificate may be signed off by a 3rd party CA or your partner may allow you to just self-sign your certificate, as long as you send them the public portion of your certificate beforehand (which they will load in their trusted key store).</li>
</ul>
<h2 id="Implementation-SFTP-vs-FTPS"><a href="#Implementation-SFTP-vs-FTPS" class="headerlink" title="Implementation: SFTP vs. FTPS"></a>Implementation: SFTP vs. FTPS</h2><ul>
<li>In regards to how easy each of the secure FTP protocols are to implement, SFTP is the clear winner since it is very firewall friendly. SFTP only needs a single port number (default of 22) to be opened through the firewall.  This port will be used for all SFTP communications, including the initial authentication, any commands issued, as well as any data transferred.</li>
<li>On the other hand, FTPS can be very difficult to patch through a tightly secured firewall since FTPS uses multiple port numbers. The initial port number (default of 21) is used for authentication and passing any commands.  However, every time a file transfer request (get, put) or directory listing request is made, another port number needs to be opened.  You and your trading partners will therefore have to open a range of ports in your firewalls to allow for FTPS connections, which can be a security risk for your network.</li>
</ul>
<p>In summary, SFTP and FTPS are both very secure with strong authentication options.  However since SFTP is much easier to port through firewalls, and we are seeing an increasing percentage of trading partners adopting SFTP, we believe SFTP is the clear winner for your secure FTP needs.</p>
<h1 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h1><ul>
<li>There are several ways to use SSH; one is to use automatically generated public-private key pairs to simply encrypt a network connection, and then use password authentication to log on.</li>
<li>Another is to use a manually generated public-private key pair to perform the authentication, allowing users or programs to log in without having to specify a password. In this scenario, anyone can produce a matching pair of different keys (public and private). The public key is placed on all computers that must allow access to the owner of the matching private key (the owner keeps the private key secret). While authentication is based on the private key, the key itself is never transferred through the network during authentication. SSH only verifies whether the same person offering the public key also owns the matching private key. In all versions of SSH it is important to verify unknown public keys, i.e. associate the public keys with identities, before accepting them as valid. Accepting an attacker’s public key without validation will authorize an unauthorized attacker as a valid user.</li>
<li>SSH is important in cloud computing to solve connectivity problems, avoiding the security issues of exposing a cloud-based virtual machine directly on the Internet. An SSH tunnel can provide a secure path over the Internet, through a firewall to a virtual machine.</li>
<li>The standard TCP port 22 has been assigned for contacting SSH servers.</li>
</ul>
<h2 id="Key-management"><a href="#Key-management" class="headerlink" title="Key management"></a>Key management</h2><ul>
<li>On Unix-like systems, the list of authorized public keys is typically stored in the home directory of the user that is allowed to log in remotely, in the file ~/.ssh/authorized_keys.</li>
</ul>
<h3 id="WinFTP"><a href="#WinFTP" class="headerlink" title="WinFTP"></a>WinFTP</h3><ul>
<li>cryptographic protocol is SSH-2</li>
<li>SSH implementation is OpenSSH_5.3</li>
<li>Server fingerprint: File transfer protocol = SFTP-3<br>Cryptographic protocol = SSH-2<br>SSH implementation = OpenSSH_5.3<br>Encryption algorithm = aes<br>Compression = No</li>
</ul>
<hr>
<p>Server host key fingerprint</p>
<h2 id="ssh-rsa-2048-86-54-d9-09-25-c0-9b-f8-17-8c-c0-52-13-0c-9c-cc"><a href="#ssh-rsa-2048-86-54-d9-09-25-c0-9b-f8-17-8c-c0-52-13-0c-9c-cc" class="headerlink" title="ssh-rsa 2048 86:54:d9:09:25:c0:9b:f8:17:8c:c0:52:13:0c:9c:cc"></a>ssh-rsa 2048 86:54:d9:09:25:c0:9b:f8:17:8c:c0:52:13:0c:9c:cc</h2><h1 id="ssh-keygen"><a href="#ssh-keygen" class="headerlink" title="ssh-keygen"></a>ssh-keygen</h1><ul>
<li>ssh-keygen is a standard component of the Secure Shell (SSH) protocol suite found on Unix and Unix-like computer systems used to establish secure shell sessions between remote computers over insecure networks, through the use of various cryptographic techniques. The ssh-keygen utility is used to generate, manage, and convert authentication keys.</li>
<li>ssh-keygen is able to generate a key using one of three different digital signature algorithms.</li>
<li>With the help of the ssh-keygen tool, a user can create passphrase keys for any of these key types (to provide for unattended operation, the passphrase can be left empty, at increased risk).</li>
</ul>
<h2 id="algorithm"><a href="#algorithm" class="headerlink" title="algorithm"></a>algorithm</h2><ul>
<li>SSH protocol version 1 (now deprecated) only the RSA algorithm was supported.</li>
<li>The SSH protocol version 2 additionally introduced support for the DSA algorithm.</li>
<li>Subsequently, OpenSSH added support for a third digital signature algorithm, ECDSA </li>
</ul>
<h1 id="DSA"><a href="#DSA" class="headerlink" title="DSA"></a>DSA</h1><ul>
<li>The Digital Signature Algorithm (DSA) is a Federal Information Processing Standard for digital signatures. It was proposed by the National Institute of Standards and Technology (NIST) in August 1991 for use in their Digital Signature Standard (DSS) and adopted as FIPS 186 in 1993</li>
</ul>
<h1 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h1><p>In cryptography applications, we often need a so-called secure hash function. Secure hash functions are generaelly a subset of hash functions that fulfil at least two extra criteria:</p>
<ul>
<li>it must be computationally impossible to reverse the mapping, that is, go from a hash code to a message or piece of data that would have generated that hash code;</li>
<li>it must be infeasible for a collision to occur: that is, for two messages to be found that have the same hash code.</li>
</ul>
<p>In order to fulfil these criteria (or at least, as a by-product of needing to fulfil these criteria), secure hash functions generally have these characteristics:</p>
<p>they are slower to compute than the hash codes typically used to key hash maps;<br>they are wider (i.e. have more bits) than weak hash codes.</p>
<p>Secure hash codes are typically 128 bits wide at the very least; compare that, for example, to the 32-bit codes returned by Java hashCode() method, or the 64-bit hash codes recommended for key-less hash maps in Numerical Recipes.</p>
<p>Applications of secure hash functions<br>Secure hash functions actually have various applications. A very common case is verifying the integrity of data. When we send some data, we append a hash of that data; on the receiving end, we re-hash the received data and check that the computed hash equals that sent; if any of the data has changed then (with overwhelming probability), the computed hash value will no longer match the original. Another case is where we need to authenticate some data, i.e. produce a kind of integrity check that only a party with a given private key could produce. (In this case, the general solution is to combine a hash code with encryption.)</p>
<p>In other cases, a secure hash function is useful to represent a particular item of data. For example, for the purpose of checking passwords, we need only store a hash of that password. When somebody enters their password, if the computed hash of what they entered matches the hash stored in the password file/database, we assume they knew the password.</p>
<p>This scheme, sometimes called compare by hash (CBH) can be used to search for duplicates of data on a hard drive or for synching data between multiple machines. Similarly, another example are the databases that various law enforcement agencies keep of known “disapproved” files that they want to search peoples hard drives for. In these applications, keeping a database of the actual file contents, and/or transmitting and comparing those entire contents, would be impractical. Instead, only hashes are stored and compared.</p>
<p>More broadly, secure hash functions are useful in a variety of cases where we need a trapdoor function (i.e. one that cannot feasibly be reversed), especially where we need one with a limited or fixed-size result.</p>
<p>As mentioned, secure hashes are sometimes called message digests. And in fact, the main class for computing them in Java is java.security.MessageDigest. We get an instance of MessageDigest, feed it an array (or several arrays) of bytes, then call its digest() method to get the resulting hash:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] data = ....</span><br><span class="line"></span><br><span class="line">MessageDigest md = MessageDigest.getInstance(<span class="string">"SHA-1"</span>);</span><br><span class="line">md.update(data);</span><br><span class="line"><span class="keyword">byte</span>[] hash = md.digest();</span><br></pre></td></tr></table></figure>

<h2 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h2><p>MD5 is a later hash function developed by Ron Rivest. It is one of the most common hash algorithms in use today. Like MD2, it is a 128-bit hash function but, unlike its predecessor, it is one of the fastest “secure” hash functions in common use, and the fastest provided in Java 6.</p>
<p>Unfortunately, it is now considered insecure. Aside from the relatively small hash size, there are well-published methods to find collisions analytically in a trivial amount of time. For example, Vlastimil Klima has published a C program to find MD5 collisions in around 30 seconds on an average PC. If you need security, dont use MD5!</p>
<p>Although insecure, MD5 still makes a good general strong hash function due to its speed. In non-security applications such as finding duplicate files on a hard disk (where you are not trying to protect against the threat model of somebody deliberately fooling your system), MD5 makes a good choice.</p>
<h2 id="SHA-algorithms"><a href="#SHA-algorithms" class="headerlink" title="SHA algorithms"></a>SHA algorithms</h2><p>SHA (Secure Hash Algorithm) refers collectively to various hash functions developed by the US National Security Agency (NSA). The various algorithms are based on differing hash sizes and (in principle) offer corresponding levels of security:</p>
<h1 id="PBE-password-based-encryption"><a href="#PBE-password-based-encryption" class="headerlink" title="PBE  password-based encryption"></a>PBE  password-based encryption</h1><p>The technique of generating a secret key from a user-generated passphrase is usually called password-based encryption (PBE). As you might imagine, it is fraught with difficulty. In particular:</p>
<ul>
<li>the user is requirement and the security requirement usually conflict: the user requires an easy-to-remember passphrase, or at least one that is made of recognisable characters and short enough to write down; yet for secure encryption by today is standards, we require at least 128 strongly random bits (and ideally more);</li>
<li>password-based encryption is typically used in applications where an attacker can repeatedly try to guess the password undetected and beyond the control of the genuine sender/recipient (if the password is being used to log into our server, we can detect that so many invalid attempts were made and in the worst case shut down our server to prevent further attempts; but if an eavesdropper takes a copy of the encrypted ZIP file we e-mailed, we will never know that they are sitting there with a 100,000-processor botnet trying to brute-force the password, and they can essentially sit doing it for as long as they like).<br>The typical result is fairly dire: most password-protected data is encrypted with weak encryption keys, and an attacker can spend all the processor time they like trying to guess that weak key with complete impunity.</li>
</ul>
<h2 id="How-to-use-PBE"><a href="#How-to-use-PBE" class="headerlink" title="How to use PBE"></a>How to use PBE</h2><p>There are two fundamental problems:<br>(a) user-memorable passwords typically dont contain as much randomness as we need for a secure key;<br>(b) in a typical application, an attacker gets as many tries as they like at the password. An additional problem is that if, say, the password abc123 always generated the same key in our application, then an attacker could calculate the key from this password once and then quickly decrypt any data protected with this password.</p>
<p>Two common techniques are used in password-based encryption to try to alleviate these problems:</p>
<ul>
<li>a deliberately slow method is used to derive the encryption key from the password, reducing the number of guesses that an attacker can make in a given time frame;</li>
<li>some random bytes, called a salt, are appended to the password before it is used to calculate the key.</li>
</ul>
<h1 id="Cryptographic-hash-function"><a href="#Cryptographic-hash-function" class="headerlink" title="Cryptographic hash function"></a>Cryptographic hash function</h1><ul>
<li>A cryptographic hash function is a special class of hash function that has certain properties which make it suitable for use in cryptography. <strong>It is a mathematical algorithm that maps data of arbitrary size to a bit string of a fixed size</strong> (a hash function) which is designed to also be <strong>a one-way function</strong>, that is, a function which is infeasible to invert. The only way to recreate the input data from an ideal cryptographic hash function is output is <strong>to attempt a brute-force search</strong> of possible inputs to see if they produce a match. </li>
<li>Bruce Schneier has called one-way hash functions the workhorses of modern cryptography.[1] The input data is often called the message, and the output (the hash value or hash) is often called the message digest or simply the <code>digest</code>.</li>
<li>in information-security contexts, cryptographic hash values are sometimes called (digital) fingerprints, checksums, or just hash values, even though all these terms stand for more general functions with rather different properties and purposes.</li>
<li>Another finalist from the NIST hash function competition, BLAKE, was optimized to produce BLAKE2 which is notable for being faster than SHA-3, SHA-2, SHA-1, or MD5, and is used in numerous applications and libraries.</li>
</ul>
<h2 id="The-ideal-cryptographic-hash-function-has-five-main-properties"><a href="#The-ideal-cryptographic-hash-function-has-five-main-properties" class="headerlink" title="The ideal cryptographic hash function has five main properties:"></a>The ideal cryptographic hash function has five main properties:</h2><ul>
<li>it is deterministic so the same message always results in the same hash</li>
<li>it is quick to compute the hash value for any given message</li>
<li>it is infeasible to generate a message from its hash value except by trying all possible messages</li>
<li>a small change to a message should change the hash value so extensively that the new hash value appears uncorrelated with the old hash value</li>
<li>it is infeasible to find two different messages with the same hash value</li>
</ul>
<h3 id="Illustration"><a href="#Illustration" class="headerlink" title="Illustration"></a>Illustration</h3><ul>
<li>An illustration of the potential use of a cryptographic hash is as follows: Alice poses a tough math problem to Bob and claims she has solved it. Bob would like to try it himself, but would yet like to be sure that Alice is not bluffing. Therefore, Alice writes down her solution, computes its hash and tells Bob the hash value (whilst keeping the solution secret). Then, when Bob comes up with the solution himself a few days later, Alice can prove that she had the solution earlier by revealing it and having Bob hash it and check that it matches the hash value given to him before. (This is an example of a simple commitment scheme; in actual practice, Alice and Bob will often be computer programs, and the secret would be something less easily spoofed than a claimed puzzle solution).</li>
</ul>
<h3 id="Applications"><a href="#Applications" class="headerlink" title="Applications"></a>Applications</h3><h4 id="Verifying-the-integrity-of-files-or-messages"><a href="#Verifying-the-integrity-of-files-or-messages" class="headerlink" title="Verifying the integrity of files or messages"></a>Verifying the integrity of files or messages</h4><ul>
<li>An important application of secure hashes is verification of message integrity. Determining whether any changes have been made to a message (or a file), for example, can be accomplished by comparing message digests calculated before, and after, transmission (or any other event).</li>
<li>For this reason, most digital signature algorithms only confirm the authenticity of a hashed digest of the message to be “signed”. Verifying the authenticity of a hashed digest of the message is considered proof that the message itself is authentic.</li>
<li><strong>MD5, SHA1, or SHA2 hashes</strong> are sometimes posted along with files on websites or forums to allow verification of integrity.[6] This practice establishes a chain of trust so long as the hashes are posted on a site authenticated by HTTPS.</li>
</ul>
<h4 id="Password-verification"><a href="#Password-verification" class="headerlink" title="Password verification"></a>Password verification</h4><ul>
<li>Storing all user passwords as cleartext can result in a massive security breach if the password file is compromised. One way to reduce this danger is to only store the hash digest of each password. To authenticate a user, the password presented by the user is hashed and compared with the stored hash. </li>
<li>The password is often concatenated with a random, non-secret salt value before the hash function is applied. The salt is stored with the password hash. Because users have different salts, it is not feasible to store tables of precomputed hash values for common passwords. </li>
</ul>
<h2 id="MD5-1"><a href="#MD5-1" class="headerlink" title="MD5"></a>MD5</h2><ul>
<li>The MD5 algorithm is a widely used hash function producing a 128-bit hash value. Although MD5 was initially designed to be used as a cryptographic hash function, it has been found to suffer from extensive vulnerabilities. It can still be used as a checksum to verify data integrity, but only against unintentional corruption.</li>
<li>Like most hash functions, <strong>MD5 is neither encryption nor encoding</strong>. It <strong>can be reversed by brute-force attack</strong> and suffers from extensive vulnerabilities as detailed in the security section below.</li>
<li>MD5 was designed by Ronald Rivest in 1991 to replace an earlier hash function MD4.</li>
<li>The MD5 hash function receives its acronym MD from its structure using Merkle–Damg?rd construction.</li>
</ul>
<h3 id="Collision-resistance"><a href="#Collision-resistance" class="headerlink" title="Collision resistance"></a>Collision resistance</h3><ul>
<li>Collision resistance is a property of cryptographic hash functions: a hash function H is collision resistant if it is hard to find two inputs that hash to the same output; that is, two inputs a and b such that H(a) = H(b), and a ≠ b</li>
<li>Collision resistance does not mean that no collisions exist; simply that they are hard to find.</li>
<li>Cryptographic hash functions are usually designed to be collision resistant. But many hash functions that were once thought to be collision resistant were later broken. MD5 and SHA-1 in particular both have published techniques more efficient than brute force for finding collisions.</li>
</ul>
<h4 id="Rationale"><a href="#Rationale" class="headerlink" title="Rationale"></a>Rationale</h4><p>Collision resistance is desirable for several reasons.</p>
<ul>
<li>In some digital signature systems, a party attests to a document by publishing a public key signature on a hash of the document. If it is possible to produce two documents with the same hash, an attacker could get a party to attest to one, and then claim that the party had attested to the other.</li>
<li>In some proof-of-work systems (e.g. bitcoin mining), users provide hash collisions as proof that they have performed a certain amount of computation to find them. If there is an easier way to find collisions than brute force, users can cheat the system.</li>
<li>In some distributed content systems, parties compare cryptographic hashes of files in order to make sure they have the same version. An attacker who could produce two files with the same hash could trick users into believing they had the same version of a file when they in fact did not.</li>
</ul>
<h4 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h4><ul>
<li>The Merkle–Damg?rd hash function first applies an MD-compliant padding function to create an input whose size is a multiple of a fixed number (e.g. 512 or 1024) — this is because compression functions cannot handle inputs of arbitrary size. The hash function then breaks the result into blocks of fixed size, and processes them one at a time with the compression function, each time combining a block of the input with the output of the previous round.[1]:146 In order to make the construction secure, Merkle and Damg?rd proposed that messages be padded with a padding that encodes the length of the original message. This is called <strong>length padding</strong> or Merkle–Damg?rd strengthening.</li>
<li>In the diagram, the one-way compression function is denoted by f, and transforms two fixed length inputs to an output of the same size as one of the inputs. The algorithm starts with an initial value, the initialization vector (IV). The IV is a fixed value (algorithm or implementation specific). For each message block, the compression (or compacting) function f takes the result so far, combines it with the message block, and produces an intermediate result. The last block is padded with zeros as needed and bits representing the length of the entire message are appended. (See below for a detailed length padding example.)</li>
<li>To harden the hash further the last result is then sometimes fed through a finalisation function. The finalisation function can have several purposes such as compressing a bigger internal state (the last result) into a smaller output hash size or to guarantee a better mixing and avalanche effect on the bits in the hash sum. The finalisation function is often built by using the compression function[citation needed] (Note that in some documents instead the act of length padding is called “finalisation”).</li>
</ul>
<h3 id="Merkle–Damg-rd-construction"><a href="#Merkle–Damg-rd-construction" class="headerlink" title="Merkle–Damg?rd construction"></a>Merkle–Damg?rd construction</h3><ul>
<li>In cryptography, the Merkle–Damg?rd construction or <strong>Merkle–Damg?rd hash function</strong> is a method of building collision-resistant cryptographic hash functions from collision-resistant one-way compression functions.[1]:145 This construction was used in the design of many popular hash algorithms such as MD5, SHA1 and SHA2.</li>
<li>The Merkle–Damg?rd construction was described in Ralph Merkles Ph.D. thesis in 1979.[2] Ralph Merkle and Ivan Damg?rd independently proved that the structure is sound: that is, if an appropriate padding scheme is used and the compression function is collision-resistant, then the hash function will also be collision resistant.</li>
</ul>
<h2 id="SHA"><a href="#SHA" class="headerlink" title="SHA"></a>SHA</h2><ul>
<li>In cryptography, SHA-1 (Secure Hash Algorithm 1) is a cryptographic hash function designed by the United States National Security Agency and is a U.S. Federal Information Processing Standard published by the United States NIST.[2] SHA-1 produces a 160-bit (20-byte) hash value known as a message digest. A SHA-1 hash value is typically rendered as a hexadecimal number, 40 digits long.</li>
</ul>
<h3 id="Applications-1"><a href="#Applications-1" class="headerlink" title="Applications"></a>Applications</h3><ul>
<li>SHA-1 forms part of several widely used security applications and protocols, including TLS and SSL, PGP, SSH, S/MIME, and IPsec. Those applications can also use MD5; <strong>both MD5 and SHA-1 are descended from MD4</strong>. <strong>SHA-1 hashing is also used in distributed revision control systems like Git</strong>, Mercurial, and Monotone to identify revisions, and to detect data corruption or tampering. The algorithm has also been used on Nintendos Wii gaming console for signature verification when booting, but a significant flaw in the first implementations of the firmware allowed for an attacker to bypass the systems security scheme.</li>
<li>SHA-1 and SHA-2 are the secure hash algorithms required by law for use in certain U.S. Government applications, including use within other cryptographic algorithms and protocols, for the protection of sensitive unclassified information.</li>
<li>A prime motivation for the publication of the Secure Hash Algorithm was the Digital Signature Standard, in which it is incorporated.</li>
<li>Revision control systems such as Git and Mercurial use SHA-1 not for security but for ensuring that the data has not changed due to accidental corruption.</li>
</ul>
<h2 id="Salt-cryptography"><a href="#Salt-cryptography" class="headerlink" title="Salt (cryptography)"></a>Salt (cryptography)</h2><ul>
<li>In cryptography, a salt is random data that is used as an additional input to a one-way function that “hashes” a password or passphrase. Salts are closely related to the concept of nonce. The primary function of salts is to defend against dictionary attacks or against its hashed equivalent, a pre-computed rainbow table attack.[1]</li>
<li>Salts are used to safeguard passwords in storage. </li>
<li>The purpose of a hash and salt process in password security is not to prevent a password from being guessed, but to prevent a leaked password database from being used in further attacks.</li>
</ul>
<p>The idea of salt is that when the user enters the password, we dont actually use their raw password to generate the key. We first append some random bytes to the password. A new, random salt is used for every file/piece of data being encrypted. The salt bytes are not secret: they are stored unencrypted along side the encrypted data. This means that the salt bytes would add no extra security if there was only once piece of data in the world encrypted with a given password. But they prevent dictionary attacks, whereby an attacker pre-computes the keys from some common passwords and then tries those keys on the encrypted data. Without salt bytes, the dictionary attack would be worthwhile attack because we use a deliberately slow function to derive a key from a password. With the salt bytes, the attacker is forced to run the slow key derivation function for each password they want to try on each piece of data.</p>
<p>To generate salt bytes in Java, we just need to make sure that we use a secure random number generator. Construct an instance of SecureRandom, create (say) a 20-byte array, and call nextBytes() on that array:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Random r = <span class="keyword">new</span> SecureRandom();</span><br><span class="line"><span class="keyword">byte</span>[] salt = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">20</span>];</span><br><span class="line">r.nextBytes(salt);</span><br></pre></td></tr></table></figure>

<h1 id="Secure-Random"><a href="#Secure-Random" class="headerlink" title="Secure Random"></a>Secure Random</h1><p>The SecureRandom class, housed in the java.security package, provides a drop-in replacement to java.lang.Random. But unlike the latter, java.security.SecureRandom is designed to be cryptographically secure. </p>
<p>SecureRandom is typically used in cases where:</p>
<p>random numbers are generated for security related purposes, such as generating an encryption key or session ID (see below);<br>or, more generally, high-quality randomness is important and it is worth consuming CPU (or where CPU consumption is not an issue) to generate those high-quality random numbers.</p>
<h2 id="Properties-of-SecureRandom"><a href="#Properties-of-SecureRandom" class="headerlink" title="Properties of SecureRandom"></a>Properties of SecureRandom</h2><p>We said that SecureRandom is designed to be cryptographically secure. In practice, this means that the generator has the following properties:</p>
<ul>
<li>given only a number produced by the generator, it is (to all intents and purposes) impossible to predict previous and future numbers;</li>
<li>the numbers produced contain no known biases;</li>
<li>the generator has a large period (in Suns standard implementation, based on the 160-bit SHA1 hash function, the period is 2160);</li>
<li>the generator can seed itself at any position within that period with equal probability (or at least, it comes so close to this goal, that we have no practical way of telling otherwise).</li>
</ul>
<p>These properties are important in various security applications. The first is important, for eaxmple, if we use the generator to produce, say, a session ID on a web server: we donot want user n to predict user n+1 s session ID. Similarly, we donot want a user in an Internet cafe, based on the session ID or encryption key that they are given to access a web site, to be able to predict the value assigned to a previous user on that machine.</p>
<h2 id="The-importance-of-producing-all-values-with-equal-probability"><a href="#The-importance-of-producing-all-values-with-equal-probability" class="headerlink" title="The importance of producing all values with equal probability"></a>The importance of producing all values with equal probability</h2><p>For example, let s say that we want to pick a 128-bit AES encryption key. The idea of a strong encryption algorithm such as AES is that in order for an adversary to guess the key by “brute force” (which we assume is the only possible means), they would have to try every single possible key in turn until they hit on the right one. By law of averages, we would expect them to find it after half as many guesses as there are possible keys. A 128-bit key has 2128 possible values, so on average, they would have to try 2127 keys. In decimal 2127 is a 39-digit number. Or put another way, trying a million million keys per second, it would take 5x1015 millennia to try 2127 keys. Not even the British government wants to decrypt your party invitations that badly. So with current mainstream technology1, a 128-bit key is in principle sufficient for most applications.</p>
<p>But these metrics hold true only if our key selection algorithm— i.e. our random number generator— genuinely can pick any of the possible keys. For example, we certainly should not choose the key as follows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// This is WRONG!! Do not do this!</span></span><br><span class="line">Random ranGen = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">byte</span>[] aesKey = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">16</span>]; <span class="comment">// 16 bytes = 128 bits</span></span><br><span class="line">ranGen.nextBytes(aesKey);</span><br></pre></td></tr></table></figure>

<p>The problem here is that the period of java.util.Random is only 248. Even though we are generating a 128-bit key, we will only ever pick from a subset of 248 of the possible keys. Or put another way: an attacker need only try on average 247 keys, and will find our key by trial and error in a couple of days if they try just a thousand million keys per second. And as if that wasnot bad enough, they probably donot even need to try anywhere near 247: for reasons discussed earlier, there is a good chance that an instance of java.util.Random created within a couple of minutes of bootup will actually be seeded from a about one thousandth of the 248 possible values. This time, HM Sniffing Service doesnot even need expensive hardware to find the secret location of your housewarming party: a trip to Staples will give them all the computing power they need.</p>
<p>So as you’ve probably guessed, our solution to the problem is to use SecureRandom instead:</p>
<p>import java.security.SecureRandom;<br>..<br>Random ranGen = new SecureRandom();<br>byte[] aesKey = new byte[16]; // 16 bytes = 128 bits<br>ranGen.nextBytes(aesKey);<br>Now, there’s a good chance that any of the 2128 possible keys will be chosen.</p>
<p>Seeding of SecureRandom<br>In order to provide this property of choosing any seed with “equal” likelihood, (or at least, with no bias that is practically detectable), SecureRandom seeds itself from sources of entropy available from the local machine, such as timings of I/O events.</p>
<p>## </p>
<h2 id="Rainbow-table"><a href="#Rainbow-table" class="headerlink" title="Rainbow table"></a>Rainbow table</h2><ul>
<li>A rainbow table is a precomputed table for reversing cryptographic hash functions, <strong>usually for cracking password hashes</strong>. </li>
<li>Tables are <strong>usually used in recovering a plaintext password up to a certain length consisting of a limited set of characters</strong>. It is a practical example of a space/time trade-off, using less computer processing time and more storage than a brute-force attack which calculates a hash on every attempt, but more processing time and less storage than a simple lookup table with one entry per hash. </li>
<li>After gathering a password hash, using said hash as a password would fail since the authentication system would hash it a second time. In order to learn a users password, a password that produces the same hashed value must be found, usually through a brute-force or dictionary attack.</li>
<li>Use of a <strong>key derivation function that employs a salt</strong> makes this attack infeasible.</li>
</ul>
<h2 id="Passphrase"><a href="#Passphrase" class="headerlink" title="Passphrase"></a>Passphrase</h2><ul>
<li>A passphrase is a sequence of words or other text used to control access to a computer system, program or data. A passphrase is similar to a password in usage, but is generally longer for added security. Passphrases are often used to control both access to, and operation of, cryptographic programs and systems, especially those that derive an encryption key from a passphrase. The origin of the term is by analogy with password. The modern concept of passphrases is believed to have been invented by Sigmund N. Porter[1] in 1982.</li>
</ul>
<h3 id="Compared-to-password"><a href="#Compared-to-password" class="headerlink" title="Compared to password"></a>Compared to password</h3><ul>
<li>Passphrases differ from passwords. A password is usually short—six to ten characters. Such passwords may be adequate for various applications (if frequently changed, if chosen using an appropriate policy, if not found in dictionaries, if sufficiently random, and/or if the system prevents online guessing, etc.)</li>
<li>But passwords are typically not safe to use as keys for standalone security systems (e.g., encryption systems) that expose data to enable offline password guessing by an attacker.[citation needed] Passphrases are theoretically stronger, and so should make a better choice in these cases. First, they usually are (and always should be) much longer—20 to 30 characters or more is typical—making some kinds of brute force attacks entirely impractical. Second, if well chosen, they will not be found in any phrase or quote dictionary, so such dictionary attacks will be almost impossible. Third, they can be structured to be more easily memorable than passwords without being written down, reducing the risk of hardcopy theft.[citation needed] However, if a passphrase is not protected appropriately by the authenticator and the clear-text passphrase is revealed its use is no better than other passwords. For this reason it is recommended that passphrases not be reused across different or unique sites and services.</li>
</ul>
<h2 id="Dictionary-Attack"><a href="#Dictionary-Attack" class="headerlink" title="Dictionary Attack"></a>Dictionary Attack</h2><ul>
<li>In cryptanalysis and computer security, a dictionary attack is a technique for defeating a cipher or authentication mechanism by trying to determine its decryption key or passphrase by trying hundreds or sometimes millions of likely possibilities, such as words in a dictionary.</li>
<li>A dictionary attack is based on trying all the strings in a pre-arranged listing, typically derived from a list of words such as in a dictionary (hence the phrase dictionary attack).</li>
<li><strong>In contrast to a brute force attack</strong>, where a large proportion of the <strong>key space is searched systematically</strong>, a <strong>dictionary attack</strong> tries <strong>only those possibilities</strong> which are deemed <strong>most likely</strong> to succeed. </li>
<li>Dictionary attacks often succeed because many people have a tendency to choose short passwords that are ordinary words or common passwords, or simple variants obtained, for example, by appending a digit or punctuation character. Dictionary attacks are relatively easy to defeat, e.g. by using a passphrase or otherwise choosing a password that is not a simple variant of a word found in any dictionary or listing of commonly used passwords.</li>
<li>It is possible to achieve a time-space tradeoff by pre-computing a list of hashes of dictionary words, and storing these in a database using the hash as the key. This requires a considerable amount of preparation time, but allows the actual attack to be executed faster. </li>
<li>A more refined approach involves the use of rainbow tables, which reduce storage requirements at the cost of slightly longer lookup times. </li>
<li><strong>Pre-computed dictionary attacks, or “rainbow table attacks”, can be thwarted by the use of salt</strong>, a technique that forces the hash dictionary to be recomputed for each password sought, making precomputation infeasible provided the number of possible salt values is large enough.</li>
</ul>
<h1 id="Avalanche-effect"><a href="#Avalanche-effect" class="headerlink" title="Avalanche effect"></a>Avalanche effect</h1><ul>
<li>In cryptography, the avalanche effect is the desirable property of cryptographic algorithms, typically block ciphers and cryptographic hash functions wherein if when an input is changed slightly (for example, flipping a single bit) the output changes significantly (e.g., half the output bits flip). In the case of high-quality block ciphers, such a small change in either the key or the plaintext should cause a drastic change in the ciphertext. The actual term was first used by Horst Feistel,[1] although the concept dates back to at least Shannon’s diffusion.</li>
<li>The SHA-1 hash function exhibits good avalanche effect. When a single bit is changed the hash sum becomes completely different. If a block cipher or cryptographic <strong>hash function does not exhibit the avalanche effect to a significant degree, then it has poor randomization</strong>, and thus a cryptanalyst can make predictions about the input, being given only the output. This may be sufficient to partially or completely break the algorithm. Thus, the avalanche effect is a desirable condition from the point of view of the designer of the cryptographic algorithm or device.</li>
</ul>
<h1 id="Public-key-cryptography"><a href="#Public-key-cryptography" class="headerlink" title="Public-key cryptography"></a>Public-key cryptography</h1><ul>
<li>An unpredictable (typically large and random) number is used to begin generation of an acceptable pair of keys suitable for use by an asymmetric key algorithm.</li>
<li>In an asymmetric key encryption scheme, anyone can encrypt messages using the public key, but only the holder of the paired private key can decrypt. Security depends on the secrecy of the private key.</li>
<li>In the Diffie–Hellman key exchange scheme, each party generates a public/private key pair and distributes the public key. After obtaining an authentic copy of each other’s public keys, Alice and Bob can compute a shared secret offline. The shared secret can be used, for instance, as the key for a symmetric cipher.</li>
<li>Public key cryptography, or asymmetric cryptography, is any cryptographic system that uses pairs of keys: public keys which may be disseminated widely, and private keys which are known only to the owner. This accomplishes two functions: <strong>authentication</strong>, which is when the public key is used to verify that a holder of the paired private key sent the message, and <strong>encryption</strong>, whereby only the holder of the paired private key can decrypt the message encrypted with the public key.</li>
<li>In a public key encryption system, any person can encrypt a message using the public key of the receiver, but such a message can be decrypted only with the receiver’s private key. For this to work it must be computationally easy for a user to generate a public and private key-pair to be used for encryption and decryption. The strength of a public key cryptography system relies on the degree of difficulty (computational impracticality) for a properly generated private key to be determined from its corresponding public key. Security then depends only on keeping the private key private, and the public key may be published without compromising security.</li>
<li>Because of the computational complexity of asymmetric encryption, it is usually used only for small blocks of data, typically the transfer of a symmetric encryption key (e.g. a session key). This symmetric key is then used to encrypt the rest of the potentially long message sequence. The symmetric encryption/decryption is based on simpler algorithms and is much faster.</li>
</ul>
<h2 id="Usage-of-public-key"><a href="#Usage-of-public-key" class="headerlink" title="Usage of public key"></a>Usage of public key</h2><p>Two of the best-known uses of public key cryptography are:</p>
<ul>
<li><p><strong>Public key encryption</strong>, in which a message is encrypted with a recipient’s public key. The message cannot be decrypted by anyone who does not possess the matching private key, who is thus presumed to be the owner of that key and the person associated with the public key. This is used in an attempt to ensure confidentiality.</p>
</li>
<li><p><strong>Digital signatures</strong>, in which a message is signed with the sender’s private key and can be verified by anyone who has access to the sender’s public key. This verification proves that the sender had access to the private key, and therefore is likely to be the person associated with the public key. This also ensures that the message has not been tampered with, as a signature is mathematically bound to the message it originally was made with, and verification will fail for practically any other message, no matter how similar to the original message.</p>
</li>
<li><p>An analogy to public key encryption is that of a locked mail box with a mail slot. The mail slot is exposed and accessible to the public – its location (the street address) is, in essence, the public key. Anyone knowing the street address can go to the door and drop a written message through the slot. However, only the person who possesses the key can open the mailbox and read the message.</p>
</li>
<li><p>An analogy for digital signatures is the sealing of an envelope with a personal wax seal. The message can be opened by anyone, but the presence of the unique seal authenticates the sender.</p>
</li>
</ul>
<h2 id="Problems-of-public-generated-key"><a href="#Problems-of-public-generated-key" class="headerlink" title="Problems of public generated key"></a>Problems of public generated key</h2><ul>
<li>A central problem with the use of public key cryptography is confidence/proof that a particular public key is authentic, in that it is correct and belongs to the person or entity claimed, and has not been tampered with or replaced by a malicious third party. The usual approach to this problem is to use a public key infrastructure (PKI), in which one or more third parties – known as certificate authorities – certify ownership of key pairs. PGP, in addition to being a certificate authority structure, has used a scheme generally called the “web of trust”, which decentralizes such authentication of public keys by a central mechanism, and substitutes individual endorsements of the link between user and public key. To date, no fully satisfactory solution to the “public key authentication problem” has been found</li>
</ul>
<h1 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h1><ul>
<li>RSA is one of the first practical public-key cryptosystems and is widely used for secure data transmission. In such a cryptosystem, the encryption key is public and differs from the decryption key which is kept secret. In RSA, this asymmetry is based on the practical difficulty of factoring the product of two large prime numbers, the factoring problem. RSA is made of the initial letters of the surnames of Ron Rivest, Adi Shamir, and Leonard Adleman, who first publicly described the algorithm in 1977. </li>
<li>A user of RSA creates and then publishes a public key based on two large prime numbers, along with an auxiliary value. The prime numbers must be kept secret. Anyone can use the public key to encrypt a message, but with currently published methods, if the public key is large enough, only someone with knowledge of the prime numbers can feasibly decode the message.[2] Breaking RSA encryption is known as the RSA problem; whether it is as hard as the factoring problem remains an open question.</li>
<li>RSA is a relatively slow algorithm, and because of this it is less commonly used to directly encrypt user data. More often, RSA passes encrypted shared keys for symmetric key cryptography which in turn can perform bulk encryption-decryption operations at much higher speed.</li>
</ul>
<h2 id="Operation"><a href="#Operation" class="headerlink" title="Operation"></a>Operation</h2><ul>
<li>The RSA algorithm involves four steps: key generation, key distribution, encryption and decryption.</li>
<li>RSA involves a public key and a private key. The public key can be known by everyone and is used for encrypting messages. The intention is that messages encrypted with the public key can only be decrypted in a reasonable amount of time using the private key.</li>
</ul>
<h1 id="Symmetric-key-algorithm"><a href="#Symmetric-key-algorithm" class="headerlink" title="Symmetric-key algorithm"></a>Symmetric-key algorithm</h1><ul>
<li>Symmetric-key algorithms[1] are algorithms for cryptography that use the same cryptographic keys for both encryption of plaintext and decryption of ciphertext. The keys may be identical or there may be a simple transformation to go between the two keys</li>
<li>The keys, in practice, represent a shared secret between two or more parties that can be used to maintain a private information link.</li>
<li>This requirement that both parties have access to the secret key is one of the main drawbacks of symmetric key encryption, in comparison to public-key encryption (also known as asymmetric key encryption)</li>
</ul>
<h2 id="Implementations"><a href="#Implementations" class="headerlink" title="Implementations"></a>Implementations</h2><ul>
<li>Examples of popular symmetric algorithms include Twofish, Serpent, <strong>AES</strong> (Rijndael), <strong>Blowfish</strong>, CAST5, Kuznyechik, RC4, <strong>3DES</strong>, Skipjack, Safer+/++ (Bluetooth), and IDEA.[5][6]</li>
</ul>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://www.javamex.com/tutorials/cryptography/hash_functions_algorithms.shtml" target="_blank" rel="noopener">https://www.javamex.com/tutorials/cryptography/hash_functions_algorithms.shtml</a></li>
<li><a href="https://www.goanywhere.com/blog/2011/10/20/sftp-ftps-secure-ftp-transfers" target="_blank" rel="noopener">https://www.goanywhere.com/blog/2011/10/20/sftp-ftps-secure-ftp-transfers</a></li>
<li><a href="https://en.wikipedia.org/wiki/Secure_Shell" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Secure_Shell</a></li>
<li><a href="https://en.wikipedia.org/wiki/Ssh-keygen" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Ssh-keygen</a></li>
<li><a href="https://en.wikipedia.org/wiki/Cryptographic_hash_function" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Cryptographic_hash_function</a></li>
<li><a href="https://en.wikipedia.org/wiki/Rainbow_table" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Rainbow_table</a></li>
<li><a href="https://en.wikipedia.org/wiki/Merkle%E2%80%93Damg%C3%A5rd_construction" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Merkle%E2%80%93Damg%C3%A5rd_construction</a></li>
<li><a href="https://en.wikipedia.org/wiki/Public-key_cryptography" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Public-key_cryptography</a></li>
<li><a href="https://en.wikipedia.org/wiki/RSA_%28cryptosystem%29" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/RSA_%28cryptosystem%29</a></li>
</ul>
]]></content>
      <tags>
        <tag>SSH</tag>
        <tag>Cryptography</tag>
      </tags>
  </entry>
  <entry>
    <title>R Language</title>
    <url>/2017-02-09-R-Lang/</url>
    <content><![CDATA[<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">s&lt;-read.csv(<span class="string">"C:/Users/xxx/dev/R/IRS/SHH_SCHISHG.csv"</span>)</span><br><span class="line"><span class="comment"># aggregate </span></span><br><span class="line">s2&lt;-table(s$Original.CP)</span><br><span class="line">s3&lt;-as.data.frame(s2)</span><br><span class="line"><span class="comment"># extract by Frequency ordered </span></span><br><span class="line">s3[order(-s3$Freq),]</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>R</tag>
        <tag>Data Science</tag>
      </tags>
  </entry>
  <entry>
    <title>SeriableVersionUID</title>
    <url>/2017-02-14-SerialVersionUID/</url>
    <content><![CDATA[<h1 id="Noteworthy-points-about-SeriableVersionUID-in-Java"><a href="#Noteworthy-points-about-SeriableVersionUID-in-Java" class="headerlink" title="Noteworthy points about SeriableVersionUID in Java"></a>Noteworthy points about SeriableVersionUID in Java</h1><h2 id="Preventing-ClassCastExceptions-with-SerialVersionUID-Problem"><a href="#Preventing-ClassCastExceptions-with-SerialVersionUID-Problem" class="headerlink" title="Preventing ClassCastExceptions with SerialVersionUID Problem"></a>Preventing ClassCastExceptions with SerialVersionUID Problem</h2><ul>
<li>Your classes were recompiled, and you’re getting ClassCastExceptions that you shouldn’t.<br>Solution</li>
<li>Run serialver to generate a “serial version UUID” and paste its output into your classes before you start. Or use your IDE’s tools for this purpose.<br>Discussion</li>
<li>When a class is undergoing a period of evolution—particularly a class being used in a networking context such as RMI or servlets—it may be useful to provide a serialVersionUID value in this class. This is a long that is basically a hash of the methods and fields in the class. Both the object serialization API (see Saving and Restoring Java Objects) and the JVM, when asked to cast one object to another (common when using collections, as in Chapter 7), either look up or, if not found, compute this value. If the value on the source and destination do not match, a ClassCastException is thrown. Most of the time, this is the correct thing for Java to do.<br>However, sometimes you may want to allow a class to evolve in a compatible way, but you can’t immediately replace all instances in circulation. You must be willing to write code to account for the additional fields being discarded if restoring from the longer format to the shorter and having the default value (null for objects, 0 for numbers, and false for Boolean) if you’re restoring from the shorter format to the longer. If you are only adding fields and methods in a reasonably compatible way, you can control the compatibility by providing a long int named serialVersionUID. The initial value should be obtained from a JDK tool called serialver, which takes just the class name. Consider a simple class called SerializableUser:<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializableUser</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String address;</span><br><span class="line">    <span class="keyword">public</span> String country;</span><br><span class="line">    <span class="keyword">public</span> String phoneNum;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// other fields, and methods, here...</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">7978489268769667877L</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>I first compiled it with two different compilers to ensure that the value is a product of the class structure, not of some minor differences in class file format that different compilers might emit:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ javac SerializableUser.java</span><br><span class="line">$ serialver SerializableUser</span><br><span class="line">SerializableUser:    static final long serialVersionUID = -7978489268769667877L;</span><br><span class="line">$ jikes +E SerializableUser.java</span><br><span class="line">$ serialver SerializableUser</span><br><span class="line">SerializableUser:    static final long serialVersionUID = -7978489268769667877L;</span><br></pre></td></tr></table></figure>

<p>Sure enough, the class file from both compilers has the same hash. Now let’s change the file. I go in with an editor and add a new field, phoneNum, right after country:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> String country;</span><br><span class="line"><span class="keyword">public</span> String phoneNum;      <span class="comment">// Added this line.</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ javac SerializableUser.java</span><br><span class="line">$ serialver SerializableUser</span><br><span class="line">SerializableUser:    static final long serialVersionUID = -8339341455288589756L;</span><br></pre></td></tr></table></figure>

<p>Notice how the addition of the field changed the serialVersionUID! Now, if I had wanted this class to evolve in a compatible fashion, here’s what I should have done before I started expanding it. I copy and paste the original serialver output into the source file (again using an editor to insert a line before the last line):</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// The following is the line I added to SerializableUser.java</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">7978489268769667877L</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ javac SerializableUser.java</span><br><span class="line">$ serialver SerializableUser</span><br><span class="line">SerializableUser:    static final long serialVersionUID = -7978489268769667877L;</span><br><span class="line">$</span><br></pre></td></tr></table></figure>

<ul>
<li>Now all is well: I can interchange serialized versions of this file.<br>Note that serialver is part of the “object serialization” mechanism, and, therefore, it is meaningful only on classes that implement the Serializable interface described in Saving and Restoring Java Objects.<br>Note also that some developers use serialVersionUID values that start at 1 (a choice offered by some IDEs when they note that a class that appears to be serializable lacks a serialVersionUID), and then simply increment it by one each time the class changes in an incompatible way.</li>
</ul>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>serialVersionUID</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Security Notes</title>
    <url>/2017-02-15-Java-Security/</url>
    <content><![CDATA[<h1 id="Java-Security"><a href="#Java-Security" class="headerlink" title="Java Security"></a>Java Security</h1><ul>
<li><code>well-behaved</code>: programs should be prevent from consuming too much system resources</li>
</ul>
<h2 id="Components"><a href="#Components" class="headerlink" title="Components"></a>Components</h2><ul>
<li>JCE: Java Cryptography Extension</li>
<li>JSSE: Java Secure Socketets Extension</li>
<li>JAAS: Java Authentication and Authorization Service</li>
</ul>
<h1 id="Anatomy-of-a-Java-Application"><a href="#Anatomy-of-a-Java-Application" class="headerlink" title="Anatomy of a Java Application"></a>Anatomy of a Java Application</h1><h2 id="the-bytecode-verifier"><a href="#the-bytecode-verifier" class="headerlink" title="the bytecode verifier"></a>the bytecode verifier</h2><p>The bytecode verifier ensures that Java class files follow the rules of the Java language. As the figure implies, not all classes are subject to bytecode verification.</p>
<h2 id="the-class-loader"><a href="#the-class-loader" class="headerlink" title="the class loader"></a>the class loader</h2><p>One or more class loaders load all Java classes. Programatically, the class loader can set permissions for each class it loads.</p>
<h2 id="the-access-controller"><a href="#the-access-controller" class="headerlink" title="the access controller"></a>the access controller</h2><p>The access controller allows (or prevents) most access from the core API to the operating system, based upon policies set by the end user or system administrator.</p>
<h2 id="the-security-manager"><a href="#the-security-manager" class="headerlink" title="the security manager"></a>the security manager</h2><p>The security manager is the primary interface between the core API and the operating system; it has the ultimate responsibility for allowing or preventing access to all system resources. However, it exists mostly for historical reasons; it defers its actions to the access controller.</p>
<h2 id="The-security-package"><a href="#The-security-package" class="headerlink" title="The security package"></a>The security package</h2><p> the security package is a complex API. This includes discussions of:</p>
<ul>
<li>The security provider interface −− the means by which different security implementations may be plugged into the security package</li>
<li>Message digests</li>
<li>Keys and certificates</li>
<li>Digital signatures</li>
<li>Encryption (through JCE and JSSE)</li>
<li>Authentication (through JAAS)</li>
</ul>
<h2 id="The-key-database"><a href="#The-key-database" class="headerlink" title="The key database"></a>The key database</h2><p>The key database is a set of keys used by the security infrastructure to create or verify digital signatures. In the Java architecture, it is part of the security package, though it may be manifested as an external file or database.</p>
<h2 id="Trusted-and-Untrusted-Classes"><a href="#Trusted-and-Untrusted-Classes" class="headerlink" title="Trusted and Untrusted Classes"></a>Trusted and Untrusted Classes</h2><ul>
<li>In Java 2, only classes in the core API are considered trusted. Other classes must be given explicit permission to perform the operations we’ve discussed.</li>
</ul>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Although the security manager is the most commonly known feature of Java’s security story, it’s often misunderstood: there is no standard security manager among Java implementations, and Java applications, by default, have no security manager at all.</p>
<h1 id="Access-Controller"><a href="#Access-Controller" class="headerlink" title="Access Controller"></a>Access Controller</h1><ul>
<li>The implementation of most security managers, however, is based entirely upon the access controller.</li>
</ul>
<h2 id="Permissions"><a href="#Permissions" class="headerlink" title="Permissions"></a>Permissions</h2><ul>
<li>The basic entity that the access controller operates on is a permission object −− an instance of the Permission class (java.security.Permission). This class, of course, is the basis of the types that are listed in a policy file for the default security policy. The Permission class itself is an abstract class that represents a particular operation. The nomenclature here is a little misleading because a permission object can reflect two things. When it is associated with a class (through a code source and a protection domain), a permission object represents an actual permission that has been granted to that class. Otherwise, a permission object allows us to ask if we have a specific permission.</li>
<li>For example, if we construct a permission object that represents access to a file, possession of that object does not mean we have permission to access the file. Rather, possession of the object allows us to ask if we have permission to access the file.</li>
</ul>
<h2 id="The-access-controller-is-built-upon-the-four-concepts"><a href="#The-access-controller-is-built-upon-the-four-concepts" class="headerlink" title="The access controller is built upon the four concepts"></a>The access controller is built upon the four concepts</h2><ul>
<li>Code sources<br>An encapsulation of the location from which certain Java classes were obtained.</li>
<li>Permissions<br>An encapsulation of a request to perform a particular operation.</li>
<li>Policies<br>An encapsulation of all the specific permissions that should be granted to specific code sources.</li>
<li>Protection domains<br>An encapsulation of a particular code source and the permissions granted to that code source.</li>
</ul>
<h1 id="Byte-code-verifier"><a href="#Byte-code-verifier" class="headerlink" title="Byte code verifier"></a>Byte code verifier</h1><ul>
<li>The verifier is often referred to as a <code>mini−theorem prover</code> (a term first used in several documents from Sun). This sounds somewhat more impressive than it is; it’s not a generic, all−purpose theorem prover by any means. Instead, it’s a piece of code that can prove one (and only one) thing −− that a given series of ( Java) bytecodes represents a legal set of ( Java) instructions.</li>
</ul>
<h1 id="Shifting"><a href="#Shifting" class="headerlink" title="Shifting"></a>Shifting</h1><p>Java and JavaScript perform sign extension when shift¬ing right, filling the empty spaces with 1’s for negative numbers, so 10100110 &gt;&gt; 5 becomes 11111101.<br>The &gt;&gt;&gt; operator is unique to Java and JavaScript. It does a logical shift right, filling the empty spaces with 0 no matter what the value, so 10100110 &gt;&gt;&gt; 5 becomes 00000101.</p>
<p>The shift operators enable you to multiply and divide by powers of 2 very quickly. For non-negative numbers, shifting to the right one bit is equivalent to dividing by 2, and shifting to the left one bit is equivalent to multiplying by 2. For negative numbers, it obviously depends on the language being used.</p>
<h2 id="Specifically-the-bytecode-verifier-can-prove-the-following"><a href="#Specifically-the-bytecode-verifier-can-prove-the-following" class="headerlink" title="Specifically, the bytecode verifier can prove the following:"></a>Specifically, the bytecode verifier can prove the following:</h2><ul>
<li>The class file has the correct format. The full definition of the class file format may be found in the Java virtual machine specification; the bytecode verifier is responsible for making sure that the class file has the right length, the correct magic numbers in the correct places, and so on.</li>
<li>Final classes are not subclassed, and final methods are not overridden.</li>
<li>Every class (except for java.lang.Object) has a single superclass.</li>
<li>There is no illegal data conversion of primitive data types (e.g., int to Object).</li>
<li>No illegal data conversion of objects occurs. Because the casting of a superclass to its subclass may<br>be a valid operation (depending on the actual type of the object being cast), the verifier cannot ensure that such casting is not attempted −− it can only ensure that before each such attempt is made, the legality of the cast is tested.</li>
<li>There are no operand stack overflows or underflows.</li>
</ul>
<h2 id="Stacks"><a href="#Stacks" class="headerlink" title="Stacks"></a>Stacks</h2><ul>
<li>In Java, there are two stacks for each thread. One stack holds a series of method frames, where each method frame holds the local variables and other storage for a particular method invocation. This stack is known as the data stack and is what we normally think of as the stack within a traditional program. The bytecode verifier cannot prevent overflow of this stack −− an infinitely recursive method call will cause this stack to overflow. However, each method invocation requires a second stack (which itself is allocated on the data stack) that is referred to as the operand stack; the operand stack holds the values that the Java bytecodes operate on. This secondary stack is the stack that the bytecode verifier can ensure will not overflow or underflow.</li>
</ul>
<h1 id="Security-Manager"><a href="#Security-Manager" class="headerlink" title="Security Manager"></a>Security Manager</h1><ul>
<li>The implementation of the sandbox depends on three things:</li>
<li>The security manager, which provides the mechanism that the Java API uses to see if security−related operations are allowed.</li>
<li>The access controller, which provides the basis of the default implementation of the security manager. </li>
<li>The class loader, which encapsulates information about security policies and classes.</li>
</ul>
<p>We’ll start by examining the security manager. From the perspective of the Java API, there is a security manager that actually is in control of the security policy of an application. The purpose of the security manager is to determine whether particular operations should be permitted or denied. In truth, the purpose of the access controller is really the same: it decides whether access to a critical system resource should be permitted or denied. Hence, the access controller can do everything the security manager can do.</p>
<p><strong>The reason there is both an access controller and a security manager is mainly historical</strong>: the access controller is only available in Java 2 and subsequent releases. Before the access controller existed, the security manager relied on its internal logic to determine the security policy that should be in effect, and changing the security policy required changing the security manager itself. Starting with Java 2, the security manager defers these decisions to the access controller. Since the security policy enforced by the access controller can be specified by using policy files, this allows a much more flexible mechanism for determining policies. The access controller also gives us a much simpler method of granting fine−grained, specific permissions to specific classes. That process was theoretically possibly with the security manager alone, but it was simply too hard to implement.</p>
<h2 id="The-BasicPermission-class"><a href="#The-BasicPermission-class" class="headerlink" title="The BasicPermission class"></a>The BasicPermission class</h2><ul>
<li><p>If you need to implement your own permission class, the BasicPermission class (java.security.BasicPermission) provides some useful semantics. This class implements a basic permission −− that is, a permission that doesn’t have actions. Basic permissions can be thought of as binary permissions −− you either have them or you don’t. However, this restriction does not prevent you from implementing actions in your subclasses of the BasicPermission class (as the PropertyPermission class does).</p>
</li>
<li><p>The prime benefit of this class is the manner in which it implements wildcards. Names in basic permissions are considered to be hierarchical, following a dot−separated convention. For example, if the XYZ corporation wanted to create a set of basic permissions, they might use the convention that the first word of the permission always be xyz: xyz.readDatabase, xyz.writeDatabase, xyz.runPayrollProgram, xyz.HRDepartment.accessCheck, and so on. These permissions can then be specified by their full name, or they can be specified with an asterisk wildcard: xyz.* would match each of these (no matter what depth), and * would match every possible basic permission.</p>
</li>
<li><p><a href="http://www.qidianlife.com/index.php?m=home&amp;c=discover&amp;a=article&amp;id=2351" target="_blank" rel="noopener">http://www.qidianlife.com/index.php?m=home&amp;c=discover&amp;a=article&amp;id=2351</a></p>
</li>
<li><p>保护密码的最好办法是使用加盐密码哈希（ salted password hashing）。</p>
</li>
<li><p>永远不要告诉用户输错的究竟是用户名还是密码。就像通用的提示那样，始终显示：“无效的用户名或密码。”就行了。这样可以防止攻击者在不知道密码的情况下枚举出有效的用户名。</p>
</li>
<li><p>应当注意的是，用来保护密码的哈希函数，和数据结构课学到的哈希函数是不同的。例如，实现哈希表的哈希函数设计目的是快速查找，而非安全性。只有加密哈希函数（ cryptographic hash function）才可以用来进行密码哈希加密。像 SHA256 、 SHA512 、 RIPEMD 和 WHIRLPOOL 都是加密哈希函数。</p>
</li>
<li><p>破解哈希加密最简单的方法是尝试猜测密码，哈希每个猜测的密码，并对比猜测密码的哈希值是否等于被破解的哈希值。如果相等，则猜中。猜测密码攻击的两种最常见的方法是字典攻击和暴力攻击 。</p>
</li>
<li><p>字典攻击使用包含单词、短语、常用密码和其他可能用做密码的字符串的字典文件。对文件中的每个词都进行哈希加密，将这些哈希值和要破解的密码哈希值比较。如果它们相同，这个词就是密码。字典文件是通过大段文本中提取的单词构成，甚至还包括一些数据库中真实的密码。还可以对字典文件进一步处理以使其更为有效：如单词 “hello” 按网络用语写法转成 “h3110” 。</p>
</li>
<li><p>暴力攻击是对于给定的密码长度，尝试每一种可能的字符组合。这种方式会消耗大量的计算，也是破解哈希加密效率最低的办法，但最终会找出正确的密码。因此密码应该足够长，以至于遍历所有可能的字符组合，耗费的时间太长令人无法承受，从而放弃破解。</p>
</li>
<li><p>目前没有办法来组织字典攻击或暴力攻击。只能想办法让它们变得低效。如果密码哈希系统设计是安全的，破解哈希的唯一方法就是进行字典攻击或暴力攻击遍历每一个哈希值了。</p>
</li>
<li><p>我们可以通过在密码中加入一段随机字符串再进行哈希加密，这个被加的字符串称之为盐值。如上例所示，这使得相同的密码每次都被加密为完全不同的字符串。我们需要盐值来校验密码是否正确。通常和密码哈希值一同存储在帐号数据库中，或者作为哈希字符串的一部分。</p>
</li>
<li><p>盐值无需加密。由于随机化了哈希值，查表法、反向查表法和彩虹表都会失效。因为攻击者无法事先知道盐值，所以他们就没有办法预先计算查询表或彩虹表。如果每个用户的密码用不同的盐再进行哈希加密，那么反向查表法攻击也将不能奏效。</p>
</li>
<li><p>一个常见的错误是每次都使用相同的盐值进行哈希加密，这个盐值要么被硬编码到程序里，要么只在第一次使用时随机获得。这样的做法是无效的，因为如果两个用户有相同的密码，他们仍然会有相同的哈希值。攻击者仍然可以使用反向查表法对每个哈希值进行字典攻击。他们只是在哈希密码之前，将固定的盐值应用到每个猜测的密码就可以了。如果盐值被硬编码到一个流行的软件里，那么查询表和彩虹表可以内置该盐值，以使其更容易破解它产生的哈希值。</p>
</li>
<li><p>用户创建帐号或者更改密码时，都应该用新的随机盐值进行加密。</p>
</li>
<li><p>出于同样的原因，不应该将用户名用作盐值。对每一个服务来说，用户名是唯一的，但它们是可预测的，并且经常重复应用于其他服务。攻击者可以用常见用户名作为盐值来建立查询表和彩虹表来破解密码哈希。</p>
</li>
<li><p>为使攻击者无法构造包含所有可能盐值的查询表，盐值必须足够长。一个好的经验是使用和哈希函数输出的字符串等长的盐值。例如， SHA256 的输出为256位（32字节），所以该盐也应该是32个随机字节。</p>
</li>
<li><p>每个用户的每一个密码都要使用独一无二的盐值。用户每次创建帐号或更改密码时，密码应采用一个新的随机盐值。永远不要重复使用某个盐值。这个盐值也应该足够长，以使有足够多的盐值能用于哈希加密。一个经验规则是，盐值至少要跟哈希函数的输出一样长。该盐应和密码哈希一起存储在用户帐号表中。</p>
</li>
<li><p>存储密码的步骤：</p>
<ul>
<li>使用 CSPRNG 生成足够长的随机盐值。</li>
<li>将盐值混入密码，并使用标准的密码哈希函数进行加密，如Argon2、 bcrypt 、 scrypt 或 PBKDF2 。</li>
<li>将盐值和对应的哈希值一起存入用户数据库。</li>
</ul>
</li>
<li><p>校验密码的步骤：</p>
<ul>
<li>从数据库检索出用户的盐值和对应的哈希值。</li>
<li>将盐值混入用户输入的密码，并且使用通用的哈希函数进行加密。</li>
<li>比较上一步的结果，是否和数据库存储的哈希值相同。如果它们相同，则表明密码是正确的；否则，该密码错误。</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>security</tag>
      </tags>
  </entry>
  <entry>
    <title>Java JIT compiler</title>
    <url>/2017-02-21-Java-JIT/</url>
    <content><![CDATA[<h1 id="This-is-talking-about-Java-JIT-Just-In-Time-compiler"><a href="#This-is-talking-about-Java-JIT-Just-In-Time-compiler" class="headerlink" title="This is talking about Java JIT (Just-In-Time) compiler"></a>This is talking about Java JIT (Just-In-Time) compiler</h1><ul>
<li><p>That trade-off is one reason that the compiler executes the interpreted code first—the compiler can figure out which methods are called frequently enough to warrant their compilation.<br>The second reason is one of optimization: the more times that the JVM executes a particular method or loop, the more information it has about that code. This allows the JVM to make a number of optimizations when it compiles the code.</p>
</li>
<li><p>At some point in time, the suminstance variable must reside in main memory, but retrieving a value from main memory is an expensive operation that takes multiple cycles to complete. If the value of sumwere to be retrieved from (and stored back to) main memory on every iteration of this loop, performance would be dismal. Instead, the compiler will load a register with the initial value of sum, perform the loop using that value in the register, and then (at an indeterminate point in time) store the final result from the register back to main memory.<br>This kind of optimization is very effective, but it means that the semantics of thread synchronization (see Chapter 9) are crucial to the behavior of the application</p>
</li>
<li><p>One thread cannot see the value of a variable stored in the register used by another thread; synchronization makes it possible to know exactly when the register is stored to main memory and available to other threads.<br>Register usage is a general optimization of the compiler, and when escape analysis is enabled (see the end of this chapter), register use is quite aggressive.</p>
</li>
</ul>
<ul>
<li><p>If the size of your heap will be less than about 3 GB, the 32-bit version of Java will be faster and have a smaller footprint. This is because the memory references within the JVM will be only 32 bits, and manipulating those memory references is less expensive than manipulating 64-bit references (even if you have a 64-bit CPU). The 32-bit references also use less memory.</p>
</li>
<li><p>JVM developers (and even some tools) often refer to the compilers by the names C1<br>(compiler 1, client compiler) and C2 (compiler 2, server compiler).</p>
</li>
<li><p>The primary difference between the two compilers is their aggressiveness in compiling<br>code. The client compiler begins compiling sooner than the server compiler does. This<br>means that during the beginning of code execution, the client compiler will be faster,<br>because it will have compiled correspondingly more code than the server compiler.</p>
</li>
<li><p>The engineering trade-off here is the knowledge the server compiler gains while it waits:<br>that knowledge allows the server compiler to make better optimizations in the compiled<br>code. Ultimately, code produced by the server compiler will be faster than that produced<br>by the client compiler. From a user’s perspective, the benefit to that trade-off is based<br>on how long the program will run, and how important the startup time of the program<br>is.</p>
</li>
<li><p>The obvious question here is why there needs to be a choice at all: couldn’t the JVM<br>start with the client compiler, and then use the server compiler as code gets hotter? That<br>technique is known as tiered compilation. With tiered compilation, code is first compiled<br>by the client compiler; as it becomes hot, it is recompiled by the server compiler.</p>
</li>
<li><p>To use tiered compilation, specify<br>the server compiler (either with -server or by ensuring it is the default for the particular<br>Java installation being used), and ensure that the Java command line includes the flag</p>
</li>
<li><p>XX:+TieredCompilation (the default value of which is false). In Java 8, tiered compilation<br>is enabled by default.</p>
</li>
<li><p>The client compiler is most often used when fast startup is the primary objective.</p>
</li>
</ul>
<ol>
<li>The client compiler is most useful when the startup of an application<br>is the overriding performance concern.</li>
<li>Tiered compilation can achieve startup times very close to those<br>obtained from the client compiler.</li>
</ol>
<ul>
<li>It is also interesting that tiered compilation is always slightly better than the standard<br>server compiler. In theory, once the program has run enough to compile all the hot<br>spots, the server compiler might be expected to achieve the best (or at least equal) performance.<br>But in any application, there will almost always be some small section of code<br>that is infrequently executed. It is better to compile that code—even if the compilation<br>is not the best that might be achieved—than to execute that code in interpreted mode.</li>
</ul>
<ol>
<li>For jobs that run in a fixed amount of time, choose the compiler<br>based on which one is the fastest at executing the actual job.</li>
<li>Tiered compilation provides a reasonable default choice for batch<br>jobs.</li>
</ol>
<ul>
<li>For long-running applications, always choose the server compiler, preferably in conjunction with tiered compilation.</li>
</ul>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>JIT</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle</title>
    <url>/2017-03-13-oracle/</url>
    <content><![CDATA[<ul>
<li>ORA-12899: Value Too Large for Column</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">SQL&gt; SELECT value$ FROM sys.props$ WHERE name = 'NLS_CHARACTERSET' ;</span><br><span class="line"></span><br><span class="line">VALUE$</span><br><span class="line"><span class="comment">-------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">AL32UTF8</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> NLS_DATABASE_PARAMETERS</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">u43888859@hkl105482$  lsnrctl services DHKCUSTD</span><br><span class="line"></span><br><span class="line">LSNRCTL for Linux: Version 12.1.0.2.0 - Production on 28-FEB-2017 06:40:53</span><br><span class="line"></span><br><span class="line">Copyright (c) 1991, 2014, Oracle.  All rights reserved.</span><br><span class="line"></span><br><span class="line">Connecting to (DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=hkl105482.hk.hsbc)(PORT=2001))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=DHKCUSTD.hk.hsbc)))</span><br><span class="line">Services Summary...</span><br><span class="line">Service "DHKCUSTD.hk.hsbc" has 1 instance(s).</span><br><span class="line">  Instance "DHKCUSTD", status READY, has 1 <span class="keyword">handler</span>(s) <span class="keyword">for</span> this service...</span><br><span class="line">    <span class="keyword">Handler</span>(s):</span><br><span class="line">      <span class="string">"DEDICATED"</span> established:<span class="number">15</span> refused:<span class="number">0</span> state:ready</span><br><span class="line">         <span class="keyword">LOCAL</span> <span class="keyword">SERVER</span></span><br><span class="line">The command completed successfully</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS Tips</title>
    <url>/2017-03-21-aws/</url>
    <content><![CDATA[<p>After establishing a SSH session, you can install a default web server by executing sudo yum install httpd -y. To start the web server, type sudo service httpd start and press Return to execute the command. Your web browser should show a placeholder site if you open http://$PublicIp with $PublicIp replaced by the public IP address of your virtual server.</p>
]]></content>
      <tags>
        <tag>AWS</tag>
        <tag>Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Setup WebSphere profiles and application in command line</title>
    <url>/2017-03-30-WebSphere-setp-via-CLI/</url>
    <content><![CDATA[<h1 id="Setup-WebSphere-profiles-and-application-in-command-line"><a href="#Setup-WebSphere-profiles-and-application-in-command-line" class="headerlink" title="Setup WebSphere profiles and application in command line"></a>Setup WebSphere profiles and application in command line</h1><h2 id="Background-amp-descriptions"><a href="#Background-amp-descriptions" class="headerlink" title="Background &amp; descriptions"></a>Background &amp; descriptions</h2><ul>
<li>Beginning with V8.5, WebSphere Application Server provides two runtime profiles. Every WebSphere Application Server package includes both profile types.<ol>
<li>Full WebSphere Application Server</li>
<li>Liberty profile</li>
</ol>
</li>
</ul>
<h3 id="What’s-profile"><a href="#What’s-profile" class="headerlink" title="What’s profile?"></a>What’s profile?</h3><ul>
<li><p>Simply put, a profile contains an Application Server.<br>When an Application Server is running, the server process may read and write data to the underlying configuration files and logs. So, by using profiles, transient data is kept away from the base product. This allows us to have more than one profile using the same base binaries, and also allows us to remove certain profiles without affecting other profiles. Another reason for separating the base binaries is that we can upgrade the product with maintenance updates and fix packs without having to re-create all profiles. Sometimes you do not want a specific profile to be updated. WAS profile management has been designed for flexibility.</p>
</li>
<li><p>WAS has the ability to have multiple application server definitions using the same underlying base binaries. Each profile defines the attributes and configurations for a given application server.<br>Each standalone application server can optionally have its own administrative console application, which you use to manage the application server.<br>We will cover how to install a profile later in the chapter.</p>
</li>
<li><p>On distributed platforms, profiles are created after you install the product by using either the Profile Management Tool or the manageprofiles command.</p>
</li>
</ul>
<h2 id="WAS-Concepts"><a href="#WAS-Concepts" class="headerlink" title="WAS Concepts"></a>WAS Concepts</h2><h3 id="Nodes"><a href="#Nodes" class="headerlink" title="Nodes"></a>Nodes</h3><p>A node is an administrative grouping of application servers for configuration and operational management within one operating system instance. You can create multiple nodes inside one operating system instance, but a node cannot leave the operating system boundaries.</p>
<p>A stand-alone application server configuration has only one node. With Network Deployment, you can configure a distributed server environment that consists of multiple nodes that are managed from one central administration server.</p>
<h3 id="Node-agents"><a href="#Node-agents" class="headerlink" title="Node agents"></a>Node agents</h3><p>In distributed server configurations, each node has a node agent that works with the deployment manager to manage administration processes. A node agent is created automatically when you add (federate) a stand-alone application server node to a cell. Node agents are not included in the Base and Express configurations because a deployment manager is not needed in these architectures.</p>
<p>The node agent is an administrative server that runs on the same system as the node. It monitors the application servers on that node, routing administrative requests from the deployment manager to those application servers.</p>
<h3 id="Node-groups"><a href="#Node-groups" class="headerlink" title="Node groups"></a>Node groups</h3><p>A node group is a collection of nodes within a cell that have similar capabilities in terms of installed software, available resources, and configuration. A node group is used to define a boundary for server cluster formation so that the servers on the same node group host the same applications.<br>A DefaultNodeGroup is created automatically. The DefaultNodeGroup contains the deployment manager and any new nodes with the same platform type. A node can be a member of more than one node group.</p>
<h3 id="Cells"><a href="#Cells" class="headerlink" title="Cells"></a>Cells</h3><p>A cell is a grouping of nodes into a single administrative domain. A cell encompasses the entire management domain. In the Base and Express configurations, a cell contains one node, and that node contains one server. The left side of Figure 3-11 illustrates a system with two cells that are each accessed by their own administrative console. Each cell has a node and a stand-alone application server.<br>In a Network Deployment environment (the right side of Figure 3-11), a cell can consist of multiple nodes and node groups. These nodes and groups are all administered from a single point, the deployment manager. Figure 3-11 shows a single cell that spans two systems that are accessed by a single administrative console. The deployment manager is administering the nodes.</p>
<p>A cell configuration that contains nodes that are running on the same operating system is called a homogeneous cell.<br>It is also possible to configure a cell that consists of nodes on mixed operating systems. With this configuration, other operating systems can exist in the same WebSphere Application Server cell. </p>
<p>For example, z/OS nodes, Linux nodes, UNIX nodes, and Windows system nodes can exist in the same WebSphere Application Server cell. This configuration is called a heterogeneous cell. A heterogeneous cell requires significant planning.</p>
<h2 id="Noteworthy-points"><a href="#Noteworthy-points" class="headerlink" title="Noteworthy points"></a>Noteworthy points</h2><h3 id="Tools-utilities"><a href="#Tools-utilities" class="headerlink" title="Tools/utilities"></a>Tools/utilities</h3><ul>
<li><p>create profile</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/opt/IBM/WebSphere85/AppServer/bin/manageprofiles.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>check server status</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/opt/IBM/WebSphere85/AppServer/bin/serverStatus.sh -all</span><br></pre></td></tr></table></figure>
</li>
<li><p>start server </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/opt/IBM/WebSphere85/AppServer/bin/startServer.sh SERVER_NAME</span><br></pre></td></tr></table></figure>
</li>
<li><p>start server </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/opt/IBM/WebSphere85/AppServer/bin/stopServer.sh dmgr</span><br></pre></td></tr></table></figure>
</li>
<li><p>deploy application </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo -u wasadm /opt/IBM/WebSphere85/utilities/API/v1.0/AppMgmt -deploy -deployMechanism simpleDeploy -appId xxx_war -appEnvId xxx -file <span class="string">"/tmp/xxx.ear"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>stop&amp;start application </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo -u wasadm /opt/IBM/WebSphere85/utilities/API/v1.0/AppMgmt -operate -appId xxx_war -appEnvId xxx -stop</span><br><span class="line">sudo -u wasadm /opt/IBM/WebSphere85/utilities/API/v1.0/AppMgmt -operate -appId xxx_war -appEnvId xxx -start</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="To-create-profile"><a href="#To-create-profile" class="headerlink" title="To create profile"></a>To create profile</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo -u wasadm /opt/IBM/WebSphere85/AppServer/bin/manageprofiles.sh -create -profileName TEST_PROFILE -profilePath /opt/IBM/WebSphere85/AppServer/profiles/appprofiles/TEST_PROFILE -templatePath /opt/IBM/WebSphere85/AppServer/profileTemplates/default -serverName testSrv01 -nodeName testNode01 -hostName testserver.com -enableAdminSecurity <span class="literal">true</span> -adminUserName wasadmin -adminPassword wasadmin@12</span><br></pre></td></tr></table></figure>


<h2 id="Errors-amp-troubleshooting"><a href="#Errors-amp-troubleshooting" class="headerlink" title="Errors &amp; troubleshooting"></a>Errors &amp; troubleshooting</h2><h3 id="Server-can’t-started-after-profile-creation"><a href="#Server-can’t-started-after-profile-creation" class="headerlink" title="Server can’t started after profile creation"></a>Server can’t started after profile creation</h3><ul>
<li>You may find following errors if you try to bring up server after profile created<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo -u wasadm /opt/IBM/WebSphere85/AppServer/bin/startServer.sh TEST_PROFILE</span><br><span class="line">ADMU0116I: Tool information is being logged <span class="keyword">in</span> file</span><br><span class="line">           /opt/IBM/WebSphere85/AppServer/profiles/dmgrprofile/logs/TEST_PROFILE/startServer.log</span><br><span class="line">ADMU0128I: Starting tool with the dmgrprofile profile</span><br><span class="line">ADMU3100I: Reading configuration <span class="keyword">for</span> server: TEST_PROFILE</span><br><span class="line">ADMU0111E: Program exiting with error: java.io.FileNotFoundException:</span><br><span class="line">           /opt/IBM/WebSphere85/AppServer/profiles/dmgrprofile/config/cells/wascell/nodes/dmgrnode/servers/TEST_PROFILE/server.xml</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h4><ul>
<li><p>Please use the server name, rather than the profile name , e.g. should be testSrv01, rather than TEST_PROFILE</p>
</li>
<li><p>The command should be:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo -u wasadm /opt/IBM/WebSphere85/AppServer/bin/startServer.sh testSrv01</span><br></pre></td></tr></table></figure>
</li>
<li><p>On the other hand, you can troubleshoot this issue by double checking the server.xml by </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ll /opt/IBM/WebSphere85/AppServer/profiles/appprofiles/TEST_PROFILE/config/cells/xxxxx/nodes/testNode01/servers/testSrv01/server.xml</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="WebServer-console-can’t-opened"><a href="#WebServer-console-can’t-opened" class="headerlink" title="WebServer console can’t opened"></a>WebServer console can’t opened</h3><ul>
<li>There are few reasones, such as:<h4 id="DNS-errors"><a href="#DNS-errors" class="headerlink" title="DNS errors"></a>DNS errors</h4></li>
<li>If the error as below:<br>This webpage is not available<br>The server at testserver.com can’t be found, because the DNS lookup failed. DNS is the network service that translates a website’s name to its Internet address.<h5 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions:"></a>Solutions:</h5>That’s maybe something wrong for DNS as stated above, so please try to either udpate hosts file in you workstation or repalce the URL by IP address, e.g.<br>replace <a href="https://testserver.com:9045/ibm/console/login.do?action=secure" target="_blank" rel="noopener">https://testserver.com:9045/ibm/console/login.do?action=secure</a> with <a href="https://123.123.112.123:9045/ibm/console/login.do?action=secure" target="_blank" rel="noopener">https://123.123.112.123:9045/ibm/console/login.do?action=secure</a></li>
</ul>
<h4 id="What’s-the-port-number-for-WAS-console"><a href="#What’s-the-port-number-for-WAS-console" class="headerlink" title="What’s the port number for WAS console"></a>What’s the port number for WAS console</h4><h5 id="You-should-get-to-know-it-after-profile-created"><a href="#You-should-get-to-know-it-after-profile-created" class="headerlink" title="You should get to know it after profile created"></a>You should get to know it after profile created</h5><p>For example, in aforesaid profile creation step, you’ll get following in output:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">INSTCONFSUCCESS: Success: Profile TEST_PROFILE now exists. Please consult /opt/IBM/WebSphere85/AppServer/profiles/TEST_PROFILE/logs/AboutThisProfile.txt <span class="keyword">for</span> more information about this profile.</span><br></pre></td></tr></table></figure>

<p>To check content of this file, you’ll find following snipets:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Administrative console port: 9060</span><br><span class="line">Administrative console secure port: 9043</span><br></pre></td></tr></table></figure>

<h5 id="Check-the-port-number-from-serverindex-xml"><a href="#Check-the-port-number-from-serverindex-xml" class="headerlink" title="Check the port number from serverindex.xml"></a>Check the port number from serverindex.xml</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">grep -a2 WC_adminhost /opt/IBM/WebSphere85/AppServer/profiles/appprofiles/TEST_PROFILE/config/cells/xxxx/nodes/testNode01/serverindex.xml</span><br></pre></td></tr></table></figure>

<p>You’ll find the port number listed as below:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">endPoint</span> <span class="attr">xmi:id</span>=<span class="string">"EndPoint_1183122129645"</span> <span class="attr">host</span>=<span class="string">"testserver.com"</span> <span class="attr">port</span>=<span class="string">"9407"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">specialEndpoints</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">specialEndpoints</span> <span class="attr">xmi:id</span>=<span class="string">"NamedEndPoint_1183122129646"</span> <span class="attr">endPointName</span>=<span class="string">"WC_adminhost"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">endPoint</span> <span class="attr">xmi:id</span>=<span class="string">"EndPoint_1183122129646"</span> <span class="attr">host</span>=<span class="string">"*"</span> <span class="attr">port</span>=<span class="string">"9062"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">specialEndpoints</span>&gt;</span></span><br><span class="line">--</span><br><span class="line">      <span class="tag">&lt;<span class="name">endPoint</span> <span class="attr">xmi:id</span>=<span class="string">"EndPoint_1183122129648"</span> <span class="attr">host</span>=<span class="string">"*"</span> <span class="attr">port</span>=<span class="string">"9355"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">specialEndpoints</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">specialEndpoints</span> <span class="attr">xmi:id</span>=<span class="string">"NamedEndPoint_1183122129649"</span> <span class="attr">endPointName</span>=<span class="string">"WC_adminhost_secure"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">endPoint</span> <span class="attr">xmi:id</span>=<span class="string">"EndPoint_1183122129649"</span> <span class="attr">host</span>=<span class="string">"*"</span> <span class="attr">port</span>=<span class="string">"9045"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">specialEndpoints</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="Check-networking-amp-port-on-WAS-server"><a href="#Check-networking-amp-port-on-WAS-server" class="headerlink" title="Check networking &amp; port on WAS server"></a>Check networking &amp; port on WAS server</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">root@cn000tst1129 Thu Mar 30 17:07:11 /  <span class="comment">#netstat -nptlev | grep java</span></span><br><span class="line">tcp        0      0 133.14.16.2:20962           0.0.0.0:*                   LISTEN      200000000  938007     252552/java</span><br><span class="line">tcp        0      0 127.0.0.1:9635              0.0.0.0:*                   LISTEN      200000000  1048485    254902/java</span><br><span class="line">tcp        0      0 0.0.0.0:9445                0.0.0.0:*                   LISTEN      200000000  1048615    254902/java</span><br><span class="line">tcp        0      0 0.0.0.0:9062                0.0.0.0:*                   LISTEN      200000000  1048613    254902/java</span><br><span class="line">tcp        0      0 0.0.0.0:9102                0.0.0.0:*                   LISTEN      200000000  1048479    254902/java</span><br><span class="line">tcp        0      0 0.0.0.0:8882                0.0.0.0:*                   LISTEN      200000000  1048484    254902/java</span><br><span class="line">tcp        0      0 0.0.0.0:9045                0.0.0.0:*                   LISTEN      200000000  1048616    254902/java</span><br><span class="line">tcp        0      0 0.0.0.0:20950               0.0.0.0:*                   LISTEN      200000000  938036     252552/java</span><br><span class="line">tcp        0      0 0.0.0.0:20953               0.0.0.0:*                   LISTEN      200000000  937999     252552/java</span><br><span class="line">tcp        0      0 0.0.0.0:9082                0.0.0.0:*                   LISTEN      200000000  1048614    254902/java</span><br><span class="line">tcp        0      0 0.0.0.0:20954               0.0.0.0:*                   LISTEN      200000000  938118     252552/java</span><br><span class="line">tcp        0      0 0.0.0.0:2811                0.0.0.0:*                   LISTEN      200000000  1048482    254902/java</span><br><span class="line">tcp        0      0 0.0.0.0:20957               0.0.0.0:*                   LISTEN      200000000  937992     252552/java</span><br><span class="line">tcp        0      0 0.0.0.0:9407                0.0.0.0:*                   LISTEN      200000000  1048481    254902/java</span><br><span class="line">tcp        0      0 0.0.0.0:20959               0.0.0.0:*                   LISTEN      200000000  938088     252552/java</span><br><span class="line">tcp        0      0 0.0.0.0:9408                0.0.0.0:*                   LISTEN      200000000  1048480    254902/java</span><br><span class="line">tcp        0      0 127.0.0.1:20960             0.0.0.0:*                   LISTEN      200000000  938089     252552/java</span><br><span class="line">tcp        0      0 133.14.16.2:20961           0.0.0.0:*                   LISTEN      200000000  938047     252552/java</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>WAS</tag>
        <tag>WebSphere</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring notes</title>
    <url>/2017-03-05-Spring/</url>
    <content><![CDATA[<h1 id="Spring-Bean-Life-Cycle-Callback-Methods"><a href="#Spring-Bean-Life-Cycle-Callback-Methods" class="headerlink" title="Spring Bean Life Cycle Callback Methods"></a>Spring Bean Life Cycle Callback Methods</h1><p><img src="https://www.concretepage.com/spring/images/spring-bean-life-cycle-tutorial.jpg" alt="life cycle"><br>A bean life cycle includes the following steps. </p>
<ol>
<li>Within IoC container, a spring bean is created using class constructor. </li>
<li>Now the dependency injection is performed using setter method. </li>
<li>Once the dependency injection is completed, BeanNameAware.setBeanName() is called. It sets the name of bean in the bean factory that created this bean. </li>
<li>Now &lt; code&gt;BeanClassLoaderAware.setBeanClassLoader() is called that supplies the bean class loader to a bean instance. </li>
<li>Now &lt; code&gt;BeanFactoryAware.setBeanFactory() is called that provides the owning factory to a bean instance. </li>
<li>Now the IoC container calls BeanPostProcessor.postProcessBeforeInitialization on the bean. Using this method a wrapper can be applied on original bean. </li>
<li>Now the method annotated with @PostConstruct is called. </li>
<li>After @PostConstruct, the method InitializingBean.afterPropertiesSet() is called. </li>
<li>Now the method specified by init-method attribute of bean in XML configuration is called. </li>
<li>And then BeanPostProcessor.postProcessAfterInitialization() is called. It can also be used to apply wrapper on original bean. </li>
<li>Now the bean instance is ready to be used. Perform the task using the bean. </li>
<li>Now when the ApplicationContext shuts down such as by using registerShutdownHook() then the method annotated with @PreDestroy is called. </li>
<li>After that DisposableBean.destroy() method is called on the bean. </li>
<li>Now the method specified by destroy-method attribute of bean in XML configuration is called. </li>
<li>Before garbage collection, finalize() method of Object is called.</li>
</ol>
<p>Spring framework provides following 4 ways for controlling life cycle events of bean:</p>
<ul>
<li>InitializingBean and DisposableBean callback interfaces</li>
<li>Other Aware interfaces for specific behavior</li>
<li>Custom init() and destroy() methods in bean configuration file</li>
<li>@PostConstruct and @PreDestroy annotations</li>
</ul>
<h2 id="InitializingBean"><a href="#InitializingBean" class="headerlink" title="InitializingBean"></a>InitializingBean</h2><p>The org.springframework.beans.factory.InitializingBean interface specifies a single method −</p>
<p>void afterPropertiesSet() throws Exception;</p>
<h2 id="Destruction-callbacks"><a href="#Destruction-callbacks" class="headerlink" title="Destruction callbacks"></a>Destruction callbacks</h2><p>The org.springframework.beans.factory.DisposableBean interface specifies a single method −</p>
<p>void destroy() throws Exception;</p>
<h2 id="Custom-init-and-destroy-methods-in-bean-configuration-file"><a href="#Custom-init-and-destroy-methods-in-bean-configuration-file" class="headerlink" title="Custom init() and destroy() methods in bean configuration file"></a>Custom init() and destroy() methods in bean configuration file</h2><p>The default init and destroy methods in bean configuration file can be defined in two ways:</p>
<p>Bean local definition applicable to a single bean<br>Global definition applicable to all beans defined in beans context</p>
<p>Local definition is given as below.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"demoBean"</span> <span class="attr">class</span>=<span class="string">"com.howtodoinjava.task.DemoBean"</span> </span></span><br><span class="line"><span class="tag">					<span class="attr">init-method</span>=<span class="string">"customInit"</span> </span></span><br><span class="line"><span class="tag">					<span class="attr">destroy-method</span>=<span class="string">"customDestroy"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Where as global definition is given as below. These methods will be invoked for all bean definitions given under <beans> tag. They are useful when you have a pattern of defining common method names such as init() and destroy() for all your beans consistently. This feature helps you in not mentioning the init and destroy method names for all beans independently.</beans></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">default-init-method</span>=<span class="string">"customInit"</span> <span class="attr">default-destroy-method</span>=<span class="string">"customDestroy"</span>&gt;</span>   </span><br><span class="line"></span><br><span class="line">    	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"demoBean"</span> <span class="attr">class</span>=<span class="string">"com.howtodoinjava.task.DemoBean"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="PostConstruct-and-PreDestroy-annotations"><a href="#PostConstruct-and-PreDestroy-annotations" class="headerlink" title="@PostConstruct and @PreDestroy annotations"></a>@PostConstruct and @PreDestroy annotations</h2><p>Spring 2.5 onwards, you can use annotations also for specifying life cycle methods using @PostConstruct and @PreDestroy annotations.</p>
<p>@PostConstruct annotated method will be invoked after the bean has been constructed using default constructor and just before it’s instance is returned to requesting object.<br>@PreDestroy annotated method is called just before the bean is about be destroyed inside bean container.<br>A sample implementation will look like this:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.howtodoinjava.task;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.PreDestroy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoBean</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="meta">@PostConstruct</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customInit</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"Method customInit() invoked..."</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@PreDestroy</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customDestroy</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"Method customDestroy() invoked..."</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Spring-Notes"><a href="#Spring-Notes" class="headerlink" title="Spring Notes"></a>Spring Notes</h1><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> execution(* concert.Performance.perform())  and !bean(<span class="string">'woodstock'</span>)</span><br><span class="line"> <span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Audience</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Before</span>(<span class="string">"execution(** concert.Performance.perform(..))"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">silenceCellPhones</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Before performance</span><br></pre></td></tr></table></figure>

<ul>
<li><p>Fortunately, there’s a way: the @Pointcut annotation defines a reusable pointcut within an @AspectJ aspect. The next listing shows the Audience aspect, updated to use @Pointcut.</p>
</li>
<li><p>Reuse pointuct</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Audience</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Pointcut</span>(<span class="string">"execution(** concert.Performance.perform(..))"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performance</span><span class="params">()</span> </span>&#123;&#125; <span class="comment">//Define named pointcut</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"performance()"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">silenceCellPhones</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Silencing cell phones"</span>);</span><br><span class="line">  <span class="meta">@Before</span>(<span class="string">"performance()"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeSeats</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Taking seats"</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>The body of the performance() method is irrelevant and, in fact, should be empty. The method itself is just a marker, giving the @Pointcut annotation something to attach itself to.</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint; <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Audience</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">watchPerformance</span><span class="params">(ProceedingJoinPoint jp)</span> </span>&#123; <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Silencing cell phones"</span>); System.out.println(<span class="string">"Taking seats"</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"audience"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span></span></span><br><span class="line"><span class="tag"><span class="attr">id</span>=<span class="string">"performance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">expression</span>=<span class="string">"execution(** concert.Performance.perform(..))"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:around</span>     <span class="attr">Declare</span> <span class="attr">around</span> <span class="attr">advice</span></span></span><br><span class="line"><span class="tag">        </span></span><br><span class="line"><span class="tag"><span class="attr">pointcut-ref</span>=<span class="string">"performance"</span> <span class="attr">method</span>=<span class="string">"watchPerformance"</span>/&gt;</span> <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>to use AspectJ’s @DeclareParents annota¬tion to magically introduce a new method into an advised bean. But AOP introduc¬tions aren’t exclusive to AspectJ. Using the <a href="aop:declare-parents" target="_blank" rel="noopener">aop:declare-parents</a> element from Spring’s aop namespace, you can do similar magic in XML.</li>
</ul>
<ul>
<li><p>Listing 1.7 Spring offers Java-based configuration as an alternative to XML.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springinaction.knights.config;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> com.springinaction.knights.BraveKnight; <span class="keyword">import</span> com.springinaction.knights.Knight; <span class="keyword">import</span> com.springinaction.knights.Quest; <span class="keyword">import</span> com.springinaction.knights.SlayDragonQuest;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KnightConfig</span> </span>&#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Knight <span class="title">knight</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> BraveKnight(quest());</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Quest <span class="title">quest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> SlayDragonQuest(System.out);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>In a Spring application, an application context loads bean definitions and wires them together. The Spring application context is fully responsible for the creation of and wiring of the objects that make up the application. Spring comes with several imple¬mentations of its application context, each primarily differing only in how it loads its configuration.</p>
</li>
<li><p>When the beans in knights.xml are declared in an XML file, an appropriate choice for application context might be ClassPathXmlApplicationContext.1</p>
</li>
<li><p>These system services are commonly referred to as cross-cut¬ting concerns because they tend to cut across multiple components in a system.</p>
</li>
<li><p>Your components are littered with code that isn’t aligned with their core func¬tionality. A method that adds an entry to an address book should only be con¬cerned with how to add the address and not with whether it’s secure or transactional.</p>
</li>
<li><p>Spring seeks to eliminate boilerplate code by encapsulating it in templates. Spring’s JdbcTemplate makes it possible to perform database operations without all the ceremony required by traditional JDBC.<br>The container is at the core of the Spring Framework. Spring’s container uses DI to manage the components that make up an application. This includes creating associa¬tions between collaborating components. As such, these objects are cleaner and easier to understand, they support reuse, and they’re easy to unit test.</p>
</li>
<li><p>There’s no single Spring container. Spring comes with several container imple¬mentations that can be categorized into two distinct types. Bean factories (defined by the org.springframework.beans.factory.BeanFactory interface) are the simplest of containers, providing basic support for DI. Application contexts (defined by the org.springframework.context.ApplicationContext interface) build on the notion of a bean factory by providing application-framework services, such as the ability to resolve textual messages from a properties file and the ability to publish application events to interested event listeners.</p>
</li>
<li><p>Although it’s possible to work with Spring using either bean factories or applica¬tion contexts, bean factories are often too low-level for most applications. Therefore, application contexts are preferred over bean factories. We’ll focus on working with application contexts and not spend any more time talking about bean factories.</p>
</li>
<li><p>As you can see, a bean factory performs several setup steps before a bean is ready to use. Let’s break down figure 1.5 in more detail:<br>1 Spring instantiates the bean.<br>2 Spring injects values and bean references into the bean’s properties.<br>3 If the bean implements BeanNameAware, Spring passes the bean’s ID to the set-BeanName() method.<br>4 If the bean implements BeanFactoryAware, Spring calls the setBeanFactory() method, passing in the bean factory itself.<br>5 If the bean implements ApplicationContextAware, Spring calls the set-ApplicationContext() method, passing in a reference to the enclosing appli¬cation context.<br>6       If the bean implements the BeanPostProcessor interface, Spring calls its post-<br>ProcessBeforeInitialization() method.<br>7       If the bean implements the InitializingBean interface, Spring calls its after-<br>PropertiesSet() method. Similarly, if the bean was declared with an init-method, then the specified initialization method is called.<br>8 If the bean implements BeanPostProcessor, Spring calls its postProcess-AfterInitialization() method.<br>9 At this point, the bean is ready to be used by the application and remains in the application context until the application context is destroyed.<br>10 If the bean implements the DisposableBean interface, Spring calls its destroy() method. Likewise, if the bean was declared with a destroy-method, the specified method is called.</p>
</li>
<li><p>Spring Boot heavily employs automatic configuration techniques that can elimi¬nate most (and in many cases, all) Spring configuration. It also provides several starter projects to help reduce the size of your Spring project build files, whether you’re using Maven or Gradle.</p>
</li>
</ul>
<p>·   Spring began to support Servlet 3.0, including the ability to declare servlets and filters in Java-based configuration instead of web.xml.<br>·   You should now have a good idea of what Spring brings to the table. Spring aims to make enterprise Java development easier and to promote loosely coupled code. Vital to this are dependency injection and aspect-oriented programming.<br>When it comes to expressing a bean wiring specification, Spring is incredibly flexible, offering three primary wiring mechanisms:<br>·   Explicit configuration in XML<br>·   Explicit configuration in Java<br>·   Implicit bean discovery and automatic wiring<br>·   in many cases, the choice is largely a matter of personal taste, and you’re welcome to choose the approach that feels best for you.<br>Spring attacks automatic wiring from two angles:<br>·   Component scanning—Spring automatically discovers beans to be created in the application context.<br>·   Autowiring—Spring automatically satisfies bean dependencies.<br>Working together, component scanning and autowiring are a powerful force and can help keep explicit configuration to a minimum.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> soundsystem;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CompactDisc</span> </span>&#123; <span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>The specifics of the CompactDisc interface aren’t important. What is important is that you’ve defined it as an interface. As an interface, it defines the contract through which a CD player can operate on the CD. And it keeps the coupling between any CD player implementation and the CD itself to a minimum.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> soundsystem;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SgtPeppers</span> <span class="keyword">implements</span> <span class="title">CompactDisc</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String title = <span class="string">"Sgt. Pepper's Lonely Hearts Club Band"</span>; <span class="keyword">private</span> String artist = <span class="string">"The Beatles"</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Playing "</span> + title + <span class="string">" by "</span> + artist);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>that SgtPeppers is annotated with @Component. This simple annotation identifies this class as a component class and serves as a clue to Spring that a bean should be created for the class.<br>Component scanning isn’t turned on by default, however. You’ll still need to write an explicit configuration to tell Spring to seek out classes annotated with @Component and to create beans from them. The configuration class in the following listing shows the minimal configuration to make this possible.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> soundsystem;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan; <span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="meta">@Configuration</span> <span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayerConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>you can explicitly identify any state as the starting state by setting the start-state attri¬bute in the <flow> element:</flow></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">flow</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/webflow"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow-2.3.xsd"</span> <span class="attr">start-state</span>=<span class="string">"identifyCustomer"</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">flow</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Welcome to Spizza!!!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form:form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_flowExecutionKey"</span></span></span><br><span class="line"><span class="tag"><span class="attr">value</span>=<span class="string">"$&#123;flowExecutionKey&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"phoneNumber"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"_eventId_phoneEntered"</span></span></span><br><span class="line"><span class="tag"><span class="attr">value</span>=<span class="string">"Lookup Customer"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form:form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>The <em>eventId</em> portion of the button’s name is a clue to Spring Web Flow that what follows is an event that should be fired. When the form is submitted by clicking that button, a phoneEntered event is fired, triggering a transition to lookupCustomer.</p>
<p>  Flow execution key</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>The address is outside of our delivery area. You may</span><br><span class="line">still place the order, but you will need to pick it up</span><br><span class="line">yourself.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&lt;![CDATA[</span><br><span class="line">&lt;a href="$&#123;flowExecutionUrl&#125;&amp;_eventId=accept"&gt;</span><br><span class="line">Continue, I'll pick up the order&lt;/a&gt; |</span><br><span class="line">&lt;a href="$&#123;flowExecutionUrl&#125;&amp;_eventId=cancel"&gt;Never mind&lt;/a&gt;</span><br><span class="line">11&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Note that the customerReady end state includes an <output> element. This ele-ment is a flow’s equivalent of Java’s return statement. It passes back some data from a subflow to the calling flow. In this case, <output> returns the customer flow variable so that the identifyCustomer subflow state in the pizza flow can assign it to the order.<br>you use the <input> element to pass the Order in to the flow. Here you’re using it to accept that Order object. If you think of this subflow as being analo¬gous to a method in Java, the <input> element used here is effectively defining the subflow’s signature. This flow requires a single parameter called order.</output></output></p>
</li>
<li><p>States, transitions, and entire flows can be secured in Spring Web Flow by using the <secured> element as a child of those elements. For example, to secure access to a view state, you might use <secured> like this:</secured></secured></p>
<view-state id="restricted">
<secured attributes="ROLE_ADMIN" match="all"> </secured></view-state>
As configured here, access to the view state will be restricted to only users who are granted ROLE_ADMIN access (per the attributes attribute). The attributes attribute takes a comma-separated list of authorities that the user must have to gain access to the state, transition, or flow.









</li>
</ul>
<p>On the contrary, REST has little to do with RPC. Whereas RPC is service oriented and focused on actions and verbs, REST is resource oriented, emphasizing the things and nouns that comprise an application.</p>
<p>Put more succinctly, REST is about transferring the state of resources—in a representational form that is most appropriate for the client or server—from a server to a client (or vice versa).</p>
<p>It’s a small start, but you’ll build on this controller throughout this chapter as you learn the ins and outs of Spring’s REST programming model.</p>
<p>Representation is an important facet of REST. It’s how a client and a server communicate about a resource. Any given resource can be represented in virtually any form. If the consumer of the resource prefers JSON, then the resource can be</p>
<p>Meanwhile, a human user viewing the resource in a web browser will likely prefer seeing it in HTML (or possibly PDF, Excel, or some other human-readable form). The resource doesn’t change—only how it’s represented.</p>
<p>Understanding how ContentNegotiatingViewResolverworks involves getting to know the content-negotiation two-step:</p>
<ol>
<li><p>Determine the requested media type(s).</p>
</li>
<li><p>Find the best view for the requested media type(s).</p>
</li>
</ol>
<p>The @ResponseBodyannotation tells Spring that you want to send the returned object as a resource to the client, converted into some representational form that the client can accept. More specifically, DispatcherServletconsiders the request’s Acceptheader and looks for a message converter that can give the client the representation it wants.</p>
<p>Just as @ResponseBodytells Spring to employ a message converter when sending data to a client, the @RequestBodytells Spring to find a message converter to convert a resource representation coming from a client into an object. For example, suppose that you need a way for a client to submit a new Spittle to be saved. You can write the controller method to handle such a request like this:</p>
<p>The body of the POST request is expected to carry a resource representation for a Spittle. Because the Spittleparameter is annotated with @RequestBody, Spring will look at the Content-Typeheader of the request and try to find a message converter that can convert the request body into a Spittle.</p>
<p>For example, if the client sent the Spittle data in a JSON representation, then the Content-Type header might be set to application/json. In that case, DispatcherServletwill look for a message converter that can convert JSON into Java objects. If the Jackson 2 library is on the classpath, then MappingJackson2Http-MessageConverterwill get the job and will convert the JSON representation into a Spittle that’s passed into the saveSpittle()method. The method is also annotated with @ResponseBodyso that the returned Spittle will be converted into a resource representation to be returned to the client.</p>
<p>Notice that the @RequestMappinghas a consumesattribute set to application/json. The consumesattribute works much like the producesattribute, only with regard to the request’s Content-Typeheader. This tells Spring that this method will only handle POSTrequests to /spittles if the request’s Content-Typeheader is application/json. Otherwise, it will be up to some other method (if a suitable one exists) to handle the request.</p>
<p>The key thing to notice in listing 16.3is what’s not in the code. Neither of the handler methods are annotated with @ResponseBody. But because the controller is annotated with @RestController, the objects returned from those methods will still go through message conversion to produce a resource representation for the client.The @ExceptionHandler annotation can be applied to controller methods to handle specific exceptions. Here, it’s indicating that if a SpittleNotFoundException is thrown from any of the handler methods in the same controller, the spittleNotFound() method should be called to handle that exception.</p>
<p>@ExceptionHandler(SpittleNotFoundException.class)@ResponseStatus(HttpStatus.NOT_FOUND)public @ResponseBody Error spittleNotFound(SpittleNotFoundException e) {  long spittleId = e.getSpittleId();  return new Error(4, “Spittle [“ + spittleId + “] not found”);}</p>
<p>@ExceptionHandler(SpittleNotFoundException.class)<br>@ResponseStatus(HttpStatus.NOT_FOUND)<br>public @ResponseBody Error spittleNotFound(SpittleNotFoundException e) {<br> long spittleId = e.getSpittleId();<br> return new Error(4, “Spittle [“ + spittleId + “] not found”);<br>}</p>
<p>Because spittleNotFound() always returns an Error, the only reason to keep Response-Entity around is so you can set the status code. But by annotating spittleNotFound() with @ResponseStatus(HttpStatus.NOT_FOUND), you can achieve the same effect and get rid of ResponseEntity.</p>
<p>Again, if the controller class is annotated with @RestController, you can remove the @ResponseBody annotation and clean up the code a little more:</p>
<p>@ExceptionHandler(SpittleNotFoundException.class)<br>@ResponseStatus(HttpStatus.NOT_FOUND)<br>public Error spittleNotFound(SpittleNotFoundException e) {<br> long spittleId = e.getSpittleId();<br> return new Error(4, “Spittle [“ + spittleId + “] not found”);<br>}</p>
<p>public Spittle fetchSpittle(long id) {<br> RestTemplate rest = new RestTemplate();<br> ResponseEntity<spittle> response = rest.getForEntity(</spittle></p>
<pre><code>&quot;http://localhost:8080/spittr-api/spittles/{id}&quot;,
Spittle.class, id);</code></pre><p> if(response.getStatusCode() == HttpStatus.NOT_MODIFIED) {<br>   throw new NotModifiedException();<br> }<br> return response.getBody();<br>}</p>
<p>Just like the getForEntity() method, postForEntity() returns a Response-Entity<t> object. From that object, you can call getBody() to get the resource object (a Spitter in this case). And the getHeaders() method gives you an HttpHeaders from which you can access the various HTTP headers returned in the response. Here, you’re calling getLocation() to retrieve the Location header as a java.net.URI.</t></p>
<p>By passing in HttpMethod.GET as the HTTP verb, you’re asking exchange() to send a GET request. The third argument is for sending a resource on the request, but because this is a GET request, it can be null. The next argument indicates that you want the response converted into a Spitter object. An</p>
<p>Used this way, the exchange() method is virtually identical to the previously used getForEntity(). But unlike getForEntity()—or getForObject()—exchange() lets you set headers on the request sent. Instead of passing null to exchange(), you pass in an HttpEntity created with the request headers you want.</p>
<p>RESTful architecture uses web standards to integrate applications, keeping the interactions simple and natural. Resources in a system are identified by URLs, manipulated with HTTP methods, and represented in one or more forms suitable for the client.</p>
<p>Spring’s philosophy of avoiding checked exceptions, you don’t want to let the JMSException escape this method, so you’ll catch it instead.</p>
<p>In the catch block, you can use the convertJmsAccessException() method from Spring’s JmsUtils class to convert the checked JMSException to an unchecked JmsException. This is effectively the same thing JmsTemplate does for you in other cases.</p>
<p>A message-listener container is a special bean that watches a JMS destination, waiting for a message to arrive. Once a message arrives, the bean retrieves the message and passes it on to any message listeners that are interested.</p>
<p>&lt;jms:listener-container connection-factory=”connectionFactory”&gt;<br> &lt;jms:listener destination=”spitter.alert.queue”<br>      ref=”spittleHandler” method=”handleSpittleAlert” /&gt;<br></p>
<p>JmsInvokerServiceExporter is much like those other service exporters. In fact, note that there’s some symmetry in the names of JmsInvokerServiceExporter and HttpInvokerServiceExporter. If HttpInvokerServiceExporter exports services that communicate over HTTP, then JmsInvokerServiceExporter must export services that converse over JMS.</p>
<p>As it turns out, AMQP offers several advantages over JMS. First, AMQP defines a wire-level protocol for messaging, whereas JMS defines an API specification. JMS’s API specification ensures that all JMS implementations can be used through a common API but doesn’t mandate that messages sent by one JMS implementation can be consumed by a different JMS implementation. AMQP’s wire-level protocol, on the other hand, specifies the format that messages will take when en route between the producer and consumer. Consequently, AMQP is more interoperable than JMS—not only across different AMQP implementations, but also across languages and platforms.</p>
<p>In JMS, there are just three primary participants: the message producer, the message consumer(s), and a channel (either a queue or a topic) to carry the message between producers and consumers. These essentials of the JMS messaging model are illustrated in figures 17.3 and 17.4.</p>
<p>In JMS, the channel helps to decouple the producer from the consumer, but both are still coupled to the channel. A producer publishes messages to a specific queue or topic, and the consumer receives those message from a specific queue or topic. The channel has the double duty of relaying messages and determining how those messages will be routed; queues route using a point-to-point algorithm, and topics route in publish/subscribe fashion.</p>
<p>In contrast, AMQP producers don’t publish directly to a queue. Instead, AMQP introduces a new level of indirection between the producer and any queues that will carry the message: the exchange. This relationship is illustrated in figure 17.8.</p>
<p>Figure 17.8. In AMQP, message producers are decoupled from message queues by an exchange that handles message routing.</p>
<p>For example, to have a message routed to multiple queues with no regard for the routing key, you can configure a fanout exchange and several queues like this:</p>
<p><admin connection-factory="connectionFactory"> <queue name="spittle.alert.queue.1"> <queue name="spittle.alert.queue.2"> <queue name="spittle.alert.queue.3"> <fanout-exchange name="spittle.fanout"> <bindings> <binding queue="spittle.alert.queue.1"> <binding queue="spittle.alert.queue.2"> <binding queue="spittle.alert.queue.3"> </binding></binding></binding></bindings> </fanout-exchange></queue></queue></queue></admin></p>
<p>As its name implies, the RabbitMQ connection factory is used to create connections with RabbitMQ. If you want to send messages via RabbitMQ, you could inject the connectionFactory bean into your AlertServiceImpl class, use it to create a Connection, use that Connection to create a Channel, and use that Channel to publish a message to an exchange.</p>
<p>Yep, you could do that.</p>
<p>you can configure different defaults using the exchange and routing-key attributes on the <template> element:</template></p>
<p><template id="rabbitTemplate" connection-factory="connectionFactory" exchange="spittle.alert.exchange" routing-key="spittle.alerts"></template></p>
<p>it was tricky to convert domain objects into Messages for sending, it’s messy to convert received Messages to domain objects. Therefore, consider using RabbitTemplate’s receiveAndConvert() method instead:</p>
<p>Spittle spittle =<br>   (Spittle) rabbit.receiveAndConvert(“spittle.alert.queue”);<br>Or you can leave the queue name out of the call parameters to fall back on the template’s default queue name:</p>
<p>The first thing you’ll need in order to consume a Spittle object asynchronously in a message-driven POJO is the POJO itself. Here’s SpittleAlertHandler, which fills that role:</p>
<p>package com.habuma.spittr.alerts;<br>import com.habuma.spittr.domain.Spittle;</p>
<p>public class SpittleAlertHandler {</p>
<p> public void handleSpittleAlert(Spittle spittle) {<br>   // … implementation goes here …<br> }<br>}</p>
<listener-container connection-factory="connectionFactory">
   <listener ref="spittleListener" method="handleSpittleAlert" queue-names="spittle.alert.queue">
</listener></listener-container>
Do you see the difference? I’ll agree that it’s not obvious. The <listener-container> and <listener> elements appear to be similar to their JMS counterparts. These elements, however, come from the rabbit namespace instead of the JMS namespace.

<p>I said it wasn’t obvious.</p>
<p>Regardless of whether you handle text messages, binary messages, or both, you might also be interested in handling the establishment and closing of connections. In that case, you can override afterConnectionEstablished() and afterConnectionClosed():</p>
<p>public void afterConnectionEstablished(WebSocketSession session)<br>   throws Exception {<br> logger.info(“Connection established”);<br>}</p>
<p>@Override<br>public void afterConnectionClosed(<br>   WebSocketSession session, CloseStatus status) throws Exception {<br> logger.info(“Connection closed. Status: “ + status);<br>}</p>
<p>Fortunately, you don’t have to work with raw WebSocket connections. Just as HTTP layers a request-response model on top of TCP sockets, STOMP layers a frame-based wire format to define messaging semantics on top of WebSocket.</p>
<p>At a quick glance, STOMP message frames look very similar in structure to HTTP requests. Much like HTTP requests and responses, STOMP frames are comprised of a command, one or more headers, and a payload. For example, here’s a STOMP frame that sends data.</p>
<p>SEND<br>destination:/app/marco<br>content-length:20</p>
<p>{&quot;message&quot;:&quot;Marco!&quot;}
In this simple example, the STOMP command is SEND, indicating that something is being sent. It’s followed by two headers: one indicates the destination where the message should be sent, and the other communicates the size of the payload. Following a blank line, the frame concludes with the payload; in this case, a JSON message.</p>
<p>Taking advantage of Maven’s and Gradle’s transitive dependency resolution, the starters declare several dependencies in their own pom.xml file. When you add one of these starter dependencies to your Maven or Gradle build, the starter’s dependencies are resolved transitively.</p>
<p>Whereas Spring Boot starters cut down the size of your build’s dependency list, Spring Boot autoconfiguration cuts down on the amount of Spring configuration.</p>
<p>When Spring Boot’s web autoconfiguration detects Spring MVC in the classpath, it will automatically configure several beans to support Spring MVC, including view resolvers, resource handlers, and message converters (among others). All that’s left for you to do is write the controller classes to handle the requests.</p>
<p>Spring Boot is an exciting new addition to the Spring family of projects. Where Spring aims to make Java development simpler, Spring Boot aims to make Spring itself simpler.</p>
<p>Spring Boot employs two main tricks to eliminate boilerplate configuration in a Spring project: Spring Boot starters and automatic configuration.</p>
<p>A single Spring Boot starter dependency can replace several common dependencies in a Maven or Gradle build. For example, adding only Spring Boot’s web starter as a dependency in a project pulls in Spring’s web and Spring MVC modules as well as the Jackson 2 databind module.</p>
<p>Automatic configuration takes full advantage of Spring 4.0’s conditional configuration feature to automatically configure certain Spring beans to enable a certain feature. For example, Spring Boot can detect that Thymeleaf is in the application classpath and automatically configure the beans required to enable Thymeleaf templates as Spring MVC views.</p>
<p>In addition to the MBean info assemblers you’ve seen thus far, Spring provides another assembler known as MetadataMBeanInfoAssembler that can be configured to use annotations to appoint bean methods as managed operations and attributes. I could show you</p>
<p>JTA transaction management is resource-intensive; its exception handling is based on checked exceptions and so is not developer-friendly. Moreover, unit testing is hard with EJB CMT.</p>
<p>Most applications just need local transactions since they do not deal with multiple servers or transactional resources such as databases, JMS, and JCA; hence, they do not need a full-blown application server. For distributed transactions spanned across multiple servers over remote calls, you need JTA, necessitating an application server, as JTA needs JNDI to look up the data source. JNDI is normally available only in an application server. Use JTATransactionManager inside application servers for JTA capabilities.</p>
<p>TransactionDefinition defines the critical transaction attributes such as isolation, propagation, transaction timeout, and the read-only status of a given transaction instance.</p>
<p>Transaction attributes determine the behavior of transaction instances. They can be set programmatically as well as declaratively. Transaction attributes are:</p>
<p>Isolation level: Defines how much a transaction is isolated from (can see) other transactions running in parallel. Valid values are: None, Read committed, Read uncommitted, Repeatable reads, and Serializable. Read committed cannot see dirty reads from other transactions.</p>
<p>Propagation: Determines the transactional scope of a database operation in relation to other operations before, after, and nested inside itself. Valid values are: REQUIRED, REQUIRES_NEW, NESTED, MANDATORY, SUPPORTS, NOT_SUPPORTED, and NEVER.</p>
<p>Timeout: Maximum time period that a transaction can keep running or waiting before it completes. Once at timeout, it will roll back automatically.</p>
<p>Read-only status: You cannot save the data read in this mode.</p>
<p>These transaction attributes are not specific to Spring, but reflect standard transactional concepts. The TransactionDefinition interface specifies these attributes in the Spring Transaction Management context.<br>For multiple DataSource objects or transactional resources, you need a JtaTransactionManager with JTA capabilities, which usually delegates to a container JTA provider.</p>
<p>If you are using Hibernate and just a single DataSource (and no other transactional resource), then the best option is to use HibernateTransactionManager, which requires you to pass the session factory as a dependency.</p>
<p>Spring Transactions supports two transactional modes: proxy mode and AspectJ mode. Proxy is the default and most popular mode. In proxy mode, Spring creates an AOP proxy object, wrapping the transactional beans, and applies transactional behavior transparently around the methods using transaction aspects based on the metadata. The AOP proxy created by Spring based on transactional metadata, with the help of the configured PlatformTransactionManager, performs transactions around the transactional methods.</p>
<p>Spring offers two convenient approaches for declaratively defining the transactional behavior of your beans:</p>
<p>AOP configuration for transactions in an XML metadata file<br>Using the @Transactional annotation</p>
<!-- transactional advices -->
<p>&lt;tx:advice id=”txAdvice” transaction-manager=”transactionManager”&gt;<br> <!-- the transactional semantics... --><br> <a href="tx:attributes" target="_blank" rel="noopener">tx:attributes</a><br>   <!-- all methods starting with 'get' are read-only --><br>   &lt;tx:method name=”find*” read-only=”true” /&gt;<br>   <!-- other methods use the default transaction settings (see below) --><br>   &lt;tx:method name=”*” isolation=”DEFAULT” propagation=”REQUIRED” /&gt;<br> <br></p>
<!-- Applying the above advices to the service layer methods -->
<p><a href="aop:config" target="_blank" rel="noopener">aop:config</a><br> &lt;aop:pointcut id=”allServiceMethods”<br> expression=”execution(* com.taskify.service.<em>.</em>(..))” /&gt;<br> &lt;aop:advisor advice-ref=”txAdvice” pointcut- ref=”allServiceMethods” /&gt;<br><br>You can see that this AOP configuration instructs Spring how to weave transactional advices around the methods using pointcuts. It instructs TransactionManager to make all find methods of the entire service layer read-only, and to force other methods to have the transaction propagation: REQUIRED, which means that, if the caller of the method is already in a transactional context, this method joins the same transaction without creating a new one; otherwise, a new transaction is created. If you want to create a different transaction for this method, you should use the REQUIRES_NEW propagation.<br>Also, note that the transaction isolation level is specified as DEFAULT, which means the default isolation of the database is to be used. Most databases default to READ_COMMITTED, which means a transactional thread cannot see the data of other transactions in progress (dirty reads).</p>
<p>Note<br>@Transactional can be applied only to public methods. If you want to annotate over protected, private, or package-visible methods, consider using AspectJ, which uses compile-time aspect weaving. Spring recommends annotating @Transactional only on concrete classes as opposed to interfaces, as it will not work in most cases such as when you use proxy-target-class=”true” or mode=”aspectj”.</p>
<p>You need to first enable transaction management in your application before Spring can detect the @Transactional annotation for your bean methods. You enable transaction in your XML metadata using the following notation:</p>
<p>&lt;tx:annotation-driven transaction-manager=”transactionManager” /&gt;<br>The following is the Java configuration alternative for the preceding listing:</p>
<p>@Configuration<br>@EnableTransactionManagement<br>public class JpaConfiguration {<br>}
Spring scans the application context for bean methods annotated with @Transactional when it sees either of the preceding settings.</p>
<p>Implementing InitializingBean and DisposableBean</p>
<p>The Spring IoC container invokes the callback methods afterPropertiesSet() of org.springframework.beans.factory.InitializingBean and destroy() of org.springframework.beans.factory.DisposableBean on any Spring bean and implements them:</p>
<p>There are different bean scopes in Spring, such as singleton, prototype, request, session, and global session. We will understand each session one by one.</p>
<p>By default, all Spring beans are singleton. Once ApplicationContext is initialized, it looks at all the beans in XML and initializes only one bean per bean definition in Spring Container. On each call to the getBean() method, Spring Container returns the same instance of the bean.</p>
<p>Prototype</p>
<p>The prototype is second bean scope in Spring, which returns a brand-new instance of a bean on each call to the getBean() method. When a bean is defined as a prototype, Spring waits for getBean() to happen and only then does it initialize the prototype. </p>
<p>Spring doesn’t maintain the complete life cycle of the prototype. Here, the container instantiates and configures prototype beans and returns this bean to the client with no further record of this prototype instance.</p>
<p>Request</p>
<p>The third bean scope in Spring is request, which is available only in web applications that use Spring and create an instance of bean for every HTTP request. Here, a new bean is created per Servlet request. Spring will be aware of when a new request is happening because it ties well with the Servlet APIs, and depending on the request, Spring creates a new bean. So, if the reque</p>
<p>Session</p>
<p>The session is the fourth bean scope in Spring, which is available only in web applications that use Spring and create an instance of bean for every HTTP session. Here, a new bean is created per session. As long as there is one user accessing in a single session, each call to getBean() will return same instance of the bean. </p>
<p>Global session</p>
<p>The global session is the fifth bean scope in Spring, which works only in portlet environments that use Spring and create a bean for every new portlet session.</p>
<p>Spring’s BeanFactory manages the life cycle of beans created through the Spring IoC container. The life cycle of beans consist of callback methods, which can be categorized broadly into the following two groups:</p>
<p>Post-initialization callback methods<br>Pre-destruction callback methods</p>
<p>Initialization</p>
<p>It represents a sequence of activities that take place between the bean instantiation and the handover of its reference to the client application:</p>
<p>The bean container finds the definition of the Spring bean in the configuration file and creates an instance of the bean<br>If any properties are mentioned, populate the properties using setters<br>If the Bean class implements the BeanNameAware interface, then call the setBeanName() method<br>If the Bean class implements the BeanFactoryAware interface, then call the setBeanFactory() method<br>If the Bean class implements the ApplicationContextAware interface, then call the setApplicationContext() method<br>If there are any BeanPostProcessors objects associated with the BeanFactory interface that loaded the bean, then Spring will call the postProcessBeforeInitialization() method before the properties for the bean are injected<br>If the Bean class implements the InitializingBean interface, then call the afterPropertiesSet() method once all the bean properties defined in the configuration file are injected<br>If the bean definition in the configuration file contains the init-method attribute, then call this method after resolving the value for the attribute to a method name in the Bean class<br>The postProcessAfterInitialization() method will be called if there are any bean post processors attached to the BeanFactory interface that loads the bean</p>
<p>Destruction</p>
<p>This represents the following sequence of activities:</p>
<p>If the Bean class implements the DisposableBean interface, then call the destroy() method when the application no longer needs the bean reference<br>If the bean definition in the configuration file contains the destroy-method attribute, then call this method after resolving the value for the attribute to a method name in the Bean class.</p>
<p>The InitializingBean interface has afterPropertiesSet(), which needs to be implemented, and it will be called by Spring when this bean is initialized and all properties are set. This InitializingBean interface is a marker for the bean to know that the afterPropertiesSet() method of this bean needs to be called after initialization.</p>
<p>Using init-method in the XML configuration<br>In the case of XML-based configuration metadata, you can use the init-method attribute to specify the name of the method that has a void no-argument signature, which is to be called on the bean immediately upon instantiation.</p>
<p>In the beans.xml file, you’ll find the following code:</p>
<p>…<br><bean id="employeeServiceBean" class="org.packt.Spring.chapter2.callbacks.xml.EmployeeServiceImpl" init-method="myInit"><br></bean><br>…<br>In the EmployeeServiceImpl.java class, you’ll find the following code:</p>
</listener></listener-container>]]></content>
      <tags>
        <tag>java</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>SSH SFTP</title>
    <url>/2017-04-06-SSH/</url>
    <content><![CDATA[<h1 id="Secure-FTP"><a href="#Secure-FTP" class="headerlink" title="Secure FTP"></a>Secure FTP</h1><blockquote>
<p>SFTP over FTP is the equivalant of HTTPS over HTTP, the security version</p>
</blockquote>
<h2 id="SFTP-versus-FTPS"><a href="#SFTP-versus-FTPS" class="headerlink" title="SFTP versus FTPS"></a>SFTP versus FTPS</h2><ul>
<li>An increasing number of our customers are looking to move away from standard FTP for transferring data, so we are often asked which secure FTP protocol we recommend. In the next few paragraphs, we will explain what options are available and their main differences.</li>
<li>The two mainstream protocols available for Secure FTP transfers are named SFTP (FTP over SSH) and FTPS (FTP over SSL). Both SFTP and FTPS offer a high level of protection since they implement strong algorithms such as AES and Triple DES to encrypt any data transferred. Both options also support a wide variety of functionality with a broad command set for transferring and working with files. So the most notable differences between SFTP and FTPS is how connections are authenticated and managed.</li>
</ul>
<h2 id="Authentication-SFTP-vs-FTPS"><a href="#Authentication-SFTP-vs-FTPS" class="headerlink" title="Authentication: SFTP vs. FTPS"></a>Authentication: SFTP vs. FTPS</h2><ul>
<li>With SFTP (FTP over SSH), a connection can be authenticated using a couple different techniques.  For basic authentication, you (or your trading partner) may just require a user id and password to connect to the SFTP server. Its important to note that any user ids and passwords supplied over the SFTP connection will be encrypted, which is a big advantage over standard FTP.</li>
<li>SSH keys can also be used to authenticate SFTP connections in addition to, or instead of, passwords. With key-based authentication, you will first need to generate a SSH private key and public key beforehand. If you need to connect to a trading partner’s SFTP server, you would send your SSH public key to them, which they will load onto their server and associate with your account. When you connect to their SFTP server, your client software will transmit your public key to the server for authentication. If the keys match, along with any user/password supplied, then the authentication will succeed.</li>
<li>With FTPS (FTP over SSL), a connection is authenticated using a user id, password and certificate(s).  Like SFTP, the users and passwords for FTPS connections will also be encrypted. When connecting to a trading partner’s FTPS server, your FTPS client will first check if the server’s certificate is trusted. The certificate is considered trusted if either the certificate was signed off by a known certificate authority (CA), like Verisign, or if the certificate was self-signed (by your partner) and you have a copy of their public certificate in your trusted key store.</li>
<li>Your partner may also require that you supply a certificate when you connect to them.  Your certificate may be signed off by a 3rd party CA or your partner may allow you to just self-sign your certificate, as long as you send them the public portion of your certificate beforehand (which they will load in their trusted key store).</li>
</ul>
<h2 id="Implementation-SFTP-vs-FTPS"><a href="#Implementation-SFTP-vs-FTPS" class="headerlink" title="Implementation: SFTP vs. FTPS"></a>Implementation: SFTP vs. FTPS</h2><ul>
<li>In regards to how easy each of the secure FTP protocols are to implement, SFTP is the clear winner since it is very firewall friendly. SFTP only needs a single port number (default of 22) to be opened through the firewall.  This port will be used for all SFTP communications, including the initial authentication, any commands issued, as well as any data transferred.</li>
<li>On the other hand, FTPS can be very difficult to patch through a tightly secured firewall since FTPS uses multiple port numbers. The initial port number (default of 21) is used for authentication and passing any commands.  However, every time a file transfer request (get, put) or directory listing request is made, another port number needs to be opened.  You and your trading partners will therefore have to open a range of ports in your firewalls to allow for FTPS connections, which can be a security risk for your network.</li>
</ul>
<p>In summary, SFTP and FTPS are both very secure with strong authentication options.  However since SFTP is much easier to port through firewalls, and we are seeing an increasing percentage of trading partners adopting SFTP, we believe SFTP is the clear winner for your secure FTP needs.</p>
<h1 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h1><ul>
<li>There are several ways to use SSH; one is to use automatically generated public-private key pairs to simply encrypt a network connection, and then use password authentication to log on.</li>
<li>Another is to use a manually generated public-private key pair to perform the authentication, allowing users or programs to log in without having to specify a password. In this scenario, anyone can produce a matching pair of different keys (public and private). The public key is placed on all computers that must allow access to the owner of the matching private key (the owner keeps the private key secret). While authentication is based on the private key, the key itself is never transferred through the network during authentication. SSH only verifies whether the same person offering the public key also owns the matching private key. In all versions of SSH it is important to verify unknown public keys, i.e. associate the public keys with identities, before accepting them as valid. Accepting an attacker’s public key without validation will authorize an unauthorized attacker as a valid user.</li>
</ul>
<h2 id="Key-management"><a href="#Key-management" class="headerlink" title="Key management"></a>Key management</h2><ul>
<li>On Unix-like systems, the list of authorized public keys is typically stored in the home directory of the user that is allowed to log in remotely, in the file ~/.ssh/authorized_keys.</li>
</ul>
<h3 id="WinFTP"><a href="#WinFTP" class="headerlink" title="WinFTP"></a>WinFTP</h3><ul>
<li>cryptographic protocol is SSH-2</li>
<li>SSH implementation is OpenSSH_5.3</li>
<li>Server fingerprint: File transfer protocol = SFTP-3<br>Cryptographic protocol = SSH-2<br>SSH implementation = OpenSSH_5.3<br>Encryption algorithm = aes<br>Compression = No</li>
</ul>
<hr>
<p>Server host key fingerprint</p>
<h2 id="ssh-rsa-2048-86-54-d9-09-25-c0-9b-f8-17-8c-c0-52-13-0c-9c-cc"><a href="#ssh-rsa-2048-86-54-d9-09-25-c0-9b-f8-17-8c-c0-52-13-0c-9c-cc" class="headerlink" title="ssh-rsa 2048 86:54:d9:09:25:c0:9b:f8:17:8c:c0:52:13:0c:9c:cc"></a>ssh-rsa 2048 86:54:d9:09:25:c0:9b:f8:17:8c:c0:52:13:0c:9c:cc</h2><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://www.goanywhere.com/blog/2011/10/20/sftp-ftps-secure-ftp-transfers" target="_blank" rel="noopener">https://www.goanywhere.com/blog/2011/10/20/sftp-ftps-secure-ftp-transfers</a></li>
<li><a href="https://en.wikipedia.org/wiki/Secure_Shell" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Secure_Shell</a></li>
</ul>
]]></content>
      <tags>
        <tag>SFTP</tag>
      </tags>
  </entry>
  <entry>
    <title>A Facial Recognition utility in a dozen of LOC</title>
    <url>/2017-04-28-Facial-Recognition_en/</url>
    <content><![CDATA[<h1 id="A-Facial-Recognition-utility-in-a-dozen-of-python-LOC-Lines-Of-Code"><a href="#A-Facial-Recognition-utility-in-a-dozen-of-python-LOC-Lines-Of-Code" class="headerlink" title="A Facial Recognition utility in a dozen of python LOC (Lines Of Code)"></a>A Facial Recognition utility in a dozen of python LOC (Lines Of Code)</h1><h2 id="CV-Computer-Vision"><a href="#CV-Computer-Vision" class="headerlink" title="CV (Computer Vision)"></a>CV (Computer Vision)</h2><p>I have been soak myself in open sourced libraries, such as OpenCV. I gradually came to discern concepts such as <em>Machine Learning</em> , <em>Deep Learning</em> are not academic standing water. As a matter of fact, those elusive topics and certain pragmatic use cases could coalesce in a amount of interesting products. For instance, in past couple of months, there were a hype of <em>guess-ages-by-photo</em>, below screenshot depicts such.</p>
<p><img src="http://cloudsdocker.github.io/images/facial_howold.jpg" alt></p>
<p>What a seductive one! Initially been attracted by such funky features, after second thoughts, I found at the heart of it is two cohesive parts, the first one is how to locate <em>human faces</em> from background and whole picture, consequently to have a ballpark <em>age</em> guess for the recognized the faces. You may guess how difficult to codify a program to implement the 1st feature. Actually no need chunks of code, at here purely a dozen of lines of code are necessitated (actually only 10 lines of code, excluding space line and comments). I’d like to piggyback on such tiny utility to elaborate advanced topics of Computer Visions.</p>
<h3 id="Faces-recognition"><a href="#Faces-recognition" class="headerlink" title="Faces recognition"></a>Faces recognition</h3><p>Actually <em>face recognition</em> is not new to us, this feature prevailing in so-called <em>auto focus</em> in DC (Digital Camera) and many main stream smart phone built-in cameras. Just like below photo. You can get a sense of how <em>commonplace</em> of face recognition , which is becoming a widely used technology around us.</p>
<p><img src="http://cloudsdocker.github.io/images/iPhone-camera-face-recognition.jpg" alt></p>
<p>Theoretically speaking, face recognition is also called <em>face detection</em>, it’s a type of technology/program to electronically identify human frontal faces in digital images, such as photos, camera or surveillance. Further more, face detection is kind of objects detection in computer vision area. Which will locate object (e.g. human face) and get the size.</p>
<h2 id="My-‘10-LOC-program’"><a href="#My-‘10-LOC-program’" class="headerlink" title="My ‘10 LOC program’"></a>My ‘10 LOC program’</h2><p>First of all, let’s have some visual and concrete feeling of this program, below screenshot is the source code.</p>
<p><img src="http://cloudsdocker.github.io/images/facial_code_preview.png" alt></p>
<p>The whole program source code can be found at  <a href="https://github.com/CloudsDocker/pyFacialRecognition" target="_blank" rel="noopener">this github repository</a> <a href="https://github.com/CloudsDocker/pyFacialRecognition" target="_blank" rel="noopener">https://github.com/CloudsDocker/pyFacialRecognition</a> . Please feel free to <em>fork</em> , check it out and have a try. I’ll walk through this program one line by one line at this blog.</p>
<p>“You serious? This is all the problem, just aforementioned 10 lines?” Let’s first take a look at the actual run output.</p>
<h3 id="Here-is-the-origional-image"><a href="#Here-is-the-origional-image" class="headerlink" title="Here is the origional image"></a>Here is the origional image</h3><p><img src="http://cloudsdocker.github.io/images/facial_oriImage.jpg" alt></p>
<h3 id="Below-is-the-result-of-execution-of-this-tiny-utility"><a href="#Below-is-the-result-of-execution-of-this-tiny-utility" class="headerlink" title="Below is the result of execution of this tiny utility"></a>Below is the result of execution of this tiny utility</h3><p>Please be advised the red rectangle around faces.<br><img src="http://cloudsdocker.github.io/images/facial_postProcessImage_en.png" alt></p>
<h2 id="Souce-Code"><a href="#Souce-Code" class="headerlink" title="Souce Code"></a>Souce Code</h2><h3 id="Prerequite"><a href="#Prerequite" class="headerlink" title="Prerequite"></a>Prerequite</h3><p>First of first, as you know, this program is composed by <strong>python</strong>,therefore, make sure you work station or laptop equiped with python, vesrion is irrelavant for this program.</p>
<p>In addition, this utility is built upon <a href="http://opencv.org/downloads.html" target="_blank" rel="noopener">OpenCV</a> (<a href="http://opencv.org/downloads.html" target="_blank" rel="noopener">http://opencv.org/downloads.html</a>), therefore please install this component as well. Just as its name suggested, it is an open source framework focus on computer vision related deep learning, surfaced decades ago. This is one Intel lab built by Rusian, which is a very active community.</p>
<p>Particulary, if you are Mac users, it’s recommended to use <em>brew</em> to setup OpenCV. Below is sample commands(The 1st line of following command may raise some errors, in that case please contact me via the link at the rear of this blog):</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">brew tap homebrew/science</span><br><span class="line">brew install opencv</span><br></pre></td></tr></table></figure>

<p>Upon completion of preceding scripts, you can execute following scripts to verify whether it’s installed success or not, e.g. it means all fine if no exception/errors raised</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import cv2</span><br></pre></td></tr></table></figure>

<h3 id="Souce-Code-Dissection"><a href="#Souce-Code-Dissection" class="headerlink" title="Souce Code Dissection"></a>Souce Code Dissection</h3><p>Let’s dissect file <strong>recognizeFace_loose_en.py</strong> as one example</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2,sys</span><br></pre></td></tr></table></figure>

<ul>
<li>To import library of OpenCV and python built-in system library, which is used to parse input arguments.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">inputImageFile=sys.argv[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li>To read the <strong>1st</strong> argument, which to be the file name of the image to be parsed, e.g. <em>test.jpg</em></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">faceClassifier=cv2.CascadeClassifier(<span class="string">'haarcascade_frontalface_default.xml'</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>To load HAAR Casscade Classifier, the human face recognition cascade categorizer which shipped with OpenCV. Which will do the <em>actual</em> computation, logic to recognize and size human faces from any given images.</li>
</ul>
<h3 id="Expansion-of-computer-vision-knowledge"><a href="#Expansion-of-computer-vision-knowledge" class="headerlink" title="Expansion of computer vision knowledge"></a>Expansion of computer vision knowledge</h3><p>We stop here not reading further code, avoiding perplex you, I’ll walk through certain CV topics pertaining to this blog. As for more deep concepts, please feel free to contact me or goole by yourself.</p>
<h4 id="Classifier"><a href="#Classifier" class="headerlink" title="Classifier"></a>Classifier</h4><p>In arena of computer vision and machine learning, a variaty of classifiers been and being built, to assemle special <em>domain</em> knowledge to recognize corresponding objects. For example, there are particular <strong>classifier</strong> to recognize cars, there are <em>plane</em> classifier, and classifiers to recognize smile, eyes, etc. For our case, we need a specific classifier help us to detect and locate human faces.</p>
<h4 id="Conceps-of-objects-recognize"><a href="#Conceps-of-objects-recognize" class="headerlink" title="Conceps of objects recognize"></a>Conceps of objects recognize</h4><p>Generally speaking，, to recognize one object (such as human faces) means finding and identifying objects in an image or video sequence. However, it’s neccessitate tons of sample/specimen to <strong>train</strong> machine to learn, for instance, it’s likely thousands of hundreds of digital images/video will be prepared as learning material, while all of specimen should be categorized to two mutax type,  <em>positive</em> or <em>negative</em>. e.g. phots containss <em>human face</em> and ones <strong>without</strong> <em>human face</em>. When machine read one photo, it was told this is either a positive one or negative one, then machine could gradually analysys and induce some <strong>common facets</strong> and persist to files for future usages, e.g. when given a new photo, the machine can <strong>classify</strong> it whether it’s a positive or negative. That’s why it’s called <strong><em>classifier</em></strong>.</p>
<h4 id="Cascade"><a href="#Cascade" class="headerlink" title="Cascade"></a>Cascade</h4><p>Your feeling is right, just as it’s name suggrested, cascade implies propagating something. In this case, it’s specifically means <strong>Cascade classifier</strong>. Intuitively the next question is <em>why</em> cascade is required? Let me try to articulate the underlying logic, as you know, at the heart of digital images, which is the raw material of computer vision, are pixel。For one CV process, it need to scan each pixel per pixel, while in contemporary world, size of image tend to incresing more than we expected, e.g. normall one photo taken by smart phone tend to contains millions of pixels. At the meanwhile, to fine tune and get a more accuate result of one object recognition, it tend to lots of <em>classifiers</em> to work from different point of views of the underlying photo. Therefore these two factors interwhirled together, the final number would be astronomical. Therefore, one innovative solution is <em>cascade</em>, in a nutshell, all classifiers will be splited to multiple layers, one photo will be examined by classifiers on 1st layer at the very begining, if failed, the whole CV can retain <strong><em>negative</em></strong> immediately, with fewest efforts and time cost, while majority of other classifiers won’t be executed in actual. This should significantely accelerate the whole process of CV. This is similar to <strong><em>FF(Fail Fast)</em></strong> in other areas,severed for sake of running efficiency.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">objImage=cv2.imread(inputImageFile)</span><br></pre></td></tr></table></figure>

<ul>
<li>To create one OpenCV image object by loading the input digital file via OpenCV</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cvtImage=cv2.cvtColor(objImage,cv2.COLOR_BGR2GRAY)</span><br></pre></td></tr></table></figure>

<ul>
<li>Firstly, convert the digital colorful image to grayscale one, which easy the task to scan and analyse the image. Actually this is quite common in image analys area. e.g. this could eliminate those <em>noisy</em> pixel from the picture.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">foundFaces=faceClassifier.detectMultiScale(cvtImage,scaleFactor=<span class="number">1.3</span>,minNeighbors=<span class="number">9</span>,minSize=(<span class="number">50</span>,<span class="number">50</span>),flags = cv2.cv.CV_HAAR_SCALE_IMAGE)</span><br></pre></td></tr></table></figure>

<ul>
<li>Call method <strong>detectMultiScale</strong> to recongnize object, i.e. human face in this case. The parameters overview as below:<ul>
<li>scaleFactor: For a photo, particualy from selpie, some faces are shows bigger than rest of others, due to the distance between each faces and lens. Therefore this parameter is used to config the factor, please be advised this <em>double</em> should greater than 1.0</li>
<li>minNeighbors: Because it need to gradually scan the photo by a certain <em>window</em>, i.e. a rectangle. So this parameter is telling how many other object in the vacinity to be detected, before making final decision that it’s positive or negative.</li>
<li>minSize：For aforementioend <em>window</em>, this parameter is setting the size of this rectangle.</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">" Found &#123;&#125; human faces in this image"</span>.format(len(foundFaces)))</span><br></pre></td></tr></table></figure>

<ul>
<li>To print how many faces detected, be reminded returned value is a list, each item is the actual position of every faces. Therefore, using  <em>len</em>  to print total number of ojects found.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (x,y,w,h) <span class="keyword">in</span> foundFaces:</span><br><span class="line">    cv2.rectangle(objImage,(x,y),(x+w,y+h),(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>),<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>Traverese all faces detected, please be noted returning object is consist of 4 parts, i.e. the horizontal and vertial position, width and height.</li>
<li>Consequently to draw a rectangle by an off-the-shelf method from <em>OpenCV</em>. Be advised <em>(0,0,255)</em> represents color of the rectangel. It use R/G/B mode, e.g. black is (0,0,0)，white is (255,255,255)，etc. Well versed web programmer should be familiar with it.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cv2.imshow(<span class="string">'Detected human faces highlighted. Press any key to exit. '</span>, objImage)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>To display this image via <em>opencv</em> provided method imshow, together with the rectangles we draw previously</li>
<li>The last one is one user hint, remind you can quit the applicaiton by press any key on the image display window</li>
</ul>
<h1 id="In-summary"><a href="#In-summary" class="headerlink" title="In summary"></a>In summary</h1><p>We’ve skimmed source codes and pertaining knowledge. This is just scratched the surface of this framework, hope this can open the door to more advanced topics and insights, such as hack of CAPTCHA, newly open sourced project form Yahoo, <a href="https://github.com/yahoo/open_nsfw" target="_blank" rel="noopener">NSFW</a>, Not Suitable for Work (NSFW)，to detect images with pornagraphy, etc.</p>
<p>Finally，please be reminded all related source are open sourced at github repository <a href="https://github.com/CloudsDocker/pyFacialRecognition" target="_blank" rel="noopener">https://github.com/CloudsDocker/pyFacialRecognition</a> ，please fork and sync to your local disk, check it out and paly it.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/CloudsDocker/pyFacialRecognition.git</span><br><span class="line"><span class="built_in">cd</span> pyFacialRecognition</span><br><span class="line">./run.sh</span><br></pre></td></tr></table></figure>

<p>You can access <a href="http://cloudsdocker.github.io/2016/12/11/2016-11-22-Facial-Recognition_en/" target="_blank" rel="noopener">my blog</a>. Any comments/suggestions, feel free to contact me.</p>
<h2 id="Contact-me："><a href="#Contact-me：" class="headerlink" title="Contact me："></a>Contact me：</h2><ul>
<li><a href="mailto:phray.zhang@gmail.com" target="_blank" rel="noopener">phray.zhang@gmail.com</a> (email，whatsapp, linkedin)</li>
<li>helloworld_2000 (wechat)</li>
<li>weibo: cloudsdocker</li>
<li><a href="https://github.com/CloudsDocker/" target="_blank" rel="noopener">github</a></li>
<li><a href="http://www.jianshu.com/users/a9e7b971aafc" target="_blank" rel="noopener">jianshu</a></li>
<li>wechat：vibex</li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.mathworks.com/discovery/object-recognition.html" target="_blank" rel="noopener">Object recognition</a></li>
<li><a href="http://docs.opencv.org/trunk/index.html" target="_blank" rel="noopener">OpenCV</a></li>
<li><a href="https://en.wikipedia.org/wiki/Haar-like_features" target="_blank" rel="noopener">HAAR features</a></li>
<li><a href="http://docs.opencv.org/trunk/d7/d8b/tutorial_py_face_detection.html" target="_blank" rel="noopener">Face Detection using Haar Cascades</a></li>
<li><a href="https://github.com/yahoo/open_nsfw" target="_blank" rel="noopener">NSFW</a></li>
</ul>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>MyBlog</tag>
        <tag>DeepLearning</tag>
        <tag>FacialRecognition</tag>
        <tag>MachineLearning</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK source</title>
    <url>/2017-06-24-JDK-sources/</url>
    <content><![CDATA[<h1 id="interface-RandomAccess"><a href="#interface-RandomAccess" class="headerlink" title="interface RandomAccess"></a>interface RandomAccess</h1><p>Marker interface used by List implementations to indicate that they support fast (generally constant time) random access. The primary purpose of this interface is to allow generic algorithms to alter their behavior to provide good performance when applied to either random or sequential access lists.</p>
<p> Such a List implementation should generally implement this interface. As a rule of thumb, a List implementation should implement this interface if, for typical instances of the class, this loop:</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>, n=list.size(); i &lt; n; i++)</span><br><span class="line">           list.get(i);</span><br><span class="line">   </span><br><span class="line"><span class="comment">// runs faster than this loop:</span></span><br><span class="line">       <span class="keyword">for</span> (Iterator i=list.iterator(); i.hasNext(); )</span><br><span class="line">           i.next();</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>google analysis</title>
    <url>/2017-09-04-Google-Analytics/</url>
    <content><![CDATA[<h1 id="How-Page-Value-is-calculated"><a href="#How-Page-Value-is-calculated" class="headerlink" title="How Page Value is calculated"></a>How Page Value is calculated</h1><h2 id="At-a-glance"><a href="#At-a-glance" class="headerlink" title="At a glance"></a>At a glance</h2><p>Page Value is the average value for a page that a user visited before landing on the goal page or completing an Ecommerce transaction (or both). This value is intended to give you an idea of which page in your site contributed more to your site’s revenue. If the page wasn’t involved in an ecommerce transaction for your website in any way, then the Page Value for that page will be $0 since the page was never visited in a session where a transaction occurred.</p>
<p>Below is the equation you can follow to calculate Page Value. Please note that the unique pageview statistic represents the number of individual users who have loaded a given page per session. Each user is counted only once per session, no matter how many pages are opened by the same user.</p>
<p>Ecommerce Revenue + Total Goal Value<br>Number of Unique Pageviews for Given Page</p>
<h2 id="In-depth"><a href="#In-depth" class="headerlink" title="In depth"></a>In depth</h2><p>The first example above illustrates how Page Value works. Let’s say you want to know the Page Value for Page B, and you know the following factors:</p>
<p>Goal page D: $10 (Remember, you assign the value of the Goal page when you first create a goal in the Analytics Settings page)<br>Receipt Page E: $100 (This page is where the user makes an ecommerce transaction of $100)<br>Unique pageview for Page B: One</p>
<p>You would then set up your Page Value equation like this:</p>
<p>Ecommerce Revenue ($100) + Total Goal Value ($10)<br>Number of Unique Pageviews for Page B (1)</p>
<p>Page Value for Page B is $110 since a user visits Page B only once before the goal page during this session.</p>
<p>Now let’s explore how Page Value for Page B is affected when we combine the data from two different sessions. You can see that Page B is viewed only once during Session 1, but during Session 2 it gets two pageviews (we’re assuming the two pageviews are from the same user). The total Ecommerce revenue stays the same during both sessions. Although there were two unique pageviews, there was still only one Ecommerce transaction total for both sessions.</p>
<p>Goal page D: $10<br>Receipt Page E: $100<br>Unique pageview for Page B: Two</p>
<p>Your Page Value calculation should be adjusted to look like this:</p>
<p>Ecommerce Revenue ($100) + Total Goal Value ($10 x 2 sessions)<br>Number of Unique Pageviews for Page B (2)</p>
<p>Page Value for Page B across two sessions is then $60, or $120 divided by two sessions.</p>
<h1 id="Code-snippet-about-setting-up-GA-in-your-site"><a href="#Code-snippet-about-setting-up-GA-in-your-site" class="headerlink" title="Code snippet about setting up GA in your site"></a>Code snippet about setting up GA in your site</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.ga=<span class="built_in">window</span>.ga||<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;(ga.q=ga.q||[]).push(<span class="built_in">arguments</span>)&#125;;ga.l=+<span class="keyword">new</span> <span class="built_in">Date</span>;</span></span><br><span class="line"><span class="javascript">                ga(<span class="string">'create'</span>, <span class="string">'UA-xxxx-1'</span>, <span class="string">'auto'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> hostName = <span class="built_in">window</span>.location.host;</span></span><br><span class="line"><span class="javascript">                                <span class="keyword">var</span> ga_script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span></span><br><span class="line"><span class="javascript">                                        ga_script.setAttribute(<span class="string">'async'</span>,<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">                                                <span class="keyword">if</span> ([<span class="string">'localhost:9000'</span>,<span class="string">'test'</span>,<span class="string">'uat'</span>].some(<span class="function"><span class="keyword">function</span>(<span class="params">hostItem</span>)</span>&#123;<span class="keyword">return</span> hostName.indexOf(hostItem)&gt;<span class="number">-1</span>&#125;)) &#123;</span></span><br><span class="line"><span class="javascript">                                                                <span class="comment">// non-production</span></span></span><br><span class="line"><span class="javascript">                                                                            ga_script.setAttribute(<span class="string">'src'</span>,<span class="string">'https://www.google-analytics.com/analytics_debug.js'</span>);</span></span><br><span class="line"><span class="javascript">                                                                                        <span class="built_in">window</span>.ga_debug = &#123;<span class="attr">trace</span>: <span class="literal">true</span>&#125;;</span></span><br><span class="line"><span class="javascript">                                                                                                &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                                                                                                                ga_script.setAttribute(<span class="string">'src'</span>,<span class="string">'https://www.google-analytics.com/analytics.js'</span>);</span></span><br><span class="line">                                                                                                                        &#125;</span><br><span class="line"><span class="javascript">                                                                                                                                <span class="built_in">document</span>.head.appendChild(ga_script);</span></span><br><span class="line"><span class="javascript">                                                                                                                                        ga(<span class="string">'send'</span>, <span class="string">'pageview'</span>);</span></span><br><span class="line">                                                                                                                                            <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<pre><code><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$rootScope.$on(<span class="string">'$stateChangeSuccess'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    $<span class="built_in">window</span>.ga(<span class="string">'send'</span>, <span class="string">'pageview'</span>, $location.path());</span><br><span class="line">                                    $<span class="built_in">window</span>.scrollTo(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                                                &#125;);</span><br></pre></td></tr></table></figure>

Alternative async tracking snippet
While the JavaScript tracking snippet described above ensures the script will be loaded and executed asynchronously on all browsers, it has the disadvantage of not allowing modern browsers to preload the script.
The alternative async tracking snippet below adds support for preloading, which will provide a small performance boost on modern browsers, but can degrade to synchronous loading and execution on IE 9 and older mobile browsers that do not recognize the async script attribute. Only use this tracking snippet if your visitors primarily use modern
browsers to access your site.

&lt;!-- Google Analytics --&gt;
&lt;script&gt;
window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;
ga(&apos;create&apos;, &apos;UA-XXXXX-Y&apos;, &apos;auto&apos;);
ga(&apos;send&apos;, &apos;pageview&apos;);
&lt;/script&gt;
&lt;script async src=&apos;https://www.google-analytics.com/analytics.js&apos;&gt;&lt;/script&gt;
&lt;!-- End Google Analytics --&gt;

From &lt;https://developers.google.com/analytics/devguides/collection/analyticsjs/&gt; 
What data does the tracking snippet capture?
When you add either of these tracking snippets to your website, you send a pageview for each page your users visit. Google Analytics processes this data and can infer a great deal of information including:
• The total time a user spends on your site.
• The time a user spends on each page and in what order those pages were visited.
• What internal links were clicked (based on the URL of the next pageview).
In addition, the IP address, user agent string, and initial page inspection analytics.js does when creating a new tracker is used to determine things like the following:
• The geographic location of the user.
• What browser and operating system are being used.
• Screen size and whether Flash or Java is installed.
• The referring site.

From &lt;https://developers.google.com/analytics/devguides/collection/analyticsjs/#alternative_async_tracking_snippet&gt; 


How analytics.js Works

From &lt;https://developers.google.com/analytics/devguides/collection/analyticsjs/how-analyticsjs-works&gt; 

The ga command queue
The JavaScript tracking snippet defines a global ga function known as the &quot;command queue&quot;. It&apos;s called the command queue because rather than executing the commands it receives immediately, it adds them to a queue that delays execution until the analytics.js library is fully loaded.
In JavaScript, functions are also objects, which means they can contain properties. The tracking snippet defines a q property on the ga function object as an empty array. Prior to the analytics.js library being loaded, calling the ga() function appends the list of arguments passed to the ga()function to the end of the q array.
For example, if you were to run the tracking snippet and then immediately log the contents of ga.qto the console, you&apos;d see an array, two items in length, containing the two sets of arguments already passed to the ga() function:

console.log(ga.q);

// Outputs the following:
// [
//   [&apos;create&apos;, &apos;UA-XXXXX-Y&apos;, &apos;auto&apos;],
//   [&apos;send&apos;, &apos;pageview&apos;]
// ]
Once the analytics.js library is loaded, it inspects the contents of the ga.q array and executes each command in order. After that, the ga() function is redefined, so all subsequent calls execute immediately.
This pattern allows developers to use the ga() command queue without having to worry about whether or not the analytics.js library has finished loading. It provides a simple, synchronous-looking interface that abstracts away most of the complexities of asynchronous code.

From &lt;https://developers.google.com/analytics/devguides/collection/analyticsjs/how-analyticsjs-works&gt; 

Adding commands to the queue
All calls to the ga() command queue share a common signature. The first parameter, the &quot;command&quot;, is a string that identifies a particular analytics.js method. Any additional parameters are the arguments that get passed to that method.
The method a particular command refers to can be a global method, like create, a method on the ga object, or it can be an instance method on a tracker object, like send. If the ga() command queue receives a command it doesn&apos;t recognize, it simply ignores it, making calls to the ga()function very safe, as they will almost never result in an error.
For a comprehensive list of all commands that can be executed via the command queue, see the ga() command queue reference.

From &lt;https://developers.google.com/analytics/devguides/collection/analyticsjs/how-analyticsjs-works&gt; 

Command parameters
Most analytics.js commands (and their corresponding methods) accept parameters in a number of different formats. This is done as a convenience to make it easier to pass commonly used fields to certain methods.
As an example, consider the two commands in the JavaScript tracking snippet:

ga(&apos;create&apos;, &apos;UA-XXXXX-Y&apos;, &apos;auto&apos;);
ga(&apos;send&apos;, &apos;pageview&apos;);
In the first command, create accepts the fields trackingId, cookieDomain, and name to optionally be specified as the second, third, and fourth parameters, respectively. The sendcommand accepts an optional hitType second parameter.
All commands accept a final fieldsObject parameter that can be used to specify any fields as well. For example, the above two commands in the tracking snippet could be rewritten as:

ga(&apos;create&apos;, {
      trackingId: &apos;UA-XXXXX-Y&apos;,
        cookieDomain: &apos;auto&apos;
});
ga(&apos;send&apos;, {
      hitType: &apos;pageview&apos;
});
See the ga() command queue reference for a comprehensive list of the optional parameters allowed for each of the commands.

From &lt;https://developers.google.com/analytics/devguides/collection/analyticsjs/how-analyticsjs-works&gt; 


Creating Trackers
• Contents
• The create method
• Naming trackers
• Specifying fields at creation time
• Working with multiple trackers
• Running commands for a specific tracker
• Next steps
Tracker objects (also known as &quot;trackers&quot;) are objects that can collect and store data and then send that data to Google Analytics.
When creating a new tracker, you must specify a tracking ID (which is the same as the property ID that corresponds to one of your Google Analytics properties) as well as a cookie domain, which specifies how cookies are stored. (The recommended value &apos;auto&apos; specifies automatic cookie domain configuration.)
If a cookie does not exist for the specified domain, a client ID is generated and stored in the cookie, and the user is identified as new. If a cookie exists containing a client ID value, that client ID is set on the tracker, and the user is identified as returning.
Upon creation, tracker objects also gather information about the current browsing context such as the page title and URL, and information about the device such as screen resolution, viewport size, and document encoding. When it&apos;s time to send data to Google Analytics, all of the information currently stored on the tracker gets sent.

From &lt;https://developers.google.com/analytics/devguides/collection/analyticsjs/creating-trackers&gt; 

Running commands for a specific tracker
To run analytics.js commands for a specific tracker, you prefix the command name with the tracker name, followed by a dot. When you don&apos;t specify a tracker name, the command is run on the default tracker.
To send pageviews for the above two trackers, you&apos;d run the following two commands:

ga(&apos;send&apos;, &apos;pageview&apos;);
ga(&apos;clientTracker.send&apos;, &apos;pageview&apos;);
Future guides will go into more detail on the syntax for running specific commands. You can also refer to the command queue reference to see the full command syntax for all analytics.js commands.

From &lt;https://developers.google.com/analytics/devguides/collection/analyticsjs/creating-trackers&gt; 

Getting trackers via ga Object methods
If you&apos;re not using a default tracker, or if you have more than one tracker on the page, you can access those trackers via one of the ga object methods.
Once the analytics.js library is fully loaded, it adds additional methods to the ga object itself. Two of those methods, getByName and getAll, are used to access tracker objects.
Note: ga object methods are only available when analytics.js has fully loaded, so you should only reference them inside a ready callback.
getByName
If you know the name of the tracker you want to access, you can do so using the getByNamemethod:

ga(&apos;create&apos;, &apos;UA-XXXXX-Y&apos;, &apos;auto&apos;, &apos;myTracker&apos;);

ga(function() {
      // Logs the &quot;myTracker&quot; tracker object to the console.
        console.log(ga.getByName(&apos;myTracker&apos;));
});

From &lt;https://developers.google.com/analytics/devguides/collection/analyticsjs/accessing-trackers&gt; 

The last line of the JavaScript tracking snippet adds a send command to the ga() command queue to send a pageview to Google Analytics:

ga(&apos;create&apos;, &apos;UA-XXXXX-Y&apos;, &apos;auto&apos;);
ga(&apos;send&apos;, &apos;pageview&apos;);
The object that is doing the sending is the tracker that was scheduled for creation in the previous line of code, and the data that gets sent is the data stored on that tracker.
This guide describes the various ways to send data to Google Analytics and explains how to control what data gets sent.

From &lt;https://developers.google.com/analytics/devguides/collection/analyticsjs/sending-hits&gt; 

Hits, hit types, and the Measurement Protocol
When a tracker sends data to Google Analytics it&apos;s called sending a hit, and every hit must have a hit type. The JavaScript tracking snippet sends a hit of type pageview; other hit types include screenview, event, transaction, item, social, exception, and timing. This guide outlines the concepts and methods common to all hit types. Individual guides
for each hit type can be found under the section Tracking common user interactions in the left-side navigation.
    The hit is an HTTP request, consisting of field and value pairs encoded as a query string, and sent to the Measurement Protocol.

    From &lt;https://developers.google.com/analytics/devguides/collection/analyticsjs/sending-hits&gt; 

    The simplest way to use the send command, that works for all hit types, is to pass all fields using the fieldsObjectparameter. For example:

    ga(&apos;send&apos;, {
          hitType: &apos;event&apos;,
            eventCategory: &apos;Video&apos;,
              eventAction: &apos;play&apos;,
                eventLabel: &apos;cats.mp4&apos;
    });
    For convenience, certain hit types allow commonly used fields to be passed directly as arguments to the sendcommand. For example, the above send command for the &quot;event&quot; hit type could be rewritten as:

    ga(&apos;send&apos;, &apos;event&apos;, &apos;Video&apos;, &apos;play&apos;, &apos;cats.mp4&apos;);
    For a complete list of what fields can be passed as arguments for the various hit types, see the &quot;parameters&quot; section of the send method reference.


    From &lt;https://developers.google.com/analytics/devguides/collection/analyticsjs/sending-hits&gt; </code></pre>]]></content>
  </entry>
  <entry>
    <title>TypeScript noteworthy notes</title>
    <url>/2017-11-27-TypeScript/</url>
    <content><![CDATA[<h1 id="Async-Await-keywords"><a href="#Async-Await-keywords" class="headerlink" title="Async Await keywords"></a>Async Await keywords</h1><p>Async Await Support in TypeScript<br>Async - Await has been supported by TypeScript since version 1.7. Asynchronous functions are prefixed with the async keyword; await suspends the execution until an asynchronous function return promise is fulfilled and unwraps the value from the Promise returned. It was only supported for target es6 transpiling directly to ES6 generators.</p>
<h1 id="Troubleshotting"><a href="#Troubleshotting" class="headerlink" title="Troubleshotting"></a>Troubleshotting</h1><h2 id="Unexpected-token-…"><a href="#Unexpected-token-…" class="headerlink" title="Unexpected token …"></a>Unexpected token …</h2><p>That’s because your node version is lower (e.g. node v4.x), which don’t support spread operator. You’d firstly check your node version </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>

<p>If above result say node is v4.x, then you should run following commands to upgrade your node. Normally you can leverage Node Package Manager <code>n</code> as below:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo npm install -g n</span><br><span class="line">sudo n stable</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>Openshift tips</title>
    <url>/2017-11-29-OpenShift/</url>
    <content><![CDATA[<h1 id="Commands-bible"><a href="#Commands-bible" class="headerlink" title="Commands bible"></a>Commands bible</h1><h2 id="install-cli-in-Mac"><a href="#install-cli-in-Mac" class="headerlink" title="install cli in Mac"></a>install cli in Mac</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">brew install openshift-cli</span><br></pre></td></tr></table></figure>

<h2 id="Frequently-used-commands"><a href="#Frequently-used-commands" class="headerlink" title="Frequently used commands"></a>Frequently used commands</h2><h3 id="Start-mini-shift"><a href="#Start-mini-shift" class="headerlink" title="Start mini shift"></a>Start mini shift</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">minishift start</span><br></pre></td></tr></table></figure>

<h3 id="OC-commands"><a href="#OC-commands" class="headerlink" title="OC commands"></a>OC commands</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">oc config view</span><br></pre></td></tr></table></figure>

<h4 id="Start-a-new-application"><a href="#Start-a-new-application" class="headerlink" title="Start a new application"></a>Start a new application</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">oc new-app https://github.com/openshift/nodejs-ex -l name=toddapp</span><br></pre></td></tr></table></figure>

<h4 id="To-switch-project"><a href="#To-switch-project" class="headerlink" title="To switch project"></a>To switch project</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">oc project</span><br></pre></td></tr></table></figure>

<h4 id="Show-a-high-level-overview-of-the-current-project"><a href="#Show-a-high-level-overview-of-the-current-project" class="headerlink" title="Show a high level overview of the current project"></a>Show a high level overview of the current project</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">oc status</span><br><span class="line"><span class="comment"># Export the overview of the current project in an svg file.</span></span><br><span class="line">  oc status -o dot | dot -T svg -o project.svg</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># See an overview of the current project including details for any identified issues.</span></span><br><span class="line">  oc status -v</span><br></pre></td></tr></table></figure>

<p>This command will show services, deployment configs, build configurations, and active deployments.<br>If you have any misconfigured components information about them will be shown. For more information<br>about individual items, use the describe command (e.g. oc describe buildConfig, oc describe<br>deploymentConfig, oc describe service). </p>
<p>You can specify an output format of “-o dot” to have this command output the generated status graph<br>in DOT format that is suitable for use by the “dot” command.</p>
<h2 id="OpenShift-command-line-tool"><a href="#OpenShift-command-line-tool" class="headerlink" title="OpenShift command-line tool"></a>OpenShift command-line tool</h2><p>The OpenShift command-line tool oc is the primary way most users interact with OpenShift. The command-line tool talks via a REST API exposed by the OpenShift cluster. </p>
<h2 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h2><p>The most basic unit in OpenShift are pods. A pod is one or more containers guaranteed to be running on the same host. The containers within a pod share a unique IP address. They can communicate with each other via the “localhost” and also all share any volumes (persistent storage). The containers themselves are started from an image, which in our case is a Docker image.    </p>
<p>OpenShift Origin leverages the Kubernetes concept of a pod, which is one or more containers deployed together on one host, and the smallest compute unit that can be defined, deployed, and managed.</p>
<p>Pods are the rough equivalent of a machine instance (physical or virtual) to a container. Each pod is allocated its own internal IP address, therefore owning its entire port space, and containers within pods can share their local storage and networking.</p>
<p>Pods have a lifecycle; they are defined, then they are assigned to run on a node, then they run until their container(s) exit or they are removed for some other reason. Pods, depending on policy and exit code, may be removed after exiting, or may be retained in order to enable access to the logs of their containers.</p>
<p>Pods have a lifecycle; they are defined, then they are assigned to run on a node, then they run until their container(s) exit or they are removed for some other reason. Pods, depending on policy and exit code, may be removed after exiting, or may be retained in order to enable access to the logs of their containers.</p>
<p>OpenShift Origin treats pods as largely immutable; changes cannot be made to a pod definition while it is running. OpenShift Origin implements changes by terminating an existing pod and recreating it with modified configuration, base image(s), or both. Pods are also treated as expendable, and do not maintain state when recreated. Therefore pods should usually be managed by higher-level controllers, rather than directly by users.</p>
<h2 id="Scale-up"><a href="#Scale-up" class="headerlink" title="Scale up"></a>Scale up</h2><p>When scaled up, an application will have more than one copy of itself, and each copy will have its own local state. Each copy corresponds to a different instance of a pod with the pods being managed by the replication controller. As each pod has a unique IP, we need an easy way to address the set of all pods as a whole. This is where a service comes into play. The service gets its own IP and a DNS name. When making a connection to a service, OpenShift will automatically route the connection to one of the pods associated with that service.</p>
<p>caling from the Web Console<br>Scaling up the number of instances of your application running can be done from the Overview page for your application in the OpenShift web console (the page with those tell-tale up and down arrows we saw previously). Jump to that page and click the up arrow key twice to increase the replica count to 3<br>If your application is a web application that adheres to the 12-factor methodology, or what might also be called a cloud native application, then it would generally be safe to scale up.</p>
<p>Applications that can’t usually be able to be scaled up include traditional relational databases backed by persistent storage. Databases cannot be scaled in the traditional way as only the primary instance of the database should have the ability to update data. Scaling can still be performed, but usually only on read-only instances of the database.</p>
<h2 id="Kubernetes-and-Openshift"><a href="#Kubernetes-and-Openshift" class="headerlink" title="Kubernetes and Openshift"></a>Kubernetes and Openshift</h2><p>The basic concepts of Kubernetes and discuss how OpenShift builds on them. In general, you can view Kubernetes as being aimed at Ops teams, providing them with a tool for running containers at scale in production. OpenShift adds to this by also supporting the work of a Dev team and others by making the job of the Ops team easier, which helps to bridge the gap between Dev and Ops and thus enable the latest DevOps philosophy.OpenShift provides a number of different ways to interact with an OpenShift cluster. The OpenShift command-line tool oc is the primary way most users interact with OpenShift. The command-line tool talks via a REST API exposed by the OpenShift cluster.<br>If you want to avoid using the command line tool, or you want to automate your interactions with the OpenShift cluster, you can always use the REST API directly.</p>
<p>You may be wondering: “Is a namespace the same thing as an application?” OpenShift has no formal concept of an application, thereby allowing an application to be flexible depending on a user’s needs.</p>
<p>You can dedicate one to everything related to just one application. Or, so long as you label all the resources making up an application so you know what goes with what, you can also use the namespace to hold more than one.</p>
<h1 id="Secrets"><a href="#Secrets" class="headerlink" title="Secrets"></a>Secrets</h1><p>This topic discusses important properties of secrets and provides an overview on how developers can use them.</p>
<p>The Secret object type provides a mechanism to hold sensitive information such as passwords, OpenShift Origin client configuration files, dockercfg files, private source repository credentials, and so on. Secrets decouple sensitive content from the pods. You can mount secrets into containers using a volume plug-in or the system can use secrets to perform actions on behalf of a pod.</p>
<h2 id="Route"><a href="#Route" class="headerlink" title="Route"></a>Route</h2><p>Although a service has a DNS name, it is still only accessible within the OpenShift cluster and is not accessible externally. To make a service externally accessible, a route needs to be created. Creating a route automatically sets up haproxy or a hardware-based router, with an externally addressable DNS name, exposing the service and load-balancing inbound traffic across the pods.</p>
<h2 id="image"><a href="#image" class="headerlink" title="image"></a>image</h2><p>The output of the build process is an image, which is stored in an integrated Docker registry ready for distribution out to nodes when the application is deployed. The image stream is how the image and its versions are tracked by OpenShift. If you already have an existing Docker image on an external registry such as Docker Hub, it can also be referenced by an image stream instead of building it locally.</p>
<p>use the handy online cheat sheet available by running the oc types command. It gives you a quick summary of the different conceptual types and definitions used in OpenShift like those we covered here:</p>
<h2 id="Vagrant"><a href="#Vagrant" class="headerlink" title="Vagrant"></a>Vagrant</h2><p>Vagrant is a software tool that allows users to create and configure lightweight, reproducible, and portable development environments. It works in conjunction with virtualization (both VMs and IaaS) to automate all the steps necessary to get your dev environment going</p>
<p>One of the advantages of creating and deploying applications from the web console is that a route is automatically created for you. When deploying new containers while using the oc tool, you will need to expose the service manually</p>
<h2 id="Volumes"><a href="#Volumes" class="headerlink" title="Volumes"></a>Volumes</h2><p>One of the great features of the OpenShift platform is the ability to provide persistent volumes for your running pods. This ensures that data in your database doesn’t suddenly disappear if the container is restarted. Another important aspect of persistent volumes is the ability to run both stateful and stateless applications on the platform. This is sometimes referred to as mode 1 and mode 2 applications as well as legacy and 12-factor applications.</p>
<h2 id="webhooks"><a href="#webhooks" class="headerlink" title="webhooks"></a>webhooks</h2><p>Automatic Deployments Using Webhooks<br>A webhook (also called a web callback or HTTP push API) is a way an application can provide other applications with real-time information or notifications.</p>
<p>We can configure the GitHub code hosting service to trigger a webhook each time we push a set of changes to your project code repository. Using this tool, we can notify OpenShift when you have made code changes and thus initiate rebuild and redeployment of our application.</p>
<h2 id="Deployment-Strategies"><a href="#Deployment-Strategies" class="headerlink" title="Deployment Strategies"></a>Deployment Strategies</h2><p>A deployment strategy defines the process by which a new version of your application is started and the existing instances shut down. By default OpenShift uses a rolling deployment strategy that enables you to perform an update with no apparent down time.</p>
]]></content>
      <tags>
        <tag>DevOps</tag>
        <tag>cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Container</title>
    <url>/2017-12-02-Container/</url>
    <content><![CDATA[<p>The Docker project was responsible for popularizing container development in Linux systems. The original project defined a command and service (both named docker) and a format in which containers are structured. This chapter provides a hands-on approach to using the docker command and service to begin working with containers in Red Hat Enterprise Linux 7 and RHEL Atomic Host by getting and using container images and working with running containers. </p>
<p> Containers provide a means of packaging applications in lightweight, portable entities. Running applications within containers offers the following advantages:</p>
<ul>
<li><strong>Smaller than Virtual Machines</strong>: Because container images include only the content needed to run an application, saving and sharing is much more efficient with containers than it is with virtual machines (which include entire operating systems)</li>
<li><strong>Improved performance</strong>: Likewise, since you are not running an entirely separate operating system, a container will typically run faster than an application that carries with it the overhead of a whole new virtual machine.</li>
<li><strong>Secure</strong>: Because a container typically has its own network interfaces, file system, and memory, the application running in that container can be isolated and secured from other activities on a host computer.</li>
<li><strong>Flexible</strong>: With an application’s run time requirements included with the application in the container, a container is capable of being run in multiple environments. </li>
</ul>
<p>RHEL Atomic Host is a light-weight Linux operating system distribution that was designed specifically for running containers. It contains two different versions of the docker service, as well as some services that can be used to orchestrate and manage Docker containers, such as Kubernetes. Only one version of the docker service can be running at a time. </p>
<h1 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h1><p>Containers in OpenShift Origin are based on Docker-formatted container images. An image is a binary that includes all of the requirements for running a single container, as well as metadata describing its needs and capabilities.</p>
<p>You can think of it as a packaging technology. Containers only have access to resources defined in the image unless you give the container additional access when creating it. By deploying the same image in multiple containers across multiple hosts and load balancing between them, OpenShift Origin can provide redundancy and horizontal scaling for a service packaged into an image.</p>
<h2 id="Container-Registries"><a href="#Container-Registries" class="headerlink" title="Container Registries"></a>Container Registries</h2><p>A container registry is a service for storing and retrieving Docker-formatted container images. A registry contains a collection of one or more image repositories. Each image repository contains one or more tagged images. Docker provides its own registry, the Docker Hub, and you can also use private or third-party registries. Red Hat provides a registry at registry.access.redhat.com for subscribers. OpenShift Origin can also supply its own internal registry for managing custom container images.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux_atomic_host/7/single/getting_started_with_containers/index#introduction_to_linux_containers" target="_blank" rel="noopener">https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux_atomic_host/7/single/getting_started_with_containers/index#introduction_to_linux_containers</a></li>
</ul>
]]></content>
      <tags>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>promise vs observiable</title>
    <url>/2017-12-01-Promise-vs-Observable/</url>
    <content><![CDATA[<p>The drawback of using Promises is that they’re unable to handle data sources that produce more than one value, like mouse movements or sequences of bytes in a file stream. Also, they lack the ability to retry from failure—all present in RxJS. </p>
<p>The most important downside, moreover, is that because Promises are immutable, they can’t be cancelled. So, for instance, if you use a Promise to wrap the value of a remote HTTP call, there’s no hook or mechanism for you to cancel that work. This is unfortunate because HTTP calls, based on the XmlHttpRequest object, can be aborted,[3] but this feature isn’t honored through the Promise interface</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>common errors in NPM or node</title>
    <url>/2017-12-07-Errors-In-NPM/</url>
    <content><![CDATA[<h2 id="code-E503"><a href="#code-E503" class="headerlink" title="code E503"></a>code E503</h2><p>code E503 when run npm install packages, e.g.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install pretty-data</span><br></pre></td></tr></table></figure>

<p>Get following error:<br>`
npm ERR! code E503<br>npm ERR! 503 Service Unavailable: pretty-data@latest</p>
<p>npm ERR! A complete log of this run can be found in:<br>npm ERR!     xxxx\nodejs\npm-cache_logs\2017-12-07T04_16_53_679Z-debug.log</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h3><p>You maybe behind corporate proxy, so try execute following command </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> proxy http://127.0.0.1:53128</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>nodejs</tag>
        <tag>javascript</tag>
        <tag>anugar</tag>
      </tags>
  </entry>
  <entry>
    <title>RxJS reactive extension javascript</title>
    <url>/2017-12-08-Router-In-Angular/</url>
    <content><![CDATA[<h1 id="Streams"><a href="#Streams" class="headerlink" title="Streams"></a>Streams</h1><p>Traditionally, the term stream was used in programming languages as an abstract object related to I/O operations such as reading a file, reading a socket, or requesting data from an HTTP server. For instance, Node.js implements readable, writable, and duplex streams for doing just this. In the RP world, we expand the definition of a stream to mean any data source that can be consumed.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">A$ = [<span class="number">20</span>];                                        <span class="number">1</span></span><br><span class="line">B$ = [<span class="number">22</span>];                                        <span class="number">2</span></span><br><span class="line">C$ = A$.concat(B$).reduce(adder); <span class="comment">//-&gt; [42]       3</span></span><br><span class="line"></span><br><span class="line">A$.push(<span class="number">100</span>);                                     <span class="number">4</span></span><br><span class="line">C$ = ?</span><br></pre></td></tr></table></figure>

<p>1 Creates a stream initialized with the value 20<br>2 Creates a stream initialized with the value 22<br>3 Concatenates both streams and applies an adder function to get a new container with 42<br>4 Pushes a new value into A$<br>First, we’ll explain some of the notation we use here. Streams are containers or wrappers of data very similar to arrays, so we used the array literal notation [] to symbolize this. Also, it’s common to use the $ suffix to qualify variables that point to streams. In the RxJS community, this is known as Finnish Notation, attributed to Andre Staltz, who is one of the main contributors of RxJS and Finnish.</p>
<h1 id="Array-extras"><a href="#Array-extras" class="headerlink" title="Array extras"></a>Array extras</h1><p>JavaScript ES5 introduced new array methods, known as the array extras, which enable some level of native support for FP. These include map, reduce, filter, some, every, and others<br>Reactive programming is oriented around data flows and propagation. In this case, you can think of C$ as an always-on variable that reacts to any change and causes actions to ripple through it when any constituent part changes. Now let’s see how RxJS implements this concept.</p>
<p>If you were to visit the main website for the Reactive Extensions project (<a href="http://reactivex.io/" target="_blank" rel="noopener">http://reactivex.io/</a>), you’d find it defined as “an API for asynchronous programming with observable streams.” </p>
<p>Definition</p>
<p>A stream is nothing more than a sequence of events over time.<br>Everything is a stream<br>The concept of a stream can be applied to any data point that holds a value; this ranges from a single integer to bytes of data received from a remote HTTP call. RxJS provides lightweight data types to subscribe to and manage streams as a whole that can be passed around as first-class objects and combined with other streams.<br>RxJS provides lightweight data types to subscribe to and manage streams as a whole that can be passed around as first-class objects and combined with other streams. Learning how to manipulate and use streams is one of the central topics of this book. At this point, we haven’t talked about any specific RxJS objects; for now, we’ll assume that an abstract data type, a container called Stream, exists. You can create one from a single value as such:</p>
<p>Stream(42);<br>At this point, this stream remains dormant and nothing has actually happened, until there’s a subscriber (or observer) that listens for it. This is very different from Promises, which execute their operations as soon as they’re created. Instead, streams are lazy data types, which means that they execute only after a subscriber is attached. In this case, the value 42, which was lifted into the stream context, navigates or propagates out to at least one subscriber. After it receives the value, the stream is completed:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Stream(<span class="number">42</span>).subscribe(</span><br><span class="line">   val =&gt; &#123;                                             <span class="number">1</span></span><br><span class="line">      <span class="built_in">console</span>.log(val); <span class="comment">//-&gt; prints 42</span></span><br><span class="line">   &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>This creates two important challenges: scalability and latency.</p>
<p>As more and more data is received, the amount of memory that your application consumes or requires will grow linearly or, in worst cases, exponentially; this is the classic problem of scalability, and trying to process it all at once will certainly cause the user interface (UI) to become unresponsive. Buttons may no longer appear to work, fancy animations will lag, and the browser may even flag the page to terminate, which is an unacceptable notion for modern web users.</p>
<p>This problem is not new, though in recent years there has been exponential growth in the sheer scale of the number of events and data that JavaScript applications are required to process. This quantity of data is too big to be held readily available and stored in memory for use. Instead, we must create ways to fetch it from remote locations asynchronously, resulting in another big challenge of interconnected software systems: latency, which can be difficult to express in code.<br>you’ll first learn about the fundamental principles of two emerging paradigms: functional programming (FP) and reactive programming (RP). This exhilarating composition is what gives rise to functional reactive programming (FRP), encoded in a library called RxJS (or rx.js), which is the best prescription to deal with asynchronous and event-based data sources effectively.<br>By subscribing to a stream, your code expresses an interest in receiving the stream’s elements. During subscription, you specify the code to be invoked when the next element is emitted, and optionally the code for error processing and stream completion. Often you’ll specify a number of chained operators and then invoke the subscribe() method</p>
<p>The subscribe() method creates the instance of Observer, which in this case passes each value from the stream generated by the searchInput to the getStockQuoteFromServer() method. In a real-world scenario, this method would issue a request to the server,<br>No matter how many operators you chain together, none of them will be invoked on the stream until you invoke subscribe().<br>If you prefer to generate an observable stream based on another event (such as on keyup), you can use the RxJS Observable.fromEvent() API (see the RxJS<br>One of the benefits of observables over promises is that the former can be canceled.<br>Observable1 → switchMap(function) → Observable2 → subscribe()</p>
<p>You’re switching over from the first observable to the second one. If Observable1 pushes the new value but the function that creates Observable2 hasn’t finished yet, it’s killed; switchMap() unsubscribes and resubscribes to Observable1 and starts handling the new value from this stream.</p>
<p>If the observable stream from the UI pushes the next value before getWeather() has returned its observable value, switchMap() kills the running getWeather(), gets the new value for the city from the UI, and invokes getWeather() again. While killing getWeather(), it also aborts the HTTP request that was slow and didn’t complete in time.</p>
<p>The first argument of subscribe() contains a callback for handling data coming from the server. The code in this arrow expression is specific to the API provided by the weather service. You just extract the temperature and humidity from the returned JSON. The API offered by this particular weather service stores the error codes in the response, so you manually handle the status 404 here and not in the error-handler callback.</p>
<p>Now let’s verify that canceling previous requests works. Typing the word London takes more than the 200 milliseconds specified in debounceTime(), which means the valueChanges event will emit the observable data more than once. To ensure that the request to the server takes more than 200 milliseconds, you need a slow internet connection.</p>
<p>Note</p>
<p>Listing 5.5 has lots of code in the constructor, which may look like a red flag to developers who prefer using constructors only to initialize variables and not to execute any code that takes time to complete. If you take a closer look, though, you’ll notice that it just creates a subscription to two observable streams (UI events and HTTP service). No actual processing is done until the user starts entering the name of a city, which happens after the component is already rendered.</p>
<p>We ran the preceding example and then turned on throttling in Chrome Developer Tools, emulating a slow GPRS connection. Typing the word London resulted in four getWeather() invocations: for Lo, Lon, Lond, and London. Accordingly, four HTTP requests were sent over the slow connection, and three of them were automatically canceled by the switchMap() operator, as shown in figure 5.10.</p>
<p>Figure 5.10. Running observable_events_http.ts</p>
<p>With very little programming, you saved bandwidth by eliminating the need for the server to send four HTTP responses for cities you’re not interested in and that may not even exist. As we stated in chapter 1, a good framework is one that allows you to write less code.<br>Angular comes with a number of predefined pipes, and each pipe has a class that implements its functionality (such as DatePipe) as well as the name you can use in the template (such as date):</p>
<p>UpperCasePipe allows you to convert an input string into uppercase by using | uppercase in the template.<br>DatePipe lets you display a date in different formats by using | date.<br>CurrencyPipe transforms a number into a desired currency by using | currency.<br>AsyncPipe will unwrap the data from the provided observable stream by using | async. You’ll see a code sample that uses async in chapter 8.<br>Some pipes don’t require input parameters (such as uppercase), and some do (such as date:’medium’). You can chain as many pipes as you want. The next code snippet shows how to display the value of the birthday variable in a medium date format and in uppercase (for example, JUN 15, 2001, 9:43:11 PM):</p>
<p>Custom pipes<br>In addition to predefined pipes, Angular offers a simple way to create custom pipes, which can include code specific to your application. You need to create a @Pipe annotated class that implements the PipeTransform interface. The PipeTransform interface has the following signature:</p>
<p>export interface PipeTransform {<br>  transform(value: any, …args: any[]): any;<br>}
This tells you that a custom pipe class must implement just one method with the preceding signature. The first parameter of transform takes a value to be transformed, and the second defines zero or more parameters required for your transformation algorithm. The @Pipe annotation is where you specify the name of the pipe to be used in the template. If your component uses custom pipes, they have to be explicitly listed in its @Component annotation in the pipes property.</p>
<p>In the previous section, the weather example displayed the temperature in London in Fahrenheit. But most countries use the metric system and show temperature in Celsius. Let’s create a custom pipe that can convert the temperature from Fahrenheit to Celsius and back. The code of the custom TemperaturePipe pipe (see the following listing) can be used in a template as temperature.</p>
<p>Listing 5.6. temperature-pipe.ts</p>
<p>Next comes the code of the component (pipe-tester.ts) that uses the temperature pipe. Initially this program will convert the temperature from Fahrenheit to Celsius (the FtoC format). By clicking the toggle button, you can change the direction of the temperature conversion<br>Event emitters<br>Event emitters are popular mechanisms for asynchronous event-based architectures. The DOM, for instance, is probably one of the most widely known event emitters. On a server like Node.js, certain kinds of objects periodically produce events that cause functions to be called. In Node.js, the EventEmitter class is used to implement APIs for things like WebSocket I/O or file reading/writing so that if you’re iterating through directories and you find a file of interest, an object can emit an event referencing this file for you to execute any additional code.<br>ajax(‘<host1>/items’,<br>   items =&gt; {<br>       for (let item of items) {<br>          ajax(<code>&lt;host2&gt;/items/${item.getId()}/info</code>,
          dataInfo =&gt; {<br>          ajax(<code>&lt;host3&gt;/files/${dataInfo.files}</code>,
          processFiles);<br>       });<br>    }<br>});<br>—is known to be continuation-passing style (CPS), because none of the functions are explicitly waiting for a return value. But as we mentioned, abusing this makes code hard to reason about. What you can do is to make continuations first-class citizens and actually define a concrete interpretation of what it means to “continue.” So, we introduce the notion of then: “Do X, then do Y,” to create code that reads like this:</host1></p>
<p>Fetch all items, then                                          1<br>   For-each item fetch all files, then                         1<br>      Process each file<br>1 The key term “then” suggests time and sequence.<br>This is where Promises come in. A Promise is a data type that wraps an asynchronous or long-running operation, a future value, with the ability for you to subscribe to its result or its error. A Promise is considered to be fulfilled when its underlying operation completes, at which point subscribers will receive the computed result.</p>
<p>Because we can’t alter the value of a Promise once it’s been executed, it’s actually an immutable type, which is a functional quality we seek in our programs.<br>ajax(‘<host1>/items’)<br>  .then(items =&gt;<br>    items.forEach(item =&gt;<br>      ajax(<code>&lt;host2&gt;/data/${item.getId()}/info</code>)
       .then(dataInfo =&gt;<br>         ajax(<code>&lt;host3&gt;/data/files/${dataInfo.files}</code>)
       )<br>       .then(processFiles);<br>    )<br>  );<br>This looks similar to the previous statement! Being a more recent addition to the language with ES6 and inspired in FP design, Promises are more versatile and idiomatic than callbacks. Applying these functions declaratively—meaning your code expresses the what and not the how of what you’re trying to accomplish—into then blocks allows you to express side effects in a pure manner.</host1></p>
<p>let getItems = () =&gt; ajax(‘<host1>/items’);<br>let getInfo  = item =&gt; ajax(<code>&lt;host2&gt;/data/${item.getId()}/info</code>);<br>let getFiles = dataInfo =&gt; ajax(<code>&lt;host3&gt;/data/files/${dataInfo.files}</code>);<br>and then use Promises to stitch together our asynchronous flow. We use the Promise.all() function to map an array of separate Promises into a single one containing an array of results:</host1></p>
<p>getItems()<br>  .then(items =&gt; items.map(getInfo))<br>  .then(promises =&gt; Promise.all(promises))<br>  .then(infos =&gt; infos.map(getFiles))<br>  .then(promises =&gt; Promise.all(promises))<br>  .then(processFiles);<br>The use of then() explicitly implies that there’s time involved among these calls, which is a really good thing. If any step fails, we can also have matching catch() blocks to handle errors and potentially continue the chain of command if necessary, a</p>
<p>Figure 1.7. Promises create a flow of calls chained by then methods. If the Promise is fulfilled, the chain of functions continues; otherwise, the error is delegated to the Promise catch block.</p>
<p>The drawback of using Promises is that they’re unable to handle data sources that produce more than one value, like mouse movements or sequences of bytes in a file stream. Also, they lack the ability to retry from failure—all present in RxJS.<br>The most important downside, moreover, is that because Promises are immutable, they can’t be cancelled. So, for instance, if you use a Promise to wrap the value of a remote HTTP call, there’s no hook or mechanism for you to cancel that work. This is unfortunate because HTTP calls, based on the XmlHttpRequest object, can be aborted,[3] but this feature isn’t honored through the Promise interface. </p>
<p>It’s difficult to detect when events or long-running operations go rogue and need to be cancelled. Consider the case of a remote HTTP request that’s taking too long to process. Is the script unresponsive or is the server just slow? It would be ideal to have an easy mechanism to cancel events cleanly after some predetermined amount of time. Implementing your own cancellation mechanism can be very challenging and error prone even with the help of third-party libraries.</p>
<p>One good quality of responsive design is to always throttle a user’s interaction with any UI components, so that the system isn’t unnecessarily overloaded. In chapter 4, you’ll learn how to use throttling and debouncing to your advantage. Manual solutions for achieving this are typically very hard to get right and involve functions that access data outside their local scope, which breaks the stability of your entire program<br>You learned that Promises certainly move the needle in the right direction (and RxJS integrates with Promises seamlessly if you feel the need to do so). </p>
<p>But what you really need is a solution that abstracts out the notion of latency away from your code while allowing you to model your solutions using a linear sequence of steps through which data can flow over time</p>
<p>THE REACTIVE EXTENSIONS FOR JAVASCRIPT<br>Reactive Extensions for JavaScript (RxJS) is an elegant replacement for callback or Promise-based libraries, using a single programming model that treats any ubiquitous source of events—whether it be reading a file, making an HTTP call, clicking a button, or moving the mouse—in the exact same manner. For example, instead of handling each mouse event independently with a callback, with RxJS you handle all of them combined.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://angular.io/guide/router" target="_blank" rel="noopener">https://angular.io/guide/router</a></li>
</ul>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>Angular</tag>
        <tag>NodeJs</tag>
      </tags>
  </entry>
  <entry>
    <title>reactive programing</title>
    <url>/2017-12-11-Why-Reactive-programming-is-outpermant/</url>
    <content><![CDATA[<p>The second advantage to a lazy subscription is that the observable doesn’t hold onto data by default. In the previous example, each event generated by the interval will be processed and then dropped. This is what we mean when we say that the observable is streaming in nature rather than pooled. This discard-by-default semantic means that you never have to worry about unbounded memory growth sneaking up on you, causing memory leaks. When writing native event-driven JavaScript code, especially in older browsers, memory leaks can occur if you neglect event management and disposal.</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Router in angular</title>
    <url>/2017-12-10-RxJS/</url>
    <content><![CDATA[<h1 id="Lettable-operators"><a href="#Lettable-operators" class="headerlink" title="Lettable operators"></a>Lettable operators</h1><p>RxJS 5.5, piping all the things</p>
<p>So now we want a way to use those operators, how could we do that?</p>
<p>Well, we said those operators are “lettable” that means we can use them by calling the let method on an observable:</p>
<p>And if we want to chain multiple lettable operators we can keep dot chaining:</p>
<p>import { Observable } from ‘rxjs/Rx’;<br>import { filter, map, reduce } from ‘rxjs/operators’;</p>
<p>const filterOutEvens = filter(x =&gt; x % 2);<br>const sum = reduce((acc, next) =&gt; acc + next, 0);<br>const doubleBy = x =&gt; map(value =&gt; value * x);</p>
<p>const source$ = Observable.range(0, 10);</p>
<p>source$<br>  .let(filterOutEvens)<br>  .let(doubleBy(2))<br>  .let(sum)<br>  .subscribe(x =&gt; console.log(x)); // 50</p>
<hr>
<p>  Meaning we can easily compose a bunch of pure function operators and pass them as a single operator to an observable!</p>
<p>Conclusion<br>With those tools in hand, you can write RxJS code that is much more re-usable by just piping your (pure functions) operators together and easily re-use shared logic.</p>
<p>  import { Observable, pipe } from ‘rxjs/Rx’;<br>import { filter, map, reduce } from ‘rxjs/operators’;</p>
<p>const filterOutEvens = filter(x =&gt; x % 2);<br>const sum = reduce((acc, next) =&gt; acc + next, 0);<br>const doubleBy = x =&gt; map(value =&gt; value * x);</p>
<p>const complicatedLogic = pipe(<br>  filterOutEvens,<br>  doubleBy(2),<br>  sum<br>);</p>
<p>const source$ = Observable.range(0, 10);</p>
<p>source$.let(complicatedLogic).subscribe(x =&gt; console.log(x)); // 50</p>
<p><a href="https://github.com/ReactiveX/rxjs/blob/master/doc/pipeable-operators.md" target="_blank" rel="noopener">https://github.com/ReactiveX/rxjs/blob/master/doc/pipeable-operators.md</a><br>What?<br>What is a pipeable operator? Simply put, a function that can be used with the current let operator. It used to be the origin of the name (“lettable”), but that was confusing and we call them “pipeable” now because they’re intended to be used with the pipe utility. <code>A pipeable operator is basically any function that returns a function with the signature: &lt;T, R&gt;(source: Observable&lt;T&gt;) =&gt; Observable&lt;R&gt;.</code></p>
<p>There is a pipe method built into Observable now at Observable.prototype.pipe that сan be used to compose the operators in similar manner to what you’re used to with dot-chaining (shown below).</p>
<p>There is also a pipe utility function at rxjs/util/pipe that can be used to build reusable pipeable operators from other pipeable operators.</p>
<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>You pull in any operator you need from one spot, under ‘rxjs/operators’ (plural!). It’s also recommended to pull in the Observable creation methods you need directly as shown below with range:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; range &#125; <span class="keyword">from</span> <span class="string">'rxjs/observable/range'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; map, filter, scan &#125; <span class="keyword">from</span> <span class="string">'rxjs/operators'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> source$ = range(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">source$.pipe(</span><br><span class="line">  filter(<span class="function"><span class="params">x</span> =&gt;</span> x % <span class="number">2</span> === <span class="number">0</span>),</span><br><span class="line">  map(<span class="function"><span class="params">x</span> =&gt;</span> x + x),</span><br><span class="line">  scan(<span class="function">(<span class="params">acc, x</span>) =&gt;</span> acc + x, <span class="number">0</span>)</span><br><span class="line">)</span><br><span class="line">.subscribe(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(x))</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.angularindepth.com/rxjs-understanding-lettable-operators-fe74dda186d3" target="_blank" rel="noopener">https://blog.angularindepth.com/rxjs-understanding-lettable-operators-fe74dda186d3</a><br>RxJS: Understanding Lettable Operators</p>
<h2 id="What-are-lettable-operators-and-what-does-lettable-mean"><a href="#What-are-lettable-operators-and-what-does-lettable-mean" class="headerlink" title="What are lettable operators and what does lettable mean?"></a>What are lettable operators and what does lettable mean?</h2><p>If lettable operators are used with a method named pipe, you might wonder why they are referred to as lettable. The term is derived from RxJS’s let operator.</p>
<p><code>The let operator is conceptually similar to the map operator, but instead of taking a projection function that receives and returns a value, let takes a function that receives and returns an observable.</code> It’s unfortunate that let is one of the less-well-known operators, as it’s very useful for composing reusable functionality.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Rx <span class="keyword">from</span> <span class="string">"rxjs"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">retry</span>&lt;<span class="title">T</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  count: <span class="built_in">number</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  wait: <span class="built_in">number</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span>): (<span class="params">source: Rx.Observable&lt;T&gt;</span>) =&gt; <span class="title">Rx</span>.<span class="title">Observable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">source: Rx.Observable&lt;T&gt;</span>) =&gt;</span> source</span><br><span class="line">    .retryWhen(<span class="function"><span class="params">errors</span> =&gt;</span> errors</span><br><span class="line">      <span class="comment">// Each time an error occurs, increment the accumulator.</span></span><br><span class="line">      <span class="comment">// When the maximum number of retries have been attempted, throw the error.</span></span><br><span class="line">      .scan(<span class="function">(<span class="params">acc, error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (acc &gt;= count) &#123; <span class="keyword">throw</span> error; &#125;</span><br><span class="line">        <span class="keyword">return</span> acc + <span class="number">1</span>;</span><br><span class="line">      &#125;, <span class="number">0</span>)</span><br><span class="line">      <span class="comment">// Wait the specified number of milliseconds between retries.</span></span><br><span class="line">      .delay(wait)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>When retry is called, it’s passed the number of retry attempts that should be made and the number of milliseconds to wait between attempts, and it returns a function that receives an observable and returns another observable into which the retry logic is composed. The returned function can be passed to the let operator, like this:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Rx <span class="keyword">from</span> <span class="string">"rxjs"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; retry &#125; <span class="keyword">from</span> <span class="string">"./retry"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> name = Rx.Observable.ajax</span><br><span class="line">  .getJSON&lt;&#123; name: <span class="built_in">string</span> &#125;&gt;(<span class="string">"/api/employees/alice"</span>)</span><br><span class="line">  .let(retry(<span class="number">3</span>, <span class="number">1000</span>))</span><br><span class="line">  .map(<span class="function"><span class="params">employee</span> =&gt;</span> employee.name)</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> Rx.Observable.of(<span class="literal">null</span>));</span><br><span class="line"> <span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span>Using the <span class="keyword">let</span> operator, we’ve been able to create a reusable <span class="function"><span class="keyword">function</span> <span class="title">much</span> <span class="title">more</span> <span class="title">simply</span> <span class="title">than</span> <span class="title">we</span> <span class="title">would</span> <span class="title">have</span> <span class="title">been</span> <span class="title">able</span> <span class="title">to</span> <span class="title">create</span> <span class="title">a</span> <span class="title">prototype</span>-<span class="title">patching</span> <span class="title">operator</span>`. <span class="title">What</span> <span class="title">we</span>’<span class="title">ve</span> <span class="title">created</span> <span class="title">is</span> <span class="title">a</span> <span class="title">lettable</span> <span class="title">operator</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">`<span class="title">Lettable</span> <span class="title">operators</span> <span class="title">are</span> <span class="title">a</span> <span class="title">higher</span>-<span class="title">order</span> <span class="function"><span class="keyword">function</span><span class="title">s</span>. <span class="title">Lettable</span> <span class="title">operators</span> <span class="title">return</span> <span class="function"><span class="keyword">function</span><span class="title">s</span> <span class="title">that</span> <span class="title">receive</span> <span class="title">and</span> <span class="title">return</span> <span class="title">observables</span></span>; <span class="title">and</span> <span class="title">those</span> <span class="function"><span class="keyword">function</span><span class="title">s</span> <span class="title">can</span> <span class="title">be</span> <span class="title">passed</span> <span class="title">to</span> <span class="title">the</span> <span class="title">let</span> <span class="title">operator</span>`.</span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function"></span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function"><span class="title">We</span> <span class="title">can</span> <span class="title">also</span> <span class="title">use</span> <span class="title">our</span> <span class="title">lettable</span> <span class="title">retry</span> <span class="title">operator</span> <span class="title">with</span> <span class="title">pipe</span>, <span class="title">like</span> <span class="title">this</span>:</span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function">```<span class="title">typescript</span></span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function"><span class="title">import</span> </span>&#123; <span class="title">ajax</span> &#125; <span class="title">from</span> "<span class="title">rxjs</span>/<span class="title">observable</span>/<span class="title">dom</span>/<span class="title">ajax</span>"</span>;</span></span><br><span class="line"><span class="function"><span class="title">import</span> </span>&#123; of &#125; <span class="keyword">from</span> <span class="string">"rxjs/observable/of"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; catchError, map &#125; <span class="keyword">from</span> <span class="string">"rxjs/operators"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; retry &#125; <span class="keyword">from</span> <span class="string">"./retry"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> name = ajax</span><br><span class="line">  .getJSON&lt;&#123; name: <span class="built_in">string</span> &#125;&gt;(<span class="string">"/api/employees/alice"</span>)</span><br><span class="line">  .pipe(</span><br><span class="line">    retry(<span class="number">3</span>, <span class="number">1000</span>),</span><br><span class="line">    map(<span class="function"><span class="params">employee</span> =&gt;</span> employee.name),</span><br><span class="line">    catchError(<span class="function"><span class="params">error</span> =&gt;</span> of(<span class="literal">null</span>))</span><br><span class="line">  );</span><br></pre></td></tr></table></figure>

<p>Let’s return to our retry function and replace the chained methods with lettable operators and a pipe call, so that it looks like this:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">"rxjs/Observable"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; delay, retryWhen, scan &#125; <span class="keyword">from</span> <span class="string">"rxjs/operators"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">retry</span>&lt;<span class="title">T</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  count: <span class="built_in">number</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  wait: <span class="built_in">number</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span>): (<span class="params">source: Observable&lt;T&gt;</span>) =&gt; <span class="title">Observable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> retryWhen(<span class="function"><span class="params">errors</span> =&gt;</span> errors.pipe(</span><br><span class="line">    <span class="comment">// Each time an error occurs, increment the accumulator.</span></span><br><span class="line">    <span class="comment">// When the maximum number of retries have been attempted, throw the error.</span></span><br><span class="line">    scan(<span class="function">(<span class="params">acc, error</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (acc &gt;= count) &#123; <span class="keyword">throw</span> error; &#125;</span><br><span class="line">      <span class="keyword">return</span> acc + <span class="number">1</span>;</span><br><span class="line">    &#125;, <span class="number">0</span>),</span><br><span class="line">    <span class="comment">// Wait the specified number of milliseconds between retries.</span></span><br><span class="line">    delay(wait)</span><br><span class="line">  ));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>With the chained methods replaced, we now have a proper, reusable lettable operator that imports only what it requires.</p>
<h2 id="Why-should-lettable-operators-should-be-preferred"><a href="#Why-should-lettable-operators-should-be-preferred" class="headerlink" title="Why should lettable operators should be preferred?"></a>Why should lettable operators should be preferred?</h2><p>For application developers, lettable operators are much easier to manage:</p>
<ul>
<li>Rather then relying upon operators being patched into Observable.prototype, lettable operators are explicitly imported into the modules in which they are used.</li>
<li>It’s easy for TypeScript and bundlers to determine whether the lettable operators imported into a module are actually used. And if they are not, they can be left unbundled. If prototype patching is used, this task is manual and tedious.</li>
<li>For library authors, lettable operators are much less verbose than call-based alternative, but it’s the correct inference of types that is — at least for me — the biggest advantage.</li>
</ul>
<hr>
<p>Agreed, the pipe is awesome for composing custom rx operators. But why do we see more and more people using it even when not combining re-usable variables — instead of just chaining methods?</p>
<p>Meaning, we use to write e.g…</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> source$ = Observable.range(<span class="number">0</span>, <span class="number">10</span>); </span><br><span class="line">source$</span><br><span class="line">  .filter(<span class="function"><span class="params">x</span> =&gt;</span> x % <span class="number">2</span>)</span><br><span class="line">  .reduce(<span class="function">(<span class="params">acc, next</span>) =&gt;</span> acc + next, <span class="number">0</span>)</span><br><span class="line">  .map(<span class="function"><span class="params">value</span> =&gt;</span> value * <span class="number">2</span>)</span><br><span class="line">  .subscribe(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(x));</span><br></pre></td></tr></table></figure>

<p>Above is imho much cleaner than what I see more nowadays:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> source$ = Observable.range(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">source$.pipe(</span><br><span class="line">  filter(<span class="function"><span class="params">x</span> =&gt;</span> x % <span class="number">2</span>),</span><br><span class="line">  reduce(<span class="function">(<span class="params">acc, next</span>) =&gt;</span> acc + next, <span class="number">0</span>),</span><br><span class="line">  map(<span class="function"><span class="params">value</span> =&gt;</span> value * <span class="number">2</span>)</span><br><span class="line">).subscribe(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(x));</span><br></pre></td></tr></table></figure>

<p>Are there performance advantages by using the standalone operators instead of chaining?</p>
<p>debounceInput is a function that takes and returns an observable, so it can be passed to the Observable.prototype.pipe function, like this: valueChanges.pipe(debounceInput).</p>
<p>So, <code>whenever you find yourself using the same combination of operators in many places, you could consider using the static pipe function to create a reusable operator combination</code>.</p>
<p>The static pipe function also makes something else much simpler: dealing with pipe-like overload signatures. Let’s look at that next.</p>
<h2 id="Tree-Shaking"><a href="#Tree-Shaking" class="headerlink" title="Tree Shaking"></a>Tree Shaking</h2><p><a href="https://webpack.js.org/guides/tree-shaking/" target="_blank" rel="noopener">https://webpack.js.org/guides/tree-shaking/</a><br>Tree shaking is a term commonly used in the JavaScript context for dead-code elimination. It relies on the static structure of ES2015 module syntax, i.e. import and export. The name and concept have been popularized by the ES2015 module bundler rollup.</p>
<p>So, what we’ve learned is that in order to take advantage of tree shaking, you must…</p>
<p>Use ES2015 module syntax (i.e. import and export).<br>Add a “sideEffects” entry to your project’s package.json file.<br>Include a minifier that supports dead code removal (e.g. the UglifyJSPlugin).</p>
<h1 id="mergeMap-vs-flatMap-vs-concatMap-vs-switchMap"><a href="#mergeMap-vs-flatMap-vs-concatMap-vs-switchMap" class="headerlink" title="mergeMap vs flatMap vs concatMap vs switchMap"></a>mergeMap vs flatMap vs concatMap vs switchMap</h1><p>Today we’re going to look at the difference between these four three RxJS operators. The simple part is that flatMap is just an alias for mergeMap. Other operators have a difference that might be important in some cases.</p>
<h2 id="When-do-you-need-them"><a href="#When-do-you-need-them" class="headerlink" title="When do you need them?"></a>When do you need them?</h2><p>All these operators are used with so-called higher order Observables. This is when items of an Observable are Observables themselves (or they are mapped to Observables) and we need to flatten all of them into one final Observable. You can easily identify this situation when you subscribe to an Observable inside subscription to another Observable (Note: this is not a recommended approach):</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">outerObservable.subscribe(<span class="function"><span class="params">outerItem</span> =&gt;</span> &#123;</span><br><span class="line">    outerItem.subsribe(<span class="function"><span class="params">innerItem</span> =&gt;</span> &#123;</span><br><span class="line">            foo(innerItem);</span><br><span class="line">        &#125;)&#125;);</span><br></pre></td></tr></table></figure>

<p>In my examples, initial Observable is called outer Observable. And items of the outer Observable are called inner Observables. Technically inner and outer Observables are just plain Observables.</p>
<p>A usage example for such operators can be a search box (search box text changes as outer Observable) with a request being sent to a server for each search text change (HTTP responses as inner Observables). Another example is mouse button clicks (outer Observable) that trigger an interval timer for each mouse click (timer events as inner Observables).</p>
<p>Learning plan<br>To tackle these operators you need to understand more basic ones first. In this article I won’t give any definitions or explanations per se, but rather just a small learning plan with links:</p>
<p>Map, Merge, Concat. Basic Observable operators.<br>MergeAll, ConcatAll, Switch. These are for higher order Observables already.<br>After that MergeMap, ConcatMap, and SwitchMap should be easy for you.<br>Operators from the third group are two step operators. First, they map outer Observable items to inner Observables. The second step is to merge a result set of inner Observables in some way. The way they are merged depends on the operator you use.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mergeMap = map + mergeAll</span><br><span class="line">concatMap = map + concatAll</span><br><span class="line">switchMap = map + switch</span><br></pre></td></tr></table></figure>

<p>Here are some reworked reactivex.io diagrams. At first some explanations for the diagrams:</p>
<h2 id="MergeMap"><a href="#MergeMap" class="headerlink" title="MergeMap"></a>MergeMap</h2><p>Outer (initial) Observable emits circles. Each circle is then mapped to its own inner Observable - collection of rhombuses. Collections are identified by color; each collection has its own color. All those inner Observables are then merged into one final Observable - resulting collection of rhombuses.</p>
<p>MergeMap<br>mergeMap emits items into the resulting Observable just as they are emitted from inner Observables. It doesn’t wait for anything.<br>mergeMap doesn’t preserve the order from outer Observable. Collections of rhombuses interleave.<br>mergeMap doesn’t cancel any inner Observables. All rhombuses from inner Observables get to final collection.</p>
<h2 id="ConcatMap"><a href="#ConcatMap" class="headerlink" title="ConcatMap"></a>ConcatMap</h2><p>concatMap waits for inner Observable to complete before taking items from the next inner Observable.<br>concatMap does preserve the order from outer Observable. Collections of rhombuses don’t interleave.<br>Just as mergeMap, concatMap doesn’t cancel any inner Observables. All rhombuses from inner Observables get to the final collection.</p>
<h2 id="SwitchMap"><a href="#SwitchMap" class="headerlink" title="SwitchMap"></a>SwitchMap</h2><p>switchMap emits items only from the most recent inner Observable.<br>switchMap cancels previous inner Observables when a new inner Observable appears. Items of inner Observable that were emitted after the Observable was canceled will be lost (not included in the resulting Observable).</p>
<p>“Talk is cheap. Show me the code.”<br>I still wasn’t sure I had cracked the difference between the discussed operators even after reading all the results from Google’s first page :) I’ve set up a small example on JsFiddle to see the difference in practice.</p>
<p>In the example, outer Observable emits three items with a one-second interval. Each item is then mapped to an inner Observable, which in its turn emits another three items with a one-second interval. The final result depends on the operator you use. Hope this small example will help you understand these operators without too much googling.</p>
<h1 id="Router"><a href="#Router" class="headerlink" title="Router"></a>Router</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> appRoutes: Routes = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'crisis-center'</span>, <span class="attr">component</span>: CrisisListComponent &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'hero/:id'</span>,      <span class="attr">component</span>: HeroDetailComponent &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'heroes'</span>,</span><br><span class="line">    component: HeroListComponent,</span><br><span class="line">    data: &#123; <span class="attr">title</span>: <span class="string">'Heroes List'</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">''</span>,</span><br><span class="line">    redirectTo: <span class="string">'/heroes'</span>,</span><br><span class="line">    pathMatch: <span class="string">'full'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'**'</span>, <span class="attr">component</span>: PageNotFoundComponent &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  imports: [</span><br><span class="line">    RouterModule.forRoot(</span><br><span class="line">      appRoutes,</span><br><span class="line">      &#123; <span class="attr">enableTracing</span>: <span class="literal">true</span> &#125; <span class="comment">// &lt;-- debugging purposes only</span></span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// other imports here</span></span><br><span class="line">  ],</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>The data property in the third route is a place to store arbitrary data associated with this specific route. The data property is accessible within each activated route. Use it to store items such as page titles, breadcrumb text, and other read-only, static data. You’ll use the resolve guard to retrieve dynamic data</li>
<li>The empty path in the fourth route represents the default path for the application, the place to go when the path in the URL is empty, as it typically is at the start. This default route redirects to the route for the /heroes URL and, therefore, will display the HeroesListComponent.</li>
<li>The ** path in the last route is a wildcard. The router will select this route if the requested URL doesn’t match any paths for routes defined earlier in the configuration. This is useful for displaying a “404 - Not Found” page or redirecting to another route.</li>
<li>The order of the routes in the configuration matters and this is by design. The router uses a <strong>first-match wins strategy</strong> when matching routes, so <strong>more specific routes should be placed above less specific routes</strong>. </li>
</ul>
<h2 id="Router-outlet"><a href="#Router-outlet" class="headerlink" title="Router outlet"></a>Router outlet</h2><p>The router matches that URL to the route path  and displays the Component after a RouterOutlet that you’ve placed in the host view’s HTML.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">content_copy</span><br><span class="line">&lt;router-outlet&gt;<span class="xml"><span class="tag">&lt;/<span class="name">router-outlet</span>&gt;</span></span></span><br><span class="line">&lt;!-- Routed views go here --&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Define-routes"><a href="#Define-routes" class="headerlink" title="Define routes"></a>Define routes</h2><p>A router must be configured with a list of route definitions.</p>
<h2 id="mechanism"><a href="#mechanism" class="headerlink" title="mechanism"></a>mechanism</h2><ul>
<li>When the application requests navigation to the path /crisis-center, the router activates an instance of CrisisListComponent, displays its view, and updates the browser’s address location and history with the URL for that path.</li>
<li>Pass the array of routes, appRoutes, to the RouterModule.forRoot method. It returns a module, containing the configured Router service provider, plus other providers that the routing library requires. Once the application is bootstrapped, the Router performs the initial navigation based on the current browser URL</li>
</ul>
<h2 id="Some-key-points-of-setting-up-router"><a href="#Some-key-points-of-setting-up-router" class="headerlink" title="Some key points of setting up router"></a>Some key points of setting up router</h2><ul>
<li>Load the router library.</li>
<li>Add a nav bar to the shell template with anchor tags, routerLink and routerLinkActive directives.</li>
<li>Add a router-outlet to the shell template where views will be displayed.</li>
<li>Configure the router module with RouterModule.forRoot.</li>
<li>Set the router to compose HTML5 browser URLs.</li>
<li>handle invalid routes with a wildcard route.</li>
<li>navigate to the default route when the app launches with an empty path.</li>
</ul>
<h1 id="Difference-between-forRoot-and-forChild"><a href="#Difference-between-forRoot-and-forChild" class="headerlink" title="Difference between forRoot and forChild"></a>Difference between forRoot and forChild</h1><p>Only call RouterModule.forRoot in the root AppRoutingModule (or the AppModule if that’s where you register top level application routes). In any other module, you must call the RouterModule.forChild method to register additional routes.</p>
<p><strong>Leave the default and the wildcard routes! These are concerns at the top level</strong> of the application itself.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://angular.io/guide/router" target="_blank" rel="noopener">https://angular.io/guide/router</a></li>
</ul>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>angular</tag>
        <tag>rxjs</tag>
        <tag>typescript</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>Redux</title>
    <url>/2017-12-12-Redux/</url>
    <content><![CDATA[<h1 id="whats-Effects"><a href="#whats-Effects" class="headerlink" title="whats @Effects"></a>whats @Effects</h1><p>You can almost think of your Effects as special kinds of reducer functions that are meant to be a place for you to put your async calls in such a way that the returned data can then be easily inserted into the store’s internal state for the application.</p>
<h1 id="rule-of-a-thumb-for-actions"><a href="#rule-of-a-thumb-for-actions" class="headerlink" title="rule of a thumb for actions"></a>rule of a thumb for actions</h1><p>As a good rule of thumb, try not to make one reducer that handles all the actions, but also do not make a separate reducer for each action. Group them in a way that makes sense for the application structure. </p>
]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>cloud computering</title>
    <url>/2017-12-18-Clouding/</url>
    <content><![CDATA[<h1 id="Concepts"><a href="#Concepts" class="headerlink" title="Concepts"></a>Concepts</h1><p>Cloud computing is the on-demand demand delivery of compute database storage applications and other IT resources through a cloud services platform via the Internet with <code>pay-as-you-go</code> pricing.</p>
<h1 id="The-6-advantages-of-cloud-computering"><a href="#The-6-advantages-of-cloud-computering" class="headerlink" title="The 6 advantages of cloud computering"></a>The 6 advantages of cloud computering</h1><h2 id="Trade-Capital-Expense-For-Variable-Expense"><a href="#Trade-Capital-Expense-For-Variable-Expense" class="headerlink" title="Trade Capital Expense For Variable Expense"></a>Trade Capital Expense For Variable Expense</h2><h2 id="Benefit-from-massive-economies-of-scale"><a href="#Benefit-from-massive-economies-of-scale" class="headerlink" title="Benefit from massive economies of scale"></a>Benefit from massive economies of scale</h2><h2 id="Stop-guessing-about-capacity"><a href="#Stop-guessing-about-capacity" class="headerlink" title="Stop guessing about capacity"></a>Stop guessing about capacity</h2><h2 id="Increase-speed-and-agility"><a href="#Increase-speed-and-agility" class="headerlink" title="Increase speed and agility"></a>Increase speed and agility</h2><h2 id="Stop-spending-money-running-and-maintaining-data-centers"><a href="#Stop-spending-money-running-and-maintaining-data-centers" class="headerlink" title="Stop spending money running and maintaining data centers"></a>Stop spending money running and maintaining data centers</h2><h2 id="Go-global-in-minutes"><a href="#Go-global-in-minutes" class="headerlink" title="Go global in minutes"></a>Go global in minutes</h2><h1 id="3-types-of-cloud-computing"><a href="#3-types-of-cloud-computing" class="headerlink" title="3 types of cloud computing"></a>3 types of cloud computing</h1><ol>
<li>IAAS</li>
<li>PAAS</li>
<li>SAAS</li>
</ol>
<p>“Certification is the beginning of your journey, not the end”</p>
<h2 id="Edge-location"><a href="#Edge-location" class="headerlink" title="Edge location"></a>Edge location</h2><p>Edge locations are CDN endpoints for CloudFront.</p>
<h2 id="IAM"><a href="#IAM" class="headerlink" title="IAM"></a>IAM</h2><p>Identity Access Management, to control who can access the service. IAM is apply to “Global”, it’s not releated to any single region.</p>
<h3 id="MFA"><a href="#MFA" class="headerlink" title="MFA"></a>MFA</h3><p>Multiple Factors Authentication, which can be virtual (software) or hardware devices.</p>
<h2 id="How-to-access-AWS"><a href="#How-to-access-AWS" class="headerlink" title="How to access AWS"></a>How to access AWS</h2><ol>
<li>Web console</li>
<li>CLI (command line)</li>
<li>SDK</li>
</ol>
<h2 id="Account"><a href="#Account" class="headerlink" title="Account"></a>Account</h2><p>By logging into webconsole with your email acess, you are in root account. The root account alwyas has full administrator access. You should not give these account credentials away to anyone. You should always secure this root account using multi factor authentication.</p>
<h2 id="Group"><a href="#Group" class="headerlink" title="Group"></a>Group</h2><p>A group is simply a place to store your users. Your users will inherit all permissions that the group has. Examples of groups might be developers, system administrators, etc.</p>
<h2 id="Policy"><a href="#Policy" class="headerlink" title="Policy"></a>Policy</h2><p>To set the permissions in a group you need to apply a policy to that group. Policies consist of JSON.</p>
<h2 id="S3"><a href="#S3" class="headerlink" title="S3"></a>S3</h2><ul>
<li>Its a safe place to store your files. They are object-based storage.</li>
<li>S3 is a global name space, so you won’t have same name with others.</li>
<li>There is unlimited storage. </li>
<li>Files are stored in Buckets, you can think buckets as folder.</li>
<li>There are versioning, encryptiong for file storage</li>
<li>Secure your data using Access Control Lists(Object level) and Bucket policies(folder level)</li>
</ul>
<h3 id="S3-solutions"><a href="#S3-solutions" class="headerlink" title="S3 solutions"></a>S3 solutions</h3><ul>
<li>S3 (99.99% availability , 99.999999999% durability)-&gt; S3 IA (infrequently accessed) -&gt; Reduced Redundancy Storage -&gt; Glacier (very cheap , used for archival, it takes 3-5 hours to restore from Glacier, its $0.01/GB/Month)</li>
<li>S3 is for current data while Glacier is for archived data.</li>
</ul>
<h3 id="S3-Transfer-Acceleration"><a href="#S3-Transfer-Acceleration" class="headerlink" title="S3 Transfer Acceleration"></a>S3 Transfer Acceleration</h3><p>It enable fast, easy and secure transfer of files over long distances between your end users and an S3 bucket. Transfer Acceleration takes advantage of Amazon CloudFront’s globally distributed edge locations. As data arrives at an edge location, data is routed to Amazon S3 over an optimized network path.</p>
<h1 id="Cloudfront"><a href="#Cloudfront" class="headerlink" title="Cloudfront"></a>Cloudfront</h1><p>It’s the CDN services. Amazon CloudFront can be used to deliever your entire website, including dynamic, static contents using a global network of edge locations. There are two types of distributions available: </p>
<ul>
<li>Web Distribution: typically used for websites.</li>
<li>RTMP distribution: used for media streaming</li>
</ul>
<h2 id="Edge-location-1"><a href="#Edge-location-1" class="headerlink" title="Edge location"></a>Edge location</h2><p>This is the location where content will be cached. This is separate to an AWS region/AZ (Avaiability Zones)</p>
<h2 id="Origin"><a href="#Origin" class="headerlink" title="Origin"></a>Origin</h2><p>This is the origin of all the files that the CDN will distribute. This can be an S3 bucket, an EC2 instance, and Elastic Load Balancer or Route53.</p>
<h1 id="EC2"><a href="#EC2" class="headerlink" title="EC2"></a>EC2</h1><p>Amazon Elastic Compute Cloud (EC2) is a web service that provies resizable compute capacity in the cloud. Basically EC2 are just virtual machines. EC2 reduces the time required to obtain and boot new server instances to minutes, allowing you to quickly scale capacity, both up and down, as your computing requirements changes.</p>
<h2 id="EC2-options"><a href="#EC2-options" class="headerlink" title="EC2 options"></a>EC2 options</h2><ul>
<li>On demand</li>
<li>reserved</li>
<li>Spot. Users with urgent computing needs for large amounts of additional capacity.</li>
<li>Dedicated</li>
</ul>
<h2 id="EBS"><a href="#EBS" class="headerlink" title="EBS"></a>EBS</h2><p>Elastic Block Storage. Amazon EBS allows you to create storage volumes and attach them to Amazon EC2 instances. Once attached, you can create a file system on top of these volumes, run a database, or use them in any other way you would use in a block device. It’s simply a virtual disk that you install your operating system on and all relevant files.</p>
<h1 id="openshift-vs-openstack"><a href="#openshift-vs-openstack" class="headerlink" title="openshift vs openstack"></a>openshift vs openstack</h1><p>“How does OpenShift relate to OpenStack?”, I answer “OpenShift Origin can run on top of OpenStack. They are complementary projects that work well together. OpenShift Origin is not presently part of OpenStack, and does not compete with OpenStack. If you stand up your own OpenStack system, you can make it even more useful by installing OpenShift Origin on top of it.”</p>
<p>OpenStack provides “Infrastructure-as-a-Service”, or “IaaS”. It provides bootable virtual machines, networking, block storage, object storage, and so forth. Some IaaS service providers based on OpenStack are HP Cloud and Rackspace Cloud. </p>
<p>The OpenShift hosted service provides “Platform-as-a-Service” or “PaaS”. It provides the necessary parts to quickly deploy and run a LAMP application: the web server, application server, application runtimes and libraries, database service, and so forth.</p>
]]></content>
      <tags>
        <tag>cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>cloud computering</title>
    <url>/2017-12-18-OpenStack-vs-OpenShift/</url>
    <content><![CDATA[<h1 id="openshift-vs-openstack"><a href="#openshift-vs-openstack" class="headerlink" title="openshift vs openstack"></a>openshift vs openstack</h1><p>The shoft and direct answer is `OpenShift Origin can run on top of OpenStack. They are complementary projects that work well together. OpenShift Origin is not presently part of OpenStack, and does not compete with OpenStack. If you stand up your own OpenStack system, you can make it even more useful by installing OpenShift Origin on top of it.’</p>
<h2 id="OpenStack-is-IAAS"><a href="#OpenStack-is-IAAS" class="headerlink" title="OpenStack is IAAS"></a>OpenStack is IAAS</h2><p>OpenStack provides “Infrastructure-as-a-Service”, or “IaaS”. It provides bootable virtual machines, networking, block storage, object storage, and so forth. Some IaaS service providers based on OpenStack are HP Cloud and Rackspace Cloud. </p>
<h2 id="OpenShift-is-PAAS"><a href="#OpenShift-is-PAAS" class="headerlink" title="OpenShift is PAAS"></a>OpenShift is PAAS</h2><p>The OpenShift hosted service provides “Platform-as-a-Service” or “PaaS”. It provides the necessary parts to quickly deploy and run a LAMP application: the web server, application server, application runtimes and libraries, database service, and so forth.</p>
]]></content>
      <tags>
        <tag>cloud</tag>
        <tag>OpenStack</tag>
        <tag>OpenShift</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS programming</title>
    <url>/2018-01-06-iOS/</url>
    <content><![CDATA[<h1 id="View"><a href="#View" class="headerlink" title="View"></a>View</h1><p>A view is also a responder (UIView is a subclass of UIResponder). This means that a view is subject to user interactions, such as taps and swipes. Thus, views are the basis not only of the interface that the user sees, but also of the interface that the user touches </p>
<h1 id="The-Window-and-Root-View"><a href="#The-Window-and-Root-View" class="headerlink" title="The Window and Root View"></a>The Window and Root View</h1><p>The top of the view hierarchy is the app’s window. It is an instance of UIWindow (or your own subclass thereof), which is a UIView subclass. Your app should have exactly one main window. It is created at launch time and is never destroyed or replaced</p>
<h1 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h1><p>In Swift, the syntax of message-sending is dot-notation. We start with the object; then there’s a dot (a period); then there’s the message. (Some messages are also followed by parentheses, but ignore them for now; the full syntax of message-sending is one of those details we’ll be filling in later.) This is valid Swift syntax:</p>
<p>fido.bark()<br>rover.sit()</p>
<p>The idea of everything being an object is a way of suggesting that even “primitive” linguistic entities can be sent messages. Take, for example, 1. It appears to be a literal digit and no more. It will not surprise you, if you’ve ever used any programming language, that you can say things like this in Swift:</p>
<p>let sum = 1 + 2</p>
<p>But it is surprising to find that 1 can be followed by a dot and a message. This is legal and meaningful in Swift (don’t worry about what it actually means):</p>
<p>let s = 1.description</p>
<p>Just as 1 is actually an object, + is actually a message; but it’s a message with special syntax (operator syntax). In Swift, every noun is an object, and every verb is a message.</p>
<p>extension Int {<br>    func sayHello() {<br>        print(“Hello, I’m (self)”)<br>    }<br>}
1.sayHello() // outputs: “Hello, I’m 1”</p>
<p>In Swift, then, 1 is an object. In some languages, such as Objective-C, it clearly is not; it is a “primitive” or scalar built-in data type. So the distinction being drawn here is between object types on the one hand and scalars on the other. In Swift, there are no scalars; all types are ultimately object types. That’s what “everything is an object” really means.</p>
<h1 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h1><p>Swift has classes, but 1 in Swift is not a class or an instance of a class: the type of 1, namely Int, is a struct, and 1 is an instance of a struct. And Swift has yet another kind of thing you can send messages to, called an enum.</p>
<p>So Swift has three kinds of object type: classes, structs, and enums. I like to refer to these as the three flavors of object type. Exactly how they differ from one another will emerge in due course. But they are all very definitely object types, and their similarities to one another are far stronger than their differences. For now, just bear in mind that these three flavors exist.</p>
<h1 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h1><p>A variable is a name for an object. Technically, it refers to an object; it is an object reference. Nontechnically, you can think of it as a shoebox into which an object is placed. The object may undergo changes, or it may be replaced inside the shoebox by another object, but the name has an integrity all its own. The object to which the variable refers is the variable’s value.</p>
<p>In Swift, no variable comes implicitly into existence; all variables must be declared. If you need a name for something, you must say “I’m creating a name.” You do this with one of two keywords: let or var. In Swift, declaration is usually accompanied by initialization — you use an equal sign to give the variable a value immediately, as part of the declaration. These are both variable declarations (and initializations):</p>
<p>let one = 1<br>var two = 2</p>
<h1 id="main-swift"><a href="#main-swift" class="headerlink" title="main.swift"></a>main.swift</h1><p>Swift also has a special rule that a file called main.swift, exceptionally, can have executable code at its top level, outside any function body, and this is the code that actually runs when the program runs. You can construct your app with a main.swift file, but in general you won’t need to.</p>
]]></content>
      <tags>
        <tag>iOS</tag>
        <tag>swift</tag>
      </tags>
  </entry>
  <entry>
    <title>ngrx</title>
    <url>/2018-01-08-ngrx/</url>
    <content><![CDATA[<h1 id="Why-Effects"><a href="#Why-Effects" class="headerlink" title="Why @Effects?"></a>Why @Effects?</h1><p>In a simple ngrx/store project without ngrx/effects there is really no good place to put your async calls. Suppose a user clicks on a button or types into an input box and then we need to make an asynchronous call. The dumb component will be the first to know about this action from the user, and it’s handler will be called when the button is actually clicked. However, we don’t want to put the logic to do our async call right in the dumb component since we want to keep it dumb! The only thing in the dumb component’s handler is it’s @Output emitter emitting an event to the smart component telling it that the button was clicked. Then the smart component gets the event and it’s handler function is triggered, but we don’t want to put the async login right in there because we want to keep it lean and only dipatching actions to our store so that the store can modify the state! Ok… but the store only handles actions in the reducer, and reducer are meant to be pure functions so where are we supposed to logically put our async calls so that we can put their response data in the store? The answer, friends, is @Effects! You can almost think of your Effects as special kinds of reducer functions that are meant to be a place for you to put your async calls in such a way that the returned data can then be easily inserted into the store’s internal state for the application.</p>
<h1 id="what’s-effects"><a href="#what’s-effects" class="headerlink" title="what’s effects"></a>what’s effects</h1><p> At it’s core, the Effects Class in simply just an Angular 2 Service:</p>
<p>  In Angular 2 a service is just a regular old TypeScript class with the @Injectable metadata, and when working with @Effects you make a single “Effect Class” or “Effect Service” that then contains various @Effect functions, each corresponding to an action dispatched by your ngrx store.</p>
<h1 id="sample"><a href="#sample" class="headerlink" title="sample"></a>sample</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">@Effect() update$ = <span class="keyword">this</span>.action$</span><br><span class="line">    .ofType(<span class="string">'SUPER_SIMPLE_EFFECT'</span>)</span><br><span class="line">    .switchMap( <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">      Observable.of(&#123;<span class="attr">type</span>: <span class="string">"SUPER_SIMPLE_EFFECT_HAS_FINISHED"</span>&#125;)</span><br><span class="line">    );</span><br></pre></td></tr></table></figure>

<p>Were using the TypeScript metadata to label our variable update$ (the $ is commonly used as a suffix for variables whose value is an observable) as an “ngrx effect” that will be triggered when we dispatch actions with the store (the same was we always send actions to the reducer or reducers). Then we see “this.action$.ofType(‘SUPER_SIMPLE_EFFECT’)”. Remeber, we’re translating the dispatched event into an observable, so .ofType means your taking in an observable and then returning the observable only if it is of that type.</p>
]]></content>
      <tags>
        <tag>Angular</tag>
        <tag>javascript</tag>
        <tag>ngrx</tag>
      </tags>
  </entry>
  <entry>
    <title>What is difference between declarations, providers and import in NgModule</title>
    <url>/2018-01-11-Angular-Module-Declaration-Import/</url>
    <content><![CDATA[<h1 id="What-is-difference-between-declarations-providers-and-import-in-NgModule"><a href="#What-is-difference-between-declarations-providers-and-import-in-NgModule" class="headerlink" title="What is difference between declarations, providers and import in NgModule"></a>What is difference between declarations, providers and import in NgModule</h1><ul>
<li>imports: is used to import supporting modules likes FormsModule, RouterModule, CommonModule, or any other custom-made feature module. makes the exported declarations of other modules available in the current module</li>
<li>declarations are to make directives (including components and pipes) from the current module available to other directives in the current module. Selectors of directives, components or pipes are only matched against the HTML if they are declared or imported. declaration is used to declare components, directives, pipes that belongs to the current module. Everything inside declarations knows each other. For example, if we have a component, say UsernameComponent, which display list of the usernames, and we also have a pipe, say toupperPipe, which transform string to uppercase letter string. Now If we want to show usernames in uppercase letters in our UsernameComponent, we can use the toupperPipe which we had created before but how UsernameComponent know that the toupperPipe exist and how we can access and use it, here comes the declarations, we can declare UsernameComponent and toupperPipe.</li>
<li>providers are to make services and values known to DI. They are added to the root scope and they are injected to other services or directives that have them as dependency.provider is used to inject the services required by components, directives, pipes in our module.</li>
</ul>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>Angular</tag>
        <tag>NodeJs</tag>
      </tags>
  </entry>
  <entry>
    <title>CORS :Cross-Origin Resource Sharing</title>
    <url>/2018-01-10-CORS/</url>
    <content><![CDATA[<p>Cross-Origin Request Sharing - CORS (A.K.A. Cross-Domain AJAX request) is an issue that most web developers might encounter, according to Same-Origin-Policy, browsers restrict client JavaScript in a security sandbox, usually JS cannot directly communicate with a remote server from a different domain. In the past developers created many tricky ways to achieve Cross-Domain resource request, most commonly using ways are:</p>
<p>Use Flash/Silverlight or server side as a “proxy” to communicate with remote.<br>JSON With Padding (JSONP).<br>Embeds remote server in an iframe and communicate through fragment or window.name, refer here.<br>Those tricky ways have more or less some issues, for example JSONP might result in security hole if developers simply “eval” it, and #3 above, although it works, both domains should build strict contract between each other, it neither flexible nor elegant IMHO:)</p>
<p>W3C had introduced Cross-Origin Resource Sharing (CORS) as a standard solution to provide a safe, flexible and a recommended standard way to solve this issue.</p>
<p>The Mechanism</p>
<p>From a high level we can simply deem CORS is a contract between client AJAX call from domain A and a page hosted on domain B, a typical Cross-Origin request/response would be:</p>
<p>DomainA AJAX request headers</p>
<p>Host DomainB.com<br>User-Agent Mozilla/5.0 (Windows NT 6.1; WOW64; rv:2.0) Gecko/20100101 Firefox/4.0<br>Accept text/html,application/xhtml+xml,application/xml;q=0.9,<em>/</em>;q=0.8,application/json<br>Accept-Language en-us;<br>Accept-Encoding gzip, deflate<br>Keep-Alive 115<br>Origin <a href="http://DomainA.com" target="_blank" rel="noopener">http://DomainA.com</a><br>DomainB response headers</p>
<p>Cache-Control private<br>Content-Type application/json; charset=utf-8<br>Access-Control-Allow-Origin DomainA.com<br>Content-Length 87<br>Proxy-Connection Keep-Alive<br>Connection Keep-Alive<br>The blue parts I marked above were the kernal facts, “Origin” request header “indicates where the cross-origin request or preflight request originates from”, the “Access-Control-Allow-Origin” response header indicates this page allows remote request from DomainA (if the value is * indicate allows remote requests from any domain).</p>
<p>As I mentioned above, W3 recommended browser to implement a “preflight request” before submiting the actually Cross-Origin HTTP request, in a nutshell it is an HTTP OPTIONS request:</p>
<p>OPTIONS DomainB.com/foo.aspx HTTP/1.1<br>If foo.aspx supports OPTIONS HTTP verb, it might return response like below:</p>
<p>HTTP/1.1 200 OK<br>Date: Wed, 01 Mar 2011 15:38:19 GMT<br>Access-Control-Allow-Origin: <a href="http://DomainA.com" target="_blank" rel="noopener">http://DomainA.com</a><br>Access-Control-Allow-Methods: POST, GET, OPTIONS, HEAD<br>Access-Control-Allow-Headers: X-Requested-With<br>Access-Control-Max-Age: 1728000<br>Connection: Keep-Alive<br>Content-Type: application/json<br>Only if the response contains “Access-Control-Allow-Origin” AND its value is “*” or contain the domain who submitted the CORS request, by satisfying this mandtory condition browser will submit the actual Cross-Domain request, and cache the result in “Preflight-Result-Cache”.</p>
<p>I blogged about CORS three years ago: AJAX Cross-Origin HTTP request</p>
]]></content>
      <tags>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>Minium Viable Product</title>
    <url>/2018-02-27-MVP/</url>
    <content><![CDATA[<p><a href="https://blog.leanstack.com/minimum-viable-product-mvp-7e280b0b9418" target="_blank" rel="noopener">https://blog.leanstack.com/minimum-viable-product-mvp-7e280b0b9418</a></p>
<p>What is a Minimum Viable Product (MVP)<br>A Minimum Viable Product is the smallest thing you can build that delivers customer value (and as a bonus captures some of that value back i.e. gets you paid).</p>
]]></content>
  </entry>
  <entry>
    <title>NodeJs Notes</title>
    <url>/2018-03-18-NodeJs-Notes/</url>
    <content><![CDATA[<h2 id="commands-to-read-files"><a href="#commands-to-read-files" class="headerlink" title="commands to read files"></a>commands to read files</h2><p> var lineReader = require(‘readline’).createInterface({<br>    input: require(‘fs’).createReadStream(‘C:\dev\node\input\git_reset_files.txt’)<br> });</p>
<p> lineReader.on(‘line’, function(line){<br>    console.log(‘git checkout ‘+line);<br> });</p>
]]></content>
      <tags>
        <tag>Angular</tag>
        <tag>NodeJs</tag>
      </tags>
  </entry>
  <entry>
    <title>Node errors troubleshooting</title>
    <url>/2018-05-11-Node-errors-DB/</url>
    <content><![CDATA[<p>Here is the typical erros log:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node_modules/@types/node/index.d.ts(6202,55): error TS2304: Cannot find name <span class="string">'Map'</span>.</span><br><span class="line">node_modules/@types/node/index.d.ts(6209,55): error TS2304: Cannot find name <span class="string">'Set'</span>.</span><br><span class="line">node_modules/@types/node/index.d.ts(6213,64): error TS2304: Cannot find name <span class="string">'Symbol'</span>.</span><br><span class="line">node_modules/@types/node/index.d.ts(6219,59): error TS2304: Cannot find name <span class="string">'WeakMap'</span>.</span><br><span class="line">node_modules/@types/node/index.d.ts(6220,59): error TS2304: Cannot find name <span class="string">'WeakSet'</span>.</span><br></pre></td></tr></table></figure>

<p>The main reason is above stuff are new to ES6, which are unavaiable in ES5. Hold no, you don’t need to change your typescript target to ES6, which may break projects and leads to tons of new regression testing.<br>Firsty, try to add following in tsconfig.json</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"lib": ["es2016", "dom"],</span><br></pre></td></tr></table></figure>

<p>If no luck, try following in command line, it should resolve this issue.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tsc index.ts --lib <span class="string">"es6"</span></span><br></pre></td></tr></table></figure>

<h2 id="certificate-error"><a href="#certificate-error" class="headerlink" title="certificate error"></a>certificate error</h2><p>Typical errors</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">events.js:183</span><br><span class="line">      throw er; // Unhandled <span class="string">'error'</span> event</span><br><span class="line">      ^</span><br><span class="line"></span><br><span class="line">Error: unable to verify the first certificate</span><br><span class="line">    at TLSSocket.&lt;anonymous&gt; (_tls_wrap.js:1103:38)</span><br><span class="line">    at emitNone (events.js:106:13)</span><br><span class="line">    at TLSSocket.emit (events.js:208:7)</span><br><span class="line">    at TLSSocket._finishInit (_tls_wrap.js:637:8)</span><br><span class="line">    at TLSWrap.ssl.onhandshakedone (_tls_wrap.js:467:38)</span><br></pre></td></tr></table></figure>

<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>add following to https request options<br> ,<br>      rejectUnauthorized: false,<br>        requestCert: true,<br>        agent: false</p>
<h2 id="error-ECONNREFUSED"><a href="#error-ECONNREFUSED" class="headerlink" title="error ECONNREFUSED"></a>error ECONNREFUSED</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Error: connect ECONNREFUSED 127.0.0.1:443</span><br><span class="line">    at Object._errnoException (util.js:1022:11)</span><br><span class="line">    at _exceptionWithHostPort (util.js:1044:20)</span><br><span class="line">    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1182:14)</span><br></pre></td></tr></table></figure>

<h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution:"></a>Solution:</h3><p>in the http request, do not use ‘url’ but ‘host’ and path<br>host: <code>xxx.com</code>,
    port: 443,<br>    path: <code>/login</code>,</p>
]]></content>
      <tags>
        <tag>Angular</tag>
        <tag>NodeJs</tag>
      </tags>
  </entry>
  <entry>
    <title>Strategy-Of-Openshift-Releases</title>
    <url>/2018-05-14-Strategy-Of-Openshift-Releases/</url>
    <content><![CDATA[<h1 id="Release-amp-Testing-Strategy"><a href="#Release-amp-Testing-Strategy" class="headerlink" title="Release &amp; Testing Strategy"></a>Release &amp; Testing Strategy</h1><p>There are various methods for safely releasing changes to Production. Each team must select what is appropriate for their own use case with consideration to risk, rollback approaches and testing approaches.</p>
<h1 id="The-following-are-options"><a href="#The-following-are-options" class="headerlink" title="The following are options:"></a>The following are options:</h1><h2 id="Canary-Release"><a href="#Canary-Release" class="headerlink" title="Canary Release"></a>Canary Release</h2><p>This is the lowest risk strategy since it allows for testing on a subset of users, and it allows for fast rollback:</p>
<ul>
<li>Build a new Environment</li>
<li>Use a routing tool (eg. Apigee) to test with a specific set of users</li>
<li>Bleed traffic across</li>
<li>Remove old environment</li>
</ul>
<h2 id="Blue-Green"><a href="#Blue-Green" class="headerlink" title="Blue Green"></a>Blue Green</h2><p> This is the classic zero-downtime deployment model that involves flipping traffic between two environments:</p>
<ul>
<li>Ensure your router has two entry points, one for Production Testing and one for Production traffic</li>
<li>Have two environments: <code>blue</code> and <code>green</code></li>
<li>If Production traffic is pointing to <code>blue</code> then deploy your changes on <code>green</code></li>
<li>Point your Production Testing traffic to <code>green</code></li>
<li>When verified, point Production traffic to <code>green</code></li>
<li>On the next release, deploy changes to <code>blue</code></li>
</ul>
]]></content>
      <tags>
        <tag>clud</tag>
        <tag>Openshift</tag>
      </tags>
  </entry>
  <entry>
    <title>How to setup nodejs to install package from intranet</title>
    <url>/2018-05-15-how-to-setup-node-config-in-intranet/</url>
    <content><![CDATA[<h1 id="Error-of-‘ECONNRESET’"><a href="#Error-of-‘ECONNRESET’" class="headerlink" title="Error of ‘ECONNRESET’"></a>Error of ‘ECONNRESET’</h1><p>You may face error <code>ECONNRESET</code> from intranet, even appropriate proxy tools (e.g. cntlm) is running. The errors may looks like</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g @angular/cli@latest</span><br><span class="line">npm WARN registry Unexpected warning <span class="keyword">for</span> http://registry.npmjs.org/: Miscellaneous Warning ECONNRESET: request to http://registry.npmjs.org/@angular%2fcli failed, reason: <span class="built_in">read</span> ECONNRESET</span><br><span class="line">npm WARN registry Using stale package data from http://registry.npmjs.org/ due to a request error during revalidation.</span><br><span class="line">npm ERR! code ECONNRESET</span><br><span class="line">npm ERR! errno ECONNRESET</span><br><span class="line">npm ERR! network request to http://registry.npmjs.org/@angular-devkit%2farchitect failed, reason: <span class="built_in">read</span> ECONNRESET</span><br><span class="line">npm ERR! network This is a problem related to network connectivity.</span><br><span class="line">npm ERR! network In most cases you are behind a proxy or have bad network settings.</span><br><span class="line">npm ERR! network</span><br><span class="line">npm ERR! network If you are behind a proxy, please make sure that the</span><br><span class="line">npm ERR! network <span class="string">'proxy'</span> config is <span class="built_in">set</span> properly.  See: <span class="string">'npm help config'</span></span><br><span class="line"></span><br><span class="line">npm ERR! A complete <span class="built_in">log</span> of this run can be found <span class="keyword">in</span>:</span><br><span class="line">npm ERR!     C:\Users\xxx\AppData\Roaming\npm-cache\_logs\2018-05-15T05_04_39_505Z-debug.log</span><br></pre></td></tr></table></figure>

<h2 id="resson"><a href="#resson" class="headerlink" title="resson"></a>resson</h2><p>You need to update npm configuration to make sure below config presence </p>
<ul>
<li>registry<br>and config <code>https-proxy</code> should NOT exist. </li>
</ul>
<p>You can run following command to remove it</p>
<ul>
<li>https-proxy</li>
</ul>
<h2 id="You-can-check-your-current-config-as"><a href="#You-can-check-your-current-config-as" class="headerlink" title="You can check your current config as"></a>You can check your current config as</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config list</span><br></pre></td></tr></table></figure>

<h2 id="To-fix-above-issues-please-run-following-commands"><a href="#To-fix-above-issues-please-run-following-commands" class="headerlink" title="To fix above issues, please run following commands"></a>To fix above issues, please run following commands</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config delete https-proxy</span><br></pre></td></tr></table></figure>

<h1 id="Error-of-‘code-E503’"><a href="#Error-of-‘code-E503’" class="headerlink" title="Error of ‘code E503’"></a>Error of ‘code E503’</h1><p>Sometimes when you run npm install, you can see error ‘E503’. </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g @angular/cli@latest                                            npm WARN registry Using stale package data from http://registry.npmjs.org/ due to a request error during revalidation.</span><br><span class="line">npm ERR! code E503</span><br><span class="line">npm ERR! 503 Service Unavailable: @angular-devkit/architect@0.6.0</span><br><span class="line"></span><br><span class="line">npm ERR! A complete <span class="built_in">log</span> of this run can be found <span class="keyword">in</span>:</span><br><span class="line">npm ERR!     C:\Users\xxx\AppData\Roaming\npm-cache\_logs\2018-05-15T05_40_53_127Z-debug.log</span><br></pre></td></tr></table></figure>

<p>That’s because property ‘proxy’ missing for npm. Please run below command to check wether it’s exist or not.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config list | grep <span class="string">'proxy'</span></span><br></pre></td></tr></table></figure>

<p>If not exist, run below command to add it back.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> proxy http://127.0.0.1:53128</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>nodejs</tag>
        <tag>javascript</tag>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>GIT useful scripts or error solutions</title>
    <url>/2018-05-24-GIT-scripts-bible-errors/</url>
    <content><![CDATA[<h1 id="Script-bible"><a href="#Script-bible" class="headerlink" title="Script bible"></a>Script bible</h1><h2 id="to-list-merge-conflicts-files-in-command-line"><a href="#to-list-merge-conflicts-files-in-command-line" class="headerlink" title="to list merge conflicts files in command line"></a>to list merge conflicts files in command line</h2><p>You can use either one of below three commands</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff --name-only --diff-filter=U</span><br><span class="line">git status --short | grep <span class="string">"^UU "</span></span><br><span class="line">git ls-files -u</span><br></pre></td></tr></table></figure>

<h2 id="One-line-command-to-add-commit-and-push-one-changed-file"><a href="#One-line-command-to-add-commit-and-push-one-changed-file" class="headerlink" title="One line command to add, commit and push one changed file"></a>One line command to add, commit and push one changed file</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status --short | awk <span class="string">'&#123;split($0, a);print a[2]&#125;'</span> | xargs git add &amp;&amp; git commit -m <span class="string">'commit changes'</span> &amp;&amp; git push origin BRANCH_NAME</span><br></pre></td></tr></table></figure>

<h2 id="to-show-files-commited-but-not-pushed"><a href="#to-show-files-commited-but-not-pushed" class="headerlink" title="to show files commited but not pushed"></a>to show files commited but not pushed</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff --<span class="built_in">stat</span> --cached origin/feature/BRANCH_NAME</span><br></pre></td></tr></table></figure>

<h2 id="to-view-file-content-changed"><a href="#to-view-file-content-changed" class="headerlink" title="to view file content changed"></a>to view file content changed</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git show PATH/abc.sql</span><br></pre></td></tr></table></figure>

<h2 id="show-file-change-logs"><a href="#show-file-change-logs" class="headerlink" title="show file change logs"></a>show file change logs</h2><p><code>git log</code> is the powerful command for this kind of tasks, as below sample commands</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --pretty=format:<span class="string">"%h [%an] %s"</span> --graph</span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span> --pretty=format:<span class="string">"%h [%an] %s"</span> --graph --since=7.days</span><br></pre></td></tr></table></figure>

<ul>
<li>%h means short hash</li>
<li>%s is subject</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --pretty=format:<span class="string">"%h [%an] %s"</span> --graph --since=7.days -S bower.json </span><br><span class="line">git <span class="built_in">log</span> --pretty=format:<span class="string">"%h [%an] %s"</span> --graph --since=7.days --grep Npm</span><br><span class="line">git <span class="built_in">log</span> --pretty=format:<span class="string">"%h [%an] %s"</span> --graph --since=7.days --committer todd</span><br></pre></td></tr></table></figure>

<ul>
<li>-S keyword_of_filter_files</li>
</ul>
<h2 id="Get-correct-branch-name"><a href="#Get-correct-branch-name" class="headerlink" title="Get correct branch name"></a>Get <code>correct</code> branch name</h2><p>Sometimes, if you checkout new branch with incorrect case. It still can check it out to local but you’ll get errors when you try to push it to remote.</p>
<p>To solve this issue, please use following command to get <code>correct</code> branch to checkout</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git fetch &amp;&amp; git <span class="keyword">for</span>-each-ref | grep -i <span class="string">'THE KEY WORD'</span>  | awk <span class="string">'&#123;split($0,a);print a[3]&#125;'</span></span><br><span class="line">git checkout -b BRANCH_NAME_FROM_ABOVE</span><br></pre></td></tr></table></figure>

<h1 id="Errors"><a href="#Errors" class="headerlink" title="Errors"></a>Errors</h1><h2 id="failed-to-push-change"><a href="#failed-to-push-change" class="headerlink" title="failed to push change"></a>failed to push change</h2><p>Errors as below</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fatal: unable to access <span class="string">'https://tzhang@stash.xxx.com/scm/abc.git/'</span>: SSL certificate prob</span><br><span class="line">lem: self signed certificate <span class="keyword">in</span> certificate chain</span><br></pre></td></tr></table></figure>

<h3 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions:"></a>Solutions:</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global http.sslVerify <span class="literal">false</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>Agile and SCRUM</title>
    <url>/2018-06-06-Scrum-Agile/</url>
    <content><![CDATA[<h2 id="Key-concept"><a href="#Key-concept" class="headerlink" title="Key concept"></a>Key concept</h2><p>In Scrum, a team is cross functional, meaning everyone is needed to take a feature from idea to implementation.</p>
<p>Within agile development, Scrum teams are supported by two specific roles. The first is a ScrumMaster, who can be thought of as a coach for the team, helping team members use the Scrum process to perform at the highest level.</p>
<p>The product owner (PO) is the other role, and in Scrum software development, represents the business, customers or users, and guides the team toward building the right product.</p>
]]></content>
  </entry>
  <entry>
    <title>rxjs pipe in depth</title>
    <url>/2018-05-15-rxjs-pipe-in-depth/</url>
    <content><![CDATA[<p><a href="https://stormforger.com/blog/2016/07/08/types-of-performance-testing/" target="_blank" rel="noopener">https://stormforger.com/blog/2016/07/08/types-of-performance-testing/</a></p>
<p>Learn more about load testing, scalability testing, stress, spike and soak testing, configuration testing as well as availability and resilience testing. </p>
<p>———–15/05/2018 notes —————<br><a href="https://blog.hackages.io/rxjs-5-5-piping-all-the-things-9d469d1b3f44" target="_blank" rel="noopener">https://blog.hackages.io/rxjs-5-5-piping-all-the-things-9d469d1b3f44</a><br>RxJS 5.5, piping all the things</p>
<p>So now we want a way to use those operators, how could we do that?</p>
<p>Well, we said those operators are “lettable” that means we can use them by calling the let method on an observable:</p>
<p>And if we want to chain multiple lettable operators we can keep dot chaining:</p>
<p>import { Observable } from ‘rxjs/Rx’;<br>import { filter, map, reduce } from ‘rxjs/operators’;</p>
<p>const filterOutEvens = filter(x =&gt; x % 2);<br>const sum = reduce((acc, next) =&gt; acc + next, 0);<br>const doubleBy = x =&gt; map(value =&gt; value * x);</p>
<p>const source$ = Observable.range(0, 10);</p>
<p>source$<br>  .let(filterOutEvens)<br>  .let(doubleBy(2))<br>  .let(sum)<br>  .subscribe(x =&gt; console.log(x)); // 50</p>
<hr>
<p>  Meaning we can easily compose a bunch of pure function operators and pass them as a single operator to an observable!</p>
<p>Conclusion<br>With those tools in hand, you can write RxJS code that is much more re-usable by just piping your (pure functions) operators together and easily re-use shared logic.</p>
<p>  import { Observable, pipe } from ‘rxjs/Rx’;<br>import { filter, map, reduce } from ‘rxjs/operators’;</p>
<p>const filterOutEvens = filter(x =&gt; x % 2);<br>const sum = reduce((acc, next) =&gt; acc + next, 0);<br>const doubleBy = x =&gt; map(value =&gt; value * x);</p>
<p>const complicatedLogic = pipe(<br>  filterOutEvens,<br>  doubleBy(2),<br>  sum<br>);</p>
<p>const source$ = Observable.range(0, 10);</p>
<p>source$.let(complicatedLogic).subscribe(x =&gt; console.log(x)); // 50</p>
<p><a href="https://github.com/ReactiveX/rxjs/blob/master/doc/pipeable-operators.md" target="_blank" rel="noopener">https://github.com/ReactiveX/rxjs/blob/master/doc/pipeable-operators.md</a><br>What?<br>What is a pipeable operator? Simply put, a function that can be used with the current let operator. It used to be the origin of the name (“lettable”), but that was confusing and we call them “pipeable” now because they’re intended to be used with the pipe utility. <code>A pipeable operator is basically any function that returns a function with the signature: &lt;T, R&gt;(source: Observable&lt;T&gt;) =&gt; Observable&lt;R&gt;.</code></p>
<p>There is a pipe method built into Observable now at Observable.prototype.pipe that сan be used to compose the operators in similar manner to what you’re used to with dot-chaining (shown below).</p>
<p>There is also a pipe utility function at rxjs/util/pipe that can be used to build reusable pipeable operators from other pipeable operators.</p>
<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>You pull in any operator you need from one spot, under ‘rxjs/operators’ (plural!). It’s also recommended to pull in the Observable creation methods you need directly as shown below with range:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; range &#125; <span class="keyword">from</span> <span class="string">'rxjs/observable/range'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; map, filter, scan &#125; <span class="keyword">from</span> <span class="string">'rxjs/operators'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> source$ = range(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">source$.pipe(</span><br><span class="line">  filter(<span class="function"><span class="params">x</span> =&gt;</span> x % <span class="number">2</span> === <span class="number">0</span>),</span><br><span class="line">  map(<span class="function"><span class="params">x</span> =&gt;</span> x + x),</span><br><span class="line">  scan(<span class="function">(<span class="params">acc, x</span>) =&gt;</span> acc + x, <span class="number">0</span>)</span><br><span class="line">)</span><br><span class="line">.subscribe(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(x))</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.angularindepth.com/rxjs-understanding-lettable-operators-fe74dda186d3" target="_blank" rel="noopener">https://blog.angularindepth.com/rxjs-understanding-lettable-operators-fe74dda186d3</a><br>RxJS: Understanding Lettable Operators</p>
<h2 id="What-are-lettable-operators-and-what-does-lettable-mean"><a href="#What-are-lettable-operators-and-what-does-lettable-mean" class="headerlink" title="What are lettable operators and what does lettable mean?"></a>What are lettable operators and what does lettable mean?</h2><p>If lettable operators are used with a method named pipe, you might wonder why they are referred to as lettable. The term is derived from RxJS’s let operator.</p>
<p><code>The let operator is conceptually similar to the map operator, but instead of taking a projection function that receives and returns a value, let takes a function that receives and returns an observable.</code> It’s unfortunate that let is one of the less-well-known operators, as it’s very useful for composing reusable functionality.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Rx <span class="keyword">from</span> <span class="string">"rxjs"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">retry</span>&lt;<span class="title">T</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  count: <span class="built_in">number</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  wait: <span class="built_in">number</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span>): (<span class="params">source: Rx.Observable&lt;T&gt;</span>) =&gt; <span class="title">Rx</span>.<span class="title">Observable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">source: Rx.Observable&lt;T&gt;</span>) =&gt;</span> source</span><br><span class="line">    .retryWhen(<span class="function"><span class="params">errors</span> =&gt;</span> errors</span><br><span class="line">      <span class="comment">// Each time an error occurs, increment the accumulator.</span></span><br><span class="line">      <span class="comment">// When the maximum number of retries have been attempted, throw the error.</span></span><br><span class="line">      .scan(<span class="function">(<span class="params">acc, error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (acc &gt;= count) &#123; <span class="keyword">throw</span> error; &#125;</span><br><span class="line">        <span class="keyword">return</span> acc + <span class="number">1</span>;</span><br><span class="line">      &#125;, <span class="number">0</span>)</span><br><span class="line">      <span class="comment">// Wait the specified number of milliseconds between retries.</span></span><br><span class="line">      .delay(wait)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>When retry is called, it’s passed the number of retry attempts that should be made and the number of milliseconds to wait between attempts, and it returns a function that receives an observable and returns another observable into which the retry logic is composed. The returned function can be passed to the let operator, like this:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Rx <span class="keyword">from</span> <span class="string">"rxjs"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; retry &#125; <span class="keyword">from</span> <span class="string">"./retry"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> name = Rx.Observable.ajax</span><br><span class="line">  .getJSON&lt;&#123; name: <span class="built_in">string</span> &#125;&gt;(<span class="string">"/api/employees/alice"</span>)</span><br><span class="line">  .let(retry(<span class="number">3</span>, <span class="number">1000</span>))</span><br><span class="line">  .map(<span class="function"><span class="params">employee</span> =&gt;</span> employee.name)</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> Rx.Observable.of(<span class="literal">null</span>));</span><br><span class="line"> <span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Using the let operator, we’ve been able to create a reusable function much more simply than we would have been able to create a prototype-patching operator. What we’ve created is a lettable operator.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Lettable operators are a higher-order functions. Lettable operators return functions that receive and return observables; and those functions can be passed to the let operator.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">We can also use our lettable retry operator with pipe, like this:</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>typescript</span><br><span class="line"><span class="keyword">import</span> &#123; ajax &#125; <span class="keyword">from</span> <span class="string">"rxjs/observable/dom/ajax"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; of &#125; <span class="keyword">from</span> <span class="string">"rxjs/observable/of"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; catchError, map &#125; <span class="keyword">from</span> <span class="string">"rxjs/operators"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; retry &#125; <span class="keyword">from</span> <span class="string">"./retry"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> name = ajax</span><br><span class="line">  .getJSON&lt;&#123; name: <span class="built_in">string</span> &#125;&gt;(<span class="string">"/api/employees/alice"</span>)</span><br><span class="line">  .pipe(</span><br><span class="line">    retry(<span class="number">3</span>, <span class="number">1000</span>),</span><br><span class="line">    map(<span class="function"><span class="params">employee</span> =&gt;</span> employee.name),</span><br><span class="line">    catchError(<span class="function"><span class="params">error</span> =&gt;</span> of(<span class="literal">null</span>))</span><br><span class="line">  );</span><br></pre></td></tr></table></figure>

<p>Let’s return to our retry function and replace the chained methods with lettable operators and a pipe call, so that it looks like this:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">"rxjs/Observable"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; delay, retryWhen, scan &#125; <span class="keyword">from</span> <span class="string">"rxjs/operators"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">retry</span>&lt;<span class="title">T</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  count: <span class="built_in">number</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  wait: <span class="built_in">number</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span>): (<span class="params">source: Observable&lt;T&gt;</span>) =&gt; <span class="title">Observable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> retryWhen(<span class="function"><span class="params">errors</span> =&gt;</span> errors.pipe(</span><br><span class="line">    <span class="comment">// Each time an error occurs, increment the accumulator.</span></span><br><span class="line">    <span class="comment">// When the maximum number of retries have been attempted, throw the error.</span></span><br><span class="line">    scan(<span class="function">(<span class="params">acc, error</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (acc &gt;= count) &#123; <span class="keyword">throw</span> error; &#125;</span><br><span class="line">      <span class="keyword">return</span> acc + <span class="number">1</span>;</span><br><span class="line">    &#125;, <span class="number">0</span>),</span><br><span class="line">    <span class="comment">// Wait the specified number of milliseconds between retries.</span></span><br><span class="line">    delay(wait)</span><br><span class="line">  ));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>With the chained methods replaced, we now have a proper, reusable lettable operator that imports only what it requires.</p>
<h2 id="Why-should-lettable-operators-should-be-preferred"><a href="#Why-should-lettable-operators-should-be-preferred" class="headerlink" title="Why should lettable operators should be preferred?"></a>Why should lettable operators should be preferred?</h2><p>For application developers, lettable operators are much easier to manage:</p>
<ul>
<li>Rather then relying upon operators being patched into Observable.prototype, lettable operators are explicitly imported into the modules in which they are used.</li>
<li>It’s easy for TypeScript and bundlers to determine whether the lettable operators imported into a module are actually used. And if they are not, they can be left unbundled. If prototype patching is used, this task is manual and tedious.</li>
<li>For library authors, lettable operators are much less verbose than call-based alternative, but it’s the correct inference of types that is — at least for me — the biggest advantage.</li>
</ul>
<hr>
<p>Agreed, the pipe is awesome for composing custom rx operators. But why do we see more and more people using it even when not combining re-usable variables — instead of just chaining methods?</p>
<p>Meaning, we use to write e.g…</p>
<p>const source$ = Observable.range(0, 10);<br>source$<br>  .filter(x =&gt; x % 2)<br>  .reduce((acc, next) =&gt; acc + next, 0)<br>  .map(value =&gt; value * 2)<br>  .subscribe(x =&gt; console.log(x));<br>Above is imho much cleaner than what I see more nowadays:</p>
<p>const source$ = Observable.range(0, 10);<br>source$.pipe(<br>  filter(x =&gt; x % 2),<br>  reduce((acc, next) =&gt; acc + next, 0),<br>  map(value =&gt; value * 2)<br>).subscribe(x =&gt; console.log(x));<br>Are there performance advantages by using the standalone operators instead of chaining?</p>
<hr>
<p><a href="https://webpack.js.org/guides/tree-shaking/" target="_blank" rel="noopener">https://webpack.js.org/guides/tree-shaking/</a><br>Tree shaking is a term commonly used in the JavaScript context for dead-code elimination. It relies on the static structure of ES2015 module syntax, i.e. import and export. The name and concept have been popularized by the ES2015 module bundler rollup.</p>
<p>So, what we’ve learned is that in order to take advantage of tree shaking, you must…</p>
<p>Use ES2015 module syntax (i.e. import and export).<br>Add a “sideEffects” entry to your project’s package.json file.<br>Include a minifier that supports dead code removal (e.g. the UglifyJSPlugin).</p>
<p>— english—<br>it can safely prune unused exports.</p>
<p>Trim (a tree, shrub, or bush) by cutting away dead or overgrown branches or stems, especially to encourage growth.</p>
<p>‘now is the time to prune roses’</p>
]]></content>
      <tags>
        <tag>Angular</tag>
        <tag>NodeJs</tag>
        <tag>RxJS</tag>
      </tags>
  </entry>
  <entry>
    <title>DevOps-Philosophy</title>
    <url>/2018-06-01-DevOps-Philosophy/</url>
    <content><![CDATA[<h2 id="DevOps-Model-Defined"><a href="#DevOps-Model-Defined" class="headerlink" title="DevOps Model Defined"></a>DevOps Model Defined</h2><p>DevOps is the combination of cultural philosophies, practices, and tools that increases an organization’s ability to deliver applications and services at high velocity: evolving and improving products at a faster pace than organizations using traditional software development and infrastructure management processes. This speed enables organizations to better serve their customers and compete more effectively in the market.</p>
<p><img src="http://cloudsdocker.github.io/images/DevOps.png" alt></p>
<h2 id="What’s-means-to-team"><a href="#What’s-means-to-team" class="headerlink" title="What’s means to team"></a>What’s means to team</h2><p> These two teams are merged into a single team where the engineers work across the entire application lifecycle, from development and test to deployment to operations, and develop a range of skills not limited to a single function.</p>
<h2 id="DevSecOps"><a href="#DevSecOps" class="headerlink" title="DevSecOps"></a>DevSecOps</h2><p> In some DevOps models, quality assurance and security teams may also become more tightly integrated with development and operations and throughout the application lifecycle. When security is the focus of everyone on a DevOps team, this is sometimes referred to as DevSecOps.</p>
<h1 id="Benefits"><a href="#Benefits" class="headerlink" title="Benefits"></a>Benefits</h1><ul>
<li>Velocity: microservices and continuous delivery let teams take ownership of services and then release updates to them quicker.</li>
<li>Reliablity: CI, CD, automated testing</li>
<li>Governmence:  using infrastructure as code and policy as code, you can define and then track compliance at scale.</li>
</ul>
<h2 id="mindset"><a href="#mindset" class="headerlink" title="mindset"></a>mindset</h2><p>DevOps Cultural Philosophy<br>Transitioning to DevOps requires a change in culture and mindset. At its simplest, DevOps is about removing the barriers between two traditionally siloed teams, development and operations. In some organizations, there may not even be separate development and operations teams; engineers may do both. </p>
<h1 id="Practice"><a href="#Practice" class="headerlink" title="Practice"></a>Practice</h1><h2 id="very-frequent-but-small-release"><a href="#very-frequent-but-small-release" class="headerlink" title="very frequent but small release"></a>very frequent but small release</h2><p>One fundamental practice is to perform very frequent but small updates. This is how organizations innovate faster for their customers. These updates are usually more incremental in nature than the occasional updates performed under traditional release practices. Frequent but small updates make each deployment less risky. They help teams address bugs faster because teams can identify the last deployment that caused the error. </p>
<h2 id="microservices"><a href="#microservices" class="headerlink" title="microservices"></a>microservices</h2><p>use a microservices architecture to make their applications more flexible and enable quicker innovation.This architecture reduces the coordination overhead of updating applications, and when each service is paired with small, agile teams who take ownership of each service, organizations can move more quickly.</p>
<h1 id="Tech-Concepts"><a href="#Tech-Concepts" class="headerlink" title="Tech Concepts"></a>Tech Concepts</h1><h2 id="Continuous-Integration"><a href="#Continuous-Integration" class="headerlink" title="Continuous Integration"></a>Continuous Integration</h2><p>Continuous integration is a software development practice where developers regularly merge their code changes into a central repository, after which automated builds and tests are run. The key goals of continuous integration are to find and address bugs quicker, improve software quality, and reduce the time it takes to validate and release new software updates.</p>
<h2 id="Continuous-Delivery"><a href="#Continuous-Delivery" class="headerlink" title="Continuous Delivery"></a>Continuous Delivery</h2><p>Continuous delivery is a software development practice where code changes are automatically built, tested, and prepared for a release to production. <code>It expands upon continuous integration by deploying all code changes to a testing environment and/or a production environment after the build stage</code>. When continuous delivery is implemented properly, developers will always have a deployment-ready build artifact that has passed through a standardized test process.</p>
<h2 id="Monitoring-and-Logging"><a href="#Monitoring-and-Logging" class="headerlink" title="Monitoring and Logging"></a>Monitoring and Logging</h2><p>Organizations monitor metrics and logs to see how application and infrastructure performance impacts the experience of their product’s end user. By capturing, categorizing, and then analyzing data and logs generated by applications and infrastructure, organizations understand how changes or updates impact users, shedding insights into the root causes of problems or unexpected changes. Active monitoring becomes increasingly important as services must be available 24/7 and as application and infrastructure update frequency increases. Creating alerts or performing real-time analysis of this data also helps organizations more proactively monitor their services.</p>
<h2 id="Communication-and-Collaboration"><a href="#Communication-and-Collaboration" class="headerlink" title="Communication and Collaboration"></a>Communication and Collaboration</h2><p>Increased communication and collaboration in an organization is one of the key cultural aspects of DevOps. The use of DevOps tooling and automation of the software delivery process establishes collaboration by physically bringing together the workflows and responsibilities of development and operations.</p>
]]></content>
  </entry>
  <entry>
    <title>Portactor</title>
    <url>/2018-06-07-Protractor/</url>
    <content><![CDATA[<h2 id="Better-to-use-smart-wait"><a href="#Better-to-use-smart-wait" class="headerlink" title="Better to use smart wait"></a>Better to use smart wait</h2><p>If possible, you’d better to use <code>smart wait</code> in protractor e2e testing. Which could increase end to end testing efficiency. Normally dev tend to use sleep or wait to insert some stop during execution. What’s the difference of these two?<br>The difference between browser.sleep() and browser.wait() is that browser.wait() expects a specific value/condition. This wait condition is valid of Protractor or any WebDriver framework.</p>
<p>An Expectation for checking an element is visible and enabled such that you can click it.</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">browser.wait(EC.elementToBeClickable($(‘#abc’)),5000);</span><br></pre></td></tr></table></figure>

<p>Here are some protractor functions utilities.</p>
<h3 id="textToBePresentInElement"><a href="#textToBePresentInElement" class="headerlink" title="textToBePresentInElement"></a>textToBePresentInElement</h3><p>An expectation for checking if the given text is present in the element.</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">browser.wait(EC.textToBePresentInElement($(‘#abc’),’foo’),5000);</span><br></pre></td></tr></table></figure>

<h3 id="presenceOf"><a href="#presenceOf" class="headerlink" title="presenceOf"></a>presenceOf</h3><p>An expectation for checking that an element is present on the DOM of a page.</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">browser.wait(EC.presenceOf($(‘#abc’)),5000);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; go, click, see, below, slow, type &#125; <span class="keyword">from</span> <span class="string">'blue-harvest'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; browser, ExpectedConditions &#125; <span class="keyword">from</span> <span class="string">'protractor'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> client = <span class="string">'TEST CLIENT'</span>;</span><br><span class="line"><span class="keyword">const</span> clientFullName = <span class="string">'TEST CLIENT LTD'</span>;</span><br><span class="line"><span class="keyword">const</span> timeOut = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'Should show bell potter'</span>, () =&gt; &#123;</span><br><span class="line">    beforeEach(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="keyword">await</span> go(<span class="string">'http://localhost:4200/#/dashboard'</span>)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'should be able to search bell potter'</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> slow.click(<span class="string">'Search clients or accounts'</span>)</span><br><span class="line">        <span class="keyword">await</span> type(<span class="string">`TEST`</span>);</span><br><span class="line"></span><br><span class="line">        browser.wait(see(client), timeOut)</span><br><span class="line">        <span class="keyword">await</span> click(client)</span><br><span class="line"></span><br><span class="line">        browser.wait(see(clientFullName), timeOut)</span><br><span class="line">        expect(<span class="keyword">await</span> below(clientFullName).see(<span class="string">'GO'</span>)).toBeTruthy();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://medium.com/@ited.ro/how-to-use-smart-waits-with-protractor-how-to-use-expected-conditions-with-protractor-10c545c670be" target="_blank" rel="noopener">https://medium.com/@ited.ro/how-to-use-smart-waits-with-protractor-how-to-use-expected-conditions-with-protractor-10c545c670be</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Foreign Exchange</title>
    <url>/2018-06-09-FX/</url>
    <content><![CDATA[<h1 id="Foreign-Exchange-markets"><a href="#Foreign-Exchange-markets" class="headerlink" title="Foreign Exchange markets"></a>Foreign Exchange markets</h1><p>Generally, FX Swap is the biggest portion of FX market, followed by FX Spot, outright forward, Options.</p>
<h2 id="Forward"><a href="#Forward" class="headerlink" title="Forward"></a>Forward</h2><p>forward contract or simply a forward is a non-standardized contract between two parties to buy or to sell an asset at a specified future time at a price agreed upon today, making it a type of derivative instrument</p>
<p>A foreign exchange swap has two legs - a spot transaction and a forward transaction - that are executed simultaneously for the same quantity, and therefore offset each other. </p>
]]></content>
      <tags>
        <tag>FX</tag>
        <tag>Financial</tag>
      </tags>
  </entry>
  <entry>
    <title>Jboss tips</title>
    <url>/2018-06-14-JBoss-Console/</url>
    <content><![CDATA[<h1 id="commands"><a href="#commands" class="headerlink" title="commands:"></a>commands:</h1><h2 id="to-list-all-deployed-applications"><a href="#to-list-all-deployed-applications" class="headerlink" title="to list all deployed applications"></a>to list all deployed applications</h2><p>jboss\jboss-eap-6.4\bin\jboss-cli.bat –connect –controller=localhost:7373 –command=/deployment=*:read-attribute(name=name)</p>
<h2 id="to-list-JNDI-tree"><a href="#to-list-JNDI-tree" class="headerlink" title="to list JNDI tree:"></a>to list JNDI tree:</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /subsystem=mail</span><br><span class="line">ls</span><br><span class="line">/subsystem=mail/mail-session=java:jboss/mail/payment_mail</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> /subsystem=naming:jndi-view()</span><br><span class="line"></span><br><span class="line"> &#125;,</span><br><span class="line"><span class="string">"mail"</span> =&gt; &#123;</span><br><span class="line">    <span class="string">"class-name"</span> =&gt; <span class="string">"javax.naming.Context"</span>,</span><br><span class="line">    <span class="string">"children"</span> =&gt; &#123;</span><br><span class="line">        <span class="string">"Default"</span> =&gt; &#123;</span><br><span class="line">            <span class="string">"class-name"</span> =&gt; <span class="string">"javax.mail.Session"</span>,</span><br><span class="line">            <span class="string">"value"</span> =&gt; <span class="string">"javax.mail.Session@22951e8f"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"payment_mail"</span> =&gt; &#123;</span><br><span class="line">            <span class="string">"class-name"</span> =&gt; <span class="string">"javax.mail.Session"</span>,</span><br><span class="line">            <span class="string">"value"</span> =&gt; <span class="string">"javax.mail.Session@548df9e2"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>




<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">management-interfaces</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">native-interface</span> <span class="attr">security-realm</span>=<span class="string">"ManagementRealm"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">socket-binding</span> <span class="attr">native</span>=<span class="string">"management-native"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">native-interface</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">http-interface</span> <span class="attr">security-realm</span>=<span class="string">"ManagementRealm"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">socket-binding</span> <span class="attr">http</span>=<span class="string">"management-http"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">http-interface</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">management-interfaces</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">management</span>&gt;</span></span><br><span class="line">xxx</span><br><span class="line"><span class="tag">&lt;<span class="name">socket-binding-group</span> <span class="attr">name</span>=<span class="string">"standard-sockets"</span> <span class="attr">default-interface</span>=<span class="string">"public"</span> <span class="attr">port-offset</span>=<span class="string">"$&#123;jboss.socket.binding.port-offset:0&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">socket-binding</span> <span class="attr">name</span>=<span class="string">"management-native"</span> <span class="attr">interface</span>=<span class="string">"management"</span> <span class="attr">port</span>=<span class="string">"$&#123;jboss.management.native.port:7373&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">socket-binding</span> <span class="attr">name</span>=<span class="string">"management-http"</span> <span class="attr">interface</span>=<span class="string">"management"</span> <span class="attr">port</span>=<span class="string">"$&#123;jboss.management.http.port:7371&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Jboss</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM wram up</title>
    <url>/2018-06-10-JVM-Warm-up/</url>
    <content><![CDATA[<h1 id="JVM-wram-up"><a href="#JVM-wram-up" class="headerlink" title="JVM wram up"></a>JVM wram up</h1><p>Keeping this in mind, for low-latency applications, we need to cache all classes beforehand – so that they’re available instantly when accessed at runtime.</p>
<p>This process of tuning the JVM is known as warming up.</p>
<h1 id="Escape-Analysis"><a href="#Escape-Analysis" class="headerlink" title="Escape Analysis"></a>Escape Analysis</h1><p>Escape analysis is a technique by which the Java Hotspot Server Compiler can analyze the scope of a new object’s uses and decide whether to allocate it on the Java heap.</p>
<p>Based on escape analysis, an object’s escape state might be one of the following:</p>
<ul>
<li>GlobalEscape – An object escapes the method and thread. For example, an object stored in a static field, or, stored in a field of an escaped object, or, returned as the result of the current method.</li>
<li>ArgEscape – An object passed as an argument or referenced by an argument but does not globally escape during a call. This state is determined by analyzing the bytecode of called method.</li>
<li>NoEscape – A scalar replaceable object, meaning its allocation could be removed from generated code.</li>
</ul>
<p>After escape analysis, the server compiler eliminates scalar replaceable object allocations and associated locks from generated code. The server compiler also eliminates locks for all non-globally escaping objects. It does not replace a heap allocation with a stack allocation for non-globally escaping objects.</p>
<p>The JIT aggressively inlines methods, removing the overhead of method calls. Methods that can be inlined include static, private or final methods but also public methods if it can be determined that they are not overridden. Because of this, subsequent class loading can invalidate the previously generated code. Because inlining every method everywhere would take time and would generate an unreasonably big binary, the JIT compiler inlines the hot methods first until it reaches a threshold. To determine which methods are hot, the JVM keeps counters to see how many times a method is called and how many loop iterations it has executed. This means that inlining happens only after a steady state has been reached, so you need to repeat the operations a certain number of times before there is enough profiling information available for the JIT compiler to do its job.</p>
<p>Rather than trying to guess what the JIT is doing, you can take a peek at what’s happening by turning on java command line flags: -XX:+PrintCompilation -XX:+UnlockDiagnosticVMOptions -XX:+PrintInlining</p>
<p>Here is what they do:</p>
<pre><code>-XX:+PrintCompilation: logs when JIT compilation happens
-XX:+UnlockDiagnosticVMOptions: enables other flags like -XX:+PrintInlining</code></pre><p>GlobalEscape and ArgEscape objects must be allocated on the heap, but for ArgEscape objects it is possible to remove some locking and memory synchronization overhead because these objects are only visible from the calling thread.</p>
<p>The NoEscape objects may be allocated freely, for example on the stack instead of on the heap. In fact, under some circumstances, it is not even necessary to construct an object at all, but instead only the object’s scalar values, such as an int for the object Integer. Synchronization may be removed too, because we know that only this thread will use the objects. For example, if we were to use the somewhat ancient StringBuffer (which as opposed to StringBuilder has synchronized methods), then these synchronizations could safely be removed.</p>
<p>EA is currently only available under the C2 HotSpot Compiler so we have to make sure that we run in -server mode.</p>
<h2 id="Why-It-Matters"><a href="#Why-It-Matters" class="headerlink" title="Why It Matters"></a>Why It Matters</h2><p>In theory, NoEscape objects objects can be allocated on the stack or even in CPU registers using EA,  giving very fast execution.</p>
<p>When we allocate objects on the heap, we start to drain our CPU caches because objects are placed on different addresses on the heap possibly far away from each other. This way we will quickly deplete our L1 CPU cache and performance will decrease. With EA and stack allocation on the other hand, we are using memory that (most likely) is already in the L1 cache anyhow.  So, EA and stack allocation will improve our localization of data. This is good from a performance standpoint.</p>
<p>Obviously, the garbage collects needs to run much less frequently when we are using EA with stack allocation. This is perhaps the biggest performance advantage. Recall that each time the JVM runs a complete heap scan, we take performance out of our CPUs and the CPU caches will quickly deplete. Not to mention if we have virtual memory paged out on our server, whereby GC is devastating for performance.</p>
<p>The most important advantage of EA is not performance though. EA allows us to use local abstractions like Lambdas, Functions, Streams, Iterators etc. without any significant performance penalty so that we can write better and more readable code. Code that describes what we are doing rather than how it is done.</p>
<p>The GC cleans up the heap and not the stack. The stack is cleaned up automatically when methods return to their caller whereby the stack pointer is reset to its former value. So GC will clean up objects that ended up on the stack before EA/C2 compilation could be performed. The actual instances (or rather their corresponding representations) live on the stack, there are no referenced objects on the stack in the context of EA optimizations.</p>
<h1 id="JIT-optimization"><a href="#JIT-optimization" class="headerlink" title="JIT optimization"></a>JIT optimization</h1><p>Some JIT Compilation Techniques</p>
<p>One of the most common JIT compilation techniques used by Java HotSpot VM is inlining, which is the practice of substituting the body of a method into the places where that method is called. Inlining saves the cost of calling the method; no new stack frames need to be created. By default, Java HotSpot VM will try to inline methods that contain less than 35 bytes of JVM bytecode.</p>
<p>Another common optimization that Java HotSpot VM makes is monomorphic dispatch, which relies on the observed fact that, usually, there aren’t paths through a method that cause an object reference to be of one type most of the time but of another type at other times.</p>
<p>You might think that having different types via different code paths would be ruled out by Java’s static typing, but remember that an instance of a subtype is always a valid instance of a supertype (this principle is known as the Liskov substitution principle, after Barbara Liskov). This situation means that there could be two paths into a method—for example, one that passes an instance of a supertype and one that passes an instance of a subtype—which would be legal by the rules of Java’s static typing (and does occur in practice).</p>
<p>In the usual case (the monomorphic case), however, having different, path-dependent types does not happen. So we know the exact method definitions that will be called when methods are called on the passed object, because we don’t need to check which override is actually being used. This means we can eliminate the overhead of doing virtual method lookup, so the JIT compiler can emit optimized machine code that is often faster than an equivalent C++ call (because in the C++ case, the virtual lookup cannot easily be eliminated).<br>The two Java HotSpot VM compiler modes use different techniques for JIT compilation, and they can output very different machine code for the same Java method. Modern Java applications, however, can usually make use of both compilation modes.</p>
<p>Java HotSpot VM uses many other techniques to optimize the code that JIT compilation produces. Loop optimization, type sharpening, dead-code elimination, and intrinsics are just some of the other ways that Java HotSpot VM tries to optimize code as much as it can. Techniques are frequently layered one on top of another, so that once one optimization has been applied, the compiler might be able to see more optimizations that can be performed.</p>
<h1 id="Compilation-Modes"><a href="#Compilation-Modes" class="headerlink" title="Compilation Modes"></a>Compilation Modes</h1><p>Inside Java HotSpot VM, there are actually two separate JIT compiler modes, which are known as C1 and C2. C1 is used for applications where quick startup and rock-solid optimization are required; GUI applications are often good candidates for this compiler. C2, on the other hand, was originally intended for long-running, predominantly server-side applications. Prior to some of the later Java SE 7 releases, these two modes were available using the -client and -server switches, respectively.</p>
<p>The two compiler modes use different techniques for JIT compilation, and they can output very different machine code for the same Java method. Modern Java applications, however, can usually make use of both compilation modes. To take advantage of this fact, starting with some of the later Java SE 7 releases, a new feature called tiered compilation became available. This feature uses the C1 compiler mode at the start to provide better startup performance. Once the application is properly warmed up, the C2 compiler mode takes over to provide more-aggressive optimizations and, usually, better performance. With the arrival of Java SE 8, tiered compilation is now the default behavior.</p>
<h1 id="Java-memory-monitoring-tools"><a href="#Java-memory-monitoring-tools" class="headerlink" title="Java memory monitoring tools"></a>Java memory monitoring tools</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">pemi$ jps | grep Main</span><br><span class="line">50903 Main</span><br><span class="line">pemi$ jmap -histo 50903 | head</span><br><span class="line"> num     <span class="comment">#instances         #bytes  class name</span></span><br><span class="line"></span><br><span class="line">----------------------------------------------</span><br><span class="line">   1:            95       42952184  [I</span><br><span class="line">   2:          1079         101120  [C</span><br><span class="line">   3:           485          55272  java.lang.Class</span><br><span class="line">   4:           526          25936  [Ljava.lang.Object;</span><br><span class="line">   5:            13          25664  [B</span><br><span class="line">   6:          1057          25368  java.lang.String</span><br><span class="line">   7:            74           5328  java.lang.reflect.Field</span><br></pre></td></tr></table></figure>

<p>jmap - Memory Map</p>
<p>Tool or Option  Description and Usage</p>
<p>Java Mission Control</p>
<p>Java Mission Control (JMC) is a new JDK profiling and diagnostic tools platform for HotSpot JVM. It s a tool suite basic monitoring, managing, and production time profiling and diagnostics with high performance. Java Mission Control minimizes the performance overhead that’s usually an issue with profiling tools. See Java Mission Control.</p>
<p>jcmd utility</p>
<p>The jcmd utility is used to send diagnostic command requests to the JVM, where these requests are useful for controlling Java Flight Recordings. The JFRs are used to troubleshoot and diagnose JVM and Java Applications with flight recording events. See The jcmd Utility.</p>
<p>Java VisualVM</p>
<p>This utility provides a visual interface for viewing detailed information about Java applications while they are running on a Java Virtual Machine. This information can be used in troubleshooting local and remote applications, as well as for profiling local applications. See Java VisualVM.</p>
<p>JConsole utility</p>
<p>This utility is a monitoring tool that is based on Java Management Extensions (JMX). The tool uses the built-in JMX instrumentation in the Java Virtual Machine to provide information about performance and resource consumption of running applications. See JConsole.</p>
<p>jmap utility</p>
<p>This utility can obtain memory map information, including a heap histogram, from a Java process, a core file, or a remote debug server. See The jmap Utility.</p>
<p>jps utility</p>
<p>This utility lists the instrumented Java HotSpot VMs on the target system. The utility is very useful in environments where the VM is embedded, that is, it is started using the JNI Invocation API rather than the java launcher. See The jps Utility.</p>
<p>jstack utility</p>
<p>This utility can obtain Java and native stack information from a Java process. On Oracle Solaris and Linux operating systems the utility can alos get the information from a core file or a remote debug server. See The jstack Utility.</p>
<p>jstat utility</p>
<p>This utility uses the built-in instrumentation in Java to provide information about performance and resource consumption of running applications. The tool can be used when diagnosing performance issues, especially those related to heap sizing and garbage collection. See The jstat Utility.</p>
<p>jstatd daemon</p>
<p>This tool is a Remote Method Invocation (RMI) server application that monitors the creation and termination of instrumented Java Virtual Machines and provides an interface to allow remote monitoring tools to attach to VMs running on the local host. See The jstatd Daemon.</p>
<p>visualgc utility</p>
<p>This utility provides a graphical view of the garbage collection system. As with jstat, it uses the built-in instrumentation of Java HotSpot VM. See The visualgc Tool.</p>
<p>Native tools</p>
<p>Each operating system has native tools and utilities that can be useful for monitoring purposes. For example, the dynamic tracing (DTrace) capability introduced in Oracle Solaris 10 operating system performs advanced monitoring. See Native Operating System Tools.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ jps</span><br><span class="line">16217 MyApplication</span><br><span class="line">16342 jps</span><br><span class="line"></span><br><span class="line">The utility lists the virtual machines <span class="keyword">for</span> <span class="built_in">which</span> the user has access rights. This is determined by access-control mechanisms specific to the operating system. On Oracle Solaris operating system, <span class="keyword">for</span> example, <span class="keyword">if</span> a non-root user executes the jps utility, <span class="keyword">then</span> the output is a list of the virtual machines that were started with that user<span class="string">'s uid.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">In addition to listing the PID, the utility provides options to output the arguments passed to the application'</span>s main method, the complete list of VM arguments, and the full package name of the application<span class="string">'s main class. The jps utility can also list processes on a remote system if the remote system is running the jstatd daemon.</span></span><br></pre></td></tr></table></figure>

<h1 id="GC-less-Java"><a href="#GC-less-Java" class="headerlink" title="GC-less Java"></a>GC-less Java</h1><p>Java Development without GC<br>All products developed by Coral Blocks have the very important feature of leaving ZERO garbage behind. Because the latency imposed by the Java Garbage Collector (i.e. GC) is unacceptable for high-performance systems and because it is impossible to turn off the GC, the best option for real-time systems in Java is to not produce any garbage at all so that the GC never kicks in. Imagine a high-performance matching engine operating in the microsecond level, sending and receiving hundreds of thousands messages per second. If at any given time the GC decides to kick in with its 1+ millisecond latencies, the disruption in the system will be huge. Therefore, if you want to develop real-time systems in Java with minimal variance and latency, the best option is to do it right without creating any garbage for the GC. </p>
<h2 id="Warming-up-Checking-the-GC-and-Sampling"><a href="#Warming-up-Checking-the-GC-and-Sampling" class="headerlink" title="Warming up, Checking the GC and Sampling"></a>Warming up, Checking the GC and Sampling</h2><p>The key to make sure your system is not creating any garbage is to warm up your critical path from start to finish a couple of million times and then check for memory allocation another couple of million times. If it is allocating memory linearly as the number of iterations increases, it is most likely creating garbage and you should use the stack trace </p>
]]></content>
  </entry>
  <entry>
    <title>Locking and multithreading</title>
    <url>/2018-06-12-Locking-And-Multithreading/</url>
    <content><![CDATA[<h1 id="Single-Writer-principle"><a href="#Single-Writer-principle" class="headerlink" title="Single Writer principle"></a>Single Writer principle</h1><p>There is a lot of research in computer science for managing this contention that boils down to 2 basic approaches.  One is to provide mutual exclusion to the contended resource while the mutation takes place; the other is to take an optimistic strategy and swap in the changes if the underlying resource has not changed while you created the new copy.  </p>
<h1 id="Memory-Barier"><a href="#Memory-Barier" class="headerlink" title="Memory Barier"></a>Memory Barier</h1><p>Memory barriers, or fences, are a set of processor instructions used to apply ordering limitations on memory operations. </p>
<p>The keyword volatile prevents this problem because it establishes a happens before relationship between the write to the turn variable and the write to the intentFirst variable. The compiler cannot re-order these write operations and if necessary it must forbid the processor from doing so with a memory barrier.</p>
<p>A memory barrier, also known as a <code>membar</code>, <code>memory fence</code> or fence instruction, is a type of barrier instruction that causes a central processing unit (CPU) or compiler to enforce an ordering constraint on memory operations issued before and after the barrier instruction. This typically means that operations issued prior to the barrier are guaranteed to be performed before operations issued after the barrier.</p>
<p>Memory barriers are necessary because most modern CPUs employ performance optimizations that can result in out-of-order execution. This reordering of memory operations (loads and stores) normally goes unnoticed within a single thread of execution, but can cause unpredictable behaviour in concurrent programs and device drivers unless carefully controlled.</p>
<h1 id="Non-blocking-programing"><a href="#Non-blocking-programing" class="headerlink" title="Non blocking programing"></a>Non blocking programing</h1><p>Implementation<br>With few exceptions, non-blocking algorithms use atomic <code>read-modify-write</code> primitives that the hardware must provide, the most notable of which is compare and swap (CAS).</p>
<h2 id="Compare-And-Swap"><a href="#Compare-And-Swap" class="headerlink" title="Compare And Swap"></a>Compare And Swap</h2><p>It compares the contents of a memory location with a given value and, only if they are the same, modifies the contents of that memory location to a new given value. This is done as a single atomic operation. The atomicity guarantees that the new value is calculated based on up-to-date information; if the value had been updated by another thread in the meantime, the write would fail. The result of the operation must indicate whether it performed the substitution; this can be done either with a simple boolean response (this variant is often called compare-and-set), or by returning the value read from the memory location (not the value written to it).</p>
<p>Here is the pseudo code</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">function <span class="title">cas</span><span class="params">(p : pointer to <span class="keyword">int</span>, old : <span class="keyword">int</span>, <span class="keyword">new</span> : <span class="keyword">int</span>)</span> returns <span class="keyword">bool</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> *p ≠ old &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    *p ← <span class="keyword">new</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>This operation is used to implement synchronization primitives like semaphores and mutexes, as well as more sophisticated lock-free and wait-free algorithms.</p>
<p>Algorithms built around CAS typically read some key memory location and remember the old value. Based on that old value, they compute some new value. Then they try to swap in the new value using CAS, where the comparison checks for the location still being equal to the old value. If CAS indicates that the attempt has failed, it has to be repeated from the beginning: the location is re-read, a new value is re-computed and the CAS is tried again.</p>
<p>A common workaround is to add extra “tag” or “stamp” bits to the quantity being considered. For example, an algorithm using compare and swap on a pointer might use the low bits of the address to indicate how many times the pointer has been successfully modified. Because of this, the next compare-and-swap will fail, even if the addresses are the same, because the tag bits will not match. This does not completely solve the problem, as the tag bits will eventually wrap around, but helps to avoid it. Some architectures provide a double-word compare and swap, which allows for a larger tag. This is sometimes called ABAʹ since the second A is made slightly different from the first. Such tagged state references are also used in transactional memory.</p>
<h2 id="Priority-Inversion"><a href="#Priority-Inversion" class="headerlink" title="Priority Inversion"></a>Priority Inversion</h2><p>Consider two tasks H and L, of high and low priority respectively, either of which can acquire exclusive use of a shared resource R. If H attempts to acquire R after L has acquired it, then H becomes blocked until L relinquishes the resource. Sharing an exclusive-use resource (R in this case) in a well-designed system typically involves L relinquishing R promptly so that H (a higher priority task) does not stay blocked for excessive periods of time. Despite good design, however, it is possible that a third task M of medium priority (p(L) &lt; p(M) &lt; p(H), where p(x) represents the priority for task (x)) becomes runnable during L’s use of R. At this point, M being higher in priority than L, preempts L, causing L to not be able to relinquish R promptly, in turn causing H—the highest priority process—to be unable to run. This is called priority inversion where a higher priority task is preempted by a lower priority one.</p>
<h2 id="RCU"><a href="#RCU" class="headerlink" title="RCU"></a>RCU</h2><p>In computer science, read-copy-update (RCU) is a synchronization mechanism based on mutual exclusion. It is used when performance of reads is crucial and is an example of space–time tradeoff, enabling fast operations at the cost of more space.</p>
<p>Read-copy-update allows multiple threads to efficiently read from shared memory by deferring updates after pre-existing reads to a later time while simultaneously marking the data, <code>ensuring new readers will read the updated data</code>. This makes all readers proceed as if there were no synchronization involved, hence they will be fast, but also making updates more difficult.</p>
<h1 id="package-java-util-concurrent-atomic"><a href="#package-java-util-concurrent-atomic" class="headerlink" title="package java/util/concurrent/atomic"></a>package java/util/concurrent/atomic</h1><p>A small toolkit of classes that support lock-free thread-safe programming on single variables. In essence, the classes in this package extend the notion of volatile</p>
<p>values, fields, and array elements to those that also provide an atomic conditional update operation of the form:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(expectedValue, updateValue)</span></span>;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"><span class="function">This <span class="title">method</span> <span class="params">(which varies in argument types across different classes)</span> atomically sets a variable to the updateValue <span class="keyword">if</span> it currently holds the expectedValue, reporting <span class="keyword">true</span> on success. The classes in <span class="keyword">this</span> <span class="keyword">package</span> also contain methods to get and unconditionally set values, as well as a weaker conditional atomic update operation weakCompareAndSet described below.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">The specifications of these methods enable implementations to employ efficient machine-level atomic instructions that are available on contemporary processors. However on some platforms, support may entail some form of internal locking. Thus the methods are not strictly guaranteed to be non-blocking -- a thread may block transiently before performing the operation. </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Instances of classes AtomicBoolean, AtomicInteger, AtomicLong, and AtomicReference each provide access and updates to a single variable of the corresponding type. Each class also provides appropriate utility methods <span class="keyword">for</span> that type. For example, classes AtomicLong and AtomicInteger provide atomic increment methods. One application is to generate sequence numbers, as in:</span></span><br><span class="line"><span class="function">```java</span></span><br><span class="line"><span class="function"> class Sequencer </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> AtomicLong sequenceNumber</span><br><span class="line">     = <span class="keyword">new</span> AtomicLong(<span class="number">0</span>);</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> sequenceNumber.getAndIncrement();</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p> The AtomicIntegerArray, AtomicLongArray, and AtomicReferenceArray classes further extend atomic operation support to arrays of these types. These classes are also notable in providing volatile access semantics for their array elements, which is not supported for ordinary arrays. </p>
<h1 id="Volatile"><a href="#Volatile" class="headerlink" title="Volatile"></a>Volatile</h1><p> The Java volatile keyword is used to mark a Java variable as “being stored in main memory”. More precisely that means, that every read of a volatile variable will be read from the computer’s main memory, and not from the CPU cache, and that every write to a volatile variable will be written to main memory, and not just to the CPU cache. </p>
<h2 id="What’s-wrong-to-volatile"><a href="#What’s-wrong-to-volatile" class="headerlink" title="What’s wrong to volatile?"></a>What’s wrong to volatile?</h2><p>The Java <code>volatile keyword guarantees visibility of changes to variables across threads</code>. This may sound a bit abstract, so let me elaborate.</p>
<p>In a multithreaded application where the threads operate on non-volatile variables, each thread may copy variables from main memory into a CPU cache while working on them, for performance reasons. If your computer contains more than one CPU, each thread may run on a different CPU. That means, that each thread may copy the variables into the CPU cache of different CPUs. </p>
<p>With non-volatile variables there are no guarantees about when the Java Virtual Machine (JVM) reads data from main memory into CPU caches, or writes data from CPU caches to main memory. This can cause several problems.</p>
<h3 id="visibility-problem"><a href="#visibility-problem" class="headerlink" title="visibility problem"></a>visibility problem</h3><p>The problem with threads not seeing the latest value of a variable because it has not yet been written back to main memory by another thread, is called a “visibility” problem. The updates of one thread are not visible to other threads. </p>
<p>The Java volatile Visibility Guarantee</p>
<p>The Java volatile keyword is intended to address variable visibility problems. By declaring the counter variable volatile all writes to the counter variable will be written back to main memory immediately. Also, all reads of the counter variable will be read directly from main memory. </p>
<h3 id="Full-volatile-Visibility-Guarantee"><a href="#Full-volatile-Visibility-Guarantee" class="headerlink" title="Full volatile Visibility Guarantee"></a>Full volatile Visibility Guarantee</h3><p>Actually, the visibility guarantee of Java volatile goes beyond the volatile variable itself. The visibility guarantee is as follows:</p>
<pre><code>If Thread A writes to a volatile variable and Thread B subsequently reads the same volatile variable, then all variables visible to Thread A before writing the volatile variable, will also be visible to Thread B after it has read the volatile variable.
If Thread A reads a volatile variable, then all all variables visible to Thread A when reading the volatile variable will also be re-read from main memory.</code></pre><h3 id="The-Java-volatile-Happens-Before-Guarantee"><a href="#The-Java-volatile-Happens-Before-Guarantee" class="headerlink" title="The Java volatile Happens-Before Guarantee"></a>The Java volatile Happens-Before Guarantee</h3><p>To address the instruction reordering challenge, the Java volatile keyword gives a “happens-before” guarantee, in addition to the visibility guarantee. The happens-before guarantee guarantees that:</p>
<ul>
<li>Reads from and writes to other variables cannot be reordered to occur <code>after</code> a write to a volatile variable, if the reads / writes originally occurred <code>before</code> the write to the volatile variable.</li>
</ul>
<p>The reads / writes <code>before a write to a volatile</code> variable are guaranteed to <code>&quot;happen before&quot; the write to the volatile</code> variable. Notice that it is still possible for e.g. reads / writes of other variables located after a write to a volatile to be reordered to occur before that write to the volatile. Just not the other way around. <code>From after to before is allowed, but from before to after is not allowed</code>.</p>
<ul>
<li><p>Reads from and writes to other variables cannot be reordered to occur <code>before a read</code> of a volatile variable, if the reads / writes originally occurred <code>after the read</code> of the volatile variable. Notice that it is possible for reads of other variables that occur before the read of a volatile variable can be reordered to occur after the read of the volatile. Just not the other way around. <code>From before to after is allowed, but from after to before is not allowed</code>. </p>
</li>
<li><p>In short: ==before write,  after read==.</p>
</li>
</ul>
<h2 id="Limitations-of-volatile"><a href="#Limitations-of-volatile" class="headerlink" title="Limitations of volatile"></a>Limitations of volatile</h2><p>Even if the volatile keyword guarantees that all reads of a volatile variable are read directly from main memory, and all writes to a volatile variable are written directly to main memory, there are still situations where it is not enough to declare a variable volatile</p>
<h2 id="Performance-Considerations-of-volatile"><a href="#Performance-Considerations-of-volatile" class="headerlink" title="Performance Considerations of volatile"></a>Performance Considerations of volatile</h2><p>Reading and writing of volatile variables causes the variable to be read or written to main memory. Reading from and writing to main memory is more expensive than accessing the CPU cache. Accessing volatile variables also prevent instruction reordering which is a normal performance enhancement technique. Thus, you should only use volatile variables when you really need to enforce visibility of variables. </p>
]]></content>
      <tags>
        <tag>CAS</tag>
        <tag>Concurrent</tag>
      </tags>
  </entry>
  <entry>
    <title>KDB</title>
    <url>/2018-06-12-KDB/</url>
    <content><![CDATA[<h1 id="KDB"><a href="#KDB" class="headerlink" title="KDB"></a>KDB</h1><p>However kdb+ evaluates expressions right-to-left. There are no precedence rules. The reason commonly given for this behaviour is that it is a much simpler to understand system, many q-gods would agree, beginners however may not.</p>
<p>The kdb+ built-in commands are mostly a single letter. If a system command that is not built-in is entered, that command will be passed to the underlying operating system.</p>
<p>Created with financial institutions in mind, the database was developed as a central repository <em>to store time series data</em> that <em>supports real-time analysis of billions of records</em>.</p>
<p>Columnar databases return answers to some queries in a more efficient way than row-based database management systems.</p>
<p>kdb+ dictionaries, tables and nanosecond time stamps are native data types and are used to store time series data.</p>
<p>In 1998, Kx Systems released kdb, a database built on the language K written by Arthur Whitney. In 2003, kdb+ was released as a 64-bit version of kdb.</p>
<p>kdb/q/kdb+ is both a database (kdb) and a vector language (q). It’s used by almost every major financial institution</p>
<p><strong>Kdb+ is an in-memory column-oriented database based on the concept of ordered lists</strong>. In-memory means it primarily stores its data in RAM. This makes it extremely fast with a much simplified database engine but it requires a lot of RAM (Which no longer poses a problem as servers with massive amounts of RAM are now inexpensive). Column oriented database means that each column of data is stored sequentially in memory</p>
<h1 id="Column-DB"><a href="#Column-DB" class="headerlink" title="Column DB"></a>Column DB</h1><p>The main reason why indexes dramatically improve performance on large datasets is that database indexes on one or more columns are typically sorted by value, which makes range queries operations (like the above “find all records with salaries between 40,000 and 50,000” example) very fast (lower time-complexity).</p>
<p>Kdb+ the Database - Column Oriented DB allowing fast timeseries analysis</p>
<h2 id="Column-oriented-systems"><a href="#Column-oriented-systems" class="headerlink" title="Column-oriented systems"></a>Column-oriented systems</h2><p>A column-oriented database serializes all of the values of a column together, then the values of the next column, and so on. For our example table, the data would be stored in this fashion:<br>10:001,12:002,11:003,22:004;<br>Smith:001,Jones:002,Johnson:003,Jones:004;<br>Joe:001,Mary:002,Cathy:003,Bob:004;<br>40000:001,50000:002,44000:003,55000:004;<br>In this layout, any one of the columns more closely matches the structure of an index in a row-based system. This may cause confusion that can lead to the mistaken belief a column-oriented store “is really just” a row-store with an index on every column. However, it is the mapping of the data that differs dramatically. In a row-oriented indexed system, the primary key is the rowid that is mapped from indexed data. In the column-oriented system, the primary key is the data, which is mapped from rowids.[2] This may seem subtle, but the difference can be seen in this common modification to the same store:</p>
<blockquote>
<p>…;Smith:001;Jones:002,004;Johnson:003;…</p>
</blockquote>
<p>Whether or not a column-oriented system will be more efficient in operation depends heavily on the workload being automated. Operations that retrieve all the data for a given object (the entire row) are slower. A row-based system can retrieve the row in a single disk read, whereas numerous disk operations to collect data from multiple columns are required from a columnar database. However, these whole-row operations are generally rare. In the majority of cases, only a limited subset of data is retrieved. In a rolodex application, for instance, collecting the first and last names from many rows to build a list of contacts is far more common than reading all data for any single address. This is even more true for writing data into the database, especially if the data tends to be “sparse” with many optional columns. For this reason, column stores have demonstrated excellent real-world performance in spite of many theoretical disadvantages.</p>
<h2 id="Why-are-most-databases-row-oriented"><a href="#Why-are-most-databases-row-oriented" class="headerlink" title="Why are most databases row-oriented?"></a>Why are most databases row-oriented?</h2><p>Imagine we want to add one row somewhere in the middle of our data for 2011-02-26, on the row oriented database no problem, column oriented we will have to move almost all the data! Lucky since we <code>mostly deal with time series new data only appends to the end</code> of our table.</p>
<h2 id="Difference-vs-row-based-DB"><a href="#Difference-vs-row-based-DB" class="headerlink" title="Difference vs row based DB"></a>Difference vs row based DB</h2><p> a subtle point is that unlike most standard <code>SQL which is based on set theory</code>, <code>kdb+ is based on vectors of ordered lists</code>. Where standard SQL has struggled with queries like find the top 3 stocks by price, find the bottom 3 by market cap because it has no concept of order, kdb’s ordering significantly simplifies many queries. This ordered concept allows kdb+ to provide unique timeseries joins that would be be extremely difficult in other variations of SQL and require the use of slow cursors.</p>
<h1 id="Language-Q"><a href="#Language-Q" class="headerlink" title="Language Q"></a>Language Q</h1><p>the primary design objectives of q are expressiveness, speed and efficiency. In these, it is beyond compare. The design trade-off is a terseness that can be disconcerting to programmers coming from verbose traditional database programming environments – e.g., C++, Java, C# or Python – and a relational DBMS</p>
<p>Q evolved from APL (A Programming Language), which was first invented as a mathematical notation by Kenneth Iverson at Harvard University in the 1950s. APL was introduced in the 1960s by IBM as a vector programming language, meaning that it processes a list of numbers in a single operation. It was successful in finance and other industries that required heavy number crunching.</p>
<p>q is Kx’s proprietary language. It’s a powerful, concise and elegant array language, which means that a production system could just be a single page of code, not pages and pages of code and a nightmare to maintain. Clearly there is an initial investment in learning it, but the power it gives you to manipulate streaming, real-time and historical data makes that initial investment really worthwhile. </p>
<p>q language - fast, interpreted vector based language</p>
<p>Q is a interpreted vector based dynamically typed language built for speed and expressiveness.</p>
<p>Since q is interpreted you can enter commands straight into the console there is no waiting for compilation, feedback is instantaneous. </p>
<h2 id="Key-features-of-Q"><a href="#Key-features-of-Q" class="headerlink" title="Key features of Q"></a>Key features of Q</h2><p>Interpreted Q is interpreted, not compiled. During execution, data and functions live in an in-memory workspace. Iterations of the development cycle tend to be quick because all run-time information needed to test and debug is immediately available in the workspace. Q programs are stored and executed as simple text files called scripts. The interpreter’s eval and parse routines are exposed so that you can dynamically generate code in a controlled manner.</p>
<p>Types Q is a dynamically typed language, in which type checking is mostly unobtrusive. Each variable has the type of its currently assigned value and type promotion is automatic for most numeric operations. Types are checked on operations to homogenous lists.</p>
<p>Evaluation Order While q is entered left-to-right, expressions are evaluated right-to-left or, as the q gods prefer, left of right – meaning that a function is applied to the argument on its right. There is no operator precedence and function application can be written without brackets. Punctuation noise is significantly reduced.</p>
<p>Null and Infinity Values In classical SQL, the value NULL represents missing data for a field of any type and takes no storage space. In q, null values are typed and take the same space as non-nulls. Numeric types also have infinity values. Infinite and null values can participate in arithmetic and other operations with (mostly) predictable results.</p>
<p>Integrated I/O I/O is done through function handles that act as windows to the outside world. Once such a handle is initialized, passing a value to the handle is a write.</p>
<p>Table Oriented Give up objects, ye who enter here. In contrast to traditional languages, you’ll find no classes, objects, inheritance and virtual methods in q. Instead, q has tables as first class entities. The lack of objects is not as severe as might first appear. Objects are essentially glorified records (i.e., entities with named fields), which are modeled by q dictionaries. A table can be viewed as a list of record dictionaries.</p>
<p>Ordered Lists Because classical SQL is the algebra of sets – which are unordered with no duplicates – row order and column order are not defined, making time series processing cumbersome and slow. In q, data structures are based on ordered lists, so time series maintain the order in which they are created. Moreover, simple lists occupy contiguous storage, so processing big data is fast. Very fast.</p>
<p>Column Oriented SQL tables are organized as rows distributed across storage and operations apply to fields within a row. Q tables are column lists in contiguous storage and operations apply on entire columns.</p>
<p>In-Memory Database One can think of kdb+ as an in-memory database with persistent backing. Since data manipulation is performed with q, there is no separate stored procedure language. In fact, kdb+ comprises serialized q column lists written to the file system and then mapped into memory.</p>
<p>In q, data structures are based on ordered lists, so time series maintain the order in which they are created. Moreover, simple lists occupy contiguous storage, so processing big data is fast. Very fast.</p>
<p>Q tables are column lists in contiguous storage and operations apply on entire columns.</p>
<h2 id="Sample-of-Q-code"><a href="#Sample-of-Q-code" class="headerlink" title="Sample of Q code"></a>Sample of Q code</h2><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">q)l:<span class="number">10</span> <span class="number">12</span> <span class="number">14</span> <span class="number">16</span> <span class="number">18</span> <span class="number">22</span> <span class="number">32</span> <span class="number">45</span></span><br><span class="line">q)<span class="built_in">sum</span> l</span><br><span class="line"><span class="number">169</span></span><br><span class="line">q)<span class="built_in">avg</span> l</span><br><span class="line"><span class="number">21.125</span></span><br><span class="line">q)l*<span class="number">10</span></span><br><span class="line"><span class="number">100</span> <span class="number">120</span> <span class="number">140</span> <span class="number">160</span> <span class="number">180</span> <span class="number">220</span> <span class="number">320</span> <span class="number">450</span></span><br><span class="line"></span><br><span class="line">q)k:<span class="built_in">til</span> <span class="number">8</span></span><br><span class="line">q)k</span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span></span><br><span class="line">q)l+k</span><br><span class="line"><span class="number">10</span> <span class="number">13</span> <span class="number">16</span> <span class="number">19</span> <span class="number">22</span> <span class="number">27</span> <span class="number">38</span> <span class="number">52</span></span><br></pre></td></tr></table></figure>

<p>Notice in the example code above the absence of loops, no for/while/do yet we could easily express adding one array to another. This is because the vector/list is the primary unit of data in kdb+. Operations are intended to be performed and expressed as being on an entire set of data. Dictionaries can be defined using lists, they provide a hashmap datastructure for quick lookups. Tables are constructed from dictionaries and lists. This brevity of data structures is actually one of the attributes that gives q its ability to express concisely what would take many lines in other languages.</p>
<h1 id="Some-of-the-practical-applications-of-being-able-to-combine-both-streaming-and-real-time-data-together-with-historical-all-in-the-same-database"><a href="#Some-of-the-practical-applications-of-being-able-to-combine-both-streaming-and-real-time-data-together-with-historical-all-in-the-same-database" class="headerlink" title="Some of the practical applications of being able to combine both streaming and real-time data together with historical, all in the same database?"></a>Some of the practical applications of being able to combine both streaming and real-time data together with historical, all in the same database?</h1><p>The most important thing is the simplicity, which translates into speed and ease of doing analysis. For example, it allows you to do complicated, time-critical analysis, such as pre-trade risk. This means that you are likely to see interesting trading opportunities before those who are using the same off-the-shelf solution as everybody else. So you’re there first and you’re there so early, you can afford to do comprehensive pre-trade risk analysis, and you’re able to look for patterns you’ve seen in the past. </p>
<p>In addition to capturing market data, firms are using kdb+ for order-book management, algorithmic trading, and risk assessment. “They are using kdb+/q for queries being performed on both streaming or historical data — the latter easily accommodating research and back-testing,”</p>
<p>DeltaFlow, a platform from First Derivatives that’s based on kdb+, is used by traders for high volume, low-latency algorithmic trading and by regulators for real-time detection of market abuse and unauthorized trading activity across multiple asset classes.</p>
<h1 id="Combined-power-of-kdb-q"><a href="#Combined-power-of-kdb-q" class="headerlink" title="Combined power of kdb+/q"></a>Combined power of kdb+/q</h1><p>What’s beautiful about kdb+ is that since tables are columns of vectors, all the power of the q language can be used as easily on table data as it was on lists. Where we had sum[l],avg[l],weightedAvg[l1;l2] of lists we can write similar qSQL:<br>select avg price, sum volume, weightedAvg[time;price] from trade<br>Want to apply a function to a timeseries, simply place it inline:<br>select {a:avg x; sqrt avg (x<em>x)-a</em>a} price from trade</p>
<h1 id="Q-commadns"><a href="#Q-commadns" class="headerlink" title="Q commadns"></a>Q commadns</h1><p>To obtain official console display of any q value, apply the built-in function show to it.</p>
<p>q)show a:42</p>
<h3 id="comments"><a href="#comments" class="headerlink" title="comments"></a>comments</h3><p>At least one whitespace character must separate / intended to begin a comment from any text to the left of it on a line.</p>
<h3 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h3><p>Boolean values in q are stored in a single byte and are denoted as the binary values they really are with an explicit type suffix b. One way to generate boolean values is to test for equality.</p>
<p>q)42=40+2<br>1b</p>
<h3 id="date"><a href="#date" class="headerlink" title="date"></a>date</h3><p>One interesting and useful feature of q temporal values is that, as integral values under the covers, they naturally participate in arithmetic. For example, to advance a date five days, add 5.</p>
<p>q)2000.01.01+5<br>_
Or to advance a time by one microsecond (i.e., 1000 nanoseconds) add 1000.</p>
<p>q)12:00:00.000000000+1000<br>_
Or to verify that temporal values are indeed their underlying values, test for equality.</p>
<p>q)2000.01.01=0</p>
<h3 id="Symbols"><a href="#Symbols" class="headerlink" title="Symbols"></a>Symbols</h3><p>Symbols are denoted by a leading back-quote (called “back tick” in q-speak) followed by characters. Symbols without embedded blanks or other special characters can be entered literally into the console.<br>q)`aapl<br>_</p>
<p>Since symbols are atoms, any two can be tested for equality.</p>
<p>q)<code>aapl=</code>apl<br>_</p>
<h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><p>The fundamental q data structure is a list, which is an ordered collection of items sequenced from left to right. The notation for a general list encloses items with ( and ) and uses ; as separator. Spaces after the semi-colons are optional but can improve readability.</p>
<p>q)(1; 1.2; `one)<br>_</p>
<p>In the case of a homogenous list of atoms, called a simple list, q adopts a simplified format for both storage and display. The parentheses and semicolons are dropped. For example, a list of underlying numeric type separates its items with a space.</p>
<p>q)(1; 2; 3)<br>1 2 3</p>
<p>A simple list of booleans is juxtaposed with no spaces and has a trailing b type indicator.</p>
<p>q)(1b; 0b; 1b)<br>101b<br>A simple list of symbols is displayed with no separating spaces.</p>
<p>q)(<code>one;</code>two; <code>three)</code>one<code>two</code>three</p>
<h3 id="basic-operations"><a href="#basic-operations" class="headerlink" title="basic operations"></a>basic operations</h3><p> to construct and manipulate lists. The most fundamental is til, which takes a non-negative integer n and returns the first n integers starting at 0 (n itself is not included in the result).</p>
<p>q)til 10<br>0 1 2 3 4 5 6 7 8 9</p>
<h4 id="til-list-tips"><a href="#til-list-tips" class="headerlink" title="til list tips"></a>til list tips</h4><p>Be mindful that q always evaluates expressions from right to left and that operations work on vectors whenever possible.</p>
<p>q)1+til 10<br>1 2 3 4 5 6 7 8 9 10</p>
<p>Similarly, we obtain the first 10 even numbers and the first ten odd numbers.</p>
<p>q)2<em>til 10<br>_
q)1+2</em>til 10<br>_
Finally, we obtain the first 10 even numbers starting at 42.</p>
<p>q)42+2*til 10<br>_</p>
<p>Another frequently used list primitive is join , that returns the list obtained by concatenating its right operand to its left operand.</p>
<p>q)1 2 3,4 5<br>1 2 3 4 5</p>
<h3 id="extract"><a href="#extract" class="headerlink" title="extract"></a>extract</h3><p>To extract items from the front or back of a list, use the take operator #. Positive argument means take from the front, negative from the back.</p>
<p>q)2#til 10<br>0 1<br>q)-2#til 10 </p>
<blockquote>
<p>Applying # always results in a list.</p>
</blockquote>
<p>In particular, the idiom 0# returns an empty list of the same type as the first item in its argument. Using an atom argument is a succinct way to create a typed empty list of the type of the atom.</p>
<p>q)0#1 2 3<br>`long$()</p>
<p>Should you extract more items than there are in the list, # restarts at the beginning and continues extracting. It does this until the specified number of items is reached.</p>
<p>q)5#1 2 3<br>1 2 3 1 2</p>
<p>As with atoms, a list can be assigned to a variable.</p>
<p>q)L:10 20 30<br>The items of a list can be accessed via indexing, which uses square brackets and is relative to 0.</p>
<p>q)L[0]<br>10</p>
<h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><p>Conceptually, a q function is a sequence of steps that produces an output result from an input value. Since q is not purely functional, these rules can interact with the world by reaching outside the context of the function. Such actions are called side effects and should be carefully controlled.</p>
<p>Function definition is delimited by matching curly braces { and }. Immediately after the opening brace, the formal parameters are names enclosed in square brackets [ and ] and separated by semi-colons. These parameters presumably appear in the body of the function, which follows the formal parameters and is a succession of expressions sequenced by semi-colons.</p>
<p>Following is a simple function that returns the square of its input. On the next line we assign the same function to the variable sq. The whitespace is optional.</p>
<p>q){[x] x<em>x}<br>_
q)sq:{[x] x</em>x}<br>_</p>
<p>Here is a function that takes two input values and returns the sum of their squares.</p>
<p>q){[x;y] a:x<em>x; b:y</em>y; a+b}<br>_
q)pyth:{[x;y] a:x<em>x; b:y</em>y; a+b}<br>_</p>
<p>Here are the previous functions applied to arguments.</p>
<p>q){[x] x<em>x}[5]<br>25<br>q)sq[5]<br>_
q){[x;y] a:x</em>x; b:y*y; a+b}[3;4]<br>25<br>q)pyth[3;4]<br>_</p>
<h3 id="monadic-function"><a href="#monadic-function" class="headerlink" title="monadic function"></a>monadic function</h3><p>In q, as in most functional languages, we don’t need no stinkin’ brackets for application of a monadic function – i.e., with one parameter. Simply separate the function from its argument by whitespace. This is called function juxtaposition.</p>
<p>q){x<em>x} 5<br>_
q)f:{x</em>x}<br>q)f 5<br>_</p>
<h3 id="x-y-z"><a href="#x-y-z" class="headerlink" title="x,y,z"></a>x,y,z</h3><p>It is common in mathematics to use function parameters x, y, or z. If you are content with these names (in the belief that descriptive names provide no useful information to the poor soul reading your code), you can omit their declaration and q will understand that you mean the implicit parameters x, y, and z in that order.</p>
<p>q){x<em>x}[5]<br>25<br>q){a:x</em>x; b:y*y; a+b}[3;4]<br>25</p>
<h3 id="verbs"><a href="#verbs" class="headerlink" title="verbs"></a>verbs</h3><p>higher order functions, or as they are called in q, adverbs. </p>
<p>In words, we tell q to start with the initial value of 0 in the accumulator and then modify + with the adverb / so that it adds across the list.</p>
<p>q)0 +/ 1 2 3 4 5<br>15</p>
<p>In this situation we don’t really need the flexibility to specify the initial value of the accumulator. It suffices to start with the first item of the list and proceed across the rest of the list. There is an even simpler form for this case.</p>
<p>q)(+/) 1 2 3 4 5</p>
<h4 id="for-loop"><a href="#for-loop" class="headerlink" title="for loop"></a>for loop</h4><p>If you are new to functional programming, you may think, “Big deal, I write for loops in my sleep.” </p>
<p>More importantly, you can focus on what you want done without the irrelevant scaffolding of how to set up control structures. This is called declarative programming.</p>
<p>What else can we do with our newfound adverb? Change addition to multiplication for factorial.</p>
<p>q)(*/) 1+til 10<br>3628800</p>
<h3 id="larger-vs-smaller"><a href="#larger-vs-smaller" class="headerlink" title="larger vs smaller"></a>larger vs smaller</h3><p>The fun isn’t limited to arithmetic primitives. We introduce |, which returns the larger of its operands and &amp;, which returns the smaller of its operands.</p>
<p>q)42|98<br>98<br>q)42&amp;98</p>
<p>Use | or &amp; with over and you have maximum or minimum.</p>
<p>q)(|/) 20 10 40 30<br>40<br>q)(&amp;/) 20 10 40 30</p>
<h3 id="command-‘over’-adverb"><a href="#command-‘over’-adverb" class="headerlink" title="command ‘over’ adverb"></a>command ‘over’ adverb</h3><p>Some applications of / are so common that they have their own names.</p>
<p>q)sum 1+til 10<br>55<br>q)prd 1+til 10 “o”<br>_
q)max 20 10 40 30<br>_
q)min 20 10 40 30 </p>
<p>At this point the / pattern should be clear: it takes a given function and produces a new function that accumulates across the original list, producing a single result. In particular, / converts a dyadic function to a monadic aggregate function – i.e., one that collapses a list to an atom.</p>
<h1 id="data-type"><a href="#data-type" class="headerlink" title="data type"></a>data type</h1><p>long¶</p>
<p>In q versions 3.0 and later, the basic integer type is a signed eight-byte integer, called long. A literal is identified as a long by the fact that it contains only numeric digits, with an optional leading minus sign, and no decimal point. It may also have an optional trailing type indicator j indicating it is a long and not another integer type. Here is a typical long integer value.</p>
<p>q)42<br>42<br>Observe that the type indicator j is accepted but redundant.</p>
<p>q)42j<br>42</p>
<p>The short type represents a two-byte signed integer and requires the trailing type indicator h. For example,</p>
<p>q)-123h<br>_
Similarly, the int type represents a four-byte signed integer and requires the trailing type indicator i.</p>
<p>The float type represents an IEEE standard eight-byte floating-point number, often called “double” in traditional languages. A float can hold (at least) 15 decimal digits of precision. It is denoted by optionally signed numeric digits with either a decimal point or an optional trailing type indicator f. Observe that the console shortens the display of floats with no significant digits to the right of the decimal.</p>
<p>You can change this by using the \P command (note upper case) to specify a display width up to 16 digits. If you issue \P 0 the console will display all 17 decimal digits of the underlying binary representation, although the last digit is unreliable.</p>
<p>boolean¶</p>
<p>The boolean type uses one byte to store a bit and is denoted by the bit value with the trailing type indicator b. There are no keywords for ‘true’ or ‘false’, nor are there separate logical operators for booleans.</p>
<p>q)0b<br>_
q)1b</p>
<p>Text Data¶</p>
<p>There are two atomic text types in q. They are more akin to the SQL types CHAR and VARCHAR than the character types of traditional languages.</p>
<p>2.4.1 char¶</p>
<p>A char holds an individual ASCII or 8-bit Unicode character that is stored in one byte. It corresponds to a SQL CHAR. It is denoted by a single character enclosed in double quotes.</p>
<p>q)”q”</p>
<p>Some keyboard characters – e.g., the double-quote – cannot be entered directly into a char since they have special meaning in the q console. As in C, special characters are escaped with a preceding back-slash . The console display somewhat confusingly displays the escape, but the following are all actually single characters.</p>
<p>q)”&quot;“ 
“&quot;“
q)”\“ 
_
q)”\n”<br>_
q)”\r”<br>_
q)”\t”<br>_
Also as in C, you can escape any ASCII character by specifying its underlying numeric value as three octal digits.</p>
<p>q)”\142”<br>“b”</p>
<p>symbol¶</p>
<p>A symbol is an atom holding text. It is denoted by a leading back-quote, read “back tick” in q-speak.</p>
<p>q)<code>q
_
q)</code>zaphod<br>_</p>
<p>a symbol is not a collection of char. The symbol `a and the char “a” are not the same, as we can see by asking q if they are identical.</p>
<p>q)`a~”a”<br>0b</p>
<h1 id="list-1"><a href="#list-1" class="headerlink" title="list"></a>list</h1><h2 id="Index-Notation¶"><a href="#Index-Notation¶" class="headerlink" title="Index Notation¶"></a>Index Notation¶</h2><p>To access the item at index i in a list, follow the list immediately with [i]. This is called item indexing. For example,</p>
<p>q)(100; 200; 300)[0]</p>
<p> Indexed Assignment¶</p>
<p>Items in a list can also be assigned via item indexing. Thus,</p>
<p>q)L:1 2 3<br>q)L[1]:42<br>q)L<br>1 42 3</p>
<p>An omitted index returns the entire list.</p>
<p>q)L:10 20 30 40<br>q)L[]<br>10 20 30 40</p>
]]></content>
  </entry>
  <entry>
    <title>Solace MQ</title>
    <url>/2018-07-04-Solace-MQ/</url>
    <content><![CDATA[<h1 id="Solace-PubSub"><a href="#Solace-PubSub" class="headerlink" title="Solace PubSub+"></a>Solace PubSub+</h1><p>It is a message broker that lets you establish event-driven interactions between applications and microservices across hybrid cloud environments using open APIs and protocols.</p>
<h1 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h1><p>Cloud<br>PubSub+ Cloud is enterprise-grade messaging available as a fully managed service in your favorite public clouds.</p>
<h2 id="What-do-we-mean-by-“enterprise-grade-”"><a href="#What-do-we-mean-by-“enterprise-grade-”" class="headerlink" title="What do we mean by “enterprise grade?”"></a>What do we mean by “enterprise grade?”</h2><h3 id="Unrivaled-Reliability"><a href="#Unrivaled-Reliability" class="headerlink" title="Unrivaled Reliability"></a>Unrivaled Reliability</h3><p>Intelligent routing protocols always identify best path and adapt around network issues to keep your applications humming, and automatic message buffering keeps bursts of data from affecting slow consumers or your system as a whole.</p>
<p>Built-in high availability and disaster recovery capabilities mean your system will bounce back in a flash, without ever losing a message, even in the event of major system or network failures.</p>
<h3 id="Serious-Security"><a href="#Serious-Security" class="headerlink" title="Serious Security"></a>Serious Security</h3><p>PubSub+ supports authentication and authorization mechanisms ranging from username and password and one-time passwords to sophisticated access control lists and robust integration with existing security policies and systems such as LDAP, Radius, Kerberos.</p>
<p>To protect messages in transit, Solace supports transport-layer TLS encryption using a variety of cypher suites.</p>
<h2 id="Messaging"><a href="#Messaging" class="headerlink" title="Messaging"></a>Messaging</h2><p>In application development terms, messaging, which is also commonly known as message-oriented middleware or just middleware, refers to technology that lets computer systems share information without requiring direct connections or awareness of one another’s location.</p>
<h1 id="Docker-on-Solace"><a href="#Docker-on-Solace" class="headerlink" title="Docker on Solace"></a>Docker on Solace</h1><p>To bounce solace server:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8080:8080 -p 55555:55555 --shm-size=2g --env <span class="string">'username_admin_globalaccesslevel=admin'</span> --env <span class="string">'username_admin_password=admin'</span> --name=solace solace-pubsub-standard:8.11.0.1029</span><br><span class="line"></span><br><span class="line"><span class="comment"># or bring up an existing one</span></span><br><span class="line">docker start solace</span><br></pre></td></tr></table></figure>

<p>Solace CLI management access:<br>Enter the following docker exec command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it solace /usr/sw/loads/currentload/bin/cli -A</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Java</tag>
        <tag>MQ</tag>
      </tags>
  </entry>
  <entry>
    <title>flexbox</title>
    <url>/2018-06-14-flex-box/</url>
    <content><![CDATA[<p>How Flexbox works — explained with big, colorful, animated gifs</p>
<p>Flexbox promises to save us from the evils of plain CSS (like vertical alignment).</p>
<p>Well, Flexbox does deliver on that goal. But mastering its new mental model can be challenging.</p>
<p>So let’s take an animated look at how Flexbox works, so we can use it to build better layouts.</p>
<p>Flexbox’s underlying principle is to make layouts flexible and intuitive.</p>
<p>To accomplish this, it lets containers decide for themselves how to evenly distribute their children — including their size and the space between them.</p>
<p>This all sounds good in principle. But let’s see what it looks like in practice.</p>
<p>In this article, we’ll dive into the 5 most common Flexbox properties. We’ll explore what they do, how you can use them, and what their results will actually look like.</p>
<p>Property #1: Display: Flex<br>Here’s our example webpage:</p>
<p>You have four colored divs of various sizes, held within a grey container div. As of now, each div has defaulted to display: block. Each square thus takes up the full width of its line.</p>
<p>In order to get started with Flexbox, you need to make your container into a flex container. This is as easy as:</p>
<p>#container {<br>  display: flex;<br>}</p>
<p>Not a lot has changed — your divs are displayed inline now, but that’s about it. But behind the scenes, you’ve done something powerful. You gave your squares something called a flex context.</p>
<p>You can now start to position them within that context, with far less difficulty than traditional CSS.</p>
<p>Property #2: Flex Direction<br>A Flexbox container has two axes: a main axis and a cross axis, which default to looking like this:</p>
<p>By default, items are arranged along the main axis, from left to right. This is why your squares defaulted to a horizontal line once you applied display: flex.</p>
<p>Flex-direction, however, let’s you rotate the main axis.</p>
<p>#container {<br>  display: flex;<br>  flex-direction: column;<br>}</p>
<p>There’s an important distinction to make here: flex-direction: column doesn’t align the squares on the cross axis instead of the main axis. It makes the main axis itself go from horizontal to vertical.</p>
<p>There are a couple of other options for flex-direction, as well: row-reverse and column-reverse.</p>
<p>Property #3: Justify Content<br>Justify-content controls how you align items on the main axis.</p>
<p>Here, you’ll dive a bit deeper into the main/cross axis distinction. First, let’s go back to flex-direction: row.</p>
<p>#container {<br>  display: flex;<br>  flex-direction: row;<br>  justify-content: flex-start;<br>}
You have five commands at your disposal to use justify-content:</p>
<p>Flex-start<br>Flex-end<br>Center<br>Space-between<br>Space-around</p>
<p>Space-around and space-between are the least intuitive. Space-between gives equal space between each square, but not between it and the container.</p>
<p>Space-around puts an equal cushion of space on either side of the square — which means the space between the outermost squares and the container is half as much as the space between two squares (each square contributing a non-overlapping equal amount of margin, thus doubling the space).</p>
<p>A final note: remember that justify-content works along the main-axis, and flex-direction switches the main-axis. This will be important as you move to…</p>
<p>Property #4: Align Items<br>If you ‘get’ justify-content, align-items will be a breeze.</p>
<p>As justify-content works along the main axis, align-items applies to the cross axis.</p>
<p>Let’s reset our flex-direction to row, so our axes look the same as the above image.</p>
<p>Then, let’s dive into the align-items commands.</p>
<p>flex-start<br>flex-end<br>center<br>stretch<br>baseline<br>The first three are exactly the same as justify-content, so nothing too fancy here.</p>
<p>The next two are a bit different, however.</p>
<p>You have stretch, in which the items take up the entirety of the cross-axis, and baseline, in which the bottom of the paragraph tags are aligned.</p>
<p>(Note that for align-items: stretch, I had to set the height of the squares to auto. Otherwise the height property would override the stretch.)</p>
<p>For baseline, be aware that if you take away the paragraph tags, it aligns the bottom of the squares instead, like so:</p>
<p>To demonstrate the main and cross axes better, let’s combine justify-content and align-items and see how centering works different for the two flex-direction commands:</p>
<p>With row, the squares are set up along a horizontal main axis. With column, they fall along a vertical main axis.</p>
<p>Even if the squares are centered both vertically and horizontally in both cases, the two are not interchangeable!</p>
<p>Property #5: Align Self<br>Align-self allows you to manually manipulate the alignment of one particular element.</p>
<p>It’s basically overriding align-items for one square. All the properties are the same, though it defaults to auto, in which it follows the align-items of the container.</p>
<p>#container {<br>  align-items: flex-start;<br>}
.square#one {<br>  align-self: center;<br>}
// Only this square will be centered.<br>Let’s see what this looks like. You’ll apply align-self to two squares, and for the rest apply align-items: center and flex-direction: row.</p>
<p>Conclusion<br>Even though we’ve just scratched the surface of Flexbox, these commands should be enough for you to handle most basic alignments — and to vertically align to your heart’s content.</p>
<ul>
<li><a href="https://github.com/angular/flex-layout" target="_blank" rel="noopener">https://github.com/angular/flex-layout</a></li>
<li><a href="https://medium.freecodecamp.org/an-animated-guide-to-flexbox-d280cf6afc35" target="_blank" rel="noopener">https://medium.freecodecamp.org/an-animated-guide-to-flexbox-d280cf6afc35</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Ansible</title>
    <url>/2018-06-21-Ansible/</url>
    <content><![CDATA[<h1 id="Ansible-What-Is-It-Good-For"><a href="#Ansible-What-Is-It-Good-For" class="headerlink" title="Ansible: What Is It Good For?"></a>Ansible: What Is It Good For?</h1><p>Ansible is often described as a configuration management tool, and is typically mentioned in the same breath as Chef, Puppet, and Salt. When we talk about configuration management, we are typically talking about writing some kind of state description for our servers, and then using a tool to enforce that the servers are, indeed, in that state: the right packages are installed, configuration files contain the expected values and have the expected permissions, the right services are running, and so on. Like other configuration management tools, Ansible exposes a domain-specific language (DSL) that you use to describe the state of your servers.</p>
<p>These tools also can be used for doing deployment as well. When people talk about deployment, they are usually referring to the process of taking software that was written in-house, generating binaries or static assets (if necessary), copying the required files to the server(s), and then starting up the services. Capistrano and Fabric are two examples of open-source deployment tools. Ansible is a great tool for doing deployment as well as configuration management. Using a single tool for both configuration management and deployment makes life simpler for the folks responsible for operations.</p>
<p>Some people talk about the need for orchestration of deployment. This is where multiple remote servers are involved, and things have to happen in a specific order. For example, you need to bring up the database before bringing up the web servers, or you need to take web servers out of the load balancer one at a time in order to upgrade them without downtime. Ansible’s good at this as well, and is designed from the ground up for performing actions on multiple servers. Ansible has a refreshingly simple model for controlling the order that actions happen in.</p>
<p>Finally, you’ll hear people talk about provisioning new servers. In the context of public clouds such as Amazon EC2, this refers to spinning up a new virtual machine instance. Ansible’s got you covered here, with a number of modules for talking to clouds, including EC2, Azure, Digital Ocean, Google Compute Engine, Linode, and Rackspace, as well as any clouds that support the OpenStack APIs.</p>
<h1 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h1><p>As with most configuration management software, Ansible has two types of servers: controlling machines and nodes. First, there is a single controlling machine which is where orchestration begins. Nodes are managed by a controlling machine over SSH. The controlling machine describes the location of nodes through its inventory.</p>
<h2 id="Agentless"><a href="#Agentless" class="headerlink" title="Agentless"></a>Agentless</h2><p>In contrast with popular configuration management software — such as Chef, Puppet, and CFEngine — Ansible uses an agentless architecture.[14] With an agent-based architecture, nodes must have a locally installed daemon that communicates with a controlling machine. With an agentless architecture, nodes are not required to install and run background daemons to connect with a controlling machine. This type of architecture reduces the overhead on the network by preventing the nodes from polling the controlling machine.</p>
<h2 id="Playbook"><a href="#Playbook" class="headerlink" title="Playbook"></a>Playbook</h2><p>Playbooks are Ansible’s configuration, deployment, and orchestration language. They can describe a policy you want your remote systems to enforce, or a set of steps in a general IT process.</p>
<p>I like to think of <code>Ansible playbooks as executable documentation</code>. It’s like the README file that describes the commands you had to type out to deploy your software, except that the instructions will never go out-of-date because they are also the code that gets executed directly.</p>
<p>If Ansible modules are the tools in your workshop, playbooks are your instruction manuals, and your inventory of hosts are your raw material.</p>
<p> In Ansible, a script is called a playbook. A playbook describes which hosts (what Ansible calls remote servers) to configure, and an ordered list of tasks to perform on those hosts.</p>
<p> To execute the playbook using the ansible-playbook command. In the example, the playbook is named webservers.yml, and is executed by typing:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ansible-playbook webservers.yml</span><br></pre></td></tr></table></figure>

<p>Ansible will make SSH connections in parallel to web1, web2, and web3. It will execute the first task on the list on all three hosts simultaneously. In this example, the first task is installing the nginx apt package (since Ubuntu uses the apt package manager), so the task in the playbook would look something like this:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">- name:</span> <span class="string">install</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">  apt:</span> <span class="string">name=nginx</span></span><br></pre></td></tr></table></figure>

<p>Ansible will:</p>
<ol>
<li>Generate a Python script that installs the nginx package.</li>
<li>Copy the script to web1, web2, and web3.</li>
<li>Execute the script on web1, web2, web3.</li>
<li>Wait for the script to complete execution on all hosts.</li>
</ol>
<p>Ansible will then move to the next task in the list, and go through these same four steps. It’s important to note that:</p>
<ul>
<li>Ansible runs each task in parallel across all hosts.</li>
<li>Ansible waits until all hosts have completed a task before moving to the next task.</li>
<li>Ansible runs the tasks in the order that you specify them.</li>
</ul>
<h2 id="Variable"><a href="#Variable" class="headerlink" title="Variable"></a>Variable</h2><p>Variable names should be letters, numbers, and underscores. Variables should always start with a letter.</p>
<p>foo_port is a great variable. foo5 is fine too.<br>foo-port, foo port, foo.port and 12 are not valid variable names.</p>
<p>Defining Variables in Playbooks<br>The simplest way to define variables is to put a vars section in your playbook with the names and values of variables.</p>
<p>Ansible also allows you to put variables into one or more files, using a section called vars_files. </p>
<p>We would replace the vars section with a vars_files that looks like this:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">vars_files:</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">nginx.yml</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## nginx.yml</span></span><br><span class="line"><span class="attr">key_file:</span> <span class="string">/etc/nginx/ssl/nginx.key</span></span><br><span class="line"><span class="attr">cert_file:</span> <span class="string">/etc/nginx/ssl/nginx.crt</span></span><br><span class="line"><span class="attr">conf_file:</span> <span class="string">/etc/nginx/sites-available/default</span></span><br><span class="line"><span class="attr">server_name:</span> <span class="string">localhost</span></span><br></pre></td></tr></table></figure>

<h3 id="To-debug-variable"><a href="#To-debug-variable" class="headerlink" title="To debug variable"></a>To debug variable</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">- debug:</span> <span class="string">var=myvarname</span></span><br></pre></td></tr></table></figure>

<h2 id="Registering-Variables"><a href="#Registering-Variables" class="headerlink" title="Registering Variables"></a>Registering Variables</h2><p>Often, you’ll find that you need to set the value of a variable based on the result of a task. To do so, we create a registered variable using the register clause when invoking a module. </p>
<p>In order to use the login variable later, we need to know what type of value to expect. The value of a variable set using the register clause is always a dictionary, but the specific keys of the dictionary are different, depending on the module that was invoked.</p>
<p>ACCESSING DICTIONARY KEYS IN A VARIABLE<br>If a variable contains a dictionary, then you can access the keys of the dictionary using either a dot (.) or a subscript ([]).</p>
<h3 id="facts"><a href="#facts" class="headerlink" title="facts"></a>facts</h3><p>When Ansible gathers facts, it connects to the host and queries the host for all kinds of details about the host: CPU architecture, operating system, IP addresses, memory info, disk info, and more. This information is stored in variables that are called facts, and they behave just like any other variable does.</p>
<p>Here’s a simple playbook that will print out the operating system of each server:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">- name:</span> <span class="string">print</span> <span class="string">out</span> <span class="string">operating</span> <span class="string">system</span></span><br><span class="line"><span class="attr">  hosts:</span> <span class="string">all</span></span><br><span class="line"><span class="attr">  gather_facts:</span> <span class="literal">True</span></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">  - debug:</span> <span class="string">var=ansible_distribution</span></span><br></pre></td></tr></table></figure>

<p>Viewing All Facts Associated with a Server<br>Ansible implements fact collecting through the use of a special module called the setup module. You don’t need to call this module in your playbooks because Ansible does that automatically when it gathers facts. However, if you invoke it manually with the ansible command-line tool, like this:</p>
<p>$ ansible server1 -m setup</p>
<h2 id="interactive-mode"><a href="#interactive-mode" class="headerlink" title="interactive mode"></a>interactive mode</h2><p>If Ansible did not succeed, add the -vvvv flag to see more details about the error:</p>
<p>$ ansible testserver -i hosts -m ping -vvvv</p>
<p>We can see that the module succeeded. The “changed”: false part of the output tells us that executing the module did not change the state of the server. The “ping”: “pong” text is output that is specific to the ping module.</p>
<h2 id="Simplifying-with-the-ansible-cfg-File"><a href="#Simplifying-with-the-ansible-cfg-File" class="headerlink" title="Simplifying with the ansible.cfg File"></a>Simplifying with the ansible.cfg File</h2><p>We had to type a lot of text in the inventory file to tell Ansible about our test server. Fortunately, Ansible has a number of ways you can specify these sorts of variables so we don’t have to put them all in one place.</p>
<p>Right now, we’ll use one such mechanism, the ansible.cfg file, to set some defaults so we don’t need to type as much.</p>
<h3 id="WHERE-SHOULD-I-PUT-MY-ANSIBLE-CFG-FILE"><a href="#WHERE-SHOULD-I-PUT-MY-ANSIBLE-CFG-FILE" class="headerlink" title="WHERE SHOULD I PUT MY ANSIBLE.CFG FILE?"></a>WHERE SHOULD I PUT MY ANSIBLE.CFG FILE?</h3><p>Ansible looks for an ansible.cfg file in the following places, in this order:</p>
<p>File specified by the ANSIBLE_CONFIG environment variable</p>
<p>./ansible.cfg (ansible.cfg in the current directory)</p>
<p>~/.ansible.cfg (.ansible.cfg in your home directory)</p>
<p>/etc/ansible/ansible.cfg</p>
<p>I typically put an ansible.cfg in the current directory, alongside my playbooks. That way, I can check it into the same version control repository my playbooks are in.</p>
<h2 id="Run-command-remotely"><a href="#Run-command-remotely" class="headerlink" title="Run command remotely"></a>Run command remotely</h2><p>I like to use the ansible command-line tool to run arbitrary commands on remote machines, like parallel SSH. You can execute arbitrary commands with the command module. When invoking this module, you also need to pass an argument to the module with the -a flag, which is the command to run.</p>
<p>For example, to check the uptime of our server, we can use:</p>
<p>$ ansible testserver -m command -a uptime</p>
<p>The command module is so commonly used that it’s the default module, so we can omit it:</p>
<p>$ ansible testserver -a uptime<br>$ ansible testserver -a “tail /var/log/dmesg”</p>
<h3 id="inventory"><a href="#inventory" class="headerlink" title="inventory"></a>inventory</h3><p>WARNING<br>Although Ansible adds the localhost to your inventory automatically, you have to have at least one other host in your inventory file; otherwise, ansible-playbook will terminate with the error:</p>
<p>ERROR: provided hosts list is empty</p>
<h3 id="property-“Changed”"><a href="#property-“Changed”" class="headerlink" title="property “Changed”"></a>property “Changed”</h3><p>The changed key is present in the return value of all Ansible modules, and Ansible uses it to determine whether a state change has occurred. For the command and shell module, this will always be set to true unless overridden with the changed_when clause</p>
<h2 id="ignore-error"><a href="#ignore-error" class="headerlink" title="ignore error"></a>ignore error</h2><p>Ignoring when a module returns an error</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">- name:</span> <span class="string">Run</span> <span class="string">myprog</span></span><br><span class="line"><span class="attr">  command:</span> <span class="string">/opt/myprog</span></span><br><span class="line"><span class="attr">  register:</span> <span class="string">result</span></span><br><span class="line"><span class="attr">  ignore_errors:</span> <span class="literal">True</span></span><br><span class="line"><span class="attr">- debug:</span> <span class="string">var=result</span></span><br></pre></td></tr></table></figure>

<h2 id="Data-type"><a href="#Data-type" class="headerlink" title="Data type"></a>Data type</h2><p>All members of a list are lines beginning at the same indentation level starting with a “- “ (a dash and a space):</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># A list of tasty fruits</span></span><br><span class="line"><span class="attr">fruits:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">Apple</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">Orange</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">Strawberry</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">Mango</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure>

<p>A dictionary is represented in a simple key: value form (the colon must be followed by a space):</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># An employee record</span></span><br><span class="line"><span class="attr">martin:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">Martin</span> <span class="string">D'vloper</span></span><br><span class="line"><span class="attr">    job:</span> <span class="string">Developer</span></span><br><span class="line"><span class="attr">    skill:</span> <span class="string">Elite</span></span><br></pre></td></tr></table></figure>

<p>More complicated data structures are possible, such as lists of dictionaries, dictionaries whose values are lists or a mix of both:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Employee records</span></span><br><span class="line"><span class="attr">-  martin:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">Martin</span> <span class="string">D'vloper</span></span><br><span class="line"><span class="attr">    job:</span> <span class="string">Developer</span></span><br><span class="line"><span class="attr">    skills:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">python</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">perl</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">pascal</span></span><br><span class="line"><span class="attr">-  tabitha:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">Tabitha</span> <span class="string">Bitumen</span></span><br><span class="line"><span class="attr">    job:</span> <span class="string">Developer</span></span><br><span class="line"><span class="attr">    skills:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">lisp</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">fortran</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">erlang</span></span><br></pre></td></tr></table></figure>

<p>Dictionaries and lists can also be represented in an abbreviated form if you really want to:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">martin:</span> <span class="string">&#123;name:</span> <span class="string">Martin</span> <span class="string">D'vloper,</span> <span class="attr">job:</span> <span class="string">Developer,</span> <span class="attr">skill:</span> <span class="string">Elite&#125;</span></span><br><span class="line"><span class="attr">fruits:</span> <span class="string">['Apple',</span> <span class="string">'Orange'</span><span class="string">,</span> <span class="string">'Strawberry'</span><span class="string">,</span> <span class="string">'Mango'</span><span class="string">]</span></span><br></pre></td></tr></table></figure>

<p>These are called “Flow collections”.</p>
<h3 id="span-multiple-lines"><a href="#span-multiple-lines" class="headerlink" title="span multiple lines"></a>span multiple lines</h3><p>Values can span multiple lines using | or &gt;. Spanning multiple lines using a “Literal Block Scalar” | will include the newlines and any trailing spaces. Using a “Folded Block Scalar” &gt; will fold newlines to spaces; it’s used to make what would otherwise be a very long line easier to read and edit. In either case the indentation will be ignored. Examples are:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">include_newlines:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            exactly as you see</span></span><br><span class="line"><span class="string">            will appear these three</span></span><br><span class="line"><span class="string">            lines of poetry</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span><span class="attr">fold_newlines:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">            this is really a</span></span><br><span class="line"><span class="string">            single line of text</span></span><br><span class="line"><span class="string">            despite appearances</span></span><br></pre></td></tr></table></figure>

<h1 id="commands"><a href="#commands" class="headerlink" title="commands"></a>commands</h1><h2 id="file"><a href="#file" class="headerlink" title="file"></a>file</h2><p>file - Sets attributes of files</p>
<p>Sets attributes of files, symlinks, and directories, or removes files/symlinks/directories. Many other modules support the same options as the file module - including copy, template, and assemble.</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># change file ownership, group and mode. When specifying mode using octal numbers, first digit should always be 0.</span></span><br><span class="line"><span class="attr">- file:</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">/etc/foo.conf</span></span><br><span class="line"><span class="attr">    owner:</span> <span class="string">foo</span></span><br><span class="line"><span class="attr">    group:</span> <span class="string">foo</span></span><br><span class="line"><span class="attr">    mode:</span> <span class="number">0644</span></span><br><span class="line"><span class="attr">- file:</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">/work</span></span><br><span class="line"><span class="attr">    owner:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    group:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    mode:</span> <span class="number">01777</span></span><br></pre></td></tr></table></figure>

<h2 id="delegation"><a href="#delegation" class="headerlink" title="delegation"></a>delegation</h2><p>This isn’t actually rolling update specific but comes up frequently in those cases.</p>
<p>If you want to perform a task on one host with reference to other hosts, use the ‘delegate_to’ keyword on a task. This is ideal for placing nodes in a load balanced pool, or removing them. It is also very useful for controlling outage windows. Be aware that it does not make sense to delegate all tasks, debug, add_host, include, etc always get executed on the controller. Using this with the ‘serial’ keyword to control the number of hosts executing at one time is also a good idea:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- hosts:</span> <span class="string">webservers</span></span><br><span class="line"><span class="attr">  serial:</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">take</span> <span class="string">out</span> <span class="string">of</span> <span class="string">load</span> <span class="string">balancer</span> <span class="string">pool</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">/usr/bin/take_out_of_pool</span> <span class="string">&#123;&#123;</span> <span class="string">inventory_hostname</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">    delegate_to:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">actual</span> <span class="string">steps</span> <span class="string">would</span> <span class="string">go</span> <span class="string">here</span></span><br><span class="line"><span class="attr">    yum:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">acme-web-stack</span></span><br><span class="line"><span class="attr">      state:</span> <span class="string">latest</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">add</span> <span class="string">back</span> <span class="string">to</span> <span class="string">load</span> <span class="string">balancer</span> <span class="string">pool</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">/usr/bin/add_back_to_pool</span> <span class="string">&#123;&#123;</span> <span class="string">inventory_hostname</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">    delegate_to:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br></pre></td></tr></table></figure>

<p>These commands will run on 127.0.0.1, which is the machine running Ansible. There is also a shorthand syntax that you can use on a per-task basis: ‘local_action’. Here is the same playbook as above, but using the shorthand syntax for delegating to 127.0.0.1:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">take</span> <span class="string">out</span> <span class="string">of</span> <span class="string">load</span> <span class="string">balancer</span> <span class="string">pool</span></span><br><span class="line"><span class="attr">    local_action:</span> <span class="string">command</span> <span class="string">/usr/bin/take_out_of_pool</span> <span class="string">&#123;&#123;</span> <span class="string">inventory_hostname</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">add</span> <span class="string">back</span> <span class="string">to</span> <span class="string">load</span> <span class="string">balancer</span> <span class="string">pool</span></span><br><span class="line"><span class="attr">    local_action:</span> <span class="string">command</span> <span class="string">/usr/bin/add_back_to_pool</span> <span class="string">&#123;&#123;</span> <span class="string">inventory_hostname</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p>A common pattern is to use a local action to call ‘rsync’ to recursively copy files to the managed servers. Here is an example:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">recursively</span> <span class="string">copy</span> <span class="string">files</span> <span class="string">from</span> <span class="string">management</span> <span class="string">server</span> <span class="string">to</span> <span class="string">target</span></span><br><span class="line"><span class="attr">    local_action:</span> <span class="string">command</span> <span class="string">rsync</span> <span class="bullet">-a</span> <span class="string">/path/to/files</span> <span class="string">&#123;&#123;</span> <span class="string">inventory_hostname</span> <span class="string">&#125;&#125;:/path/to/target/</span></span><br></pre></td></tr></table></figure>

<p>Note that you must have passphrase-less SSH keys or an ssh-agent configured for this to work, otherwise rsync will need to ask for a passphrase.</p>
<p>dev experience<br>lead</p>
]]></content>
  </entry>
  <entry>
    <title>Apigee</title>
    <url>/2018-06-21-Apigee/</url>
    <content><![CDATA[<p>App deployment, configuration management and orchestration - all from one system. Ansible is powerful IT automation that you can learn quickly.</p>
<h1 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h1><p>APIs are the glue that connect apps and act as the foundation for what we call the digital economy. Through every connection there is at least one API interacting with other applications and exchanging data. A business needs API management solutions that can support diverse users and not compromise the stability and reliability of back-end systems. Apigees intelligent API management platform allows companies to provide connected, seamless, digital experiences and increase the speed at which they innovate and adapt.</p>
<h1 id="Apigee-Edge-Apigee’s-API-Management-platform-provides-a-unified-solution-that"><a href="#Apigee-Edge-Apigee’s-API-Management-platform-provides-a-unified-solution-that" class="headerlink" title="Apigee Edge, Apigee’s API Management platform, provides a unified solution that:"></a>Apigee Edge, Apigee’s API Management platform, provides a unified solution that:</h1><p>makes your APIs fail-proof<br>helps you grow your developer and partner ecosystem<br>enables you to run your APIs at scale<br>provides deep insights into your APIs and your business<br>Apigee Edge is the API management tool that offers the solutions today’s digital economy demands. For more information, download our Definitive Guide to API Management.</p>
<h2 id="Build-RESTful-APIs"><a href="#Build-RESTful-APIs" class="headerlink" title="Build RESTful APIs"></a>Build RESTful APIs</h2><p>You have data, you have services, and you want to develop new business solutions quickly, both internally and externally.</p>
<p>With Apigee, you can build API proxies—RESTful, HTTP-based APIs that interact with your services. With easy-to-use APIs, developers can be more productive, increasing your speed to market.</p>
<p>API proxies give you the full power of Apigee’s API platform to secure API calls, throttle traffic, mediate messages, control error handling, cache things, build developer portals, document APIs, analyze API traffic data, make money on the use of your APIs, protect against bad bots, and more.</p>
<h1 id="paybook"><a href="#paybook" class="headerlink" title="paybook"></a>paybook</h1><p><code>playbooks</code> contains <code>plays</code>, plays contains <code>tasks</code>, while taks call <code>modules</code>.
<code>tasks</code> run sequentially<br><code>handlers</code> are trigered by tasks and are un once, at the end of plays.</p>
<h2 id="Configuration-management"><a href="#Configuration-management" class="headerlink" title="Configuration management"></a>Configuration management</h2><p>Ansible configurations are simple data descriptions of your infrastructure (both human-readable and machine-parsable) - ensuring everyone on your team will be able to understand the meaning of each configuration task. New team members will be able to quickly dive in and make an impact. Existing team members can get work done faster - freeing up cycles to attend to more critical and strategic work instead of configuration management.</p>
<p>Ansible requires nothing more than a password or SSH key in order to start managing systems and can start managing them without installing any agent software, avoiding the problem of “managing the management” common in many automation systems. There’s no more wondering why configuration management daemons are down, when to upgrade management agents, or when to patch security vulnerabilities in those agents.</p>
<h3 id="GOAL-ORIENTED-NOT-SCRIPTED"><a href="#GOAL-ORIENTED-NOT-SCRIPTED" class="headerlink" title="GOAL-ORIENTED, NOT SCRIPTED"></a>GOAL-ORIENTED, NOT SCRIPTED</h3><p>Ansible features an state-driven resource model that describes the desired state of computer systems and services, not the paths to get them to this state. No matter what state a system is in, Ansible understands how to transform it to the desired state (and also supports a “dry run” mode to preview needed changes). This allows reliable and repeatable IT infrastructure configuration, avoiding the potential failures from scripting and script-based solutions that describe explicit and often irreversible actions rather than the end goal.</p>
<h3 id="SECURE-amp-AGENTLESS"><a href="#SECURE-amp-AGENTLESS" class="headerlink" title="SECURE &amp; AGENTLESS"></a>SECURE &amp; AGENTLESS</h3><p>Ansible relies on the most secure remote configuration management system available as its default transport layer: OpenSSH. OpenSSH is available for a wide variety of platforms, is very lightweight and when security issues in OpenSSH are discovered, they are patched quickly.</p>
<p>Further, Ansible does not require any remote agents. Ansible delivers all modules to remote systems and executes tasks, as needed, to enact the desired configuration. These modules run with user-supplied credentials, including support for sudo and even Kerberos and clean up after themselves when complete. Ansible does not require root login privileges, specific SSH keys, or dedicated users and respects the security model of the system under management.</p>
<p>As a result, Ansible has a very low attack surface area and is quite easy to deploy into new environments.</p>
<h2 id="EFFICIENT-ARCHITECTURE"><a href="#EFFICIENT-ARCHITECTURE" class="headerlink" title="EFFICIENT ARCHITECTURE"></a>EFFICIENT ARCHITECTURE</h2><p>Ansible works by connecting to your nodes and pushing out small programs, called “Ansible modules” to them. These programs are written to be resource models of the desired state of the system. Ansible then executes these modules (over SSH by default), and removes them when finished.</p>
<p>Your library of modules can reside on any machine, and there are no servers, daemons, or databases required. Typically you’ll work with your favorite terminal program, a text editor, and probably a version control system to keep track of changes to your content.</p>
<h1 id="MANAGE-YOUR-INVENTORY-IN-SIMPLE-TEXT-FILES"><a href="#MANAGE-YOUR-INVENTORY-IN-SIMPLE-TEXT-FILES" class="headerlink" title="MANAGE YOUR INVENTORY IN SIMPLE TEXT FILES"></a>MANAGE YOUR INVENTORY IN SIMPLE TEXT FILES</h1><p>By default, Ansible represents what machines it manages using a very simple INI file that puts all of your managed machines in groups of your own choosing.  </p>
<p>To add new machines, there is no additional SSL signing server involved, so there’s never any hassle deciding why a particular machine didn’t get linked up due to obscure NTP or DNS issues.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[webservers]</span><br><span class="line">www1.example.com</span><br><span class="line">www2.example.com</span><br><span class="line"></span><br><span class="line">[dbservers]</span><br><span class="line">db0.example.com</span><br><span class="line">db1.example.com</span><br></pre></td></tr></table></figure>

<h2 id="installation"><a href="#installation" class="headerlink" title="installation"></a>installation</h2><p>Once Ansible is installed, it will not add a database, and there will be no daemons to start or keep running. You only need to install it on one machine (which could easily be a laptop) and it can manage an entire fleet of remote machines from that central point. When Ansible manages remote machines, it does not leave software installed or running on them, so there’s no real question about how to upgrade Ansible when moving to a new version.</p>
]]></content>
  </entry>
  <entry>
    <title>Core Java</title>
    <url>/2018-06-26-Core-Java/</url>
    <content><![CDATA[<h1 id="Annotation-retention-policy"><a href="#Annotation-retention-policy" class="headerlink" title="Annotation retention policy"></a>Annotation retention policy</h1><p>What is Retention policy in java annotations?</p>
<p>A retention policy determines at what point annotation should be discarded.<br>Java defined 3 types of retention policies through java.lang.annotation.RetentionPolicy enumeration. It has SOURCE, CLASS and RUNTIME.<br>Annotation with retention policy SOURCE will be retained only with source code, and discarded during compile time.<br>Annotation with retention policy CLASS will be retained till compiling the code, and discarded during runtime.<br>Annotation with retention policy RUNTIME will be available to the JVM through runtime.<br>The retention policy will be specified by using java built-in annotation @Retention, and we have to pass the retention policy type.<br>The default retention policy type is CLASS.</p>
<h1 id="overload-and-override"><a href="#overload-and-override" class="headerlink" title="overload and override"></a>overload and override</h1><p>“selection among overloaded methods is static, while selection among overridden methods is dynamic. ”</p>
<p>“a method is overridden when a subclass contains a method declaration with the same signature as a method declaration in an ancestor.”</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">“<span class="comment">// Broken! - What does this program print?</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionClassifier</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">classify</span><span class="params">(Set&lt;?&gt; s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Set"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">classify</span><span class="params">(List&lt;?&gt; lst)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"List"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">classify</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Unknown Collection"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Collection&lt;?&gt;[] collections = &#123;</span><br><span class="line">            <span class="keyword">new</span> HashSet&lt;String&gt;(),</span><br><span class="line">            <span class="keyword">new</span> ArrayList&lt;BigInteger&gt;(),</span><br><span class="line">            <span class="keyword">new</span> HashMap&lt;String, String&gt;().values()</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Collection&lt;?&gt; c : collections)</span><br><span class="line">            System.out.println(classify(c));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>You might expect this program to print Set, followed by List and Unknown Collection, but it doesn’t. It prints Unknown Collection three times. Why does this happen? Because the classify method is overloaded, and the choice of which overloading to invoke is made at compile time.”</p>
<p>“the best way to fix the program is to replace all three overloadings of classify with a single method that does an explicit instanceof test:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">classify</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> c <span class="keyword">instanceof</span> Set  ? <span class="string">"Set"</span> :</span><br><span class="line">           c <span class="keyword">instanceof</span> List ? <span class="string">"List"</span> : <span class="string">"Unknown Collection"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Because overriding is the norm and overloading is the exception, overriding sets people’s expectations for the behavior of method invocation. As demonstrated by the CollectionClassifier example, overloading can easily confound these expectations. It is bad practice to write code whose behavior is likely to confuse programmers. This is especially true for APIs.”</p>
<p>“Exactly what constitutes a confusing use of overloading is open to some debate. A safe, conservative policy is never to export two overloadings with the same number of parameters. If a method uses varargs, a conservative policy is not to overload it at all,”</p>
<p>“Functional programming is a term that means different things to different people.”<br>“At the heart of functional programming is thinking about your problem domain in terms of immutable values and functions that translate between them.”</p>
<h1 id="Target-typing"><a href="#Target-typing" class="headerlink" title="Target typing"></a>Target typing</h1><p>“What is implicit in all these examples is that a lambda expression’s type is context dependent. It gets inferred by the compiler. This target typing isn’t entirely new, either.”</p>
<p>“This restriction is relaxed a bit in Java 8. It’s possible to refer to variables that aren’t final; however, they still have to be effectively final. Although you haven’t declared the variable(s) as final, you still cannot use them as nonfinal variable(s) if they are to be used in lambda expressions. If you do use them as nonfinal variables, then the compiler will show an error.”</p>
<h1 id="Functional-interface"><a href="#Functional-interface" class="headerlink" title="Functional interface"></a>Functional interface</h1><p>“A functional interface is an interface with a single abstract method that is used as the type of a lambda expression.”</p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Coding</tag>
      </tags>
  </entry>
  <entry>
    <title>JXM</title>
    <url>/2018-07-10-JMX/</url>
    <content><![CDATA[<h1 id="Exporting-your-beans-to-JMX"><a href="#Exporting-your-beans-to-JMX" class="headerlink" title="Exporting your beans to JMX"></a>Exporting your beans to JMX</h1><p>The core class in Spring’s JMX framework is the MBeanExporter. This class is responsible for taking your Spring beans and registering them with a JMX MBeanServer. </p>
<p>when running inside a container that does not provide an MBeanServer. To address this you can create an MBeanServer instance declaratively by adding an instance of the org.springframework.jmx.support.MBeanServerFactoryBean class to your configuration. You can also ensure that a specific MBeanServer is used by setting the value of the MBeanExporter’s server property to the MBeanServer value returned by an MBeanServerFactoryBean</p>
]]></content>
  </entry>
  <entry>
    <title>Camel</title>
    <url>/2018-07-13-Camel/</url>
    <content><![CDATA[<h1 id="Endpoints"><a href="#Endpoints" class="headerlink" title="Endpoints"></a>Endpoints</h1><p>Camel supports the Message Endpoint pattern using the Endpoint interface. Endpoints are usually created by a Component and Endpoints are usually referred to in the DSL via their URIs.</p>
<p>From an Endpoint you can use the following methods</p>
<p>createProducer() will create a Producer for sending message exchanges to the endpoint<br>createConsumer() implements the Event Driven Consumer pattern for consuming message exchanges from the endpoint via a Processor when creating a Consumer<br>createPollingConsumer() implements the Polling Consumer pattern for consuming message exchanges from the endpoint via a PollingConsumer</p>
<h1 id="implementation"><a href="#implementation" class="headerlink" title="implementation"></a>implementation</h1><p>When using the DSL to create Routes you typically refer to Message Endpoints by their URIs rather than directly using the Endpoint interface. Its then a responsibility of the CamelContext to create and activate the necessary Endpoint instances using the available Component implementations.</p>
<h1 id="connector"><a href="#connector" class="headerlink" title="connector"></a>connector</h1><p>Sub interface including Initiator.<br>abstract class SessionConnector implements Connector</p>
<h1 id="session"><a href="#session" class="headerlink" title="session"></a>session</h1><p>class Session.java</p>
<h1 id="FieldMaps"><a href="#FieldMaps" class="headerlink" title="FieldMaps"></a>FieldMaps</h1><p>Which leverage TreeMap&lt;Integer, Field&lt;?&gt;&gt; fields;</p>
<h2 id="Field"><a href="#Field" class="headerlink" title="Field"></a>Field</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Field</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Serializable</span> </span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">   <span class="title">public</span> <span class="title">Field</span>(<span class="title">int</span> <span class="title">field</span>, <span class="title">T</span> <span class="title">object</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tag = field;</span><br><span class="line">        <span class="keyword">this</span>.object = object;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>File Util in Apache Camel</title>
    <url>/2018-07-16-FileUtils_Camel/</url>
    <content><![CDATA[<h1 id="FileUtil-class"><a href="#FileUtil-class" class="headerlink" title="FileUtil.class"></a>FileUtil.class</h1><h2 id="compactPath-String-path"><a href="#compactPath-String-path" class="headerlink" title="compactPath(String path)"></a>compactPath(String path)</h2><p>To normalize path and join with provided separator</p>
<p>if path is null, return null<br>if path.indexOf(47) == -1 &amp;&amp; path.indexOf(92) ==-1 (means /, ) return path</p>
<h3 id="normalizePath"><a href="#normalizePath" class="headerlink" title="normalizePath"></a>normalizePath</h3><p>check whether it is windows<br>String osName = System.getProperty(“os.name”).toLowerCase(Locale.ENGLISH);<br>        return osName.contains(“windows”);<br>for windows, replace / with \, for linux, replace \ with /</p>
<p>split path by separator (\ or /) to get an array</p>
<p>traverse array and check whether current is “..”, if so , call stack.pop<br>otherwise, stach.push(part)</p>
<p>Then iterate stack and then combine them by a StringBuilder via provided addtional parameter separator</p>
]]></content>
  </entry>
  <entry>
    <title>QuickFixJ</title>
    <url>/2018-07-10-QuickFixJ/</url>
    <content><![CDATA[<h1 id="Settings"><a href="#Settings" class="headerlink" title="Settings"></a>Settings</h1><p>A settings file is set up with two types of heading, a [DEFAULT] and a [SESSION] heading. [SESSION] tells QuickFIX/J that a new Session is being defined. [DEFAULT] is a place that you can define settings which will be inherited by sessions that do not explicitly define them. If you do not provide a setting that QuickFIX/J needs, it will throw a ConfigError telling you what setting is missing or improperly formatted.</p>
<h1 id="SSL-cipher"><a href="#SSL-cipher" class="headerlink" title="SSL cipher"></a>SSL cipher</h1><p>An SSL cipher specification in cipher-spec is composed of 4 major attributes plus a few extra minor ones.</p>
<p>Key Exchange Algorithm:<br>RSA or Diffie-Hellman variants.</p>
<p>Authentication Algorithm:<br>RSA, Diffie-Hellman, DSS or none.</p>
<p>Cipher/Encryption Algorithm:<br>DES, Triple-DES, RC4, RC2, IDEA or none.</p>
<p>MAC Digest Algorithm:<br>MD5, SHA or SHA1.</p>
<h2 id="InOut-exchange"><a href="#InOut-exchange" class="headerlink" title="InOut exchange"></a>InOut exchange</h2><p>Although the <code>FIX protocol is event-driven and asynchronous</code>, there are specific pairs of messages<br>that represent a request-reply message exchange. To use an InOut exchange pattern, there should<br>be a single request message and single reply message to the request. Examples include an<br>OrderStatusRequest message and UserRequest.</p>
<p>#FIX Sequence Number Management<br>If an application exception is thrown during synchronous exchange processing, this will cause QuickFIX/J to not increment incoming FIX message sequence numbers and will cause a resend of the counterparty message. This FIX protocol behavior is primarily intended to handle transport errors rather than application errors. There are risks associated with using this mechanism to handle application errors. The primary risk is that the message will repeatedly cause application errors each time it is re-received. A better solution is to persist the incoming message (database, JMS queue) immediately before processing it. This also allows the application to process messages asynchronously without losing messages when errors occur.</p>
<p>Although it is possible to send messages to a FIX session before it is logged on (the messages will be sent at logon time), it is usually a better practice to wait until the session is logged on. This eliminates the required sequence number resynchronization steps at logon. Waiting for session logon can be done by setting up a route that processes the SessionLogon event category and signals the application to start sending messages.</p>
<h1 id="Source-code"><a href="#Source-code" class="headerlink" title="Source code"></a>Source code</h1><h2 id="QuickFixJComponent-class"><a href="#QuickFixJComponent-class" class="headerlink" title="QuickFixJComponent.class"></a>QuickFixJComponent.class</h2><p>if (configuration != null) {<br>                        settings = configuration.createSessionSettings();<br>                    } else {<br>                        settings = QuickfixjEngine.loadSettings(remaining);<br>                    }</p>
<h2 id="MessageStore"><a href="#MessageStore" class="headerlink" title="MessageStore"></a>MessageStore</h2><p>This interface Used by a Session to store and retrieve messages for resend purposes.</p>
<ul>
<li>boolean set(int sequence, String message) throws IOException;</li>
<li>void get(int startSequence, int endSequence, Collection<string> messages) throws IOException;</string></li>
</ul>
<p>Implementations such as MemoryStore.java, it use one HashMap&lt;Integer, String&gt; to keep messages (string)</p>
<h2 id="Parse-body"><a href="#Parse-body" class="headerlink" title="Parse body"></a>Parse body</h2><p>private void parseBody(DataDictionary dd, boolean doValidation) throws InvalidMessage {<br>        for(StringField field = this.extractField(dd, this); field != null; field = this.extractField(dd, this)) {<br>            if (isTrailerField(field.getField())) {<br>                this.pushBack(field);<br>                return;<br>            }</p>
<h2 id="validate-check-sum"><a href="#validate-check-sum" class="headerlink" title="validate check sum"></a>validate check sum</h2><p>in message.class</p>
<p>private void validateCheckSum(String messageData) throws InvalidMessage {<br>        try {<br>            int checksum = this.trailer.getInt(10);<br>            if (checksum != MessageUtils.checksum(messageData)) {<br>                throw new InvalidMessage(“Expected CheckSum=” + MessageUtils.checksum(messageData) + “, Received CheckSum=” + checksum + “ in “ + messageData);<br>            }<br>}</p>
<p>the first checksum is 131</p>
<p>in MessageUtils.checksum<br>public static int checksum</p>
<p>int end = isEntireMessage ? data.lastIndexOf(“\u000110=”) : -1;<br>            int len = end &gt; -1 ? end + 1 : data.length();</p>
<pre><code>for(int i = 0; i &lt; len; ++i) {
    sum += data.charAt(i);
}

return sum &amp; 255;</code></pre><p>the checksum from above messageUtil is 87<br>?? how to get and set this.trailer.10=131 ?</p>
]]></content>
  </entry>
  <entry>
    <title>Apache Camel</title>
    <url>/2018-07-11-Camel/</url>
    <content><![CDATA[<h1 id="Camel’s-message-model"><a href="#Camel’s-message-model" class="headerlink" title="Camel’s message model"></a>Camel’s message model</h1><p>In Camel, there are two abstractions for modeling messages, both of which we’ll cover in this section.</p>
<ul>
<li>org.apache.camel.Message—The fundamental entity containing the data being carried and routed in Camel</li>
<li>org.apache.camel.Exchange—The Camel abstraction for an exchange of mes- sages. This exchange of messages has an “in” message and as a reply, an “out” message</li>
</ul>
<h2 id="Message"><a href="#Message" class="headerlink" title="Message"></a>Message</h2><p>Messages are the entities used by systems to communicate with each other when using messaging channels. Messages flow in one direction from a sender to a receiver,  Messages have a body (a payload), headers, and optional attachments,</p>
<p>Messages are uniquely identified with an identifier of type java.lang.String. The identifier’s uniqueness is enforced and guaranteed by the message creator, it’s protocol depen- dent, and it doesn’t have a guaranteed format.<br>For protocols that don’t define a unique message identification scheme, Camel uses its own UID generator.<br>HEADERS AND ATTACHMENTS<br>Headers are values associated with the message, such as sender identifiers, hints about content encoding, authentication infor- mation, and so on. Headers are name-value pairs; the name is a unique, case-insensitive string, and the value is of type java. lang.Object. This means that Camel imposes no constraints on the type of the headers. Headers are stored as a map within the message. A message can also have optional attachments, which are typically used for the web service and email components.</p>
<h2 id="Exchange"><a href="#Exchange" class="headerlink" title="Exchange"></a>Exchange</h2><p>An exchange in Camel is the message’s container during routing. An exchange also provides support for the various types of interactions between systems, also known as message exchange patterns (MEPs). MEPs are used to differentiate between one-way and request-response messaging styles. The Camel exchange holds a pattern property that can be either</p>
<ul>
<li>InOnly—A one-way message (also known as an Event message). For example, JMS messaging is often one-way messaging.</li>
<li>InOut—A request-response message. For example, HTTP-based transports are often request reply, where a client requests to retrieve a web page, waiting for the reply from the server.</li>
</ul>
<h1 id="Start-Camel-application"><a href="#Start-Camel-application" class="headerlink" title="Start Camel application"></a>Start Camel application</h1><p>Camel doesn’t start magically by itself. Often it’s the server (container) that Camel is running inside that invokes the start method on CamelContext, starting up Camel. This is also what you saw in chapter 1, where you used Camel inside a standalone Java application. A standalone Java application isn’t the only deployment choice—you can also run Camel inside a container such as Spring or OSGi.<br>Regardless of which container you use, the same principle applies. The container must prepare and create an instance of CamelContext up front, before Camel can be started.</p>
<h2 id="Spring-container"><a href="#Spring-container" class="headerlink" title="Spring container"></a>Spring container</h2><p>Camel provides the CamelNamespaceHandler.<br>When using Camel in the Spring XML file, you would define the <camelcontext> tag as follows:<br><camelcontext xmlns="http://camel.apache.org/schema/spring"></camelcontext></camelcontext></p>
<p>The <a href="http://camel.apache.org/schema/spring" target="_blank" rel="noopener">http://camel.apache.org/schema/spring</a> namespace is the Camel custom namespace. To let Spring know about this custom namespace, it must be identified in the META-INF/spring.handlers, where you map the namespace to the class implementation:<br>http://camel.apache.org/schema/spring=<br>     org.apache.camel.spring.handler.CamelNamespaceHandler</p>
<p>The CamelNamespaceHandler is then responsible for parsing the XML and dele- gating to other factories for further pro- cessing. One of these factories is the Camel- ContextFactoryBean, which is responsible for creating the CamelContext that essen- tially is your Camel application.<br>When Spring is finished initializing, it signals to third-party frameworks that they can start by broadcasting the Context- RefreshedEvent event.</p>
<h1 id="Startup"><a href="#Startup" class="headerlink" title="Startup"></a>Startup</h1><p>At this point, CamelContext is ready to be started. What happens next is the same regardless of which container or deploy- ment option you’re using with Camel. </p>
<p>CamelContext is started by invoking its start method. The first step is to determines whether or not autostartup is enabled for Camel. If it’s disabled, the entire startup process is skipped. By default, Camel is set to autostart, which involves the following four steps.</p>
<p>1 Start internal services—Prepares and starts internal services used by Camel, such as the type-converter mechanism.<br>2 Compute starting order—Computes the order in which the routes should be started. By default, Camel will start up all the routes in the order they are defined in the Spring XML files or the RouteBuilder classes. We’ll cover how to configure the order of routes in section 13.1.3.<br>3 Prepare routes—Prepares the routes before they’re started.<br>4 Start routes—Starts the routes by starting the consumers, which essentially opens<br>the gates to Camel and lets the messages start to flow in.</p>
<p>After step 4, Camel writes a message to the log indicating that it has been started and that the startup process is complete.</p>
<h1 id="Concept"><a href="#Concept" class="headerlink" title="Concept"></a>Concept</h1><h2 id="ENDPOINT"><a href="#ENDPOINT" class="headerlink" title="ENDPOINT"></a>ENDPOINT</h2><p>An endpoint is the Camel abstraction that models the end of a channel through which a system can send or receive messages.</p>
<p>In Camel, you configure endpoints using URIs, such as </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">file:data/inbox?delay=5000</span><br></pre></td></tr></table></figure>

<p> and you also refer to endpoints this way. At runtime, Camel will look up an endpoint based on the URI notation. </p>
<p>The scheme  denotes which Camel component handles that type of endpoint. In this case,<br>the scheme of file selects the FileComponent.<br>The FileComponent then works as a factory creat-<br>ing the FileEndpoint based on the remaining parts of the URI.<br>The context path data/ inbox tells the FileComponent that the starting folder is data/inbox.<br>The option, delay=5000 indicates that files should be polled at a 5 second interval.</p>
<p>There’s more to an endpoint than meets the eye. </p>
<h2 id="JMS"><a href="#JMS" class="headerlink" title="JMS"></a>JMS</h2><p>Queues are strictly point-to-point, where each message has only one consumer. Topics operate on a publish/subscribe scheme; a single message may be delivered to many consumers if they have subscribed to the topic.</p>
<p>JMS also provides a ConnectionFactory that clients (like Camel) can use to cre- ate a connection with a JMS provider. JMS providers are usually referred to as brokers because they manage the communication between a message producer and a mes- sage consumer.</p>
<h3 id="HOW-TO-CONFIGURE-CAMEL-TO-USE-A-JMS-PROVIDER"><a href="#HOW-TO-CONFIGURE-CAMEL-TO-USE-A-JMS-PROVIDER" class="headerlink" title="HOW TO CONFIGURE CAMEL TO USE A JMS PROVIDER"></a>HOW TO CONFIGURE CAMEL TO USE A JMS PROVIDER</h3><p>To connect Camel to a specific JMS provider, you need to configure Camel’s JMS com- ponent with an appropriate ConnectionFactory.<br>Apache ActiveMQ is one of the most popular open source JMS providers, and it’s the primary JMS broker that the Camel team uses to test the JMS component. </p>
<h3 id="JSM-destinations"><a href="#JSM-destinations" class="headerlink" title="JSM destinations"></a>JSM destinations</h3><p>There are two types of JMS destinations: queues and topics. The queue is a point-to-point channel, where each message has only one recipient. A topic delivers a copy of the message to all clients who have subscribed to receive it.</p>
<h3 id="ActiveMQ"><a href="#ActiveMQ" class="headerlink" title="ActiveMQ"></a>ActiveMQ</h3><p>o in the case of Apache ActiveMQ, you can create an ActiveMQConnectionFactory<br>that points to the location of the running ActiveMQ broker:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ConnectionFactory connectionFactory =</span><br><span class="line">  <span class="keyword">new</span> ActiveMQConnectionFactory(<span class="string">"vm://localhost"</span>);</span><br></pre></td></tr></table></figure>

<p>The vm://localhost URI means that you should connect to an embedded broker named “localhost” running inside the current JVM. The vm transport connector in ActiveMQ creates a broker on demand if one isn’t running already, so it’s very handy for quickly testing JMS applications; for production scenarios, it’s recommended that you connect to a broker that’s already running. </p>
<p>Next, when you create your CamelContext, you can add the JMS component as follows:<br>CamelContext context = new DefaultCamelContext();<br>context.addComponent(“jms”,<br>    JmsComponent.jmsComponentAutoAcknowledge(connectionFactory));<br>The JMS component and the ActiveMQ-specific connection factory aren’t part of the camel-core module. In order to use these, you’ll need to add some dependencies to your Maven-based project. For the plain JMS component, all you have to add is this:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.camel<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>camel-jms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">The connection factory comes directly from ActiveMQ, so you’ll need the following dependency:</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.activemq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="USING-URIS-TO-SPECIFY-THE-DESTINATION"><a href="#USING-URIS-TO-SPECIFY-THE-DESTINATION" class="headerlink" title="USING URIS TO SPECIFY THE DESTINATION"></a>USING URIS TO SPECIFY THE DESTINATION</h3><p>Once the JMS component is configured, you can start sending and receiving JMS mes- sages at your leisure. Because you’re using URIs, this is a real breeze to configure.<br>Let’s say you want to send a JMS message to the queue named incomingOrders. The URI in this case would be</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jms:queue:incomingOrders</span><br></pre></td></tr></table></figure>

<p>This is pretty self-explanatory. The “jms” prefix indicates that you’re using the JMS component you configured before. By specifying “queue”, the JMS component knows to send to a queue named incomingOrders. You could even have omitted the queue<br>qualifier, because the default behavior is to send to a queue rather than a topic.</p>
<p>NOTE Some endpoints can have an intimidating list of endpoint URI proper- ties. For instance, the JMS component has about 60 options, many of which are only used in specific JMS scenarios. Camel always tries to provide built-in defaults that fit most cases, and you can always find out what the default values are by browsing to the component’s page in the online Camel documentation. </p>
<p>Using Camel’s Java DSL, you can send a message to the incomingOrders queue by using the to keyword like this:<br>…to(“jms:queue:incomingOrders”)<br>This can be read as sending to the JMS queue named incomingOrders.</p>
<h2 id="FINDING-ROUTE-BUILDERS"><a href="#FINDING-ROUTE-BUILDERS" class="headerlink" title="FINDING ROUTE BUILDERS"></a>FINDING ROUTE BUILDERS</h2><p>Using the Spring CamelContext as a runtime and the Java DSL for route development is a great way of using Camel. In fact, it’s the most frequent usage of Camel.<br>You saw before that you can explicitly tell the Spring CamelContext what route builders to load. You can do this by using the routerBuilder element:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">camelContext</span> <span class="attr">xmlns</span>=<span class="string">"http://camel.apache.org/schema/spring"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">routeBuilder</span> <span class="attr">ref</span>=<span class="string">"ftpToJmsRoute"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">camelContext</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Being this explicit results in a clean and concise definition of what is being loaded into Camel.<br>Sometimes, though, you may need to be a bit more dynamic. This is where the packageScan and contextScan elements come in:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">camelContext</span> <span class="attr">xmlns</span>=<span class="string">"http://camel.apache.org/schema/spring"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packageScan</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span>&gt;</span>camelinaction.routes<span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">packageScan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">camelContext</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>This packageScan element will load all RouteBuilder classes found in the camelinac- tion.routes package, including all subpackages.<br>You can even be a bit more picky about what route builders are included:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">camelContext</span> <span class="attr">xmlns</span>=<span class="string">"http://camel.apache.org/schema/spring"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packageScan</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span>&gt;</span>camelinaction.routes<span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">excludes</span>&gt;</span>**.*Test*<span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">includes</span>&gt;</span>**.*<span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">packageScan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">camelContext</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>In this case, you’re loading all route builders in the camelinaction.routes package, except for ones with “Test” in the class name. The matching syntax is similar to what is used in Apache Ant’s file pattern matchers.</p>
]]></content>
      <tags>
        <tag>Apache</tag>
        <tag>Camel</tag>
      </tags>
  </entry>
  <entry>
    <title>Scala</title>
    <url>/2018-07-28-Scala/</url>
    <content><![CDATA[<h1 id="Scala-String"><a href="#Scala-String" class="headerlink" title="Scala String"></a>Scala String</h1><p>Scala offers the magic of implicit conver‐ sions, String instances also have access to all the methods of the StringOps class, so you can do many other things with them, such as treating a String instance as a sequence of characters. As a result, you can iterate over every character in the string using the foreach method:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="string">"hello"</span>.foreach(println) h</span><br><span class="line">e</span><br><span class="line">l</span><br><span class="line">l o</span><br><span class="line"><span class="comment">//You can treat a String as a sequence of characters in a for loop:</span></span><br><span class="line">scala&gt; <span class="keyword">for</span> (c &lt;- <span class="string">"hello"</span>) println(c)</span><br><span class="line"></span><br><span class="line">scala&gt; val result = <span class="string">"hello world"</span>.filter(_ != <span class="string">'l'</span>) result: String = heo word</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>akka framework of scala</title>
    <url>/2018-07-23-akka-scala/</url>
    <content><![CDATA[<h1 id="philosophy"><a href="#philosophy" class="headerlink" title="philosophy"></a>philosophy</h1><p>The actor model adopts the philosophy that everything is an actor. This is similar to the everything is an object philosophy used by some object-oriented programming languages.</p>
<p>Decoupling the sender from communications sent was a fundamental advance of the Actor model enabling asynchronous communication and control structures as patterns of passing messages.</p>
<p>Recipients of messages are identified by address, sometimes called “mailing address”. Thus an actor can only communicate with actors whose addresses it has.</p>
<h1 id="Route"><a href="#Route" class="headerlink" title="Route"></a>Route</h1><p>Routes effectively are simply highly specialised functions that take a RequestContext and eventually complete it, which could (and often should) happen asynchronously.</p>
<p>Directives create Routes.</p>
<p>The Route is the central concept of Akka HTTP’s Routing DSL. All the structures you build with the DSL, no matter whether they consists of a single line or span several hundred lines, are type turning a RequestContext into a Future[RouteResult].</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Route</span> </span>= <span class="type">RequestContext</span> =&gt; <span class="type">Future</span>[<span class="type">RouteResult</span>]</span><br></pre></td></tr></table></figure>

<p>Generally when a route receives a request (or rather a RequestContext for it) it can do one of these things:</p>
<ul>
<li>Complete the request by returning the value of requestContext.complete(…)</li>
<li>Reject the request by returning the value of requestContext.reject(…) (see Rejections)</li>
<li>Fail the request by returning the value of requestContext.fail(…) or by just throwing an exception (see Exception Handling)</li>
<li>Do any kind of asynchronous processing and instantly return a Future[RouteResult] to be eventually completed later</li>
</ul>
<h2 id="The-Routing-Tree"><a href="#The-Routing-Tree" class="headerlink" title="The Routing Tree"></a>The Routing Tree</h2><p>Essentially, when you combine directives and custom routes via nesting and the ~ operator, you build a routing structure that forms a tree. When a request comes in it is injected into this tree at the root and flows down through all the branches in a depth-first manner until either some node completes it or it is fully rejected.</p>
<p>In RouteDirective.scala</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Completes the request using the given arguments.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @group route</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">complete</span></span>(m: ? <span class="type">ToResponseMarshallable</span>): <span class="type">StandardRoute</span> =</span><br><span class="line">    <span class="type">StandardRoute</span>(_.complete(m))</span><br></pre></td></tr></table></figure>

<h2 id="RouteResult"><a href="#RouteResult" class="headerlink" title="RouteResult"></a>RouteResult</h2><p>RouteResult is a simple abstract data type (ADT) that models the possible non-error results of a Route. It is defined as such:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sealed</span> <span class="class"><span class="keyword">trait</span> <span class="title">RouteResult</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">object</span> <span class="title">RouteResult</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Complete</span>(<span class="params">response: <span class="type">HttpResponse</span></span>) <span class="keyword">extends</span> <span class="title">RouteResult</span></span></span><br><span class="line"><span class="class">  <span class="title">final</span> <span class="title">case</span> <span class="title">class</span> <span class="title">Rejected</span>(<span class="params">rejections: immutable.<span class="type">Seq</span>[<span class="type">Rejection</span>]</span>) <span class="keyword">extends</span> <span class="title">RouteResult</span></span></span><br><span class="line"><span class="class">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="Routing-DSL"><a href="#Routing-DSL" class="headerlink" title="Routing DSL"></a>Routing DSL</h2><p>In addition to the Core Server API Akka HTTP provides a very flexible ,Routing DSL, for elegantly defining RESTful web services.</p>
<p>Http().bindAndHandle(routes ~ abcRoute, host, port)</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a Route that chains two Routes. If the first Route rejects the request the second route is given a</span></span><br><span class="line"><span class="comment">     * chance to act upon the request.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">~</span></span>(other: <span class="type">Route</span>): <span class="type">Route</span> = &#123; ctx ?</span><br><span class="line">      <span class="keyword">import</span> ctx.executionContext</span><br><span class="line">      route(ctx).fast.flatMap &#123;</span><br><span class="line">        <span class="keyword">case</span> x: <span class="type">RouteResult</span>.<span class="type">Complete</span> ? <span class="type">FastFuture</span>.successful(x)</span><br><span class="line">        <span class="keyword">case</span> <span class="type">RouteResult</span>.<span class="type">Rejected</span>(outerRejections) ?</span><br><span class="line">          other(ctx).fast.map &#123;</span><br><span class="line">            <span class="keyword">case</span> x: <span class="type">RouteResult</span>.<span class="type">Complete</span>               ? x</span><br><span class="line">            <span class="keyword">case</span> <span class="type">RouteResult</span>.<span class="type">Rejected</span>(innerRejections) ? <span class="type">RouteResult</span>.<span class="type">Rejected</span>(outerRejections ++ innerRejections)</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="Path-matching"><a href="#Path-matching" class="headerlink" title="Path matching"></a>Path matching</h3><blockquote>
<p>Note<br>The path matching DSL describes what paths to accept after URL decoding. This is why the path-separating slashes have special status and cannot simply be specified as part of a string! The string ¡°foo/bar¡± would match the raw URI path ¡°foo%2Fbar¡±, which is most likely not what you want!</p>
</blockquote>
<h1 id="Sink"><a href="#Sink" class="headerlink" title="Sink"></a>Sink</h1><p>A Sink is a set of stream processing steps that has one open input. Can be used as a Subscriber</p>
<h1 id="supervision"><a href="#supervision" class="headerlink" title="supervision"></a>supervision</h1><h2 id="What-Supervision-Means"><a href="#What-Supervision-Means" class="headerlink" title="What Supervision Means"></a>What Supervision Means</h2><p>As described in Actor Systems supervision describes a dependency relationship between actors: the supervisor delegates tasks to subordinates and therefore must respond to their failures. When a subordinate detects a failure (i.e. throws an exception), it suspends itself and all its subordinates and sends a message to its supervisor, signaling failure. Depending on the nature of the work to be supervised and the nature of the failure, the supervisor has a choice of the following four options:</p>
<ul>
<li>Resume the subordinate, keeping its accumulated internal state</li>
<li>Restart the subordinate, clearing out its accumulated internal state</li>
<li>Stop the subordinate permanently</li>
<li>Escalate the failure, thereby failing itself</li>
</ul>
<h2 id="sealed-class"><a href="#sealed-class" class="headerlink" title="sealed class"></a>sealed class</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">object Supervision &#123;</span><br><span class="line">  sealed trait Directive</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>A sealed class may not be directly inherited, except if the inheriting template is defined in the same source file as the inherited class. However, subclasses of a sealed class can inherited anywhere.</p>
<h2 id="implicit"><a href="#implicit" class="headerlink" title="implicit"></a>implicit</h2><p>A method can have an implicit parameter list, marked by the implicit keyword at the start of the parameter list. If the parameters in that parameter list are not passed as usual, Scala will look if it can get an implicit value of the correct type, and if it can, pass it automatically.</p>
<p>The places Scala will look for these parameters fall into two categories:</p>
<p>Scala will first look for implicit definitions and implicit parameters that can be accessed directly (without a prefix) at the point the method with the implicit parameter block is called.<br>Then it looks for members marked implicit in all the companion objects associated with the implicit candidate type.</p>
<h2 id="KillSwitch"><a href="#KillSwitch" class="headerlink" title="KillSwitch"></a>KillSwitch</h2><p>A KillSwitch allows completion of Graphs from the outside by completing Graphs of FlowShape linked to the switch. Depending on whether the KillSwitch is a UniqueKillSwitch or a SharedKillSwitch one or multiple streams might be linked with the switch.</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">KillSwitch</span> </span>&#123;</span><br><span class="line"><span class="comment">//After calling KillSwitch.shutdown() the linked Graphs of FlowShape are completed normally.</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">shutdown</span></span>(): <span class="type">Unit</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">abort</span></span>(ex:<span class="type">Throwable</span>): <span class="type">Unit</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h2><p>A Source is a set of stream processing steps that has one open output. It can comprise any number of internal sources and transformations that are wired together, or it can be an atomic source, e.g. from a collection or a file. Materialization turns a Source into a Reactive Streams Publisher (at least conceptually).</p>
<h3 id="connect-to-Sink"><a href="#connect-to-Sink" class="headerlink" title="connect to Sink"></a>connect to Sink</h3><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Connect this [[akka.stream.scaladsl.Source]] to a [[akka.stream.scaladsl.Sink]],</span></span><br><span class="line"><span class="comment">   * concatenating the processing steps of both.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">to</span></span>[<span class="type">Mat2</span>](sink: <span class="type">Graph</span>[<span class="type">SinkShape</span>[<span class="type">Out</span>], <span class="type">Mat2</span>]): <span class="type">RunnableGraph</span>[<span class="type">Mat</span>] = toMat(sink)(<span class="type">Keep</span>.left)</span><br></pre></td></tr></table></figure>

<h1 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h1><p>trait Future[+T]<br> extends Awaitable[T]<br>A Future represents a value which may or may not <em>currently</em> be available, but will be available at some point, or an exception if that value could not be made available. Asynchronous computations that yield futures are created with the Future.apply call and are computed using a supplied ExecutionContext, which can be backed by a Thread pool.</p>
<p>   import ExecutionContext.Implicits.global<br>   val s = “Hello”<br>   val f: Future[String] = Future {<br>     s + “ future!”<br>   }<br>   f foreach {<br>     msg =&gt; println(msg)<br>   }</p>
<h2 id="Future-introduction"><a href="#Future-introduction" class="headerlink" title="Future introduction"></a>Future introduction</h2><p>Futures provide a way to reason about performing many operations in parallel¨C in an efficient and non-blocking way. A Future is a placeholder object for a value that may not yet exist. Generally, the value of the Future is supplied concurrently and can subsequently be used. Composing concurrent tasks in this way tends to result in faster, asynchronous, non-blocking parallel code.</p>
<p>By default, futures and promises are non-blocking, making use of callbacks instead of typical blocking operations. To simplify the use of callbacks both syntactically and conceptually, Scala provides combinators such as flatMap, foreach, and filter used to compose futures in a non-blocking way. Blocking is still possible - for cases where it is absolutely necessary, futures can be blocked on (although this is discouraged).</p>
<h1 id="Scala-scope-protection"><a href="#Scala-scope-protection" class="headerlink" title="Scala scope protection:"></a>Scala scope protection:</h1><p>private[C] means that access is private “up to” C, where C is the corresponding package, class or singleton object.</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span>[http] <span class="function"><span class="keyword">def</span> <span class="title">build</span> </span>= &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The modi?er can be quali?ed with an identi?er C (e.g. private[C]) that must denote a class or package enclosing the de?nition. Members labeled with such a modi?er are accessible respectively only from code inside the package C or only from code inside the class C and its companion module (¡ì5.4). Such members are also inherited only from templates inside C.</p>
<h1 id="Scala-flexible-import"><a href="#Scala-flexible-import" class="headerlink" title="Scala flexible import"></a>Scala flexible import</h1><p>you can import several classes the Scala way:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.&#123;<span class="type">File</span>, <span class="type">IOException</span>, <span class="type">FileNotFoundException</span>&#125;</span><br></pre></td></tr></table></figure>

<p>Use the following syntax to import everything from the java.io package:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io._</span><br></pre></td></tr></table></figure>

<p>The _ character in this example is similar to the * wildcard character in Java.</p>
<p>If the _ character feels unusual at first, it helps to know that it¡¯s used consistently throughout the Scala language as a wildcard character, and that consistency is very nice.</p>
<h2 id="Directives"><a href="#Directives" class="headerlink" title="Directives"></a>Directives</h2><p>A ¡°Directive¡± is a small building block used for creating arbitrarily complex route structures. Akka HTTP already pre-defines a large number of directives and you can easily construct your own:</p>
<h1 id="Regular-Expression"><a href="#Regular-Expression" class="headerlink" title="Regular Expression"></a>Regular Expression</h1><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> pattern = <span class="string">"Scala"</span>.r</span><br><span class="line">      <span class="keyword">val</span> str = <span class="string">"Scala is Scalable and cool"</span></span><br><span class="line">      </span><br><span class="line">      println(pattern findFirstIn str)</span><br></pre></td></tr></table></figure>

<p>We create a String and call the r( ) method on it. Scala implicitly converts the String to a RichString and invokes that method to get an instance of Regex. To find a first match of the regular expression, simply call the findFirstIn() method. If instead of finding only the first occurrence we would like to find all occurrences of the matching word, we can use the findAllIn( ) method and in case there are multiple Scala words available in the target string, this will return a collection of all matching words.</p>
<h2 id="PathMatcher"><a href="#PathMatcher" class="headerlink" title="PathMatcher"></a>PathMatcher</h2><ul>
<li>Segment: PathMatcher1[String]<br>Matches if the unmatched path starts with a path segment (i.e. not a slash). If so the path segment is extracted as a String instance.</li>
</ul>
<h1 id="Option"><a href="#Option" class="headerlink" title="Option"></a>Option</h1><p>In short, if you have a value of type A that may be absent, Scala uses an instance of Option[A] as its container. An Intance of Option is either an instance of case class Some when it is present or case object None when it is not. Since both Some and None are children of Option, your function signature should declare that the returned value is an Option of some type, e.g. Option[A]</p>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a>Sample</h2><p>It is very easy to create an Option in Scala, i.e. you can use a present/absent value directly.</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> optionalInt: <span class="type">Option</span>[<span class="type">Int</span>] = <span class="type">Some</span>(<span class="number">1</span>)</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="comment">// val optionalInt: Option[Int] = None</span></span><br></pre></td></tr></table></figure>

<h3 id="To-validate-user-login"><a href="#To-validate-user-login" class="headerlink" title="To validate user login"></a>To validate user login</h3><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span></span>(user:<span class="type">String</span>, pwd:<span class="type">String</span>): <span class="type">AuthResult</span> =</span><br><span class="line">	(user, pwd) <span class="keyword">match</span> &#123;</span><br><span class="line">	<span class="keyword">case</span> (u, _) <span class="keyword">if</span> <span class="type">Option</span>(u).exists(_.trim.isEmpty) =&gt; <span class="type">ErrorLogin</span></span><br><span class="line">	<span class="keyword">case</span> (_, p) <span class="keyword">if</span> <span class="type">Option</span>(p).exists(_.trim.isEmpty) =&gt; <span class="type">ErrorPwd</span></span><br><span class="line">	<span class="keyword">case</span> (u, p) =&gt; doAuth(u,p)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="isDefined"><a href="#isDefined" class="headerlink" title="isDefined"></a>isDefined</h2><p>you add a checker for the None value using the isDefined method and specify logic to handle each scenario accordingly.</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addTwoWithDefault</span></span>(a: <span class="type">Option</span>[<span class="type">Int</span>]): <span class="type">Int</span> = &#123;</span><br><span class="line">  <span class="keyword">if</span>(a.isDefined) a.get + <span class="number">2</span> <span class="keyword">else</span> <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="getOrElse"><a href="#getOrElse" class="headerlink" title="getOrElse"></a>getOrElse</h2><p>In many cases, you have a fallback or default value for your absent values, e.g. zero in the above example. With Option, you can easily provide a default value via the getOrElse method.</p>
<p>def addTwoWithDefault(a: Option[Int]): Int = a.getOrElse(0) + 2</p>
<h2 id="flatten"><a href="#flatten" class="headerlink" title="flatten"></a>flatten</h2><p>Assume that we have a List of Option[Int].</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> l: <span class="type">List</span>[<span class="type">Option</span>[<span class="type">Int</span>]] = <span class="type">List</span>(<span class="type">Some</span>(<span class="number">3</span>), <span class="type">Some</span>(<span class="number">1</span>), <span class="type">None</span>, <span class="type">Some</span>(<span class="number">5</span>), <span class="type">Some</span>(<span class="number">8</span>), <span class="type">None</span>)</span><br></pre></td></tr></table></figure>

<p>A common scenario is that we need to filter out the absent values and return a List of Int. A straightfoward approach is to combine filter with .isDefined.</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">l.filter(_.isDefined).map(_.get) </span><br><span class="line"><span class="comment">// res1: List[Int] = List(3, 1, 5, 8)</span></span><br></pre></td></tr></table></figure>

<p>However, Scala actually provides an elegent built-in function to achieve the same goal, which is often more preferred.</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">l.flatten</span><br><span class="line"><span class="comment">// res1: List[Int] = List(3, 1, 5, 8)</span></span><br></pre></td></tr></table></figure>

<h1 id="underscore"><a href="#underscore" class="headerlink" title="underscore"></a>underscore</h1><p>In Scala, pattern matching is somewhat similar to java switch statement. But it is more powerful.</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">matchTest</span></span>(x: <span class="type">Int</span>): <span class="type">String</span> = x <span class="keyword">match</span> &#123;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">1</span> =&gt; <span class="string">"one"</span></span><br><span class="line">   <span class="keyword">case</span> <span class="number">2</span> =&gt; <span class="string">"two"</span></span><br><span class="line">   <span class="keyword">case</span> _ =&gt; <span class="string">"anything other than one and two"</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>_ acts like a wildcard. It will match anything. Scala allows nested patterns, so we can nest the _ also.Lets see another example that uses _ in nested pattern.</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">expr <span class="keyword">match</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="type">List</span>(<span class="number">1</span>,_,_) =&gt; <span class="string">" a list with three element and the first element is 1"</span></span><br><span class="line">  <span class="keyword">case</span> <span class="type">List</span>(_*)  =&gt; <span class="string">" a list with zero or more elements "</span></span><br><span class="line">  <span class="keyword">case</span> <span class="type">Map</span>[_,_] =&gt; <span class="string">" matches a map with any key type and any value type "</span></span><br><span class="line">  <span class="keyword">case</span> _ =&gt;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h2 id="Anonymous-Functions"><a href="#Anonymous-Functions" class="headerlink" title="Anonymous Functions"></a>Anonymous Functions</h2><p>Scala represents anonymous functions with a elegant syntax. The _ acts as a placeholder for parameters in the anonymous function. The _ should be used only once, But we can use two or more underscores to refer different parameters.</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>).foreach(print(_))</span><br><span class="line"><span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>).foreach( a =&gt; print(a))</span><br><span class="line"><span class="comment">// Here the _ refers to the parameter. The first one is a short form of the second one. Lets look at another example which take two parameters.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> sum = <span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>).reduceLeft(_+_)</span><br><span class="line"><span class="keyword">val</span> sum = <span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>).reduceLeft((a, b) =&gt; a + b)</span><br></pre></td></tr></table></figure>

<h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><p>Scala is a functional language. So we can treat function as a normal variable. If you try to assign a function to a new variable, the function will be invoked and the result will be assigned to the variable. This confusion occurs due to the optional braces for method invocation. We should use _ after the function name to assign it to another variable.</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>).foreach(print(_))</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fun</span> </span>= &#123;</span><br><span class="line">    <span class="comment">// some code</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">val</span> funLike = fun _</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>).foreach(print(_))</span><br></pre></td></tr></table></figure>

<h1 id="Either-Left-Right"><a href="#Either-Left-Right" class="headerlink" title="Either, Left, Right"></a>Either, Left, Right</h1><p>Using Either, Left, and Right<br>Prior to Scala 2.10, an approach similar to Try was available with the Either, Left, and Right classes. With these classes, Either is analogous to Try, Right is similar to Success, and Left is similar to Failure.</p>
<p>The following method demonstrates how to implement the Either approach:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">divideXByY</span></span>(x: <span class="type">Int</span>, y: <span class="type">Int</span>): <span class="type">Either</span>[<span class="type">String</span>, <span class="type">Int</span>] = &#123;</span><br><span class="line">    <span class="keyword">if</span> (y == <span class="number">0</span>) <span class="type">Left</span>(<span class="string">"Dude, can't divide by 0"</span>)</span><br><span class="line">    <span class="keyword">else</span> <span class="type">Right</span>(x / y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>As shown, your method should be declared to return an Either, and the method body should return a Right on success and a Left on failure. The Right type is the type your method returns when it runs successfully (an Int in this case), and the Left type is typically a String, because that¡¯s how the error message is returned.</p>
<p>As with Option and Try, a method returning an Either can be called in a variety of ways, including getOrElse or a match expression:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> x = divideXByY(<span class="number">1</span>, <span class="number">1</span>).right.getOrElse(<span class="number">0</span>)   <span class="comment">// returns 1</span></span><br><span class="line"><span class="keyword">val</span> x = divideXByY(<span class="number">1</span>, <span class="number">0</span>).right.getOrElse(<span class="number">0</span>)   <span class="comment">// returns 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// prints "Answer: Dude, can't divide by 0"</span></span><br><span class="line">divideXByY(<span class="number">1</span>, <span class="number">0</span>) <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Left</span>(s) =&gt; println(<span class="string">"Answer: "</span> + s)</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Right</span>(i) =&gt; println(<span class="string">"Answer: "</span> + i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>You can also access the error message by testing the result with isLeft, and then accessing the left value, but this isn¡¯t really the Scala way:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> x = divideXByY(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">x: <span class="type">Either</span>[<span class="type">String</span>,<span class="type">Int</span>] = <span class="type">Left</span>(<span class="type">Dude</span>, can<span class="symbol">'t</span> divide by <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; x.isLeft</span><br><span class="line">res0: <span class="type">Boolean</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">scala&gt; x.left</span><br><span class="line">res1: scala.util.<span class="type">Either</span>.<span class="type">LeftProjection</span>[<span class="type">String</span>,<span class="type">Int</span>] =</span><br><span class="line">      <span class="type">LeftProjection</span>(<span class="type">Left</span>(<span class="type">Dude</span>, can<span class="symbol">'t</span> divide by <span class="number">0</span>))</span><br></pre></td></tr></table></figure>

<p>Although the Either classes offered a potential solution prior to Scala 2.10, I now use the Try classes in all of my code instead of Either.</p>
<h3 id="classOf"><a href="#classOf" class="headerlink" title="classOf"></a>classOf</h3><p>Retrieve the runtime representation of a class type. classOf[T] is equivalent to the class literal T.class in Java.</p>
<h2 id="Operators"><a href="#Operators" class="headerlink" title="Operators"></a>Operators</h2><p>// Keywords<br>&lt;-  // Used on for-comprehensions, to separate pattern from generator<br>=&gt;  // Used for function types, function literals and import renaming</p>
<h1 id="Akka-framework"><a href="#Akka-framework" class="headerlink" title="Akka framework"></a>Akka framework</h1><p>Akka is a toolkit and runtime for building highly concurrent, distributed, and fault-tolerant event-driven applications on the JVM. </p>
<p>Actors are the unit of execution in Akka. The Actor model is an abstraction that makes it easier to write correct concurrent, parallel and distributed systems.</p>
<p>This will get your feet wet, and hopefully inspire you to dive deeper into the wonderful sea of Akka!</p>
<p>The Akka team refers to their creation as a toolkit rather than a framework. Frameworks tend to be a mechanism for providing a discrete element of a stack (e.g. the ui, or the web services layer). Akka provides a set of tools to render any part of the stack, and to provide the interconnects between them. </p>
<p>He two ways (shared mutable state/message passing (Akka)) to solve the problem of selling tickets.</p>
<p>Actors do not share state, can only communicate through immutable messages and do not talk to each other directly but through actor references, similar to the addresses we talked about. This approach satisfies the three things we wanted to change. So why is this simpler than the shared mutable state approach?</p>
<ul>
<li>We don’t need to manage locks. We don’t have to think about how to protect the shared data. Inside an actor we’re safe.</li>
<li>We are more protected from deadlocks caused by out of order access by multiple threads, that cause the system to wait forever, or other problems like race conditions and thread starvation. Use of Akka precludes most of these problems, relieving us of the burden.</li>
<li>Performance tuning a shared mutable state solution is hard work and error prone and verification through tests is nearly impossible.</li>
</ul>
<h2 id="Benefits-of-using-the-Actor-Model"><a href="#Benefits-of-using-the-Actor-Model" class="headerlink" title="Benefits of using the Actor Model"></a>Benefits of using the Actor Model</h2><p>The following characteristics of Akka allow you to solve difficult concurrency and scalability challenges in an intuitive way:</p>
<ul>
<li>Event-driven model — Actors perform work in response to messages. Communication between Actors is asynchronous, allowing Actors to send messages and continue their own work without blocking to wait for a reply.</li>
<li>Strong isolation principles — Unlike regular objects in Java, an Actor does not have a public API in terms of methods that you can invoke. Instead, its public API is defined through messages that the actor handles. This prevents any sharing of state between Actors; the only way to observe another actor’s state is by sending it a message asking for it.</li>
<li>Location transparency — The system constructs Actors from a factory and returns references to the instances. Because location doesn’t matter, Actor instances can start, stop, move, and restart to scale up and down as well as recover from unexpected failures.</li>
<li>Lightweight — Each instance consumes only a few hundred bytes, which realistically allows millions of concurrent Actors to exist in a single application.</li>
</ul>
<h3 id="Message"><a href="#Message" class="headerlink" title="Message"></a>Message</h3><p>two special channels. The first is the Dead Letter channel, which contain message that couldn’t be delivered. This is sometimes also called a dead message queue. This channel can help when debugging, why some messages aren’t processed or to monitor where there are problems.</p>
<h3 id="EventStream"><a href="#EventStream" class="headerlink" title="EventStream"></a>EventStream</h3><p>the benefit of decoupling the receivers and the sender and the dynamic nature of the publish-subscribe channel, but because the EventStream is available for all actors is also a nice solution for messages which can be send from all over the system and needs to be collected at one or more Actors. A good example is logging. Logging can be done throughout the system and needs to be collected at one point and be written to a log file. Internally the ActorLogging is using the EventStream to collect the log lines from all over the system.</p>
<h3 id="Dead-Letter-Message"><a href="#Dead-Letter-Message" class="headerlink" title="Dead Letter Message"></a>Dead Letter Message</h3><p>Akka is using the EventStream to implement the dead letter queue. This way only the actors which are interested in the failed messages are receiving them. When a message is queued in a mailbox of an actor that Terminates or is send after the Termination, the message is send to the EventStream of the ActorSystem. The message is wrapped into a DeadLetter object. This Object contains the original message, the sender of the message and the intended receiver. This way the Dead letter queue is integrated in the EventStream. To get these dead letter messages you only need to subscribe your actor to the EventStream with the DeadLetter class as the Classifier.</p>
<p>Messages send to a Terminated Actor can’t be processed anymore and the ActorRef of this actor should not be used anymore. When there are messages send to a terminated Actor, these message will be send to the DeadLetter queue.</p>
<p>Another use of the DeadLetter queue is when the processing fails. This is a Actor specific decision. An actor can decide that a received message couldn’t be processed and that it doesn’t know what to do with it. In this situation the messages can be send to the dead letter queue. </p>
<h2 id="Design-recommendations"><a href="#Design-recommendations" class="headerlink" title="Design recommendations"></a>Design recommendations</h2><p>When defining Actors and their messages, keep these recommendations in mind:</p>
<ul>
<li>Since messages are the Actor’s public API, it is a good practice to define messages with good names and rich semantic and domain specific meaning, even if they just wrap your data type. This will make it easier to use, understand and debug actor-based systems.</li>
<li>Messages should be immutable, since they are shared between different threads.</li>
<li>It is a good practice to put an actor’s associated messages as static classes in the class of the Actor. This makes it easier to understand what type of messages the actor expects and handles.</li>
<li>It is also a common pattern to use a static props method in the class of the Actor that describes how to construct the Actor.</li>
</ul>
<h3 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h3><p>The static props method creates and returns a Props instance. Props is a configuration class to specify options for the creation of actors, think of it as an immutable and thus freely shareable recipe for creating an actor that can include associated deployment information. This example simply passes the parameters that the Actor requires when being constructed. We will see the props method in action later in this tutorial.</p>
<h2 id="configuration"><a href="#configuration" class="headerlink" title="configuration"></a>configuration</h2><p>When using the default, the library will try to find the configuration file. Since the library supports a number of different configuration formats, it looks for different files, in the following order:<br>application.properties<br>This file should contain the configuration properties in the java property file format.<br>application.json<br>This file should contain the configuration properties in the json style</p>
<p>application.conf<br>This file should contain the configuration properties in the HOCON format. This is a format based on json but easier to read..<br>It is possible to use all the different files at the same time. For the example below, in listing 7.2 we use the last file:<br>MyAppl {<br>    version = 10<br>    description = “My application”<br>    database {<br>        connect=”jdbc:mysql://localhost/mydata”<br>        user=”me”<br>        }<br>}
Nesting is done by simply grouping with {}s</p>
<h3 id="substitution"><a href="#substitution" class="headerlink" title="substitution"></a>substitution</h3><p> hostname=”localhost”<br>hostname=${?HOST_NAME}<br>MyAppl {<br>    version = 10<br>    description = “My<br>    application”<br>    database {<br>        connect=”jdbc:mysql://${hostname}/mydata”<br>user=”me” }<br>}</p>
<p>define the variable first, if system environment do exist, override it, otherwise use default<br>? means get a variable from system envrionment</p>
<h3 id="Default-fallback-properies"><a href="#Default-fallback-properies" class="headerlink" title="Default/fallback properies"></a>Default/fallback properies</h3><p>Default properties are configured in the file reference.conf and placed in the root of the jar file; the idea is that every library contains its own defaults. The configuration library will find all the reference.conf files and integrate these settings into the configuration fall-back structure. </p>
<h3 id="Order-of-properties"><a href="#Order-of-properties" class="headerlink" title="Order of properties"></a>Order of properties</h3><p>System properties-&gt;application.conf-&gt;applicaiton.json-&gt;application.properties-&gt;reference.conf</p>
<h2 id="The-power-of-location-transparency"><a href="#The-power-of-location-transparency" class="headerlink" title="The power of location transparency"></a>The power of location transparency</h2><p>In Akka you can’t create an instance of an Actor using the new keyword. Instead, you create Actor instances using a factory. The factory does not return an actor instance, but a reference, akka.actor.ActorRef, that points to the actor instance. This level of indirection adds a lot of power and flexibility in a distributed system.</p>
<p>In Akka location doesn’t matter. Location transparency means that the ActorRef can, while retaining the same semantics, represent an instance of the running actor in-process or on a remote machine. If needed, the runtime can optimize the system by changing an Actor’s location or the entire application topology while it is running. This enables the “let it crash” model of failure management in which the system can heal itself by crashing faulty Actors and restarting healthy ones.</p>
<h2 id="The-Akka-ActorSystem"><a href="#The-Akka-ActorSystem" class="headerlink" title="The Akka ActorSystem"></a>The Akka ActorSystem</h2><p>The akka.actor.ActorSystem factory is, to some extent, similar to Spring’s BeanFactory. It acts as a container for Actors and manages their life-cycles. The actorOf factory method creates Actors and takes two parameters, a configuration object called Props and a name.</p>
<h3 id="Asynchronous-communication"><a href="#Asynchronous-communication" class="headerlink" title="Asynchronous communication"></a>Asynchronous communication</h3><p>Actors are reactive and message driven. An Actor doesn’t do anything until it receives a message. Actors communicate using asynchronous messages. This ensures that the sender does not stick around waiting for their message to be processed by the recipient. Instead, the sender puts the message in the recipient’s mailbox and is free to do other work. The Actor’s mailbox is essentially a message queue with ordering semantics. The order of multiple messages sent from the same Actor is preserved, but can be interleaved with messages sent by another Actor.</p>
<p>You might be wondering what the Actor is doing when it is not processing messages, i.e. doing actual work? It is in a suspended state in which it does not consume any resources apart from memory. Again, showing the lightweight, efficient nature of Actors.</p>
<h3 id="Sending-messages-to-an-Actor"><a href="#Sending-messages-to-an-Actor" class="headerlink" title="Sending messages to an Actor"></a>Sending messages to an Actor</h3><p>To put a message into an Actor’s mailbox, use the tell method on the ActorRef. For example, the main class of Hello World sends messages to the Greeter Actor like this:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">howdyGreeter.tell(<span class="keyword">new</span> WhoToGreet(<span class="string">"Akka"</span>), ActorRef.noSender());</span><br><span class="line">howdyGreeter.tell(<span class="keyword">new</span> Greet(), ActorRef.noSender());</span><br></pre></td></tr></table></figure>

<p>The test class is using akka.test.javadsl.TestKit, which is a module for integration testing of actors and actor systems. This class only uses a fraction of the functionality provided by TestKit.</p>
<h2 id="Akka-under-the-hood"><a href="#Akka-under-the-hood" class="headerlink" title="Akka under the hood"></a>Akka under the hood</h2><p>So are there no concurrency primitives like locks used at all in Akka? Well, of course there are, it’s just that you don’t have to deal with them directly . Everything still eventually runs on threads and low level concurrency primitives. Akka uses the java.util.concurrent library to coordinate message processing and takes great care to minimize the number of locks used to an absolute bare minimum. It uses lock free and wait free algorithms where possible, for example compare-and-swap (CAS) techniques, which are beyond the scope of this book. And because nothing can be shared between actors, the shared locks that you would normally have between objects are not present at all. </p>
<p>There are other benefits that stem from the message passing approach that Akka uses, which we will discuss in the next sections. We have touched on them briefly already:</p>
<ol>
<li>Even in this first, simple example, the message passing approach is clearly more fault tolerant, averting catastrophic failure if one component (no matter how key) fails.</li>
<li>The shared mutable state is always in one place in the example (in one JVM if it is kept entirely in memory). If you need to scale beyond this constraint, you will have to (re)distribute the data somehow. Since the message passing style uses addresses, looking ahead, you can see that if local and remote addresses were interchangeable, scaling out would be possible without code changes of any kind.</li>
</ol>
<p>This scenario is one example of a fault tolerance strategy that Akka provides, which is called the Restart strategy. Other strategies that can be used are Resume, Stop and Escalate. </p>
<h2 id="Scale-up-and-Scale-out"><a href="#Scale-up-and-Scale-out" class="headerlink" title="Scale up and Scale out"></a>Scale up and Scale out</h2><p>In our Ticketing example, scaling up would mean getting more TicketingAgents running on our one server, scaling out would be bringing up TicketingAgents on a number of machines.</p>
<h2 id="Locking"><a href="#Locking" class="headerlink" title="Locking"></a>Locking</h2><p>locks result in contention, which will mean the number of threads doing work at any one time is often less than the total number, as some will have to wait on each other to finish. Sharing as little as possible means locking as little as possible, which is the goal of the message passing approach.</p>
<p>Every thread has a stack to store runtime data. The size of the stack differs per operating system, for instance on the linux x64 platform it is normally 256kB. The stack size is one of the factors that limits the number of threads that run at the same time on a server. Around 4096 threads can fit in 1GB of memory on the linux x64 platform.</p>
<h2 id="Dispatcher"><a href="#Dispatcher" class="headerlink" title="Dispatcher"></a>Dispatcher</h2><p>Actors run on an abstraction which is called a dispatcher. The dispatcher takes care of which threading model is used and processes the mailboxes.</p>
<p>Actors are lightweight because they run on top of dispatchers, the actors are not necessarily directly proportional to the number of threads. Akka Actors take a lot less space than threads, around 2.7 million actors can fit in 1GB of memory. A big difference compared to 4096 threads, which means that you can create different types of actors more freely than you would when using threads directly. There are different types of dispatchers to choose from which can be tuned to specific needs.</p>
<p>We identified that we had to make the following changes to get to a message passing style:</p>
<ol>
<li>No mutable shared data structure. </li>
<li>Immutable message passing.</li>
<li>Asynchronous message sending.</li>
</ol>
<p>Akka implements actors and which components compare to the concepts we’ve talked about so far: actors, addresses and mailboxes.</p>
<h2 id="Actor-Path"><a href="#Actor-Path" class="headerlink" title="Actor Path"></a>Actor Path</h2><p>So how do you get an actor reference to an actor in the hierarchy? This is where ActorPaths come in. You could compare the hierarchy of actors to a URL path structure. Every actor has a name. This name needs to be unique per level in the hierarchy, two sibling actors cannot have the same name (if you do not provide a name Akka generates one for you, but it is a good idea to name all your actors). All actor references can be located directly by an actor path, absolute or relative, and it has to follow the URI generic syntax. An actor path is built just like a URI, starting with a scheme followed by a scheme-specific part,</p>
<h2 id="Core-Actor-Operations"><a href="#Core-Actor-Operations" class="headerlink" title="Core Actor Operations"></a>Core Actor Operations</h2><p>Another way to look at an actor is to describe the operations that it supports. An Akka actor has four core operations :</p>
<ol>
<li>CREATE: An actor can create another actor. In Akka, actors are part of an actor system, which defines the root of the actor hierarchy and creates top-level actors. Every actor can create child actors. The topology of the actors is dynamic, it depends on which actors create other actors and which addresses are used to communicate with them.</li>
<li>SEND: An actor can send a message to another actor. Messages are sent asynchronously, using an address to send to an Actor associated with a given Mailbox.</li>
<li>BECOME: The behavior of an actor can be dynamically changed. Messages are received one at a time and an actor can designate that it wants to handle next messages in a different way, basically swapping its behavior, which we will look at in later chapters.</li>
<li>SUPERVISE: An actor supervises and monitors its children in the actor hierarchy and manages the failures that happen. As we will see in chapter 3, this provides a clean separation between message processing and error handling.</li>
</ol>
<h2 id="Akka-concurrency"><a href="#Akka-concurrency" class="headerlink" title="Akka concurrency"></a>Akka concurrency</h2><p>Message passing enables an easier road to real concurrency<br> With that concurrent approach, we will be able to scale up and out<br>We can scale both the request and the processing elements of our application<br>Messages also unlock greater fault tolerance capabilities<br>Supervision provides a means of modeling for both concurrency and fault tolerance<br>Akka infuses our code with these powers in a lightweight, unobtrusive manner</p>
<h3 id="Build-Akka"><a href="#Build-Akka" class="headerlink" title="Build Akka"></a>Build Akka</h3><p>using TypeSafe’s Simple Build Tool (SBT) to create a single jar file that can be used to run the app</p>
<p>If you have not worked with the SBT DSL before it is important to note that you need to put en empty line between lines in the file (this is the price we pay for not telling Scala where each expression ends).</p>
<h3 id="tell-vs-ask"><a href="#tell-vs-ask" class="headerlink" title="tell vs ask"></a>tell vs ask</h3><p>Messages are sent to an Actor through one of the following methods.</p>
<p>! means “fire-and-forget”, e.g. send a message asynchronously and return immediately. Also known as tell.</p>
<p>? sends a message asynchronously and returns a Future representing a possible reply. Also known as ask.</p>
<p>So below line is equivalent to tell</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReceiveActor</span> <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">receive</span> </span>= &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"Hello"</span> =&gt; sender ! <span class="string">"And Hello to you!"</span> <span class="comment">// same as sender.tell("And Hello to you!")</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Sample-of-actor"><a href="#Sample-of-actor" class="headerlink" title="Sample of actor"></a>Sample of actor</h4><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.goticks</span><br><span class="line"><span class="keyword">import</span> akka.actor.&#123;<span class="type">PoisonPill</span>, <span class="type">Actor</span>&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TicketSeller</span> <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">  <span class="keyword">import</span> <span class="type">TicketProtocol</span>._</span><br><span class="line">  <span class="keyword">var</span> tickets = <span class="type">Vector</span>[<span class="type">Ticket</span>]()</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">receive</span> </span>= &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">GetEvents</span> =&gt; sender ! tickets.size</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Tickets</span>(newTickets) =&gt;</span><br><span class="line">      tickets = tickets ++ newTickets</span><br><span class="line">    <span class="keyword">case</span> <span class="type">BuyTicket</span> =&gt;</span><br><span class="line">      <span class="keyword">if</span> (tickets.isEmpty) &#123;</span><br><span class="line">        sender ! <span class="type">SoldOut</span></span><br><span class="line">        self ! <span class="type">PoisonPill</span></span><br><span class="line">&#125;</span><br><span class="line">      tickets.headOption.foreach &#123; ticket =&gt;</span><br><span class="line">        tickets = tickets.tail</span><br><span class="line">        sender ! ticket</span><br><span class="line">&#125; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="type">Event</span>(name, nrOfTickets) =&gt;</span><br><span class="line">  <span class="keyword">if</span>(context.child(name).isEmpty) &#123;</span><br><span class="line"><span class="type">If</span> <span class="type">TicketSellers</span> have not been</span><br><span class="line">   <span class="keyword">val</span> ticketSeller = context.actorOf(<span class="type">Props</span>[<span class="type">TicketSeller</span>], name)</span><br><span class="line">  <span class="keyword">val</span> tickets = <span class="type">Tickets</span>((<span class="number">1</span> to nrOfTickets).map&#123;</span><br><span class="line">    nr=&gt; <span class="type">Ticket</span>(name, nr)).toList</span><br><span class="line">&#125;</span><br><span class="line">  ticketSeller ! tickets</span><br><span class="line">&#125;</span><br><span class="line">sender ! <span class="type">EventCreated</span></span><br></pre></td></tr></table></figure>

<p>The BoxOffice creates TicketSellers for each event. Notice that it uses it’s context instead of the actor system to create the actor; Actors created with the context of another Actor are its children and subject to the parent Actor’s supervision</p>
<h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><p>Right now it always fails since it is not implemented yet, as is expected in Red-Green-Refactor style, where you first make sure the test fails (Red), then implement the code to make it pass (Green), after which you might refactor the code to make it nicer.</p>
<h2 id="source-code"><a href="#source-code" class="headerlink" title="source code"></a>source code</h2><h3 id="UntypedActor"><a href="#UntypedActor" class="headerlink" title="UntypedActor"></a>UntypedActor</h3><p>This class is the Java cousin to the akka.actor.Actor Scala interface. Subclass this abstract class to create a MDB-style untyped actor.</p>
<p>An actor has a well-defined (non-cyclic) life-cycle.</p>
<pre><code>RUNNING (created and started actor) - can receive messages
SHUTDOWN (when &apos;stop&apos; or &apos;exit&apos; is invoked) - can&apos;t do anything</code></pre><p>The Actor’s own akka.actor.ActorRef is available as getSelf(), the current message’s sender as getSender() and the akka.actor.UntypedActorContext as getContext(). The only abstract method is onReceive() which is invoked for each processed message unless dynamically overridden using getContext().become().</p>
<p>Annotations<br>    @Deprecated @deprecated<br>Deprecated</p>
<pre><code>(Since version 2.5.0) Use AbstractActor instead of UntypedActor.</code></pre><h3 id="loggingAdaptor"><a href="#loggingAdaptor" class="headerlink" title="loggingAdaptor"></a>loggingAdaptor</h3><p>trait LoggingAdapter extends AnyRef</p>
<p>Logging wrapper to make nicer and optimize: provide template versions which evaluate .toString only if the log level is actually enabled. Typically used by obtaining an implementation from the Logging object:</p>
]]></content>
  </entry>
  <entry>
    <title>Presto DB</title>
    <url>/2018-08-15-PrestoDB/</url>
    <content><![CDATA[<h1 id="WHAT-IS-PRESTO"><a href="#WHAT-IS-PRESTO" class="headerlink" title="WHAT IS PRESTO?"></a>WHAT IS PRESTO?</h1><p>Presto is an open source distributed SQL query engine for running interactive analytic queries against data sources of all sizes ranging from gigabytes to petabytes.</p>
<p>Presto was designed and written from the ground up for interactive analytics and approaches the speed of commercial data warehouses while scaling to the size of organizations like Facebook.</p>
<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Presto is a distributed system that runs on a cluster of machines. A full installation includes a coordinator and multiple workers. Queries are submitted from a client such as the Presto CLI to the coordinator. The coordinator parses, analyzes and plans the query execution, then distributes the processing to the workers.</p>
<p>Presto does not use MapReduce and thus only requires HDFS.</p>
<h2 id="Separation-of-Storage-and-Compute"><a href="#Separation-of-Storage-and-Compute" class="headerlink" title="Separation of Storage and Compute"></a>Separation of Storage and Compute</h2><p>Architected for separation of storage and compute, Presto can scale up and down based on your analytics demand to access this data. There’s no need to move your data and provisioning compute to the exact need results in significant cost savings.</p>
<h3 id="Config-Properties"><a href="#Config-Properties" class="headerlink" title="Config Properties"></a>Config Properties</h3><p>The config properties file, etc/config.properties, contains the configuration for the Presto server. Every Presto server can function as both a coordinator and a worker, but dedicating a single machine to only perform coordination work provides the best performance on larger clusters.</p>
<h3 id="Catalog-Properties"><a href="#Catalog-Properties" class="headerlink" title="Catalog Properties"></a>Catalog Properties</h3><p>Presto accesses data via connectors, which are mounted in catalogs. The connector provides all of the schemas and tables inside of the catalog. For example, the Hive connector maps each Hive database to a schema, so if the Hive connector is mounted as the hive catalog, and Hive contains a table clicks in database web, that table would be accessed in Presto as hive.web.clicks.</p>
<p>Catalogs are registered by creating a catalog properties file in the etc/catalog directory. For example, create etc/catalog/jmx.properties with the following contents to mount the jmx connector as the jmx catalog:</p>
]]></content>
  </entry>
  <entry>
    <title>Cucumber</title>
    <url>/2018-08-08-Cucumber/</url>
    <content><![CDATA[<h1 id="Acceptance-testing-vs-unit-test"><a href="#Acceptance-testing-vs-unit-test" class="headerlink" title="Acceptance testing vs unit test"></a>Acceptance testing vs unit test</h1><p>It’s sometimes said that unit tests ensure you build the thing right, whereas acceptance tests ensure you build the right thing.</p>
<h1 id="Cucumber"><a href="#Cucumber" class="headerlink" title="Cucumber."></a>Cucumber.</h1><p>The acceptance testing tool.</p>
<h1 id="Source-of-Truth"><a href="#Source-of-Truth" class="headerlink" title="Source of Truth"></a>Source of Truth</h1><p>For many teams, the Cucumber feature files become the definitive source of truth as to what the system does.</p>
<h1 id="Scenarios"><a href="#Scenarios" class="headerlink" title="Scenarios"></a>Scenarios</h1><p>Scenarios are written before production code. They start their life as an executable specification. As the production code emerges, Scenarios take on a role as living documentation and automated tests.</p>
<p>Each Cucumber test is called a scenario, and each scenario contains steps that tell Cucumber what to do. </p>
<h1 id="Gherkin"><a href="#Gherkin" class="headerlink" title="Gherkin"></a>Gherkin</h1><p>The keywords Feature, Scenario, Given, When, and Then are the structure, and everything else is documentation.<br>The structure is called Gherkin.</p>
<p>Cucumber features are all about communicating with business users in their language, and it’s important that we don’t force them to sound like robots.</p>
<h1 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h1><p>We start with features, which contain our scenarios and steps. The steps of our scenarios call step definitions that provide the link between the Gherkin fea- tures and the application being built.</p>
<p>This principle, deliberately doing the minimum useful work the tests will let us get away with, might seem lazy, but in fact it’s a discipline. It ensures that we make our tests thorough: if the test doesn’t drive us to write the right thing, then we need a better test.</p>
<h1 id="Step-Definitions"><a href="#Step-Definitions" class="headerlink" title="Step Definitions"></a>Step Definitions</h1><p>Step definitions are the glue that binds your Cucumber tests to the application you’re testing. </p>
<p>A scenario that’s been executed can end up in any of the following states:</p>
<ul>
<li>Failed</li>
<li>Pending</li>
<li>Undefined </li>
<li>Skipped</li>
<li>Passed<br>These states are designed to help indicate the progress that you make as you develop your tests.</li>
</ul>
<h3 id="Pending-Steps"><a href="#Pending-Steps" class="headerlink" title="Pending Steps"></a>Pending Steps</h3><p>When Cucumber discovers a step definition that’s halfway through being implemented, it marks the step as pending (yellow). Again, the scenario will be stopped, and the rest of the steps will be skipped or marked as undefined.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Steps</span> </span>&#123;</span><br><span class="line"><span class="meta">@Given</span>(<span class="string">"^I have deposited \\$(\\d+) in my account$"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> iHaveDeposited$InMyAccount(<span class="keyword">int</span> amount) <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="comment">// Write code here that turns the phrase above into concrete actions</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> PendingException(); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Step-definition-recap"><a href="#Step-definition-recap" class="headerlink" title="Step definition recap"></a>Step definition recap</h2><p>The pending status is a bit like those under construction signs you used to see all over the Internet in the 1990s. You can use it as a temporary signpost to your teammates that you’re in the middle of working on something.</p>
<p>Because regular expressions can contain wildcards, this means you have the flexibility to make the Gherkin steps nice and readable, while keeping your Java step definition code clean and free of duplication.<br>• Step definitions provide a mapping from the Gherkin scenarios’ plain- language descriptions of user actions into Java code, which simulates those actions.<br>• Step definitions are registered with Cucumber by using @Given, @When, @Then, or one of the aliases for your spoken language.<br>• Step definitions use regular expressions to declare the steps that they can handle. Because regular expressions can contain wildcards, one step definition can handle several different steps.<br>• A step definition communicates its result to Cucumber by raising, or not raising, an exception.</p>
<h1 id="recap"><a href="#recap" class="headerlink" title="recap"></a>recap</h1><ul>
<li>Readability should be your number-one goal when writing Gherkin fea- tures. Always try to sit together with a stakeholder when you write your scenarios, or at the very least pass them over for feedback once you’ve written them. Keep fine-tuning the language in your scenarios to make them more readable.</li>
<li>Use a Background to factor out repeated steps from a feature and to help tell a story.</li>
<li>Repetitive scenarios can be collapsed into a Scenario Outline.</li>
<li>Steps can be extended with multiline strings or data tables.</li>
<li>You can organize features into subfolders, like chapters in a book.</li>
<li>Tags allow you to mark up scenarios and features so you select particular sets to run or report on.</li>
</ul>
<h1 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a>Sample</h1><h2 id="compile-and-run-via-CLI"><a href="#compile-and-run-via-CLI" class="headerlink" title="compile and run via CLI"></a>compile and run via CLI</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">javac -cp <span class="string">"jars/*"</span> step_definitions/CheckoutSteps.java</span><br><span class="line">java -cp <span class="string">"jars/*:."</span> cucumber.api.cli.Main -p pretty --snippets camelcase \</span><br><span class="line">                          -g step_definitions features</span><br></pre></td></tr></table></figure>

<p>Line 1 compiles the CheckoutSteps class that we’ve just created. Then line 2 invokes Cucumber. There are two slight additions to Cucumber’s invocation:</p>
<ol>
<li>We’ve added the current directory “.” to the classpath.</li>
<li>We’ve added the -g step_definitions command-line argument to tell Cucumber where to look for the step definitions that it will need to “glue” the steps in the feature file to the checkout application (which we haven’t written yet).</li>
</ol>
<h2 id="feature-file"><a href="#feature-file" class="headerlink" title="feature file"></a>feature file</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Feature: Is it Friday yet?</span><br><span class="line">  Everybody wants to know when it&apos;s Friday</span><br><span class="line"></span><br><span class="line">  Scenario: Sunday isn&apos;t Friday</span><br><span class="line">    Given today is Sunday</span><br><span class="line">    When I ask whether it&apos;s Friday yet</span><br><span class="line">    Then I should be told &quot;Nope&quot;</span><br></pre></td></tr></table></figure>

<p>The first line of this file starts with the keyword Feature: followed by a name. It’s a good idea to use a name similar to the file name.</p>
<p>The second line is a brief description of the feature. Cucumber does not execute this line, it’s just documentation.</p>
<p>The fourth line, Scenario: Sunday is not Friday is a Scenario, which is a concrete example illustrating how the software should behave.</p>
<p>The last three lines starting with Given, When and Then are the steps of our scenario. This is what Cucumber will execute.</p>
<p>Notice how we go from Scenario to Scenario Outline when we start using Examples.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Feature: Is it Friday yet?</span><br><span class="line">  Everybody wants to know when it&apos;s Friday</span><br><span class="line"></span><br><span class="line">  Scenario Outline: Today is or is not Friday</span><br><span class="line">    Given today is &lt;day&gt;</span><br><span class="line">    When I ask whether it&apos;s Friday yet</span><br><span class="line">    Then I should be told &lt;answer&gt;</span><br><span class="line"></span><br><span class="line">  Examples:</span><br><span class="line">    | day | answer |</span><br><span class="line">    | &quot;Friday&quot; | &quot;TGIF&quot; |</span><br><span class="line">    | &quot;Sunday&quot; | &quot;Nope&quot; |</span><br><span class="line">    | &quot;anything else!&quot; | &quot;Nope&quot; |</span><br></pre></td></tr></table></figure>

<p>Scenario Outline: Withdraw fixed amount<br>Given I have <balance> in my account<br>When I choose to withdraw the fixed amount of <withdrawal> Then I should receive <received> cash<br>And the balance of my account should be <remaining><br>Examples:<br>      | Balance | Withdrawal | Received | Remaining |<br>| $500<br>| $500<br>| $500<br>|$50 |$50 |$450 | | $100 | $100 | $400 | | $200 | $200 | $300 |<br>We indicate placeholders within the scenario outline using angle brackets (&lt;..&gt;) where we want real values to be substituted. The scenario outline itself is useless without an Examples table, which lists rows of values to be substituted for each placeholder.</remaining></received></withdrawal></balance></p>
<h2 id="Doc-Strings"><a href="#Doc-Strings" class="headerlink" title="Doc Strings"></a>Doc Strings</h2><p>Doc strings allow you to specify a larger piece of text than you could fit on a single line. For example, if you need to describe the precise content of an email message, you could do it like this:<br>Scenario: Ban Unscrupulous Users<br>When I behave unscrupulously<br>Then I should receive an email containing:<br>“””<br>    Dear Sir,<br>    Your account privileges have been revoked due to your unscrupulous behavior.<br>Sincerely,<br>The Management “””<br>And my account should be locked<br>Just like a data table, the entire string between the “”” triple quotes is attached to the step above it. The indentation of the opening “”” is not important, although common practice is to indent two spaces from the enclosing step, as we’ve shown. The indentation inside the triple quotes, however, is signifi- cant: imagine the left margin running down from the start of the first “””. If you want to include indentation within your string, you need to indent it within this margin.</p>
<h3 id="TGIF"><a href="#TGIF" class="headerlink" title="TGIF"></a>TGIF</h3><p>Thanks God It’s Friday</p>
<h2 id="Data-table"><a href="#Data-table" class="headerlink" title="Data table"></a>Data table</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Given these Users:</span><br><span class="line">| name | date of birth | </span><br><span class="line">| Michael Jackson | August 29, 1958 | </span><br><span class="line">| Elvis | January 8, 1935 | </span><br><span class="line">| John Lennon | October 9, 1940 |</span><br></pre></td></tr></table></figure>

<p>That’s much clearer. The table starts on the line immediately following the step, and its cells are separated using the pipe character: |. You can line up the pipes using whitespace to make the table look tidy, although Cucumber doesn’t mind whether you do; it will strip out the values in each cell, ignoring the surrounding whitespace.</p>
<p>public class BoardSteps {<br>@Given(“^a board like this:$”)<br>public void aBoardLikeThis(DataTable arg1) throws Throwable {<br>        // Write code here that turns the phrase above into concrete actions<br>        // For automatic transformation, change DataTable to one of<br>        // List<yourtype>, List&lt;List<e>&gt;, List&lt;Map&lt;K,V&gt;&gt; or Map&lt;K,V&gt;.<br>        // E,K,V must be a scalar (String, Integer, Date, enum etc)<br>throw new PendingException(); }</e></yourtype></p>
<h1 id="BDD"><a href="#BDD" class="headerlink" title="BDD"></a>BDD</h1><p>The two main practices in the BDD approach are discovery workshops, which bridge the communication gap between business and IT, and executable specifications.</p>
<h1 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h1><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Background</span>:</span><br><span class="line"><span class="keyword">Given</span> I have been issued a new card</span><br><span class="line"><span class="keyword">And</span> I insert the card, entering the correct PIN <span class="keyword">And</span> I choose <span class="string">"Change PIN"</span> from the menu</span><br><span class="line"><span class="keyword">Scenario</span>: Change PIN successfully</span><br><span class="line"><span class="keyword">When</span> I change the PIN to 9876</span><br><span class="line"><span class="keyword">Then</span> the system should remember my PIN is now 9876</span><br><span class="line"><span class="keyword">Scenario</span>: Try to change PIN to the same as before</span><br><span class="line"><span class="keyword">When</span> I try to change the PIN to the original PIN number <span class="keyword">Then</span> I should see a warning message</span><br><span class="line"><span class="keyword">And</span> the system should not have changed my PIN</span><br></pre></td></tr></table></figure>

<p>Our refactoring hasn’t changed the behavior of the tests at all: at runtime, the steps in the background are executed at the beginning of each scenario, just as they were before. What we have done is made each individual scenario much easier to read.</p>
<p>Using a Background element isn’t always necessary, but it’s often useful to improve the readability of your features by removing repetitive steps from individual scenarios. </p>
<h2 id="A-good-‘background’"><a href="#A-good-‘background’" class="headerlink" title="A good ‘background’"></a>A good ‘background’</h2><ul>
<li>Make your Background section vivid. Use colorful names and try to tell a story, because your readers can keep track of stories much better than they can keep track of dull names like User A, User B, Site 1, and so on. If it’s worth mentioning at all, make it really stand out.</li>
<li>Keep your scenarios short, and don’t have too many. If the Background is more than three or four steps long, think about using higher-level steps or splitting the feature file in two. You can use a background as a good indicator of when a feature is getting too long: if the new scenarios you want to add don’t fit with the existing background, consider splitting the feature.</li>
<li>Avoid putting technical details such as clearing queues, starting back- end services, or opening browsers in a background. </li>
</ul>
<p>Backgrounds are useful for taking Given (and sometimes When) steps that are repeated in each scenario and moving them to a single place. This helps keep your scenarios clear and concise.</p>
<h2 id="Discovery-Workshops"><a href="#Discovery-Workshops" class="headerlink" title="Discovery Workshops"></a>Discovery Workshops</h2><p>Discovery workshops (or Specification workshops) are short and frequent meetings where business and IT meet to gain a common understanding of how the software should behave.</p>
<h2 id="Relationship-with-TDD"><a href="#Relationship-with-TDD" class="headerlink" title="Relationship with TDD"></a>Relationship with TDD</h2><p>The main difference is that Cucumber operates on a higher abstraction level, closer to the domain and farther away from classes and methods. BDD builds on TDD, while preserving a strong link between the business requirements and the technical solution.</p>
<h2 id="Outside-in"><a href="#Outside-in" class="headerlink" title="Outside in"></a>Outside in</h2><p>This technique is called Outside-in because programmers typically start with the functionality that is closest to the user (the user interface, which is on the outside of the system) and gradually work towards the guts of the system (business logic, persistence, messaging and so on) as they discover more of what needs to be implemented.</p>
<blockquote>
<p>Your cucumber features should drive your implementation, not reflect it.</p>
</blockquote>
<p>This means Cucumber features should be written before the code implementing the feature.</p>
<p>Notice that we’re just sketching out the interface to the class, rather than adding any implementation to it. This way of working is fundamental to out- side-in development. We try not to think about how the Account is going to work yet but concentrate on what it should be able to do.</p>
<p>Keeping specifications, regression tests and documentation in a single place reduces the overhead of keeping multiple documents in sync - the Cucumber scenarios work as a shared source of truth for business and IT.</p>
<p>While many people focus on the value added by the automated “tests” you get out of BDD, the real value is actually the shared understanding we get at the beginning.</p>
<p>Cucumber is not a tool for testing software. It is a tool for testing people’s understanding of how software (yet to be written) should behave.</p>
<p>The biggest advantage of BDD approach for software development might be that they describe a set of functions that a user expects from a system in a very concrete and direct manner. The sum of these behaviors essentially document a contract with the user/client. If any of the tests fail, this contract is not upheld.</p>
<h1 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h1><p>the most important stage of BDD. Three amigos (business persons, developers, testers) get together and identify the expected behavior of our product by discussing examples. We can use feature mapping approach to effectively analyse and elaborate the product behavior.</p>
<p>always make sure that your scenarios are not tightly coupled with your tests. Your BDD scenarios should change only when the requirement changes, not when the the implementation changes (i.e. your BDD scenarios must drive the implementation, not the other way around).</p>
<h1 id="Executable-Specification"><a href="#Executable-Specification" class="headerlink" title="Executable Specification"></a>Executable Specification</h1><p>An Executable Specification is a Definition of Done that you can run as a test. In Behavior Driven Development (BDD), we refer to acceptance criteria as “executable specifications.” Executable Specifications are meant to be clear, unambiguous, written in business terms, and easy to automate. Each acceptance criteria is a concrete example of how a user interacts with the system to achieve some business goal.</p>
<p>The most well-known format for BDD acceptance criteria uses the “Given-When-Then” structure:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Given &lt;some precondition&gt;</span><br><span class="line">When &lt;something happens&gt;</span><br><span class="line">Then &lt;we expect some outcome&gt;</span><br></pre></td></tr></table></figure>

<p>This format is a great way to make sure that we are thinking in terms of the outcomes we want to achieve. After all, the outcomes of an application are where the value lies.</p>
<p>These scenarios are also easy to automate with BDD tools like Cucumber and Specflow.</p>
<h1 id="No-silver-bullet"><a href="#No-silver-bullet" class="headerlink" title="No silver bullet"></a>No silver bullet</h1><p>“The hardest single part of building a software system is deciding precisely what to build.”<br>We’ve all worked on projects where, because of a misunderstanding, code that we’d worked hard on for several days or more had to be thrown away. Better communication between developers and stakeholders is essential to help avoid this kind of wasted time. One technique that really helps facilitate this communication is the use of concrete examples to illustrate what we want the software to do.</p>
<h2 id="Concrete-Examples"><a href="#Concrete-Examples" class="headerlink" title="Concrete Examples"></a>Concrete Examples</h2><p>By using real-world examples to describe the desired behavior of the system we want to build, we stay grounded in language and terminology that makes sense to our stakeholders: we’re speaking their language. </p>
<p>To illustrate this, let’s imagine you’re building a credit card payment system. One of the requirements is to make sure users can’t enter bad data. Here’s one way of expressing that:<br><code>Customers should be prevented from entering invalid credit card details.</code><br>This is an example of what Agile teams often call acceptance criteria or condi- tions of satisfaction.1 We use the word acceptance because they tell us what the system must be able to do in order for our stakeholders to find it acceptable.</p>
<p>The previous requirements statement is useful, but it leaves far too much room for ambiguity and misunderstanding. It lacks precision. What exactly makes a set of details invalid? How exactly should the user be prevented from entering them? We’ve seen too many projects get dragged into the tar pit2 by these kind of worthy but vague statements. Let’s try illustrating this requirement with a concrete example:<br><code>If a customer enters a credit card number that isn’t exactly 16 digits long, when they try to submit the form, it should be redisplayed with an error message advising them of the correct number of digits.</code></p>
<p>Can you see how much more specific this second statement is? As a developer implementing this feature, we know almost everything we need to be able to sit down and start working on the code. As a stakeholder, we have a much clearer idea of what the developer is going to build.<br>In fact, a stakeholder reading this might point out that there are certain types of cards that are valid with fewer than 16 digits and give us another example. This is the real power of examples: they stimulate our imagination, enabling us to explore and discover edge cases we might otherwise not have found until much later.</p>
<p>By giving an example to illustrate our requirement, we’ve turned an acceptance criterion into an acceptance test. Now we have something unambiguous that we can use to test the behavior of the system, either manually or by using an automated test script.</p>
<h1 id="Gherkins"><a href="#Gherkins" class="headerlink" title="Gherkins"></a>Gherkins</h1><p>Gherkin use main keywords: Feature, Scenario, Given, When, Then, And, But, Background, Scenario Outline, Examplesand some extra syntax “”” (Doc strings), | (Data tables), @(Tags), # (Comments).</p>
<h2 id="dry-run"><a href="#dry-run" class="headerlink" title="dry run"></a>dry run</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ java -cp <span class="string">".:jars/*"</span> cucumber.api.cli.Main -g step_definitions --dry-run features</span><br></pre></td></tr></table></figure>

<p>The –dry-run switch tells Cucumber to parse the file without executing it. It<br>will tell you if your Gherkin isn’t valid.</p>
<h1 id="Replacing-Given-When-Then-with-Bullets"><a href="#Replacing-Given-When-Then-with-Bullets" class="headerlink" title="Replacing Given/When/Then with Bullets"></a>Replacing Given/When/Then with Bullets</h1><p>Some people find Given, When, Then, And, and But a little verbose. There is an additional keyword you can use to start a step: * (an asterisk). We could have written the previous scenario like this:<br>Scenario: Attempt withdrawal using stolen card * I have $100 in my account</p>
<ul>
<li>my card is invalid</li>
<li>I request $50</li>
<li>my card should not be returned</li>
<li>I should be told to contact the bank<br>To Cucumber, this is exactly the same scenario. Do you find this version easier to read? Maybe. Did some of the meaning get lost? Maybe. It’s up to you and your team how you want to word things. The only thing that matters is that everybody understands what’s communicated.</li>
</ul>
<h2 id="CucumberOptions"><a href="#CucumberOptions" class="headerlink" title="CucumberOptions"></a>CucumberOptions</h2><p>the @CucumberOptions. One can define the location of features, glue files (step definitions), and formatter plugins inside this Cucumber options. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CucumberOptions</span>(</span><br><span class="line">        features = <span class="string">"src/test/resources/features"</span>,</span><br><span class="line">        glue = &#123;<span class="string">"stepdefs"</span>&#125;,</span><br><span class="line">        tags = &#123;<span class="string">"~@Ignore"</span>&#125;,</span><br><span class="line">        format = &#123;</span><br><span class="line">                <span class="string">"pretty"</span>,</span><br><span class="line">                <span class="string">"html:target/cucumber-reports/cucumber-pretty"</span>,</span><br><span class="line">                <span class="string">"json:target/cucumber-reports/CucumberTestReport.json"</span>,</span><br><span class="line">                <span class="string">"rerun:target/cucumber-reports/rerun.txt"</span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRunner</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<h3 id="Step-definitions"><a href="#Step-definitions" class="headerlink" title="Step definitions"></a>Step definitions</h3><p>Cucumber doesn’t know how to execute your scenarios out-of-the-box. It needs Step Definitions to translate plain text Gherkin steps into actionsthat will interact with the system. When Cucumber executes a Step in a Scenario, it will look for a matching Step Definition to execute.</p>
<h3 id="After"><a href="#After" class="headerlink" title="After"></a>After</h3><p>one can implement initial configurations of the project in TestNG’s BeforeClass method. In cucumber’s Before hook, one can implement code to open web browser which is a prerequisite for all scenarios. In Background of each feature, one can implement steps to navigate to web site and/or login to account. In Cucumber’s After hook, one can take a snapshot of failure and close the browser.</p>
<h2 id="tags"><a href="#tags" class="headerlink" title="tags"></a>tags</h2><p>Grouping Features, Scenarios, and Step Definitions using Tags<br>Tags is a great way made for Cucumber power users to organize their features and scenarios. In above example, by changing tags = {“~@Ignore”} line totags = {“@UpdateProfile”}, one can choose run only the features and scenarios tagged with @UpdateProfile tag. A Scenario or feature can have as many tags as you like. Just separate them with spaces: @important @maintenance @db @auth</p>
<p>If subfolders are the chapters in your book of features, then tags are the sticky notes you’ve put on pages you want to be able to find easily. You tag a scenario by putting a word prefixed with the @ character on the line before the Scenario keyword, like this:<br>@widgets<br>Scenario: Generate report<br>Given I am logged in</p>
<p>There are three main reasons for tagging scenarios:</p>
<ul>
<li>Documentation: You want to use a tag to attach a label to certain scenarios, for example to label them with an ID from a project management tool.</li>
<li>Filtering: Cucumber allows you to use tags as a filter to pick out specific scenarios to run or report on. You can even have Cucumber fail your test run if a certain tag appears too many times.</li>
<li>Hooks: Run a block of code whenever a scenario with a particular tag is about to start or has just finished.</li>
</ul>
<h3 id="config-tag"><a href="#config-tag" class="headerlink" title="config tag"></a>config tag</h3><p>Tags are a great way to organise your features and scenarios. Consider this example:</p>
<p>@billing<br>Feature: Verify billing</p>
<p>  @important<br>  Scenario: Missing product description<br>    Given hello</p>
<p>  Scenario: Several products<br>    Given hello<br>A feature or scenario or can have as many tags as you like. Just separate them with spaces:</p>
<p>@billing @bicker @annoy<br>Feature: Verify billing<br>Tags can be placed above the following Gherkin elements:</p>
<p>Feature<br>Scenario<br>Scenario Outline<br>Examples<br>It is not possible to place tags above Background or steps (Given, When, Then, And and But).</p>
<h1 id="Cucumber-for-java-8-lambda"><a href="#Cucumber-for-java-8-lambda" class="headerlink" title="Cucumber for java 8 lambda"></a>Cucumber for java 8 lambda</h1><p>Using Lambda Expressions for Step Definitions<br>Java Step Definitions are written in regular classes which don’t need to extend or implement anything. They can be written either using lambda expressions or method annotations. In the above, we used the method annotations. To use lambda expressions, use cucumber-java8 module instead of cucumber-java module in your pom.xml file.</p>
<p>When you use the cucumber-java8 module, you can write the Step Definitions using lambdas:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cucumber;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cucumber.api.java8.En;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StepDefinitions</span> <span class="keyword">implements</span> <span class="title">En</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StepDefinitions</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Given(<span class="string">"I have (\\d+) cukes in my belly"</span>, (Integer cukes) -&gt; &#123;</span><br><span class="line">            System.out.format(<span class="string">"Cukes: %n\n"</span>, cukes);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> steps;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> cucumber.api.java8.En;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStepdefs</span> <span class="keyword">implements</span> <span class="title">En</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyStepdefs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       Given(<span class="string">"I login as (.*)$"</span>,(String name)-&gt; System.out.println(name));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Gherkin-1"><a href="#Gherkin-1" class="headerlink" title="Gherkin"></a>Gherkin</h1><p>Cucumber tests are expressed using a syntax called Gherkin. Gherkin files are plain text and have a .feature extension.</p>
<h1 id="Steps-and-Step-Definitions"><a href="#Steps-and-Step-Definitions" class="headerlink" title="Steps and Step Definitions"></a>Steps and Step Definitions</h1><p>Let’s start by clarifying the distinction between a step and a step definition.<br>Each Gherkin scenario is made up of a series of steps, written in plain lan- guage. On its own, a step is just documentation; it needs a step definition to bring it to life. A step definition is a piece of code that says to Cucumber, “If you see a step that looks like this…, then here’s what I want you to do….”<br>When Cucumber tries to execute each step, it looks for a matching step defi- nition to execute. So, how does Cucumber match a step definition to a step?</p>
<h1 id="Creating-a-Step-Definition"><a href="#Creating-a-Step-Definition" class="headerlink" title="Creating a Step Definition"></a>Creating a Step Definition</h1><p>If Cucumber sees a step definition with this regular expression, it will execute it when it comes to the first step of our scenario. So, how do we create a step definition?</p>
<p>Step definitions live in ordinary files. To create a step definition in Java, you use a special Cucumber annotation, such as @Given, like this:<br>@Given(“I have \$100 in my Account”)<br>public void iHave$100InMyAccount() throws Throwable {<br>    // TODO: code that puts $100 into User’s Account goes here<br>}</p>
<h2 id="Given-When-Then-Are-the-Same"><a href="#Given-When-Then-Are-the-Same" class="headerlink" title="Given, When, Then Are the Same"></a>Given, When, Then Are the Same</h2><p>It doesn’t actually matter which of the three methods you use to register a step definition, because Cucumber ignores the keyword when matching a step. Under the hood, all of the annotations are aliases for StepDefAnnotation.</p>
<p>The best way we’ve found to avoid this kind of problem is to pay careful attention to the precise wording in your steps. You could change both steps to be less ambiguous:<br>Given I have deposited $100 in my Account Then the balance of my Account should be $100<br>By rewording the steps like this, you’ve made them better at communicating exactly what they will do when executed. Learning to spot and remove this kind of ambiguity is something that takes practice. Paying attention to the distinction in wording between two steps like this can also give you hints about concepts that may not be expressed in your code but need to be. It might seem pedantic, but we’ve found that teams who pay this much careful attention to detail write much better software, faster.</p>
<h3 id="Alternation"><a href="#Alternation" class="headerlink" title="Alternation"></a>Alternation</h3><p>We can specify a wildcard in a regular expression using a few different approaches. One of the simplest is alternation, where we express different options separated by a pipe character |, like this:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Given</span>(<span class="string">"I have deposited \\$(100|250) in my Account"</span>) <span class="keyword">public</span> <span class="keyword">void</span> iHaveDeposited$InMyAccount(<span class="keyword">int</span> amount) &#123;</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> code goes here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>This step definition will now match a step with either of the two values 100 or 250 in it, and the number will be captured and passed to the method as an argument. Alternation can be useful if there are a fixed set of values that you want to accept in your step definition, but normally you’ll want something a little looser.</p>
<h3 id="The-Dot"><a href="#The-Dot" class="headerlink" title="The Dot"></a>The Dot</h3><p>The dot is a metacharacter, meaning it has magical powers in a regular expression. Literally, a dot means match any single character. So, we can try this instead:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Given</span>(<span class="string">"I have deposited \\$(...) in my Account"</span>) <span class="keyword">public</span> <span class="keyword">void</span> iHaveDeposited$InMyAccount(<span class="keyword">int</span> amount) &#123;</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> code goes here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>That will now match a step with any three-figure dollar sum and send the matched amount into the method. </p>
<h4 id="What-If-I-Actually-Want-to-Match-a-Dot"><a href="#What-If-I-Actually-Want-to-Match-a-Dot" class="headerlink" title="What If I Actually Want to Match a Dot?"></a>What If I Actually Want to Match a Dot?</h4><p>Any of the metacharacters like the dot can be escaped by preceding them with a backslash. So, if you wanted to specifically match, say 3.14, you could use “3\.14”.<br>You might have noticed that there’s a backslash in front of the dollar amount in the step definition we’re using. That’s because $ itself is a metacharacter (it’s an anchor, which we’ll explain later), so we need to escape to make it match a normal dollar sign.</p>
<h2 id="Star-modifier"><a href="#Star-modifier" class="headerlink" title="Star modifier"></a>Star modifier</h2><p>The star modifier means any number of times. So, with .* we’re capturing any character, any number of times. Now we’re getting somewhere—this will allow us to capture all those different amounts. But there’s still a problem.<br>The star modifier is a bit of a blunt instrument. Because we’re using it with the dot that matches any character, it will gobble up any text at all up until the phrase in my Account. This is why, in regex terminology, the star modifier is known as a greedy operator. For example, it would happily match this step:<br>Given I have deposited $1 and a cucumber in my Account<br>The amount captured by our regular expression in this case would be 1 and a cucumber. We need to be more specific about the characters we want to match and just capture numbers. Instead of a dot, we can use something else.</p>
<h3 id="Character-Classes"><a href="#Character-Classes" class="headerlink" title="Character Classes"></a>Character Classes</h3><p>Character classes allow you to tell the regular expression engine to match one of a range of characters. You just place all of the characters you would accept inside square brackets:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Given</span>(<span class="string">"I have deposited \\$([01234567890]*) in my Account"</span>) <span class="keyword">public</span> <span class="keyword">void</span> iHaveDeposited$InMyAccount(<span class="keyword">int</span> amount) &#123;</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> code goes here</span></span><br><span class="line">&#125;</span><br><span class="line">For a continuous range of characters like we have, you can use a hyphen:</span><br><span class="line"><span class="meta">@Given</span>(<span class="string">"I have deposited \\$([0-9]*) in my Account"</span>) <span class="keyword">public</span> <span class="keyword">void</span> iHaveDeposited$InMyAccount(<span class="keyword">int</span> amount) &#123;</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> code goes here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Shorthand-Character-Classes"><a href="#Shorthand-Character-Classes" class="headerlink" title="Shorthand Character Classes"></a>Shorthand Character Classes</h3><p>For common patterns of characters like [0-9], there are a few shorthand char- acter classes that you can use instead. You may find this just makes your regular expressions more cryptic, but there are only a few to learn. For a digit, you can use \d as a shorthand for [0-9]:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Given</span>(<span class="string">"I have deposited \\$(\\d*) in my Account"</span>) <span class="keyword">public</span> <span class="keyword">void</span> iHaveDeposited$InMyAccount(<span class="keyword">int</span> amount) &#123;</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> code goes here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Here are the most useful shorthand character classes: \d stands for digit, or [0-9].<br>\w stands for word character, specifically [A-Za-z0-9_]. Notice that underscores and digits are included but not hyphens.<br>\s stands for whitespace character, specifically [ \t\r\n]. That means a space, a tab, or a line break.<br>\b stands for word boundary, which is a lot like \s but actually means the opposite of \w. Anything that is not a word character is a word boundary.<br>You can also negate shorthand character classes by capitalizing them, so for example, \D means any character except a digit.<br>Back to matching our amount. It looks like we’re done, but there’s one last problem to fix. Can you see what it is?</p>
<h3 id="question-mark"><a href="#question-mark" class="headerlink" title="question mark"></a>question mark</h3><p>Like the star and the plus, the question mark modifies the character that precedes it, specifying how many times it can be repeated. The question mark modifier means zero or one times; in other words, it makes the preceding character optional. In step definitions, it’s particularly useful for plurals:<br>@Given(“I have (\d+) cucumbers? in my basket”) public void iHaveCucumbersInMyBasket(int number) {<br>  // TODO: code goes here<br>}</p>
<h3 id="noncapturing-group"><a href="#noncapturing-group" class="headerlink" title="noncapturing group"></a>noncapturing group</h3><p>@When(“I (?:visit|go to) the homepage”) public void iVisitTheHomepage() {<br>  // TODO: code goes here<br>}
Notice that we’ve had to prefix the list of alternates with another bit of regular expression magic. The ?: at the start of the group marks it as noncapturing, meaning Cucumber won’t pass it as an argument to our block.</p>
<h3 id="Anchors"><a href="#Anchors" class="headerlink" title="Anchors"></a>Anchors</h3><p>The undefined steps start with a ^ and end with a $. These two metacharacters are called anchors, because they’re used to tie down each end of the regular expression to the beginning and end of the string that they match on.</p>
<p>Generally, it’s best to keep your regular expressions as tight as you can so that there’s less chance of two step definitions clashing with each other.</p>
<h1 id="Guides-on-how-to-write-scenarios"><a href="#Guides-on-how-to-write-scenarios" class="headerlink" title="Guides on how to write scenarios"></a>Guides on how to write scenarios</h1><p>Try to avoid being guided by existing step definitions when you write your scenarios and just write down exactly what you want to happen, in plain English. In fact, try to avoid programmers or testers writing scenarios on their own. Instead, get nontechnical stakeholders or analysts to write the first draft of each scenario from a purely business-focused perspective or ideally in a pair with a programmer to help them share their mental model. With a well- engineered support layer, you can confidently and quickly write new step definitions to match the way the scenario has been expressed.</p>
<h1 id="Imperative-Steps"><a href="#Imperative-Steps" class="headerlink" title="Imperative Steps"></a>Imperative Steps</h1><p>In computer programming, there are two contrasting styles for expressing the instructions you give to a computer to make it do something for you. These styles are called imperative programming and declarative programming.</p>
<p>Imperative programming means using a sequence of commands for the com- puter to perform in a particular order. Java is an example of an imperative language: you write a program as a series of statements that Java runs one at a time, in order. A declarative program tells the computer what it should do without prescribing precisely how to do it. CSS is an example of a declar- ative language: you tell the computer what you want the various elements on a web page to look like, and you leave it to take care of the rest.</p>
<h2 id="Use-a-Declarative-Style-Instead"><a href="#Use-a-Declarative-Style-Instead" class="headerlink" title="Use a Declarative Style Instead"></a>Use a Declarative Style Instead</h2><p>Let’s raise the level of abstraction in this scenario and rewrite it using a more declarative style:<br>Scenario: Redirect user to originally requested page after logging in Given I am an unauthenticated User<br>When I attempt to view some restricted content<br>Then I am shown a login form<br>When I authenticate with valid credentials Then I should be shown the restricted content<br>The beauty of this style is that it is not coupled to any specific implementation of the user interface. This same scenario could apply to a thick-client or mobile application. The words it uses aren’t technical and are instead written in a language (unauthenticated, restricted, credentials) that any stakeholder interested in security should be able to clearly understand. It’s by expressing every scenario at this level of abstraction that you discover your team’s ubiquitous language.</p>
<h1 id="DAMP"><a href="#DAMP" class="headerlink" title="DAMP"></a>DAMP</h1><p>However, when you are using examples to drive your code, there is another principle in play that I believe trumps the DRY principle: the examples should tell a good story. They are the docu- mentation narrative that will guide future programmers (including you when you come back to change this code in three months time and you’ve forgotten what it does). In this case, clarity of intent is found in the quality of the narrative, not necessarily in minimizing duplication.</p>
<p>Some people refer to this as the DAMP principle: Descriptive and Meaningful Phrases. When you’re writing examples, readability is paramount, and DAMP trumps DRY.</p>
<p>We consider fixture data to be an antipattern. We much prefer using Test Data Builders, on page 104, where the relevant data is created within the test itself, rather than being buried away in a big tangled set of fixture data.</p>
<p>We find that teams that have a single humongous build also tend to have an architecture that could best be described as a big ball of mud. Because all of the behavior in the system is implemented in one place, all the tests have to live in one place, too, and have to all be run together as one big lump. This is a classic ailment of long-lived applications, which have grown organically without obvious interfaces between their subsystems.</p>
<h1 id="Defect-Prevention"><a href="#Defect-Prevention" class="headerlink" title="Defect Prevention"></a>Defect Prevention</h1><p>Toyota’s counterintuitive but hugely successful policy of stopping the line works because it’s part of a wider process, known as defect prevention, that focuses on continuously improving the manufacturing system. Without this wider process, stop the line itself would have very little effect. There are four steps to this process:</p>
<ul>
<li>Detect the abnormality.</li>
<li>Stop what you’re doing.</li>
<li>Fix or correct the immediate problem.</li>
<li>Investigate the root cause and install a countermeasure.<br>This fourth step is crucial because it seizes the opportunity offered by the problem at hand to understand something more fundamental about your process. It also means that fixing things becomes a habit, rather than some- thing you put off to do someday later when you’re not in such a hurry.</li>
</ul>
<p>Cucumber might just seem like a testing tool, but at its heart it’s really a collaboration tool. If you make a genuine effort to write features that work as documentation for the nontechnical stakeholders on your team, you’ll find you are forced to talk with them about details that you might never have otherwise made the time to talk about. Those conversations reveal insights about their understanding of the problem, insights that will help you build a much better solution than you would have otherwise. This is Cucumber’s big secret: the tests and documentation are just a happy side effect; the real value lies in the knowledge you discover during those conversations.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://medium.com/agile-vision/cucumber-bdd-part-2-creating-a-sample-java-project-with-cucumber-testng-and-maven-127a1053c180" target="_blank" rel="noopener">https://medium.com/agile-vision/cucumber-bdd-part-2-creating-a-sample-java-project-with-cucumber-testng-and-maven-127a1053c180</a></li>
<li><a href="https://codoid.com/cucumber-lambda-expressions/" target="_blank" rel="noopener">https://codoid.com/cucumber-lambda-expressions/</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Mockito</title>
    <url>/2018-09-03-distruptor/</url>
    <content><![CDATA[<h1 id="Feature"><a href="#Feature" class="headerlink" title="Feature"></a>Feature</h1><p>There only 2 things you can do with Mockito mocks - verify or stub. Stubbing goes before execution and verification afterwards.</p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://github.com/mockito/mockito/wiki/Mockito-vs-EasyMock" target="_blank" rel="noopener">https://github.com/mockito/mockito/wiki/Mockito-vs-EasyMock</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Zoo-keeper</title>
    <url>/2018-08-19-ZooKeeper/</url>
    <content><![CDATA[<h1 id="ZK-Motto"><a href="#ZK-Motto" class="headerlink" title="ZK Motto"></a>ZK Motto</h1><blockquote>
<p>the motto “ZooKeeper: Because Coordinating Distributed Systems is a Zoo.”</p>
</blockquote>
<h1 id="Features-of-Zookeeper"><a href="#Features-of-Zookeeper" class="headerlink" title="Features of Zookeeper"></a>Features of Zookeeper</h1><ul>
<li>Synchronization − Mutual exclusion and co-operation between server processes.</li>
<li>Ordered Messages - The strict ordering means that sophisticated synchronization primitives can be implemented at the client.</li>
<li>Reliability - The reliability aspects keep it from being a single point of failure.</li>
<li>Atomicity − Data transfer either succeeds or fails completely, but no transaction is partial.</li>
<li>High performant - The performance aspects of Zookeeper means it can be used in large, distributed systems.</li>
<li>Distributed.</li>
<li>High avaliablity.</li>
<li>Fault-tolerant.</li>
<li>Loose coupling.</li>
<li>Partial failure.</li>
<li>High throughput and low latency - data is stored data in memory and on disk as well.</li>
<li>Replicated.</li>
<li>Automatic failover: When a Zookeeper dies, the session is automatically migrated over to another Zookeeper.</li>
</ul>
<h2 id="Different-type-of-data"><a href="#Different-type-of-data" class="headerlink" title="Different type of data"></a>Different type of data</h2><p>When designing an application with ZooKeeper, one ideally separates application data from control or coordination data. For example, the users of a web-mail service are interested in their mailbox content, but not on which server is handling the requests of a particular mailbox. The mailbox content is application data, whereas the mapping of the mailbox to a specific mail server is part of the coordination data (or metadata). A ZooKeeper ensemble manages the latter.</p>
<p>The multiple processes consequently need to implement mutual exclusion. We can actually think of the task of acquiring mastership as the one of acquiring a lock: the process that acquires the mastership lock exercises the role of master.</p>
<p>Coordination does not always take the form of synchronization primitives like leader election or locks. Configuration metadata is often used as a way for a process to convey what others should be doing. For example, in a master-worker system, workers need to know the tasks that have been assigned to them, and this information must be available even if the master crashes.</p>
<h2 id="How-world-work-without-ZooKeeper"><a href="#How-world-work-without-ZooKeeper" class="headerlink" title="How world work without ZooKeeper"></a>How world work without ZooKeeper</h2><p>It is certainly possible to build distributed systems without using ZooKeeper. ZooKeep‐ er, however, offers developers the possibility of focusing more on application logic rather than on arcane distributed systems concepts. Programming distributed systems without ZooKeeper is possible, but more difficult.</p>
<h2 id="What-does-ZooKeeper-does-not-do"><a href="#What-does-ZooKeeper-does-not-do" class="headerlink" title="What does ZooKeeper does not do"></a>What does ZooKeeper does not do</h2><p>The ensemble of ZooKeeper servers manages critical application data related to coor‐ dination. ZooKeeper is not for bulk storage. For bulk storage of application data, there are a number of options available, such as databases and distributed file systems. When designing an application with ZooKeeper, one ideally separates application data from control or coordination data.</p>
<p>ZooKeeper, however, does not implement the tasks for you. It does not elect a master or track live processes for the application out of the box. Instead, it provides the tools for implementing such tasks. The developer decides what coordination tasks to implement.</p>
<p>Processes in a distributed system have two broad options for communication: they can exchange messages directly through a network, or read and write to some shared storage. ZooKeeper uses the shared storage model to let applications implement coordination and synchronization primitives. But shared storage itself requires network communi‐ cation between the processes and the storage. It is important to stress the role of network communication because it is an important source of complications in the design of a distributed system.</p>
<p>This scenario leads to a problem commonly called split-brain: two or more parts of the system make progress independ‐ ently, leading to inconsistent behavior. As part of coming up with a way to cope with master failures, it is critical that we avoid split-brain scenarios.</p>
<h1 id="Tasks"><a href="#Tasks" class="headerlink" title="Tasks"></a>Tasks</h1><p>The following requirements for our master-worker architecture:<br>Master election<br>It is critical for progress to have a master available to assign tasks to workers.<br>Crash detection<br>The master must be able to detect when workers crash or disconnect.<br>Group membership management<br>The master must be able to figure out which workers are available to execute tasks.<br>Metadata management<br>The master and the workers must be able to store assignments and execution sta‐ tuses in a reliable manner.</p>
<h1 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h1><p>known as CAP, which stands for Consistency, Availability, and Partition-tolerance, says that when designing a distributed system we may want all three of those properties, but that no system can handle all three.2 Zoo‐ Keeper has been designed with mostly consistency and availability in mind, although it also provides read-only capability in the presence of network partitions.</p>
<h1 id="ZooKeeper-Basics"><a href="#ZooKeeper-Basics" class="headerlink" title="ZooKeeper Basics"></a>ZooKeeper Basics</h1><p>Several primitives used for coordination are commonly shared across many applica‐ tions. Consequently, one way of designing a service used for coordination is to come up with a list of primitives, expose calls to create instances of each primitive, and ma‐ nipulate these instances directly. For example, we could say that distributed locks con‐ stitute an important primitive and expose calls to create, acquire, and release locks.<br>Such a design, however, suffers from a couple of important shortcomings. First, we need to either come up with an exhaustive list of primitives used beforehand, or keep ex‐ tending the API to introduce new primitives. Second, it does not give flexibility to the application using the service to implement primitives in the way that is most suitable for it.<br>We consequently have taken a different path with ZooKeeper. ZooKeeper does not ex‐ pose primitives directly. Instead, it exposes a file system-like API comprised of a small set of calls that enables applications to implement their own primitives. We typically use recipes to denote these implementations of primitives. Recipes include ZooKeeper operations that manipulate small data nodes, called znodes, that are organized hier‐ archically as a tree, just like in a file system.</p>
<h2 id="znodes"><a href="#znodes" class="headerlink" title="znodes"></a>znodes</h2><p>a few other znodes that could be useful in a master- worker configuration:</p>
<ul>
<li>The /workers znode is the parent znode to all znodes representing a worker avail‐ able in the system. Figure 2-1 shows that one worker (foo.com:2181) is available. If a worker becomes unavailable, its znode should be removed from /workers.</li>
<li>The /tasks znode is the parent of all tasks created and waiting for workers to execute them. Clients of the master-worker application add new znodes as children of /tasks to represent new tasks and wait for znodes representing the status of the task.</li>
<li>The /assign znode is the parent of all znodes representing an assignment of a task to a worker. When a master assigns a task to a worker, it adds a child znode to /assign.<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2>API Overview<br>Znodes may or may not contain data. If a znode contains any data, the data is stored as a byte array. The exact format of the byte array is specific to each application, and ZooKeeper does not directly provide support to parse it. Serialization packages such as Protocol Buffers, Thrift, Avro, and MessagePack may be handy for dealing with the format of the data stored in znodes, but sometimes string encodings such as UTF-8 or ASCII suffice.</li>
</ul>
<h2 id="The-ZooKeeper-API-exposes-the-following-operations"><a href="#The-ZooKeeper-API-exposes-the-following-operations" class="headerlink" title="The ZooKeeper API exposes the following operations:"></a>The ZooKeeper API exposes the following operations:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create /path data</span><br><span class="line">Creates a znode named with /path and containing data</span><br><span class="line">delete /path</span><br><span class="line">Deletes the znode /path</span><br><span class="line">exists /path</span><br><span class="line">Checks whether /path exists</span><br><span class="line">setData /path data</span><br><span class="line">Sets the data of znode /path to data</span><br><span class="line">getData /path</span><br><span class="line">Returns the data in /path</span><br><span class="line">getChildren /path</span><br><span class="line">Returns the list of children under /path</span><br><span class="line">One important note is that ZooKeeper does not allow partial writes or reads of the znode data. When setting the data of a znode or reading it, the content of the znode is replaced or read entirely.</span><br></pre></td></tr></table></figure>

<p>ZooKeeper clients connect to a ZooKeeper service and establish a session through which they make API calls. </p>
<p>If a worker becomes unavailable, its session expires and its znode in /workers disappears automatically.</p>
<p>An ephemeral znode can be deleted in two situations:</p>
<ol>
<li>When the session of the client creator ends, either by expiration or because it ex‐ plicitly closed.</li>
<li>When a client, not necessarily the creator, deletes it.</li>
</ol>
<h3 id="Sequential-znodes"><a href="#Sequential-znodes" class="headerlink" title="Sequential znodes"></a>Sequential znodes</h3><p>A znode can also be set to be sequential. A sequential znode is assigned a unique, mo‐ notonically increasing integer. This sequence number is appended to the path used to create the znode. For example, if a client creates a sequential znode with the path /tasks/ task-, ZooKeeper assigns a sequence number, say 1, and appends it to the path. The path of the znode becomes /tasks/task-1. Sequential znodes provide an easy way to create znodes with unique names. They also provide a way to easily see the creation order of znodes.</p>
<h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><p>This is a common problem with polling. To replace the client polling, we have opted for a mechanism based on notifications: clients register with ZooKeeper to receive notifi‐ cations of changes to znodes. Registering to receive a notification for a given znode consists of setting a watch. A watch is a one-shot operation, which means that it triggers one notification. To receive multiple notifications over time, the client must set a new watch upon receiving each notification. </p>
<h2 id="Versions"><a href="#Versions" class="headerlink" title="Versions"></a>Versions</h2><p>Each znode has a version number associated with it that is incremented every time its data changes. A couple of operations in the API can be executed conditionally: setDa ta and delete. Both calls take a version as an input parameter, and the operation suc‐ ceeds only if the version passed by the client matches the current version on the server. The use of versions is important when multiple ZooKeeper clients might be trying to perform operations over the same znode. For example, suppose that a client c1 writes a znode /config containing some configuration. If another client c2 concurrently updates the znode, the version c1 has is stale and the setData of c1 must not succeed. Using versions avoids such situations. In this case, the version that c1 uses when writing back doesn’t match and the operation fails. </p>
<h1 id="ZooKeeper-Architecture"><a href="#ZooKeeper-Architecture" class="headerlink" title="ZooKeeper Architecture"></a>ZooKeeper Architecture</h1><p>Now that we have discussed at a high level the operations that ZooKeeper exposes to applications, we need to understand more of how the service actually works. Applica‐ tions make calls to ZooKeeper through a client library. The client library is responsible for the interaction with ZooKeeper servers.</p>
<p>ZooKeeper servers run in two modes: standalone and quorum. Standalone mode is pretty much what the term says: there is a single server, and ZooKeeper state is not replicated. In quorum mode, a group of ZooKeeper servers, which we call a ZooKeeper ensemble, replicates the state, and together they serve client requests. From this point on, we use the term “ZooKeeper ensemble” to denote an installation of servers. This installation could contain a single server and operate in standalone mode or contain a group of servers and operate in quorum mode.</p>
<h2 id="ZooKeeper-Quorums"><a href="#ZooKeeper-Quorums" class="headerlink" title="ZooKeeper Quorums"></a>ZooKeeper Quorums</h2><p>In quorum mode, ZooKeeper replicates its data tree across all servers in the ensemble. But if a client had to wait for every server to store its data before continuing, the delays might be unacceptable. In public administration, a quorum is the minimum number of legislators required to be present for a vote. In ZooKeeper, it is the minimum number of servers that have to be running and available in order for ZooKeeper to work. This number is also the minimum number of servers that have to store a client’s data before telling the client it is safely stored. For instance, we might have five ZooKeeper servers in total, but a quorum of three. So long as any three servers have stored the data, the client can continue, and the other two servers will eventually catch up and store the data.</p>
<p>It is important to choose an adequate size for the quorum. Quorums must guarantee that, regardless of delays and crashes in the system, any update request the service pos‐ itively acknowledges will persist until another request supersedes it.</p>
<p><code>The bottom line is that we should always shoot for an odd number of servers.</code></p>
<h2 id="sessions"><a href="#sessions" class="headerlink" title="sessions"></a>sessions</h2><p>All operations a client submits to ZooKeeper are associated to a session. When a session ends for any reason, the ephemeral nodes created during that session disappear.</p>
<p>the session may be moved to a different server if the client has not heard from its current server for some time. Moving a session to a different server is handled transparently by the ZooKeeper client library.</p>
<p>Sessions offer order guarantees, which means that requests in a session are executed in FIFO (first in, first out) order. Typically, a client has only a single session open, so its requests are all executed in FIFO order. If a client has multiple concurrent sessions, FIFO ordering is not necessarily preserved across the sessions.</p>
<h2 id="Commands"><a href="#Commands" class="headerlink" title="Commands"></a>Commands</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[zk: 127.0.0.1:2181,127.0.0.1:2182(CONNECTED) 5] <span class="built_in">stat</span> /master</span><br><span class="line">cZxid = 0x4</span><br><span class="line">ctime = Mon Aug 20 21:10:23 AEST 2018</span><br><span class="line">mZxid = 0x4</span><br><span class="line">mtime = Mon Aug 20 21:10:23 AEST 2018</span><br><span class="line">pZxid = 0x4</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 0</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x10003c70e250001</span><br><span class="line">dataLength = 11</span><br><span class="line">numChildren = 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[zk: 127.0.0.1:2181,127.0.0.1:2182(CONNECTED) 8] create /workers <span class="string">""</span></span><br><span class="line">Created /workers</span><br><span class="line">[zk: 127.0.0.1:2181,127.0.0.1:2182(CONNECTED) 9] create /tasks <span class="string">""</span></span><br><span class="line">Created /tasks</span><br><span class="line">[zk: 127.0.0.1:2181,127.0.0.1:2182(CONNECTED) 10] create /assign <span class="string">""</span></span><br><span class="line">Created /assign</span><br><span class="line">[zk: 127.0.0.1:2181,127.0.0.1:2182(CONNECTED) 11] ls /</span><br><span class="line">[assign, master, tasks, workers, zookeeper]</span><br></pre></td></tr></table></figure>

<h2 id="link-master-and-workers"><a href="#link-master-and-workers" class="headerlink" title="link master and workers"></a>link master and workers</h2><p>In a real application, these znodes need to be created either by a primary process before it starts assigning tasks or by some bootstrap procedure. Regardless of how they are created, once they exist, the master needs to watch for changes in the children of /workers and /tasks:<br>    [zk: localhost:2181(CONNECTED) 4] ls /workers true<br>    []<br>    [zk: localhost:2181(CONNECTED) 5] ls /tasks true<br>    []<br>    [zk: localhost:2181(CONNECTED) 6]<br>Note that we have used the optional true parameter with ls, as we did before with stat on the master. The true parameter, in this case, creates a watch for changes to the set of children of the corresponding znode.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[zk: 127.0.0.1:2181,127.0.0.1:2182(CONNECTED) 14] create -e /workers/todd-worker1 <span class="string">""</span></span><br><span class="line">Created /workers/todd-worker1</span><br><span class="line"></span><br><span class="line">WATCHER::</span><br><span class="line"></span><br><span class="line">WatchedEvent state:SyncConnected <span class="built_in">type</span>:NodeChildrenChanged path:/workers</span><br><span class="line">[zk: 127.0.0.1:2181,127.0.0.1:2182(CONNECTED) 15]</span><br></pre></td></tr></table></figure>

<p>Recall that the master has set a watch for changes to the children of /workers. Once the worker creates a znode under /workers, the master observes the following notification:<br>    WATCHER::<br>    WatchedEvent state:SyncConnected type:NodeChildrenChanged path:/workers</p>
<h2 id="Tasks-workflows"><a href="#Tasks-workflows" class="headerlink" title="Tasks workflows"></a>Tasks workflows</h2><ul>
<li>Clients add tasks to the system. Here we assume that the client asks the master-worker system to run a command cmd. To add a task to the system, a client executes the following:<br>  [zk: localhost:2181(CONNECTED) 0] create -s /tasks/task- “cmd”<br>  Created /tasks/task-0000000000</li>
<li>The client now has to wait until the task is executed. </li>
<li>The worker that executes the task creates a status znode for the task once the task completes. </li>
<li>The client determines that the task has been executed when it sees that a status znode for the task has been created; </li>
<li>the client consequently must watch for the creation of the status znode:</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[zk: 127.0.0.1:2181,127.0.0.1:2182(CONNECTED) 18] create -s /tasks/task- <span class="string">"cmd"</span></span><br><span class="line">Created /tasks/task-0000000000</span><br><span class="line">[zk: 127.0.0.1:2181,127.0.0.1:2182(CONNECTED) 19] ls /tasks</span><br><span class="line">[task-0000000000]</span><br><span class="line">[zk: 127.0.0.1:2181,127.0.0.1:2182(CONNECTED) 20] ls -w /tasks/task-0000000000 </span><br><span class="line">[]</span><br><span class="line">[zk: 127.0.0.1:2181,127.0.0.1:2182(CONNECTED) 21] ls -w /workers</span><br><span class="line">[todd-worker1]</span><br><span class="line">[zk: 127.0.0.1:2181,127.0.0.1:2182(CONNECTED) 22] create /assign/todd-worker1/task-0000000000 <span class="string">""</span></span><br><span class="line">Ephemerals cannot have children: /assign/todd-worker1/task-0000000000</span><br><span class="line">[zk: 127.0.0.1:2181,127.0.0.1:2182(CONNECTED) 23] delete /assign/todd-worker1</span><br><span class="line">[zk: 127.0.0.1:2181,127.0.0.1:2182(CONNECTED) 24] create /assign/todd-worker1</span><br><span class="line">Created /assign/todd-worker1</span><br><span class="line">[zk: 127.0.0.1:2181,127.0.0.1:2182(CONNECTED) 25] create /assign/todd-worker1/task-0000000000 <span class="string">""</span></span><br><span class="line">Created /assign/todd-worker1/task-0000000000</span><br><span class="line">[zk: 127.0.0.1:2181,127.0.0.1:2182(CONNECTED) 26] ls /assign/todd-worker1</span><br><span class="line">[task-0000000000]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Once the worker finishes executing the task, it adds a status znode to /tasks:</span></span><br><span class="line">    [zk: localhost:2181(CONNECTED) 4] create /tasks/task-0000000000/status <span class="string">"done"</span></span><br><span class="line">    Created /tasks/task-0000000000/status</span><br><span class="line">    [zk: localhost:2181(CONNECTED) 5]</span><br><span class="line"><span class="comment"># and the client receives a notification and checks the result:</span></span><br><span class="line">WATCHER::</span><br><span class="line">    WatchedEvent state:SyncConnected <span class="built_in">type</span>:NodeChildrenChanged</span><br><span class="line">    path:/tasks/task-0000000000</span><br><span class="line">    [zk: localhost:2181(CONNECTED) 2] get /tasks/task-0000000000</span><br><span class="line">    <span class="string">"cmd"</span></span><br></pre></td></tr></table></figure>

<h1 id="ZooKeeper-API"><a href="#ZooKeeper-API" class="headerlink" title="ZooKeeper API"></a>ZooKeeper API</h1><h2 id="Setting-the-ZooKeeper-CLASSPATH"><a href="#Setting-the-ZooKeeper-CLASSPATH" class="headerlink" title="Setting the ZooKeeper CLASSPATH"></a>Setting the ZooKeeper CLASSPATH</h2><p> ZOOBINDIR=”<path_to_distro>/bin”<br>    . “$ZOOBINDIR”/zkEnv.sh</path_to_distro></p>
<h2 id="handle"><a href="#handle" class="headerlink" title="handle"></a>handle</h2><p>The ZooKeeper API is built around a ZooKeeper handle that is passed to every API call. This handle represents a session with ZooKeeper. A session that is established with one ZooKeeper server will migrate to another ZooKeeper server if its connection is broken. As long as the session is alive, the handle will remain valid, and the ZooKeeper client library will continually try to keep an active connection to a ZooKeeper server to keep the session alive. If the handle is closed, the ZooKeeper client library will tell the ZooKeeper servers to kill the session. If ZooKeeper decides that a client has died, it will invalidate the session. If a client later tries to reconnect to a Zoo‐ Keeper server using the handle that corresponds to the invalidated session, the Zoo‐ Keeper server informs the client library that the session is no longer valid and the handle returns errors for all operations.</p>
<p>The constructor that creates a ZooKeeper handle usually looks like:<br>ZooKeeper(<br>String connectString, int sessionTimeout, Watcher watcher)</p>
<h3 id="Implementing-a-Watcher"><a href="#Implementing-a-Watcher" class="headerlink" title="Implementing a Watcher"></a>Implementing a Watcher</h3><p>To receive notifications from ZooKeeper, we need to implement watchers. Let’s look a bit more closely at the Watcher interface. It has the following declaration:<br>public interface Watcher {<br>void process(WatchedEvent event);<br>}</p>
<h3 id="Sample-ZooKeeper-handle"><a href="#Sample-ZooKeeper-handle" class="headerlink" title="Sample ZooKeeper handle"></a>Sample ZooKeeper handle</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooKeeper; </span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Master</span> <span class="keyword">implements</span> <span class="title">Watcher</span> </span>&#123; </span><br><span class="line">  ZooKeeper zk;</span><br><span class="line">        String hostPort;</span><br><span class="line"></span><br><span class="line">Master(String hostPort) </span><br><span class="line">&#123; <span class="keyword">this</span>.hostPort = hostPort;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">startZK</span><span class="params">()</span> </span>&#123;</span><br><span class="line">zk = <span class="keyword">new</span> ZooKeeper(hostPort, <span class="number">15000</span>, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent e)</span> </span>&#123; System.out.println(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Master m = <span class="keyword">new</span> Master(args[<span class="number">0</span>]);</span><br><span class="line">            m.startZK();</span><br><span class="line">            <span class="comment">// wait for a bit</span></span><br><span class="line">            Thread.sleep(<span class="number">60000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>nce we have connected to ZooKeeper, there will be a background thread that will maintain the ZooKeeper session. This thread is a daemon thread, which means that the program may exit even if the thread is still active. Here we sleep for a bit so that we can see some events come in before the program exits.<br>We can compile this simple example using the following:<br>$ javac -cp $CLASSPATH Master.java<br>Once we have compiled Master.java, we run it and see the following:<br>$ java -cp $CLASSPATH Master 127.0.0.1:2181</p>
<h2 id="disconnect"><a href="#disconnect" class="headerlink" title="disconnect"></a>disconnect</h2><p>When developers see the Disconnected event, some think they need to create a new ZooKeeper handle to reconnect to the service. Do not do that! See what happens when you start the server, start the Master, and then stop and start the server while the Master is still running. You should see the SyncConnected event followed by the Disconnec ted event and then another SyncConnected event. The ZooKeeper client library takes care of reconnecting to the service for you. Unfortunately, network outages and server failures happen. Usually, ZooKeeper can deal with these failures.</p>
]]></content>
  </entry>
  <entry>
    <title>Distruptor</title>
    <url>/2018-09-06-mockito/</url>
    <content><![CDATA[<h1 id="multithreading"><a href="#multithreading" class="headerlink" title="multithreading"></a>multithreading</h1><p>Concurrent execution of code ia bout two things: mutal exclusion and visibility of change.</p>
<ul>
<li>Mutual exclusion is about managing contented updtes to some resources.</li>
<li>Visibiliyt of change is about controlling when such changes are made visible to other threads.</li>
</ul>
<h2 id="mutal-exclusion"><a href="#mutal-exclusion" class="headerlink" title="mutal exclusion"></a>mutal exclusion</h2><p>It is possible to avoid the need for mutal exclusion if you can eliminate the need for contented updates. If your algorithm can guarantee that any given resource is modified by only one thread then utal exclusion is unnecessary.</p>
<p>Read and write operations require that all changes are made visible to other threads.</p>
<p>The most costly operation in any concurrent environment is a contended write access.</p>
<h3 id="locks"><a href="#locks" class="headerlink" title="locks"></a>locks</h3><p>Lock provide mutual exclusion and ensure that the visibility of change occurs in an ordered manner. Locks are incredibly expensive because they require arbitration when contended. This arbitration is achieved by a context switch to the OS kernerl which will suspend threads waiting on a lock until it’s released. During such a context switch , as well as releasing control to the OS which may decided to do other house-keeping tasks which it has control, execution context can lose previously cached data nad instrucionts. This can have a serious performance impact on modern CPU. </p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://developers.google.com/protocol-buffers/docs/overview" target="_blank" rel="noopener">https://developers.google.com/protocol-buffers/docs/overview</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Chronicle</title>
    <url>/2018-08-09-Chronicle/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>Chronicle Software is about simplifying fast data.  It is a suite of libraries to make it easier to write, monitor and tune data processing systems where performance and scalability are concerned.</p>
<h1 id="Writing-to-a-Queue"><a href="#Writing-to-a-Queue" class="headerlink" title="Writing to a Queue"></a>Writing to a Queue</h1><p>In Chronicle Queue we refer to the act of writing your data to the Chronicle queue, as storing an excerpt. This data could be made up from any data type, including text, numbers, or serialised blobs. Ultimately, all your data, regardless of what it is, is stored as a series of bytes.</p>
<p>Just before storing your excerpt, Chronicle Queue reserves an 8-byte header. Chronicle Queue writes the length of your data into this header. This way, when Chronicle Queue comes to read your excerpt, it knows how long each blob of data is. We refer to this 8-byte header, along with your excerpt, as a document. So strictly speaking Chronicle Queue can be used to read and write documents.</p>
<blockquote>
<p>Within this 8-byte header we also reserve a few bits for a number of internal operations, such as locking, to make Chronicle Queue thread-safe across both processors and threads. The important thing to note is that because of this, you can’t strictly convert the 8 bytes to an integer to find the length of your data blob.</p>
</blockquote>
<p>To write data to a Chronicle-Queue, you must first create an Appender</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (ChronicleQueue queue = SingleChronicleQueueBuilder.binary(path + <span class="string">"/trades"</span>).build()) &#123;</span><br><span class="line">   <span class="keyword">final</span> ExcerptAppender appender = queue.acquireAppender();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Chronicle Queue uses the following low-level interface to write the data:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="keyword">final</span> DocumentContext dc = appender.writingDocument()) &#123;</span><br><span class="line">      dc.wire().write().text(“your text data“);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>So, Chronicle Queue uses an <code>Appender to write</code> to the queue and a <code>Tailer to read</code> from the queue. Unlike other java queuing solutions, messages are not lost when they are read with a Tailer. </p>
<p>Each Chronicle Queue excerpt has a unique index.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="keyword">final</span> DocumentContext dc = appender.writingDocument()) &#123;</span><br><span class="line">    dc.wire().write().text(“your text data“);</span><br><span class="line">    System.out.println(<span class="string">"your data was store to index="</span>+ dc.index());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The high-level methods below such as writeText() are convenience methods on calling appender.writingDocument(), but both approaches essentially do the same thing. The actual code of writeText(CharSequence text) looks like this:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> text to write a message</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writeText</span><span class="params">(CharSequence text)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (DocumentContext dc = writingDocument()) &#123;</span><br><span class="line">        dc.wire().bytes().append8bit(text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>This is the highest-level API which hides the fact you are writing to messaging at all. The benefit is that you can swap calls to the interface with a real component, or an interface to a different protocol.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// using the method writer interface.</span></span><br><span class="line">RiskMonitor riskMonitor = appender.methodWriter(RiskMonitor.class);</span><br><span class="line"><span class="keyword">final</span> LocalDateTime now = LocalDateTime.now(Clock.systemUTC());</span><br><span class="line">riskMonitor.trade(<span class="keyword">new</span> TradeDetails(now, <span class="string">"GBPUSD"</span>, <span class="number">1.3095</span>, <span class="number">10e6</span>, Side.Buy, <span class="string">"peter"</span>));</span><br></pre></td></tr></table></figure>

<p>You can write a “self-describing message”. Such messages can support schema changes. They are also easier to understand when debugging or diagnosing problems.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// writing a self describing message</span></span><br><span class="line">appender.writeDocument(w -&gt; w.write(<span class="string">"trade"</span>).marshallable(</span><br><span class="line">        m -&gt; m.write(<span class="string">"timestamp"</span>).dateTime(now)</span><br><span class="line">                .write(<span class="string">"symbol"</span>).text(<span class="string">"EURUSD"</span>)</span><br><span class="line">                .write(<span class="string">"price"</span>).float64(<span class="number">1.1101</span>)</span><br><span class="line">                .write(<span class="string">"quantity"</span>).float64(<span class="number">15e6</span>)</span><br><span class="line">                .write(<span class="string">"side"</span>).object(Side.class, Side.Sell)</span><br><span class="line">                .write(<span class="string">"trader"</span>).text(<span class="string">"peter"</span>)));</span><br></pre></td></tr></table></figure>

<p>You can write “raw data” which is self-describing. The types will always be correct; position is the only indication as to the meaning of those values.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// writing just data</span></span><br><span class="line">appender.writeDocument(w -&gt; w</span><br><span class="line">        .getValueOut().int32(<span class="number">0x123456</span>)</span><br><span class="line">        .getValueOut().int64(<span class="number">0x999000999000L</span>)</span><br><span class="line">        .getValueOut().text(<span class="string">"Hello World"</span>));</span><br></pre></td></tr></table></figure>

<p>You can write “raw data” which is not self-describing. Your reader must know what this data means, and the types that were used.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// writing raw data</span></span><br><span class="line">appender.writeBytes(b -&gt; b</span><br><span class="line">        .writeByte((<span class="keyword">byte</span>) <span class="number">0x12</span>)</span><br><span class="line">        .writeInt(<span class="number">0x345678</span>)</span><br><span class="line">        .writeLong(<span class="number">0x999000999000L</span>)</span><br><span class="line">        .writeUtf8(<span class="string">"Hello World"</span>));</span><br></pre></td></tr></table></figure>

<p>This is the lowest level way to write data. You get an address to raw memory and you can write what you want.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Unsafe low level</span></span><br><span class="line">appender.writeBytes(b -&gt; &#123;</span><br><span class="line">    <span class="keyword">long</span> address = b.address(b.writePosition());</span><br><span class="line">    Unsafe unsafe = UnsafeMemory.UNSAFE;</span><br><span class="line">    unsafe.putByte(address, (<span class="keyword">byte</span>) <span class="number">0x12</span>);</span><br><span class="line">    address += <span class="number">1</span>;</span><br><span class="line">    unsafe.putInt(address, <span class="number">0x345678</span>);</span><br><span class="line">    address += <span class="number">4</span>;</span><br><span class="line">    unsafe.putLong(address, <span class="number">0x999000999000L</span>);</span><br><span class="line">    address += <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] bytes = <span class="string">"Hello World"</span>.getBytes(StandardCharsets.ISO_8859_1);</span><br><span class="line">    unsafe.copyMemory(bytes, Unsafe.ARRAY_BYTE_BASE_OFFSET, <span class="keyword">null</span>, address, bytes.length);</span><br><span class="line">    b.writeSkip(<span class="number">1</span> + <span class="number">4</span> + <span class="number">8</span> + bytes.length);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>You can print the contents of the queue. You can see the first two, and last two messages store the same data.</p>
<p>// dump the content of the queue<br>System.out.println(queue.dump());</p>
<h1 id="position-262568-header-0"><a href="#position-262568-header-0" class="headerlink" title="position: 262568, header: 0"></a>position: 262568, header: 0</h1><p>— !!data #binary<br>trade: {<br>  timestamp: 2016-07-17T15:18:41.141,<br>  symbol: GBPUSD,<br>  price: 1.3095,<br>  quantity: 10000000.0,<br>  side: Buy,<br>  trader: peter<br>}</p>
<h1 id="position-262684-header-1"><a href="#position-262684-header-1" class="headerlink" title="position: 262684, header: 1"></a>position: 262684, header: 1</h1><p>— !!data #binary<br>trade: {<br>  timestamp: 2016-07-17T15:18:41.141,<br>  symbol: EURUSD,<br>  price: 1.1101,<br>  quantity: 15000000.0,<br>  side: Sell,<br>  trader: peter<br>}</p>
<h1 id="position-262800-header-2"><a href="#position-262800-header-2" class="headerlink" title="position: 262800, header: 2"></a>position: 262800, header: 2</h1><p>— !!data #binary<br>!int 1193046<br>168843764404224<br>Hello World</p>
<h1 id="position-262830-header-3"><a href="#position-262830-header-3" class="headerlink" title="position: 262830, header: 3"></a>position: 262830, header: 3</h1><p>— !!data #binary<br>000402b0       12 78 56 34 00 00  90 99 00 90 99 00 00 0B   ·xV4·· ········<br>000402c0 48 65 6C 6C 6F 20 57 6F  72 6C 64                Hello Wo rld</p>
<h1 id="position-262859-header-4"><a href="#position-262859-header-4" class="headerlink" title="position: 262859, header: 4"></a>position: 262859, header: 4</h1><p>— !!data #binary<br>000402c0                                               12                 ·<br>000402d0 78 56 34 00 00 90 99 00  90 99 00 00 0B 48 65 6C xV4····· ·····Hel<br>000402e0 6C 6F 20 57 6F 72 6C 64 </p>
<h2 id="Finding-the-index-at-the-end-of-a-Chronicle-Queue"><a href="#Finding-the-index-at-the-end-of-a-Chronicle-Queue" class="headerlink" title="Finding the index at the end of a Chronicle Queue"></a>Finding the index at the end of a Chronicle Queue</h2><p>Chronicle Queue appenders are thread-local. In fact when you ask for:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> ExcerptAppender appender = queue.acquireAppender();</span><br></pre></td></tr></table></figure>

<p>the acquireAppender() uses a thread-local pool to give you an appender which will be reused to reduce object creation.</p>
<p>As such, the method call to:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> index = appender.lastIndexAppended();</span><br></pre></td></tr></table></figure>

<p>will only give you the last index appended by this appender; not the last index appended by any appender.</p>
<p>If you wish to find the index of the last record written, then you have to call:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> index = queue.createTailer().toEnd().index();</span><br></pre></td></tr></table></figure>

<h2 id="Dumping-a-Chronicle-Queue-cq4-file-as-text-to-the-Command-Line"><a href="#Dumping-a-Chronicle-Queue-cq4-file-as-text-to-the-Command-Line" class="headerlink" title="Dumping a Chronicle Queue, cq4 file as text to the Command Line"></a>Dumping a Chronicle Queue, cq4 file as text to the Command Line</h2><p>Chronicle Queue stores its data in binary format, with a file extension of cq4:</p>
<p>\��@π�header∂�SCQStoreÇE���»wireType∂�WireTypeÊBINARYÕwritePositionèèèèß��������ƒroll∂�SCQSRollÇ*���∆length¶ÄÓ6�∆format<br>ÎyyyyMMdd-HH≈epoch¶ÄÓ6�»indexing∂SCQSIndexingÇN��� indexCount•��ÃindexSpacing�Àindex2Indexé����ß��������…lastIndexé�<br>���ß��������ﬂlastAcknowledgedIndexReplicatedé������ßˇˇˇˇˇˇˇˇ»recovery∂�TimedStoreRecoveryÇ����…timeStampèèèß����������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������<br>This can often be a bit difficult to read, so it is better to dump the cq4 files as text. This can also help you fix your production issues, as it gives you the visibility as to what has been stored in the queue, and in what order.</p>
<p>You have to use the chronicle-queue.jar, from any version 4.5.3 or later, and set up the dependent files in the class path. </p>
<p>$ java -cp chronicle-queue-4.5.5.jar net.openhft.chronicle.queue.DumpQueueMain 19700101-02.cq4</p>
<p>this will dump the 19700101-02.cq4 file out as text, as shown below:</p>
<p>— !!meta-data #binary<br>header: !SCQStore {<br>  wireType: !WireType BINARY,<br>  writePosition: 0,<br>  roll: !SCQSRoll {<br>    length: !int 3600000,<br>    format: yyyyMMdd-HH,<br>    epoch: !int 3600000<br>  },<br>  indexing: !SCQSIndexing {<br>    indexCount: !short 4096,<br>    indexSpacing: 4,<br>    index2Index: 0,<br>    lastIndex: 0<br>  },<br>  lastAcknowledgedIndexReplicated: -1,<br>  recovery: !TimedStoreRecovery {<br>    timeStamp: 0<br>  }<br>}</p>
<p>…<br>4198044 bytes remaining</p>
<h2 id="Reading-from-a-Queue-using-a-Tailer"><a href="#Reading-from-a-Queue-using-a-Tailer" class="headerlink" title="Reading from a Queue using a Tailer"></a>Reading from a Queue using a Tailer</h2><p>Reading the queue follows the same pattern as writing, except there is a possibility there is not a message when you attempt to read it.</p>
<p>Start Reading</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (ChronicleQueue queue = SingleChronicleQueueBuilder.binary(path + <span class="string">"/trades"</span>).build()) &#123;</span><br><span class="line">   <span class="keyword">final</span> ExcerptTailer tailer = queue.createTailer();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>You can turn each message into a method call based on the content of the message.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// reading using method calls</span></span><br><span class="line">RiskMonitor monitor = System.out::println;</span><br><span class="line">MethodReader reader = tailer.methodReader(monitor);</span><br><span class="line"><span class="comment">// read one message</span></span><br><span class="line">assertTrue(reader.readOne());</span><br></pre></td></tr></table></figure>

<p>You can decode the message yourself.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">assertTrue(tailer.readDocument(w -&gt; w.read(<span class="string">"trade"</span>).marshallable(</span><br><span class="line">        m -&gt; &#123;</span><br><span class="line">            LocalDateTime timestamp = m.read(<span class="string">"timestamp"</span>).dateTime();</span><br><span class="line">            String symbol = m.read(<span class="string">"symbol"</span>).text();</span><br><span class="line">            <span class="keyword">double</span> price = m.read(<span class="string">"price"</span>).float64();</span><br><span class="line">            <span class="keyword">double</span> quantity = m.read(<span class="string">"quantity"</span>).float64();</span><br><span class="line">            Side side = m.read(<span class="string">"side"</span>).object(Side.class);</span><br><span class="line">            String trader = m.read(<span class="string">"trader"</span>).text();</span><br><span class="line">            <span class="comment">// do something with values.</span></span><br><span class="line">        &#125;)));</span><br></pre></td></tr></table></figure>

<p>You can read self-describing data values. This will check the types are correct, and convert as required.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">assertTrue(tailer.readDocument(w -&gt; &#123;</span><br><span class="line">    ValueIn in = w.getValueIn();</span><br><span class="line">    <span class="keyword">int</span> num = in.int32();</span><br><span class="line">    <span class="keyword">long</span> num2 = in.int64();</span><br><span class="line">    String text = in.text();</span><br><span class="line">    <span class="comment">// do something with values</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>

<p>You can read raw data as primitives and strings.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">assertTrue(tailer.readBytes(in -&gt; &#123;</span><br><span class="line">    <span class="keyword">int</span> code = in.readByte();</span><br><span class="line">    <span class="keyword">int</span> num = in.readInt();</span><br><span class="line">    <span class="keyword">long</span> num2 = in.readLong();</span><br><span class="line">    String text = in.readUtf8();</span><br><span class="line">    assertEquals(<span class="string">"Hello World"</span>, text);</span><br><span class="line">    <span class="comment">// do something with values</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>

<p>or, you can get the underlying memory address and access the native memory.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">assertTrue(tailer.readBytes(b -&gt; &#123;</span><br><span class="line">    <span class="keyword">long</span> address = b.address(b.readPosition());</span><br><span class="line">    Unsafe unsafe = UnsafeMemory.UNSAFE;</span><br><span class="line">    <span class="keyword">int</span> code = unsafe.getByte(address);</span><br><span class="line">    address++;</span><br><span class="line">    <span class="keyword">int</span> num = unsafe.getInt(address);</span><br><span class="line">    address += <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">long</span> num2 = unsafe.getLong(address);</span><br><span class="line">    address += <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">int</span> length = unsafe.getByte(address);</span><br><span class="line">    address++;</span><br><span class="line">    <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[length];</span><br><span class="line">    unsafe.copyMemory(<span class="keyword">null</span>, address, bytes, Unsafe.ARRAY_BYTE_BASE_OFFSET, bytes.length);</span><br><span class="line">    String text = <span class="keyword">new</span> String(bytes, StandardCharsets.UTF_8);</span><br><span class="line">    assertEquals(<span class="string">"Hello World"</span>, text);</span><br><span class="line">    <span class="comment">// do something with values</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>

<h3 id="Tailers-and-File-Handlers-Clean-up"><a href="#Tailers-and-File-Handlers-Clean-up" class="headerlink" title="Tailers and File Handlers Clean up"></a>Tailers and File Handlers Clean up</h3><p>Chronicle queue tailers may create file handlers, the file handlers are cleaned up whenever the associated chronicle queue is close() or whenever the Jvm runs a Garbage Collection. </p>
<h3 id="ExcerptTailer-toEnd"><a href="#ExcerptTailer-toEnd" class="headerlink" title="ExcerptTailer.toEnd()"></a>ExcerptTailer.toEnd()</h3><p>In some applications, it may be necessary to start reading from the end of the queue (e.g. in a restart scenario). For this use-case, ExcerptTailer provides the toEnd() method.</p>
<p>If it is necessary to read backwards through the queue from the end, then the tailer can be set to read backwards:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ExcerptTailer tailer = queue.createTailer();</span><br><span class="line">tailer.direction(TailerDirection.BACKWARD).toEnd();</span><br></pre></td></tr></table></figure>

<p>When reading backwards, then the toEnd() method will move the tailer to the last record in the queue. If the queue is not empty, then there will be a DocumentContext available for reading:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// this will be true if there is at least one message in the queue</span></span><br><span class="line"><span class="keyword">boolean</span> messageAvailable = tailer.toEnd().direction(TailerDirection.BACKWARD).</span><br><span class="line">        readingDocument().isPresent();</span><br></pre></td></tr></table></figure>

<h1 id="Low-GC"><a href="#Low-GC" class="headerlink" title="Low GC"></a>Low GC</h1><p>Ultra low GC means less than one minor collection per day.</p>
<p>the principles of Zero-copy eliminating unnecessary garbage collection and increased speed. Runtime code generation that reduces code size for efficient CPU cache usage and increased speed. Smart ordering for optimal parsing and you guessed it increased speed. All these combine to allow Chronicle FIX to achieve excellent performance results.</p>
<h1 id="Low-garbage-rate"><a href="#Low-garbage-rate" class="headerlink" title="Low garbage rate"></a>Low garbage rate</h1><p>Minimising garbage is key to avoiding GC pauses. To use your L1 and L2 cache efficiently, you need to keep your garbage rates very low.  If you are not using these cache efficiently your application can be 2-5x slower. </p>
<p>The garbage from Chronicle is low enough that you can process one million events without jstat detecting you have created any garbage.  jstat only displays multiples of 4 KB, and only when a new TLAB is allocated.  Chronicle does create garbage, but it is extremely low. i.e. a few objects per million events processes.</p>
<p>Once you make the GC pauses manageable, or non-existent, you start to see other sources of delay in your system.   Take away the boulders and you start to see the rocks.  Take away the rocks and you start to see the pebbles.</p>
<h1 id="Chronicle-has-minimal-interaction-with-the-Operating-System"><a href="#Chronicle-has-minimal-interaction-with-the-Operating-System" class="headerlink" title="Chronicle has minimal interaction with the Operating System."></a>Chronicle has minimal interaction with the Operating System.</h1><p>System calls are slow, and if you can avoid call the OS, you can save significant amounts of latency. </p>
<p>For example, if you send a message over TCP on loopback, this can add a 10 micro-seconds latency between writing and reading the data.  You can write to a chronicle, which is a plain write to memory, and read from chronicle, which is also a read from memory with a latency of 0.2 micro-seconds. (And as I mentioned before, you get persistence as well)</p>
<h1 id="No-need-to-worry-about-running-out-of-heap"><a href="#No-need-to-worry-about-running-out-of-heap" class="headerlink" title="No need to worry about running out of heap."></a>No need to worry about running out of heap.</h1><p>A common problem with unbounded queues and this uses an open ended amount of heap.  </p>
<p>Chronicle solves this by not using the heap to store data, but instead using memory mapped files.  This improve memory utilisation by making the data more compact but also means a 1 GB JVM can stream 1 TB of data over a day without worrying about the heap or how much main memory you have.  In this case, an unbounded queue becomes easier to manage.</p>
<h1 id="how-it-works"><a href="#how-it-works" class="headerlink" title="how it works"></a>how it works</h1><p>Chronicle uses a memory mapped file to continuously journal messages, chronicles file-based storage will slowly grow in size as more data is written to the queue, the size of the queue can exceed your available memory, you are only constrained by the amount of disk space you have on your server. Chronicle writes data directly into off-heap memory which is shared between java processes on the same server.</p>
<p>Chronicle is very fast, it is able to write and read a message in just two microseconds with no garbage. Typically at the end of each day, you archive the queue and start the next day with a fresh empty queue.</p>
<h1 id="Chronicle-Queue-is-a-distributed-unbounded-persisted-queue"><a href="#Chronicle-Queue-is-a-distributed-unbounded-persisted-queue" class="headerlink" title="Chronicle Queue is a distributed unbounded persisted queue."></a>Chronicle Queue is a distributed unbounded persisted queue.</h1><p>Chronicle Queue:</p>
<p>supports asynchronous RMI and Publish/Subscribe interfaces with microsecond latencies.</p>
<p>passes messages between JVMs in under a microsecond (in optimised examples)</p>
<p>passes messages between JVMs on different machines via replication in under 10 microseconds (in optimised examples)</p>
<p>provides stable, soft, real time latencies into the millions of messages per second for a single thread to one queue; with total ordering of every event.</p>
<h2 id="Queue-introduction"><a href="#Queue-introduction" class="headerlink" title="Queue introduction"></a>Queue introduction</h2><p>Chronicle Queue is a Java project focused on building a persisted low-latency messaging framework for high performance and critical applications.</p>
<p>Chronicle diagram 005<br>At first glance Chronicle Queue can be seen as simply another queue implementation. However, it has major design choices that should be emphasised.</p>
<p>Using non-heap storage options (RandomAccessFile), Chronicle Queue provides a processing environment where applications do not suffer from Garbage Collection (GC). When implementing high-performance and memory-intensive applications (you heard the fancy term “bigdata”?) in Java, one of the biggest problems is garbage collection.</p>
<p>Garbage collection may slow down your critical operations non-deterministically at any time. In order to avoid non-determinism, and escape from garbage collection delays, off-heap memory solutions are ideal. The main idea is to manage your memory manually so it does not suffer from garbage collection. Chronicle Queue behaves like a management interface over off-heap memory so you can build your own solutions over it.</p>
<p>Chronicle Queue uses RandomAccessFiles while managing memory and this choice brings lots of possibilities. RandomAccessFiles permit non-sequential, or random, access to a file’s contents. To access a file randomly, you open the file, seek a particular location, and read from or write to that file. RandomAccessFiles can be seen as “large” C-type byte arrays that you can access at any random index “directly” using pointers. File portions can be used as ByteBuffers if the portion is mapped into memory.</p>
<p>This memory mapped file is also used for exceptionally fast interprocess communication (IPC) without affecting your system performance. There is no garbage collection as everything is done off-heap.</p>
<h2 id="Message-type"><a href="#Message-type" class="headerlink" title="Message type"></a>Message type</h2><ul>
<li>TCP: Stream-oriented </li>
<li>UDP, SCTP: message-oriented .</li>
</ul>
<h2 id="On-heap-vs-off-heap-memory-usage"><a href="#On-heap-vs-off-heap-memory-usage" class="headerlink" title="On heap vs off heap memory usage"></a>On heap vs off heap memory usage</h2><p>Overview</p>
<p>I was recently asked about the benefits and wisdom of using off heap memory in Java.  The answers may be of interest to others facing the same choices.</p>
<p>Off heap memory is nothing special.  The thread stacks, application code, NIO buffers are all off heap.  In fact in C and C++, you only have unmanaged memory as it does not have a managed heap by default.  The use of managed memory or “heap” in Java is a special feature of the language. Note: Java is not the only language to do this.<br>new Object() vs Object pool vs Off Heap memory.</p>
<p>new Object()</p>
<p>Before Java 5.0, using object pools was very popular.  Creating objects was still very expensive.   However, from Java 5.0, object allocation and garbage cleanup was made much cheaper, and developers found they got a performance speed up and a simplification of their code by removing object pools and just creating new objects whenever needed.  Before Java 5.0, almost any object pool, even an object pool which used objects provided an improvement, from Java 5.0 pooling only expensive objects obviously made sense e.g. threads, socket and database connections.</p>
<p>Object pools</p>
<p>In the low latency space it was still apparent that recycling mutable objects improved performance by reduced pressure on your CPU caches.  These objects have to have simple life cycles and have a simple structure, but you could see significant improvements in performance and jitter by using them.<br>Another area where it made sense to use object pools is when loading large amounts of data with many duplicate objects. With a significant reduction in memory usage and a reduction in the number of objects the GC had to manage, you saw a reduction in GC times and an increase in throughput.<br>These object pools were designed to be more light weight than say using a synchronized HashMap, and so they still helped.</p>
<p>Take this StringInterner class as an example. You pass it a recycled mutable StringBuilder of the text you want as a String and it will provide a String which matches.  Passing a String would be inefficient as you would have already created the object.  The StringBuilder can be recycled.<br>Note: this structure has an interesting property that requires no additional thread safety features, like volatile or synchronized, other than is provided by the minimum Java guarantees. i.e. you can see the final fields in a String correctly and only read consistent references.</p>
<p>public class StringInterner {<br>    private final String[] interner;<br>    private final int mask;<br>    public StringInterner(int capacity) {<br>        int n = Maths.nextPower2(capacity, 128);<br>        interner = new String[n];<br>        mask = n - 1;<br>    }</p>
<pre><code>private static boolean isEqual(@Nullable CharSequence s, @NotNull CharSequence cs) {
    if (s == null) return false;
    if (s.length() != cs.length()) return false;
    for (int i = 0; i &lt; cs.length(); i++)
        if (s.charAt(i) != cs.charAt(i))
            return false;
    return true;
}

@NotNull
public String intern(@NotNull CharSequence cs) {
    long hash = 0;
    for (int i = 0; i &lt; cs.length(); i++)
        hash = 57 * hash + cs.charAt(i);
    int h = (int) Maths.hash(hash) &amp; mask;
    String s = interner[h];
    if (isEqual(s, cs))
        return s;
    String s2 = cs.toString();
    return interner[h] = s2;
}</code></pre><p>}
Off heap memory usage</p>
<p>Using off heap memory and using object pools both help reduce GC pauses, this is their only similarity.  Object pools are good for short lived mutable objects, expensive to create objects and long live immutable objects where there is a lot of duplication.  Medium lived mutable objects, or complex objects are more likely to be better left to the GC to handle.  However, medium to long lived mutable objects suffer in a number of ways which off heap memory solves.</p>
<p>Off heap memory provides;</p>
<p>Scalability to large memory sizes e.g. over 1 TB and larger than main memory.<br>Notional impact on GC pause times.<br>Sharing between processes, reducing duplication between JVMs, and making it easier to split JVMs.<br>Persistence for faster restarts or replying of production data in test.<br>The use of off heap memory gives you more options in terms of how you design your system.  The most important improvement is not performance, but determinism.</p>
<p>Off heap and testing</p>
<p>One of the biggest challenges in high performance computing is reproducing obscure bugs and being able to prove you have fixed them.  By storing all your input events and data off heap in a persisted way you can turn your critical systems into a series of complex state machines. (Or in simple cases, just one state machine) In this way you get reproducible behaviour and performance between test and production.</p>
<p>A number of investment banks use this technique to replay a system reliably to any event in the day and work out exactly why that event was processed the way it was.  More importantly, once you have a fix you can show that you have fixed the issue which occurred in production, instead of finding an issue and hoping this was the issue.</p>
<p>Along with deterministic behaviour comes deterministic performance.  In test environments, you can replay the events with realistic timings and show the latency distribution you expect to get in production.  Some system jitter can’t be reproduce esp if the hardware is not the same, but you can get pretty close when you take a statistical view.  To avoid taking a day to replay a day of data you can add a threshold. e.g. if the time between events is more than 10 ms you might only wait 10 ms.  This can allow you to replay a day of events with realistic timing in under an hour and see whether your changes have improved your latency distribution or not.</p>
<p>By going more low level don’t you lose some of “compile once, run anywhere”?</p>
<p>To some degree this is true, but it is far less than you might think.  When you are working closer the processor and so you are more dependant on how the processor, or OS behaves.  Fortunately, most systems use AMD/Intel processors and even ARM processors are becoming more compatible in terms of the low level guarantees they provide.  There is also differences in the OSes, and these techniques tend to work better on Linux than Windows.  However, if you develop on MacOSX or Windows and use Linux for production, you shouldn’t have any issues.  This is what we do at Higher Frequency Trading.</p>
<p>What new problems are we creating by using off heap?</p>
<p>Nothing comes for free, and this is the case with off heap.  The biggest issue with off heap is your data structures become less natural.  You either need a simple data structure which can be mapped directly to off heap, or you have a complex data structure which serializes and deserializes to put it off heap.  Obvious using serialization has its own headaches and performance hit.  Using serialization thus much slower than on heap objects.</p>
<p>In the financial world, most high ticking data structure are flat and simple, full of primitives which maps nicely off heap with little overhead.</p>
<h1 id="How-does-Chronicle-Queue-work"><a href="#How-does-Chronicle-Queue-work" class="headerlink" title="How does Chronicle Queue work"></a>How does Chronicle Queue work</h1><h2 id="Terminology"><a href="#Terminology" class="headerlink" title="Terminology"></a>Terminology</h2><ul>
<li>Messages are grouped by topics. A topic can contain any number of sub-topics which are logically stored together under the queue/topic.</li>
<li>An appender is the source of messages.</li>
<li>A tailer is a receiver of messages.</li>
<li>Chronicle Queue is <code>broker-less</code> by default. You can use Chronicle Engine to act as a broker for remote access.</li>
</ul>
<blockquote>
<p>Note<br>We deliberately avoid the term consumer as messages are not consumed/destroyed by reading.</p>
</blockquote>
<h2 id="At-a-high-level"><a href="#At-a-high-level" class="headerlink" title="At a high level:"></a>At a high level:</h2><ul>
<li><p>appenders write to the end of a queue. There is no way to insert, or delete excerpts.</p>
</li>
<li><p>tailers read the next available message each time they are called.</p>
</li>
</ul>
<p>By using Chronicle Engine, a Java or C# client can publish to a queue to act as a remote appender, and you subscribe to a queue to act as a remote tailer.</p>
<h2 id="Topics-and-Queue-files"><a href="#Topics-and-Queue-files" class="headerlink" title="Topics and Queue files"></a>Topics and Queue files</h2><p>Each topic is a directory of queues. There is a file for each roll cycle. If you have a topic called mytopic, the layout could look like this:</p>
<p>mytopic/<br>    20160710.cq4<br>    20160711.cq4<br>    20160712.cq4<br>    20160713.cq4<br>To copy all the data for a single day (or cycle), you can copy the file for that day on to your development machine for replay testing.</p>
<p>Appenders and tailers are cheap as they don’t even require a TCP connection; they are just a few Java objects.</p>
<h2 id="File-Retention"><a href="#File-Retention" class="headerlink" title="File Retention"></a>File Retention</h2><p>You can add a StoreFileListener to notify you when a file is added, or no longer used. This can be used to delete files after a period of time. However, by default, files are retained forever. Our largest users have over 100 TB of data stored in queues.</p>
<h2 id="Every-Tailer-sees-every-message"><a href="#Every-Tailer-sees-every-message" class="headerlink" title="Every Tailer sees every message."></a>Every Tailer sees every message.</h2><p>An abstraction can be added to filter messages, or assign messages to just one message processor. However, in general you only need one main tailer for a topic, with possibly, some supporting tailers for monitoring etc.</p>
<p>As Chronicle Queue doesn’t partition its topics, you get total ordering of all messages within that topic. Across topics, there is no guarantee of ordering; if you want to replay deterministically from a system which consumes from multiple topics, we suggest replaying from that system’s output.</p>
<h1 id="Guarantees"><a href="#Guarantees" class="headerlink" title="Guarantees"></a>Guarantees</h1><p>Chronicle Queue provides the following guarantees;</p>
<p>for each appender, messages are written in the order the appender wrote them. Messages by different appenders are interleaved,</p>
<p>for each tailer, it will see every message for a topic in the same order as every other tailer,</p>
<p>when replicated, every replica has a copy of every message.</p>
<h1 id="Use-Cases"><a href="#Use-Cases" class="headerlink" title="Use Cases"></a>Use Cases</h1><p>Chronicle Queue is most often used for producer-centric systems where you need to retain a lot of data for days or years.</p>
<h2 id="What-is-a-producer-centric-system"><a href="#What-is-a-producer-centric-system" class="headerlink" title="What is a producer-centric system?"></a>What is a producer-centric system?</h2><p>Most messaging systems are consumer-centric. Flow control is implemented to avoid the consumer ever getting overloaded; even momentarily. A common example is a server supporting multiple GUI users. Those users might be on different machines (OS and hardware), different qualities of network (latency and bandwidth), doing a variety of other things at different times. For this reason it makes sense for the client consumer to tell the producer when to back off, delaying any data until the consumer is ready to take more data.</p>
<p>Chronicle Queue is a producer-centric solution and does everything possible to never push back on the producer, or tell it to slow down. This makes it a powerful tool, providing a big buffer between your system, and an upstream producer over which you have little, or no, control.</p>
<p>For market data in particular, real time means in a few microseconds; it doesn’t mean intra-day (during the day).</p>
<p>Chronicle Queue is fast and efficient, and has been used to increase the speed that data is passed between threads. In addition, it also keeps a record of every message passed allowing you to significantly reduce the amount of logging that you need to do.</p>
<h2 id="Latency-Sensitive-Micro-services"><a href="#Latency-Sensitive-Micro-services" class="headerlink" title="Latency Sensitive Micro-services"></a>Latency Sensitive Micro-services</h2><p>Chronicle Queue supports low latency IPC (Inter Process Communication) between JVMs on the same machine in the order of magnitude of 1 microsecond; as well as between machines with a typical latency of 10 microseconds for modest throughputs of a few hundred thousands. Chronicle Queue supports throughputs of millions of events per second, with stable microsecond latencies.</p>
<h2 id="Log-Replacement"><a href="#Log-Replacement" class="headerlink" title="Log Replacement"></a>Log Replacement</h2><p>As Chronicle Queue can be used to build state machines. All the information about the state of those components can be reproduced externally, without direct access to the components, or to their state. This significantly reduces the need for additional logging.</p>
<p>However, any logging you do need can be recorded in great detail. This makes enabling DEBUG logging in production practical. This is because the cost of logging is very low; less than 10 microseconds. Logs can be replicated centrally for log consolidation.</p>
<p>Chronicle Queue is being used to store 100+ TB of data, which can be replayed from any point in time.</p>
<h1 id="Source-code"><a href="#Source-code" class="headerlink" title="Source code"></a>Source code</h1><h2 id="MappedFile"><a href="#MappedFile" class="headerlink" title="MappedFile"></a>MappedFile</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> net.openhft.chronicle.bytes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.openhft.chronicle.core.Jvm;</span><br><span class="line"><span class="keyword">import</span> net.openhft.chronicle.core.OS;</span><br><span class="line"><span class="keyword">import</span> net.openhft.chronicle.core.ReferenceCounted;</span><br><span class="line"><span class="keyword">import</span> net.openhft.chronicle.core.ReferenceCounter;</span><br><span class="line"><span class="keyword">import</span> net.openhft.chronicle.core.io.IORuntimeException;</span><br><span class="line"><span class="keyword">import</span> org.jetbrains.annotations.NotNull;</span><br><span class="line"><span class="keyword">import</span> org.jetbrains.annotations.Nullable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.RandomAccessFile;</span><br><span class="line"><span class="keyword">import</span> java.lang.ref.WeakReference;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.FileChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.FileChannel.MapMode;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.FileLock;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicBoolean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> net.openhft.chronicle.core.io.Closeable.closeQuietly;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A memory mapped files which can be randomly accessed in chunks. It has overlapping regions to</span></span><br><span class="line"><span class="comment"> * avoid wasting bytes at the end of chunks.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MappedFile</span> <span class="keyword">implements</span> <span class="title">ReferenceCounted</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> DEFAULT_CAPACITY = <span class="number">128L</span> &lt;&lt; <span class="number">40</span>;</span><br><span class="line">    <span class="comment">// A single JVM cannot lock a file more than once.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object GLOBAL_FILE_LOCK = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RandomAccessFile raf;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> FileChannel fileChannel;</span><br></pre></td></tr></table></figure>

<p>public interface BytesStore extends RandomDataInput, RandomDataOutput, ReferencedCount, CharSequence</p>
<p>public interface Memory {<br>    default long heapUsed() {<br>        Runtime runtime = Runtime.getRuntime();<br>        return runtime.totalMemory() - runtime.freeMemory();<br>    }</p>
<pre><code>@Override
@ForceInline
public void writeByte(long address, byte b) {
    UNSAFE.putByte(address, b);
}</code></pre><p>/**</p>
<ul>
<li>Marker annotation for some methods and constructors in the JSR 292 implementation.</li>
<li><p></p></li>
<li>To utilise this annotation se Chronicle Enterprise Warmup module.</li>
<li>/
@Target({ElementType.METHOD, ElementType.CONSTRUCTOR})<br>@Retention(RetentionPolicy.RUNTIME)<br>public @interface ForceInline {<br>}</li>
</ul>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://github.com/OpenHFT/Chronicle-Queue" target="_blank" rel="noopener">https://github.com/OpenHFT/Chronicle-Queue</a></li>
<li><a href="http://vanillajava.blogspot.com/2015/08/what-does-chronicle-software-do.html" target="_blank" rel="noopener">http://vanillajava.blogspot.com/2015/08/what-does-chronicle-software-do.html</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Sudo in a Nutshell</title>
    <url>/2018-08-21-sudo/</url>
    <content><![CDATA[<h1 id="Sudo-in-a-Nutshell"><a href="#Sudo-in-a-Nutshell" class="headerlink" title="Sudo in a Nutshell"></a>Sudo in a Nutshell</h1><p>Sudo (su “do”) allows a system administrator to give certain users (or groups of users) the ability to run some (or all) commands as root while logging all commands and arguments. Sudo operates on a per-command basis, it is not a replacement for the shell. Its features include:</p>
<p>The ability to restrict what commands a user may run on a per-host basis.<br>Sudo does copious logging of each command, providing a clear audit trail of who did what. When used in tandem with syslogd, the system log daemon, sudo can log all commands to a central host (as well as on the local host). At CU, all admins use sudo in lieu of a root shell to take advantage of this logging.<br>Sudo uses timestamp files to implement a “ticketing” system. When a user invokes sudo and enters their password, they are granted a ticket for 5 minutes (this timeout is configurable at compile-time). Each subsequent sudo command updates the ticket for another 5 minutes. This avoids the problem of leaving a root shell where others can physically get to your keyboard. There is also an easy way for a user to remove their ticket file, useful for placing in a .logout file.<br>Sudo’s configuration file, the sudoers file, is setup in such a way that the same sudoers file may be used on many machines. This allows for central administration while keeping the flexibility to define a user’s privileges on a per-host basis. Please see the samples sudoers file below for a real-world example.</p>
<h1 id="sudo-conf"><a href="#sudo-conf" class="headerlink" title="sudo.conf"></a>sudo.conf</h1><p>The sudo.conf file is used to configure the sudo front end. It specifies the security policy and I/O logging plugins, debug flags as well as plugin-agnostic path names and settings.</p>
<p>sudo supports a plugin architecture for security policies and input/output logging. Third parties can develop and distribute their own policy and I/O logging plugins to work seamlessly with the sudo front end. Plugins are dynamically loaded based on the contents of sudo.conf.<br>A Plugin line consists of the Plugin keyword, followed by the symbol_name and the path to the dynamic shared object that contains the plugin. The symbol_name is the name of the struct policy_plugin or struct io_plugin symbol contained in the plugin. The path may be fully qualified or relative. If not fully qualified, it is relative to the directory specified by the plugin_dir Path setting, which defaults to /usr/local/libexec/sudo. In other words:<br>Plugin sudoers_policy sudoers.so<br>is equivalent to:<br>Plugin sudoers_policy /usr/local/libexec/sudo/sudoers.so</p>
<h2 id="Configurations"><a href="#Configurations" class="headerlink" title="Configurations"></a>Configurations</h2><ul>
<li><p>sudoers_file=pathname<br>The sudoers_file argument can be used to override the default path to the sudoers file.</p>
</li>
<li><p>sudoers_uid=uid<br>The sudoers_uid argument can be used to override the default owner of the sudoers file. It should be specified as a numeric user ID.</p>
</li>
</ul>
<h1 id="email-notification"><a href="#email-notification" class="headerlink" title="email notification"></a>email notification</h1><p>If a user who is not listed in the policy tries to run a command via sudo, mail is sent to the proper authorities. The address used for such mail is configurable via the mailto Defaults entry (described later) and defaults to root.</p>
<p>Note that no mail will be sent if an unauthorized user tries to run sudo with the -l or -v option unless there is an authentication error and either the mail_always or mail_badpass flags are enabled. This allows users to determine for themselves whether or not they are allowed to use sudo. All attempts to run sudo (successful or not) will be logged, regardless of whether or not mail is sent.</p>
<p>sudoers uses per-user time stamp files for credential caching. Once a user has been authenticated, a record is written containing the user ID that was used to authenticate, the terminal session ID, the start time of the session leader (or parent process) and a time stamp (using a monotonic clock if one is available). The user may then use sudo without a password for a short period of time (5 minutes unless overridden by the timestamp_timeout option). By default, sudoers uses a separate record for each terminal, which means that a user’s login sessions are authenticated separately. The timestamp_type option can be used to select the type of time stamp record sudoers will use.</p>
<h1 id="File-format"><a href="#File-format" class="headerlink" title="File format"></a>File format</h1><p>The sudoers file is composed of two types of entries: aliases (basically variables) and user specifications (which specify who may run what).</p>
<p>When multiple entries match for a user, they are applied in order. Where there are multiple matches, the last match is used (which is not necessarily the most specific match).<br>The sudoers file grammar will be described below in Extended Backus-Naur Form (EBNF). Don’t despair if you are unfamiliar with EBNF; it is fairly simple, and the definitions below are annotated.</p>
<h1 id="environment"><a href="#environment" class="headerlink" title="environment"></a>environment</h1><p>By default, the env_reset option is enabled. This causes commands to be executed with a new, minimal environment.</p>
<p>Lists have two additional assignment operators, += and -=. These operators are used to add to and delete from a list respectively. It is not an error to use the -= operator to remove an element that does not exist in a list.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">35 Defaults    env_reset</span><br><span class="line">36 Defaults    env_keep += <span class="string">"BLOCKSIZE"</span></span><br><span class="line">37 Defaults    env_keep += <span class="string">"COLORFGBG COLORTERM"</span></span><br><span class="line">38 Defaults    env_keep += <span class="string">"__CF_USER_TEXT_ENCODING"</span></span><br><span class="line">39 Defaults    env_keep += <span class="string">"CHARSET LANG LANGUAGE LC_ALL LC_COLLATE LC_CTYPE"</span></span><br><span class="line">40 Defaults    env_keep += <span class="string">"LC_MESSAGES LC_MONETARY LC_NUMERIC LC_TIME"</span></span><br><span class="line">41 Defaults    env_keep += <span class="string">"LINES COLUMNS"</span></span><br><span class="line">42 Defaults    env_keep += <span class="string">"LSCOLORS"</span></span><br><span class="line">43 Defaults    env_keep += <span class="string">"SSH_AUTH_SOCK"</span></span><br><span class="line">44 Defaults    env_keep += <span class="string">"TZ"</span></span><br><span class="line">45 Defaults    env_keep += <span class="string">"DISPLAY XAUTHORIZATION XAUTHORITY"</span></span><br><span class="line">46 Defaults    env_keep += <span class="string">"EDITOR VISUAL"</span></span><br><span class="line">47 Defaults    env_keep += <span class="string">"HOME MAIL"</span></span><br><span class="line">48 </span><br><span class="line">49 Defaults    lecture_file = <span class="string">"/etc/sudo_lecture"</span></span><br></pre></td></tr></table></figure>

<h3 id="lecture"><a href="#lecture" class="headerlink" title="lecture"></a>lecture</h3><h4 id="lecture-1"><a href="#lecture-1" class="headerlink" title="lecture"></a>lecture</h4><p>This option controls when a short lecture will be printed along with the password prompt. It has the following possible values:</p>
<ul>
<li>always<br>Always lecture the user.</li>
<li>never<br>Never lecture the user.</li>
<li>once<br>Only lecture the user the first time they run sudo.<br>If no value is specified, a value of once is implied. Negating the option results in a value of never being used. The default value is once.<h4 id="lecture-file"><a href="#lecture-file" class="headerlink" title="lecture_file"></a>lecture_file</h4>Path to a file containing an alternate sudo lecture that will be used in place of the standard lecture if the named file exists. By default, sudo uses a built-in lecture.  </li>
</ul>
<h1 id="Everything-is-file"><a href="#Everything-is-file" class="headerlink" title="Everything is file"></a>Everything is file</h1><p>A fundamental and very powerful, consistent abstraction provided in UNIX and compatible operating systems is the file abstraction. Many OS services and device interfaces are implemented to provide a file or file system metaphor to applications.</p>
<h1 id="manage-user-group"><a href="#manage-user-group" class="headerlink" title="manage user group"></a>manage user group</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Alternatively, gpasswd may be used. Though the username can only be added (or removed) from one group at a time:</span></span><br><span class="line">gpasswd --add username group</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add users to a group with the gpasswd command:</span></span><br><span class="line">gpasswd -a user group</span><br><span class="line"></span><br><span class="line"><span class="comment">#To remove users from a group:</span></span><br><span class="line">gpasswd -d user group</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gpasswd - administer the /etc/group file</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">EXAMPLES</span><br><span class="line">1. Add user (tracy) to the group (hrd)</span><br><span class="line">$ gpasswd -a tracy hrd</span><br><span class="line">2. Add multiper users to the group (developer)</span><br><span class="line">$ gpasswd -a pavan,john developer</span><br><span class="line">3. Remove user (rakesh) from group (sqa)</span><br><span class="line">$ gpasswd -d rakesh sqa</span><br><span class="line">4. Remove multiple users from group (managers)</span><br><span class="line">$ gpasswd -d shane,ron,ram managers</span><br><span class="line">5. Set user (joy) and group administrator <span class="keyword">for</span> (managers)</span><br><span class="line">$ gpasswd -A joy managers</span><br></pre></td></tr></table></figure>

<h3 id="to-show-user-details"><a href="#to-show-user-details" class="headerlink" title="to show user details"></a>to show user details</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">id todzhang</span><br></pre></td></tr></table></figure>

<h3 id="Display-group-membership-with-the-groups-command"><a href="#Display-group-membership-with-the-groups-command" class="headerlink" title="Display group membership with the groups command:"></a>Display group membership with the groups command:</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ groups user</span><br></pre></td></tr></table></figure>

<h3 id="To-change-the-user’s-login-shell"><a href="#To-change-the-user’s-login-shell" class="headerlink" title="To change the user’s login shell:"></a>To change the user’s login shell:</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># usermod -s /bin/bash username</span></span><br></pre></td></tr></table></figure>

<h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><ul>
<li><a href="https://www.sudo.ws/man/sudo.conf.man.html" target="_blank" rel="noopener">https://www.sudo.ws/man/sudo.conf.man.html</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Protobuf</title>
    <url>/2018-08-23-protobuf/</url>
    <content><![CDATA[<h1 id="What-are-protocol-buffers"><a href="#What-are-protocol-buffers" class="headerlink" title="What are protocol buffers?"></a>What are protocol buffers?</h1><p>Protocol buffers are a flexible, efficient, automated mechanism for serializing structured data – think XML, but smaller, faster, and simpler.</p>
<p>You define how you want your data to be structured once, then you can use special generated source code to easily write and read your structured data to and from a variety of data streams and using a variety of languages. You can even update your data structure without breaking deployed programs that are compiled against the “old” format.</p>
<h1 id="How-do-they-work"><a href="#How-do-they-work" class="headerlink" title="How do they work?"></a>How do they work?</h1><p>You specify how you want the information you’re serializing to be structured by defining protocol buffer message types in .proto files. Each protocol buffer message is a small logical record of information, containing a series of name-value pairs. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">message Person &#123;</span><br><span class="line">  required string name = <span class="number">1</span>;</span><br><span class="line">  required int32 id = <span class="number">2</span>;</span><br><span class="line">  optional string email = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">enum</span> PhoneType &#123;</span><br><span class="line">    MOBILE = <span class="number">0</span>;</span><br><span class="line">    HOME = <span class="number">1</span>;</span><br><span class="line">    WORK = <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  message PhoneNumber &#123;</span><br><span class="line">    required string number = <span class="number">1</span>;</span><br><span class="line">    optional PhoneType type = <span class="number">2</span> [<span class="keyword">default</span> = HOME];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  repeated PhoneNumber phone = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>As you can see, the message format is simple – each message type has one or more uniquely numbered fields, and each field has a name and a value type, where value types can be numbers (integer or floating-point), booleans, strings, raw bytes, or even (as in the example above) other protocol buffer message types, allowing you to structure your data hierarchically. You can specify optional fields, required fields, and repeated fields. </p>
<h1 id="Why-not-just-use-XML"><a href="#Why-not-just-use-XML" class="headerlink" title="Why not just use XML?"></a>Why not just use XML?</h1><p>Protocol buffers have many advantages over XML for serializing structured data. Protocol buffers:</p>
<ul>
<li>are simpler</li>
<li>are 3 to 10 times smaller</li>
<li>are 20 to 100 times faster</li>
<li>are less ambiguous</li>
<li>generate data access classes that are easier to use programmatically</li>
</ul>
<h1 id="Assigning-Field-Numbers"><a href="#Assigning-Field-Numbers" class="headerlink" title="Assigning Field Numbers"></a>Assigning Field Numbers</h1><p>As you can see, each field in the message definition has a unique number. These numbers are used to identify your fields in the message binary format, and should not be changed once your message type is in use. Note that field numbers in the range 1 through 15 take one byte to encode, including the field number and the field’s type (you can find out more about this in Protocol Buffer Encoding). Field numbers in the range 16 through 2047 take two bytes. So you should reserve the field numbers 1 through 15 for very frequently occurring message elements. Remember to leave some room for frequently occurring elements that might be added in the future.</p>
<h1 id="Field-Rules"><a href="#Field-Rules" class="headerlink" title="Field Rules"></a>Field Rules</h1><p>You specify that message fields are one of the following:</p>
<ul>
<li>required: a well-formed message must have exactly one of this field.</li>
<li>optional: a well-formed message can have zero or one of this field (but not more than one).</li>
<li>repeated: this field can be repeated any number of times (including zero) in a well-formed message. The order of the repeated values will be preserved.</li>
</ul>
<blockquote>
<p>Some engineers at Google have come to the conclusion that using required does more harm than good; they prefer to use only optional and repeated. However, this view is not universal.</p>
</blockquote>
<p>Combining Messages leads to bloat While multiple message types (such as message, enum, and service) can be defined in a single .proto file, it can also lead to dependency bloat when large numbers of messages with varying dependencies are defined in a single file. It’s recommended to include as few message types per .proto file as possible.</p>
<h1 id="Reserved-fields"><a href="#Reserved-fields" class="headerlink" title="Reserved fields"></a>Reserved fields</h1><p>to make sure this doesn’t happen is to specify that the field numbers (and/or names, which can also cause issues for JSON serialization) of your deleted fields are reserved. The protocol buffer compiler will complain if any future users try to use these field identifiers.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">message Foo &#123;</span><br><span class="line">  reserved <span class="number">2</span>, <span class="number">15</span>, <span class="number">9</span> to <span class="number">11</span>;</span><br><span class="line">  reserved <span class="string">"foo"</span>, <span class="string">"bar"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Note that you can’t mix field names and field numbers in the same reserved statement.</p>
<h1 id="Optional-fields-and-default"><a href="#Optional-fields-and-default" class="headerlink" title="Optional fields and default"></a>Optional fields and default</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">optional int32 result_per_page = <span class="number">3</span> [<span class="keyword">default</span> = <span class="number">10</span>];</span><br></pre></td></tr></table></figure>

<h1 id="Importing-Definitions"><a href="#Importing-Definitions" class="headerlink" title="Importing Definitions"></a>Importing Definitions</h1><p>You can use definitions from other .proto files by importing them. To import another .proto’s definitions, you add an import statement to the top of your file:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"myproject/other_protos.proto"</span>;</span><br></pre></td></tr></table></figure>

<h1 id="To-generate-class"><a href="#To-generate-class" class="headerlink" title="To generate class"></a>To generate class</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">../protoc-3/bin/protoc --java_out=./  ticket.proto</span><br></pre></td></tr></table></figure>

<h1 id="Builders-vs-Messages"><a href="#Builders-vs-Messages" class="headerlink" title="Builders vs. Messages"></a>Builders vs. Messages</h1><p>The message classes generated by the protocol buffer compiler are all immutable. Once a message object is constructed, it cannot be modified, just like a Java String. To construct a message, you must first construct a builder, set any fields you want to set to your chosen values, then call the builder’s build() method.</p>
<p>You may have noticed that each method of the builder which modifies the message returns another builder. The returned object is actually the same builder on which you called the method. It is returned for convenience so that you can string several setters together on a single line of code.</p>
<p>Here’s an example of how you would create an instance of Person:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person john =</span><br><span class="line">  Person.newBuilder()</span><br><span class="line">    .setId(<span class="number">1234</span>)</span><br><span class="line">    .setName(<span class="string">"John Doe"</span>)</span><br><span class="line">    .setEmail(<span class="string">"jdoe@example.com"</span>)</span><br><span class="line">    .addPhones(</span><br><span class="line">      Person.PhoneNumber.newBuilder()</span><br><span class="line">        .setNumber(<span class="string">"555-4321"</span>)</span><br><span class="line">        .setType(Person.PhoneType.HOME))</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure>

<h1 id="Parsing-and-Serialization"><a href="#Parsing-and-Serialization" class="headerlink" title="Parsing and Serialization"></a>Parsing and Serialization</h1><p>Finally, each protocol buffer class has methods for writing and reading messages of your chosen type using the protocol buffer binary format. These include:</p>
<ul>
<li>byte[] toByteArray();: serializes the message and returns a byte array containing its raw bytes.</li>
<li>static Person parseFrom(byte[] data);: parses a message from the given byte array.</li>
<li>void writeTo(OutputStream output);: serializes the message and writes it to an OutputStream.</li>
<li>pstatic Person parseFrom(InputStream input);: reads and parses a message from an InputStream.</li>
</ul>
<h1 id="Write-a-message"><a href="#Write-a-message" class="headerlink" title="Write a message"></a>Write a message</h1><p>// Write the new address book back to disk.<br>    FileOutputStream output = new FileOutputStream(args[0]);<br>    addressBook.build().writeTo(output);</p>
<h1 id="Reading-A-Message"><a href="#Reading-A-Message" class="headerlink" title="Reading A Message"></a>Reading A Message</h1><p>Use message’s parseFrom method on stream:<br>      AddressBook.parseFrom(new FileInputStream(args[0]));</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.tutorial.AddressBookProtos.AddressBook;</span><br><span class="line"><span class="keyword">import</span> com.example.tutorial.AddressBookProtos.Person;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListPeople</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Iterates though all people in the AddressBook and prints info about them.</span></span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Print</span><span class="params">(AddressBook addressBook)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Person person: addressBook.getPeopleList()) &#123;</span><br><span class="line">      System.out.println(<span class="string">"Person ID: "</span> + person.getId());</span><br><span class="line">      System.out.println(<span class="string">"  Name: "</span> + person.getName());</span><br><span class="line">      <span class="keyword">if</span> (person.hasEmail()) &#123;</span><br><span class="line">        System.out.println(<span class="string">"  E-mail address: "</span> + person.getEmail());</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (Person.PhoneNumber phoneNumber : person.getPhonesList()) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (phoneNumber.getType()) &#123;</span><br><span class="line">          <span class="keyword">case</span> MOBILE:</span><br><span class="line">            System.out.print(<span class="string">"  Mobile phone #: "</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> HOME:</span><br><span class="line">            System.out.print(<span class="string">"  Home phone #: "</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> WORK:</span><br><span class="line">            System.out.print(<span class="string">"  Work phone #: "</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(phoneNumber.getNumber());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Main function:  Reads the entire address book from a file and prints all</span></span><br><span class="line">  <span class="comment">//   the information inside.</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (args.length != <span class="number">1</span>) &#123;</span><br><span class="line">      System.err.println(<span class="string">"Usage:  ListPeople ADDRESS_BOOK_FILE"</span>);</span><br><span class="line">      System.exit(-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read the existing address book.</span></span><br><span class="line">    AddressBook addressBook =</span><br><span class="line">      AddressBook.parseFrom(<span class="keyword">new</span> FileInputStream(args[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line">    Print(addressBook);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://developers.google.com/protocol-buffers/docs/overview" target="_blank" rel="noopener">https://developers.google.com/protocol-buffers/docs/overview</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Citrix receiver</title>
    <url>/2018-09-26-Citrix/</url>
    <content><![CDATA[<h1 id="“Cannot-connect-to-remote-desktop”-with-Citrix-Receiver"><a href="#“Cannot-connect-to-remote-desktop”-with-Citrix-Receiver" class="headerlink" title="“Cannot connect to remote desktop” with Citrix Receiver"></a>“Cannot connect to remote desktop” with Citrix Receiver</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/Citrix/ICAClient/keystore/ <span class="keyword">then</span>: rm -rf cacerts and finally: ln -s /etc/ssl/certs cacerts</span><br></pre></td></tr></table></figure>

<h1 id="Cann’t-show-full-sreen-in-linux-citrix-receiver"><a href="#Cann’t-show-full-sreen-in-linux-citrix-receiver" class="headerlink" title="Cann’t show full sreen in linux citrix receiver"></a>Cann’t show full sreen in linux citrix receiver</h1><p>There is workaround, i.e. Press <code>Alt</code> and drag RDP window, then maximum it.</p>
]]></content>
  </entry>
  <entry>
    <title>YAML</title>
    <url>/2018-09-16-yaml-config/</url>
    <content><![CDATA[<h1 id="Key-points"><a href="#Key-points" class="headerlink" title="Key points"></a>Key points</h1><p>All YAML files (regardless of their association with Ansible or not) can optionally begin with — and end with …. This is part of the YAML format and indicates the start and end of a document.</p>
<p>In a way, YAML is to JSON what Markdown is to HTML.</p>
<p># </p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://developers.google.com/protocol-buffers/docs/overview" target="_blank" rel="noopener">https://developers.google.com/protocol-buffers/docs/overview</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Citrix receiver</title>
    <url>/2018-10-13-SBE/</url>
    <content><![CDATA[<h1 id="Simple-Binary-Encoding-SBE"><a href="#Simple-Binary-Encoding-SBE" class="headerlink" title="Simple Binary Encoding (SBE)"></a>Simple Binary Encoding (SBE)</h1><p>SBE is an OSI layer 6 presentation for encoding and decoding binary application messages for low-latency financial applications. </p>
]]></content>
  </entry>
  <entry>
    <title>Guice</title>
    <url>/2018-09-18-Google-Guice/</url>
    <content><![CDATA[<h1 id="A-new-type-of-Juice"><a href="#A-new-type-of-Juice" class="headerlink" title="A new type of Juice"></a>A new type of Juice</h1><p>Put simply, Guice alleviates the need for factories and the use of new in your Java code. Think of Guice’s @Inject as the new new. You will still need to write factories in some cases, but your code will not depend directly on them. Your code will be easier to change, unit test and reuse in other contexts.</p>
<p>Guice embraces Java’s type safe nature, especially when it comes to features introduced in Java 5 such as generics and annotations. You might think of Guice as filling in missing features for core Java. Ideally, the language itself would provide most of the same features, but until such a language comes along, we have Guice.</p>
<p>Guice helps you design better APIs, and the Guice API itself sets a good example. Guice is not a kitchen sink. We justify each feature with at least three use cases. When in doubt, we leave it out. We build general functionality which enables you to extend Guice rather than adding every feature to the core framework.</p>
<h1 id="Guice-vs-Spring"><a href="#Guice-vs-Spring" class="headerlink" title="Guice vs Spring"></a>Guice vs Spring</h1><p>Spring and Google Guice are two powerful dependency injection frameworks in use today. Both frameworks fully embrace the concepts of dependency injection, but each has its own way of implementing them. Although Spring provides many benefits, it was created in a pre-Java-5 world. The Guice framework takes DI to the next level.</p>
<p>The advent of Java 5 brought significant changes to the language like generics and annotations: features that enhance the power of Java static typing. Guice is a DI framework that was built from the ground up with the intent to take full advantage of these new features and that has focused on one primary goal: to do dependency injection well.</p>
<p>Guice aims to make development and debugging easier and faster, not harder and slower. In that vein, Guice steers clear of surprises and magic. You should be able to understand code with or without tools, though tools can make things even easier. When errors do occur, Guice goes the extra mile to generate helpful messages.</p>
<h3 id="core-differences-between-the-two-and-see-why-I-prefer-to-use-Guice"><a href="#core-differences-between-the-two-and-see-why-I-prefer-to-use-Guice" class="headerlink" title="core differences between the two, and see why I prefer to use Guice."></a>core differences between the two, and see why I prefer to use Guice.</h3><ol>
<li>Living in XML Hell</li>
<li>Eliminating reliance on String identifiers</li>
<li>Preferring Constructor Injection</li>
</ol>
<p>Although Spring and Guice both support constructor and setter injection, each framework has a preference. Spring has long favored setter injection. Back in the early days of Spring, the authors believed the lack of argument names and default arguments in constructor injection reduced clarity. In addition, constructor injection makes it difficult to have optional dependencies, requires dependencies to be configured in a specific order, and forces subclasses to deal with superclass dependencies. Using setter injection eliminates these problems, and so Spring favors that approach.</p>
<p>The Guice authors saw difficulties with setter injection. One problem is immutability: it is impossible to make immutable a class that uses setter injection. Constructor injection, on the other hand, makes the creation of immutable classes easy, an important consideration in writing multi-threaded applications. In addition, optional dependencies, while perhaps convenient, can introduce confusion about how a class is configured at runtime. Configuring a class through setter injection can often lead to missed required dependencies. Though Spring does provide a @Required annotation to solve this problem, using constructor injection eliminates it by default.</p>
<p>Constructor injection also makes a class’s dependencies immediately clear at a glance. If you’re writing or modifying a unit test, it’s easy to read what the system-under-test needs. Lastly, because Guice uses types to wire classes together, constructor argument order isn’t an issue. You can feel free to reorder them how you want without needing to modify configuration code at all.</p>
<p>The potential drawbacks posed by setter injection outweigh the benefits in many common scenarios, and so Guice established a best practice of favoring constructor injection instead. Its API is well-suited to that approach. But if you should choose to switch from one form of injection to the other, Guice makes that easy too. Changing from setter to constructor injection or vice versa is simply a matter of modifying the class in question. Unlike in Spring, you need never touch a configuration file.</p>
<ol start="4">
<li>Nullifying NullPointerExceptions</li>
</ol>
<p>Null is easily one of the most non-communicative return values possible from a method call.<br>Guice hates nulls as much as I do. By default, Guice refuses to inject a null into any object, and if an accidental null shows up during wiring, it fails-fast with a ProvisionException. Guice does allow for the exception case by permitting fields to be annotated with @Nullable, but this is discouraged.</p>
<ol start="5">
<li>Intruding into the domain</li>
</ol>
<p>Guice aims to eliminate all of this boilerplate without sacrificing maintainability.<br>With Guice, you implement modules. Guice passes a binder to your module, and your module uses the binder to map interfaces to implementations. The following module tells Guice to map Service to ServiceImpl in singleton scope:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">       <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyModule</span> <span class="keyword">implements</span> <span class="title">Module</span> </span>&#123;</span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(Binder binder)</span> </span>&#123;</span><br><span class="line">          binder.bind(Service.class)</span><br><span class="line">           .to(ServiceImpl.class)</span><br><span class="line">           .in(Scopes.SINGLETON);</span><br><span class="line">&#125; &#125;</span><br></pre></td></tr></table></figure>

<p>A module tells Guice what we want to inject. Now, how do we tell Guice where we want it injected? With Guice, you annotate constructors, methods and fields with @Inject.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">       <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">         <span class="keyword">private</span> <span class="keyword">final</span> Service service;</span><br><span class="line"><span class="meta">@Inject</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="title">Client</span><span class="params">(Service service)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">this</span>.service = service;</span><br><span class="line">&#125;</span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">go</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           service.go();</span><br><span class="line">&#125; &#125;</span><br></pre></td></tr></table></figure>

<h2 id="Guice-vs-Dependency-Injection-By-Hand"><a href="#Guice-vs-Dependency-Injection-By-Hand" class="headerlink" title="Guice vs. Dependency Injection By Hand"></a>Guice vs. Dependency Injection By Hand</h2><p>As you can see, Guice saves you from having to write factory classes. You don’t have to write explicit code wiring clients to their dependencies. If you forget to provide a dependency, Guice fails at startup. Guice handles circular dependencies automatically.<br>Guice enables you to specify scopes declaratively. For example, you don’t have to write the same code to store an object in the HttpSession over and over.<br>In the real world, you often don’t know an implementation class until runtime. You need meta factories or service locators for your factories. Guice addresses these problems with minimal effort.<br>When injecting dependencies by hand, you can easily slip back into old habits and introduce direct dependencies, especially if you’re new to the concept of dependency injection. Using Guice turns the tables and makes doing the right thing easier. Guice helps keep you on track.</p>
<h2 id="Guice-annotations"><a href="#Guice-annotations" class="headerlink" title="Guice annotations"></a>Guice annotations</h2><p>When possible, Guice enables you to use annotations in lieu of explicit bindings and eliminate even more boilerplate code. Back to our example, if you need an interface to simplify unit testing but you don’t care about compile time dependencies, you can point to a default implementation directly from your interface.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">       <span class="meta">@ImplementedBy</span>(ServiceImpl.class)</span><br><span class="line">       <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">         <span class="function"><span class="keyword">void</span> <span class="title">go</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>If a client needs a Service and Guice can’t find an explicit binding, Guice will<br>inject an instance of ServiceImpl.</p>
<p>By default, Guice injects a new instance every time. If you want to specify a<br>different scope, you can annotate the implementation class, too.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Singleton</span></span><br><span class="line">       <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceImpl</span> <span class="keyword">implements</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">go</span><span class="params">()</span> </span>&#123;</span><br><span class="line">... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Architectural-Overview"><a href="#Architectural-Overview" class="headerlink" title="Architectural Overview"></a>Architectural Overview</h1><p>We can break Guice’s architecture down into two distinct stages: startup and<br>runtime. You build an Injector during startup and use it to inject objects at runtime.</p>
<h2 id="Startup"><a href="#Startup" class="headerlink" title="Startup"></a>Startup</h2><p>You configure Guice by implementing Module. You pass Guice a module, Guice passes your module a Binder, and your module uses the binder to configure bindings. A binding most commonly consists of a mapping between an interface and a concrete implementation. For example:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">       <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyModule</span> <span class="keyword">implements</span> <span class="title">Module</span> </span>&#123;</span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(Binder binder)</span> </span>&#123;</span><br><span class="line">          <span class="comment">// Bind Foo to FooImpl. Guice will create a new</span></span><br><span class="line">           <span class="comment">// instance of FooImpl for every injection.</span></span><br><span class="line">           binder.bind(Foo.class).to(FooImpl.class);</span><br><span class="line">           <span class="comment">// Bind Bar to an instance of Bar.</span></span><br><span class="line">           Bar bar = <span class="keyword">new</span> Bar();</span><br><span class="line">           binder.bind(Bar.class).toInstance(bar);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Injecting-Providers"><a href="#Injecting-Providers" class="headerlink" title="Injecting Providers"></a>Injecting Providers</h1><p>With normal dependency injection, each type gets exactly one instance of each of its dependent types. The RealBillingService gets one CreditCardProcessor and one TransactionLog. Sometimes you want more than one instance of your dependent types. When this flexibility is necessary, Guice binds a provider. Providers produce a value when the get() method is invoked:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Provider</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function">T <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Provides-Methods"><a href="#Provides-Methods" class="headerlink" title="@Provides Methods"></a>@Provides Methods</h1><p>When you need code to create an object, use an @Provides method. The method must be defined within a module, and it must have an @Provides annotation. The method’s return type is the bound type. Whenever the injector needs an instance of that type, it will invoke the method.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BillingModule</span> <span class="keyword">extends</span> <span class="title">AbstractModule</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Provides</span></span><br><span class="line">  <span class="function">TransactionLog <span class="title">provideTransactionLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DatabaseTransactionLog transactionLog = <span class="keyword">new</span> DatabaseTransactionLog();</span><br><span class="line">    transactionLog.setJdbcUrl(<span class="string">"jdbc:mysql://localhost/pizza"</span>);</span><br><span class="line">    transactionLog.setThreadPoolSize(<span class="number">30</span>);</span><br><span class="line">    <span class="keyword">return</span> transactionLog;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>If the @Provides method has a binding annotation like @PayPal or @Named(“Checkout”), Guice binds the annotated type. Dependencies can be passed in as parameters to the method. The injector will exercise the bindings for each of these before invoking the method.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Provides</span> <span class="meta">@PayPal</span></span><br><span class="line"><span class="function">CreditCardProcessor <span class="title">providePayPalCreditCardProcessor</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @Named(<span class="string">"PayPal API key"</span>)</span> String apiKey) </span>&#123;</span><br><span class="line">  PayPalCreditCardProcessor processor = <span class="keyword">new</span> PayPalCreditCardProcessor();</span><br><span class="line">  processor.setApiKey(apiKey);</span><br><span class="line">  <span class="keyword">return</span> processor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1>]]></content>
  </entry>
  <entry>
    <title>Seconds</title>
    <url>/2018-11-01-seconds/</url>
    <content><![CDATA[<h1 id="nano-seconds"><a href="#nano-seconds" class="headerlink" title="nano seconds"></a>nano seconds</h1><p>ns: 1/1,000,000,000 second, i.e. 10(-9) seconds<br>1 ns = 1/1,000 micro second<br>1 ns = 1/1,000,000 milis second</p>
<p>used in telecommunications</p>
<h1 id="micro-seconds"><a href="#micro-seconds" class="headerlink" title="micro seconds"></a>micro seconds</h1><p>Its symbol is μs. 微秒<br>1 μs = 1000 ns<br>1 μs = 1/1,000 milli Seconds</p>
<p>8.01 μs： light took the time to travel 1 mile in vaccum</p>
<p>The average human eye blink takes 350,000 microseconds (just over 1/3 of one second).<br>The average human finger snap takes 150,000 microseconds (just over 1/7 of one second).<br>A camera flash illuminates for 1000 microseconds.</p>
<h1 id="milli-second"><a href="#milli-second" class="headerlink" title="milli second"></a>milli second</h1><p>ms 毫秒<br>1 ms = 1/1,000 second<br>1 ms = 1,000 μs = 1,000,000 ns</p>
<p>3 ms: fly flgp its wing<br>5 ms: bee flap wing<br>300-400 ms: human eye to blink</p>
]]></content>
  </entry>
  <entry>
    <title>Inter Processes Communication</title>
    <url>/2019-01-03-IPC/</url>
    <content><![CDATA[<h1 id="IPC"><a href="#IPC" class="headerlink" title="IPC"></a>IPC</h1><p>interprocess communication (IPC)</p>
<p>Posted by: Margaret Rouse<br>WhatIs.com</p>
<p>Interprocess communication (IPC) is a set of programming interfaces that allow a programmer to coordinate activities among different program processes that can run concurrently in an operating system. This allows a program to handle many user requests at the same time. Since even a single user request may result in multiple processes running in the operating system on the user’s behalf, the processes need to communicate with each other. The IPC interfaces make this possible. Each IPC method has its own advantages and limitations so it is not unusual for a single program to use all of the IPC methods.</p>
<p>Inter process communication (IPC) is a mechanism which allows processes to communicate each other and synchronize their actions. The communication between these processes can be seen as a method of co-operation between them. Processes can communicate with each other using these two ways:<br>Shared Memory<br>Message passing</p>
]]></content>
  </entry>
  <entry>
    <title>Foreign Exchange</title>
    <url>/2019-01-17-FX-ForeignExchange/</url>
    <content><![CDATA[<h1 id="currency-pairs"><a href="#currency-pairs" class="headerlink" title="currency pairs"></a>currency pairs</h1><ul>
<li>Direct ccy: means USD is part of currency pair</li>
<li>Cross ccy: means ccy wihtout USD, so except NDF, the deal will be split to legs, both with USD. e.g. EUR/GBP will split to EURUSD and USDGBP</li>
<li>non-convention ccy pair: that’s depends on where you sit on. e.g. for Aussie traders, they would trade AUDNZD, but for kiwi traders, they would trade for NZDAUD, then AUDNZD would be non-convention</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Mifid</title>
    <url>/2019-01-17-Mifid/</url>
    <content><![CDATA[<p>FX Spot is not covered by the regulation, as it is not considered to be a financial instrument by ESMA, the European Union (EU) regulator. As FX is considered “illiquid” it does not have pre-trade reporting requirements.</p>
<p>Recordkeeping – MiFID II requires firms to keep extensive records of all transactions, communications, services and activities for 10 years, in order for them to be able to provide transparency into the trade life cycle. This is to support trade reconstruction if required.</p>
<p>Overall there are 3 points in the text which we think will be of particular interest to foreign exchange brokers.</p>
<p>The EC has determined that FX Forward contracts remain outside the scope of MiFID II if they satisfy all of the following conditions:<br>The contract for deliverable FX is physically settled<br>At least one of the parties to the contract is a non-financial counterparty<br>The purpose of the contract is to facilitate payment for identifiable goods, services or direct investment<br>The contract is not traded on a trading venue  </p>
<hr>
<p>FX Forwards will qualify for the means of payment exclusion if they meet the following criteria:</p>
<ol>
<li><p>The counterparty is a corporate entity (a non-financial counterparty (‘NFC’) as defined under EMIR);</p>
</li>
<li><p>The FX forwards are traded for the purpose of facilitating payment for identifiable goods or services (for example, entering into an FX forward in order to pay an upcoming invoice in a foreign currency, or in preparation of an upcoming purchase in a foreign currency, as opposed to trading FX forwards for speculative purposes); and</p>
</li>
<li><p>The FX forwards are traded bilaterally, as opposed to on a regulated trading venue (note that Agile Markets is not a regulated trading venue and does not affect eligibility);</p>
</li>
</ol>
<p>The Financial Conduct Authority has provided some examples of scenarios that would fit within the exclusion.  Please find the examples provided on the link here.</p>
]]></content>
      <tags>
        <tag>MTF</tag>
        <tag>Mifid</tag>
      </tags>
  </entry>
  <entry>
    <title>Terraform</title>
    <url>/2019-07-26-Terraform/</url>
    <content><![CDATA[<h1 id="Why-Terraform"><a href="#Why-Terraform" class="headerlink" title="Why Terraform"></a>Why Terraform</h1><p>Software isn’t done when the code is working on your computer. It’s not done when the tests pass. And it’s not done when someone gives you a “ship it” on a code review. Software isn’t done until you deliver it to the user.</p>
]]></content>
      <tags>
        <tag>aws</tag>
        <tag>clouds</tag>
      </tags>
  </entry>
  <entry>
    <title>SSL certificates</title>
    <url>/2019-02-26-TLS-SSL-HTTPS/</url>
    <content><![CDATA[<h1 id="What’s-TLS"><a href="#What’s-TLS" class="headerlink" title="What’s TLS"></a>What’s TLS</h1><p>TLS (Transport Layer Security) and its predecessor, SSL (Secure Sockets Layer), are security protocols designed to secure the communication between a server and a client, for example, a web server and a browser. Both protocols are frequently referred to as SSL.</p>
<p>A TLS/SSL certificate (simply called SSL certificate) is required to enable SSL/TLS on your site and serve your website using the secure HTTPS protocol.</p>
<p>We offer different types of domain-validated SSL certificates signed by globally recognized certificate authorities.</p>
<h1 id="CA"><a href="#CA" class="headerlink" title="CA"></a>CA</h1><p>A Certificate Authority (CA) (or Certification Authority) is an entity that issues digital certificates.</p>
<p>The digital certificate <em>certifies the ownership</em> of a public key by the named subject of the certificate. This allows others (relying parties) to rely upon signatures or assertions made by the private key that corresponds to the public key that is certified.</p>
<h1 id="Root-certificate"><a href="#Root-certificate" class="headerlink" title="Root certificate"></a>Root certificate</h1><p>In the SSL ecosystem, anyone can generate a signing key and sign a new certificate with that signature. However, that certificate is not considered valid unless it has been directly or indirectly signed by a trusted CA.</p>
<p>A trusted certificate authority is an entity that has been entitled to verify that someone is effectively who it declares to be. In order for this model to work, all the participants on the game must agree on a set of CA which they trust. All operating systems and most of web browsers ship with a set of trusted CAs.</p>
<p>The SSL ecosystem is based on a * model of trust relationship<em>, also called *</em> “chain of trust” **. When a device validates a certificate, it compares the certificate issuer with the list of trusted CAs. If a match is not found, the client will then check to see if the certificate of the issuing CA was issued by a trusted CA, and so on until the end of the certificate chain. The top of the chain, the root certificate, must be issued by a trusted Certificate Authority.</p>
<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>The root certificate is generally embedded in your connected device. In the case of web browsers, root certificates are packaged with the browser software.</p>
<h3 id="To-install-the-Intermediate-SSL-certificates"><a href="#To-install-the-Intermediate-SSL-certificates" class="headerlink" title="To  install the Intermediate SSL certificates?"></a>To  install the Intermediate SSL certificates?</h3><p>The procedure to install the Intermediate SSL certificates depends on the web server and the environment where you install the certificate.</p>
<p>For instance, Apache requires you to bundle the intermediate SSL certificates and assign the location of the bundle to the SSLCertificateChainFile configuration. Conversely, NGINX requires you to package the intermediate SSL certificates in a single bundle with the end-user certificate.</p>
<h1 id="SSL-certificate-chain"><a href="#SSL-certificate-chain" class="headerlink" title="SSL certificate chain"></a>SSL certificate chain</h1><p>There are two types of certificate authorities (CAs): root CAs and intermediate CAs. In order for an SSL certificate to be trusted, that certificate must have been issued by a CA that is included in the trusted store of the device that is connecting.</p>
<p>In this model of trust relationships, a CA is a trusted third party that is trusted by both the subject (owner) of the certificate and the party relying upon the certificate.</p>
<p>In the context of a website, when we use the term digital certificate we often refer to SSL certificates. The CA is the authority responsible for issuing SSL certificates publicly trusted by web browsers.</p>
<p>Anyone can issue SSL certificates, but those certificates would not be trusted automatically by web browsers. Certificates such as these are called self-signed. The CA has the responsibility to validate the entity behind an SSL certificate request and, upon successful validation, the ability to issue publicly trusted SSL certificates that will be accepted by web browsers. Essentially, the browser vendors rely on CAs to validate the entity behind a web site.</p>
<h1 id="How-SSL-work-in-browser"><a href="#How-SSL-work-in-browser" class="headerlink" title="How SSL work in browser"></a>How SSL work in browser</h1><p>There are 3 essential elements at work in the process described above: a protocol for communications (SSL), credentials for establishing identity (the SSL certificate), and a third party that vouches for the credentials (the certificate authority). </p>
<pre><code>Computers use protocols to allow different systems to work together. Web servers and web browsers rely on the Secure Sockets Layer (SSL) protocol to enable encrypted communications. The browser’s request that the server identify itself is a function of the SSL protocol.
Credentials for establishing identity are common to our everyday lives: a driver’s license, a passport, a company badge. An SSL certificate is a type of digital certificate that serves as a credential in the online world. Each SSL certificate uniquely identifies a specific domain (such as thawte.com) and a web server.
Our trust of a credential depends on our confidence in the organization that issued it. Certificate authorities have a variety of methods to verify information provided by individuals or organizations. Established certificate authorities, such as Thawte, are well known and trusted by browser vendors. Browsers extend that trust to digital certificates that are verified by the certificate authority.</code></pre><h2 id="PKI"><a href="#PKI" class="headerlink" title="PKI"></a>PKI</h2><p>You are correct that SSL uses an asymmetric key pair. One public and one private key is generated which also known as public key infrastructure (PKI). The public key is what is distributed to the world, and is used to encrypt the data. Only the private key can actually decrypt the data though.</p>
<blockquote>
<p>Say we both go to walmart.com and buy stuff. Each of us get a copy of Walmart’s public key to sign our transaction with. Once the transaction is signed by Walmart’s public key, only Walmart’s private key can decrypt the transaction. If I use my copy of Walmart’s public key, it will not decrypt your transaction. Walmart must keep their private key very private and secure, else anyone who gets it can decrypt transactions to Walmart. This is why the DigiNotar breach was such a big deal</p>
</blockquote>
<h1 id="A-sample-of-how-browser-get-SSL-certificate"><a href="#A-sample-of-how-browser-get-SSL-certificate" class="headerlink" title="A sample of how browser get SSL certificate"></a>A sample of how browser get SSL certificate</h1><p>If I get an SSL certificate from a well-known provider, what does that prove about my site and how?</p>
<p>Here’s what I know:</p>
<pre><code>Assume Alice and Bob both have public and private keys
If Alice encrypts something with Bob&apos;s public key, she ensures that only Bob can decrypt it (using his private key)
If Alice encrypts something with her own private key, anyone can decrypt it (using her public key), but they will know that it was encrypted by her
Therefore, if Alice encrypts a message first with her own private key, then with Bob&apos;s public key, she will ensure that only Bob can decrypt it and that Bob will know the message is from her.</code></pre><p>Regarding certificates, here’s what I think happens (updated):</p>
<pre><code>I generate a request for a certificate. In that request, I put my public key and a bunch of information about myself.
The certificate issuer (in theory) checks me out to make sure it knows who I am: talks to me in person, sees my driver&apos;s license, retina scan, or whatever.
If they&apos;re satisfied, the certificate issuer then encrypts my request with their private key. Anyone who decrypts it with their public key knows that they vouch for the information it contains: they agree that the public key is mine and that the information stated is true about me. This encrypted endorsement is the certificate that they issue to me.
When you connect to my site via https, I send you the certificate.
Your browser already knows the issuer&apos;s public key because your browser came installed with that information.
Your browser uses the issuer&apos;s public key to decrypt what I sent you. The fact that the issuer&apos;s public key works to decrypt it proves that the issuer&apos;s private key was used to encrypt it, and therefore, that the issuer really did create this certificate.
Inside the decrypted information is my public key, which you now know has been vouched for. You use that to encrypt some data to send to me.</code></pre><p>Your key theory: basically right, but authentication is usually done by encrypting a cryptographically secure hash of the data rather than the data itself.</p>
<p>A CA’s signature on an SSL certificate should indicate that the CA has done a certain amount of diligence to ensure that the credentials on the certificate match the owner. That diligence varies, but the ultimate point is that they’re saying that the certificate they signed belongs to the entity named on it.</p>
<p>See <a href="http://en.wikipedia.org/wiki/Digital_signature#Definition" target="_blank" rel="noopener">http://en.wikipedia.org/wiki/Digital_signature#Definition</a></p>
<p>A public key certificate is the signed combination between a public key, identifiers, and possibly other attributes. Those who sign this document effectively assert the authenticity of the binding between the public key and the identifier and these attributes, in the same way as a passport issuing authority asserts the binding between the picture and the name in a passport, as various other pieces of information (nationality, date of birth, …).</p>
<pre><code>The private key is used for signing and deciphering/decrypting.
The public key is used for verifying signatures and enciphering/encrypting.</code></pre><p>public key cryptography: A class of cryptographic techniques employing two-key ciphers. Messages encrypted with the public key can only be decrypted with the associated private key. Conversely, messages signed with the private key can be verified with the public key.</p>
<p>It should be pointed out, along with all the other answers, that your private key is not always just one key that is used for both decrypting and signing messages. These should be two separate keys. This would create 4 keys for each person:</p>
<p>Public Encryption Key - Used to encrypt data to send to me.</p>
<p>Private Decryption Key - Used to decrypt messages that were encrypted using my Public Encryption Key.</p>
<p>Private Signing Key - Used to sign messages that I send to other people.</p>
<p>Public Verify Key - Used to verify that a message was, in fact, signed by me.</p>
<p><a href="https://en.wikipedia.org/wiki/Savvis" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Savvis</a></p>
<p>Savvis - Wikipedia</p>
<p>Savvis, formerly SVVS on Nasdaq and formerly known as Savvis Communications Corporation, and, later, Savvis Inc., is a subsidiary of CenturyLink, a company headquartered in Monroe, Louisiana.[1] The company sells managed hosting and colocation services with more than 50 data centers[2] (over 2 million square feet) in North America, Europe, and Asia, automated management and provisioning systems, and information technology consulting. Savvis has approximately 2,500 unique business and government customers.[3][4] </p>
<p>The file extensions .CRT and .CER are interchangeable.  If your server requires that you use the .CER file extension, you can change the extension by following the steps below:</p>
<pre><code>Double-click on the yourwebsite.crt file to open it into the certificate display.
Select the Details tab, then select the Copy to file button.
Hit Next on the Certificate Wizard.
Select Base-64 encoded X.509 (.CER), then Next.
Select Browse (to locate a destination) and type in the filename yourwebsite.
Hit Save. You now have the file yourwebsite.cer


File extensions for cryptographic certificates aren&apos;t really as standardized as you&apos;d expect. Windows by default treats double-clicking a .crt file as a request to import the certificate into the Windows Root Certificate store, but treats a .cer file as a request just to view the certificate. So, they&apos;re different in that sense, at least, that Windows has some inherent different meaning for what happens when you double click each type of file.</code></pre><p>But the way that Windows handles them when you double-click them is about the only difference between the two. Both extensions just represent that it contains a public certificate. You can rename a file or use one in place of the other in any system or configuration file that I’ve seen. And on non-Windows platforms (and even on Windows), people aren’t particularly careful about which extension they use, and treat them both interchangeably, as there’s no difference between them as long as the contents of the file are correct.</p>
<p>*.pem, *.crt, *.ca-bundle, *.cer, *.p7b, *.p7s files contain one or more X.509 digital certificate files that use base64 (ASCII) encoding. </p>
<p>.DER = The DER extension is used for binary DER encoded certificates. These files may also bear the CER or the CRT extension.   Proper English usage would be “I have a DER encoded certificate” not “I have a DER certificate”.</p>
<p>.PEM = The PEM extension is used for different types of X.509v3 files which contain ASCII (Base64) armored data prefixed with a “—– BEGIN …” line.</p>
<p>.CRT = The CRT extension is used for certificates. The certificates may be encoded as binary DER or as ASCII PEM. The CER and CRT extensions are nearly synonymous.  Most common among *nix systems</p>
<p>CER = alternate form of .crt (Microsoft Convention) You can use MS to convert .crt to .cer (.both DER encoded .cer, or base64[PEM] encoded .cer)  The .cer file extension is also recognized by IE as a command to run a MS cryptoAPI command (specifically rundll32.exe cryptext.dll,CryptExtOpenCER) which displays a dialogue for importing and/or viewing certificate contents.</p>
<p>.KEY = The KEY extension is used both for public and private PKCS#8 keys. The keys may be encoded as binary DER or as ASCII PEM.</p>
<p>The only time CRT and CER can safely be interchanged is when the encoding type can be identical.  (ie  PEM encoded CRT = PEM encoded CER)</p>
<p>What is the SSL Certificate Chain?</p>
<p>There are two types of certificate authorities (CAs): root CAs and intermediate CAs. In order for an SSL certificate to be trusted, that certificate must have been issued by a CA that is included in the trusted store of the device that is connecting.</p>
<p>Good. I see you want to access this particular page.  I need to send the page to you in a secure way. If I<br>encrypt it using my public key, you won’t be able to decrypt it because you don’t have my private key. And since you don’t have any public key of your own that I can use to encrypt the page for you here’s what I propose<br>Since you can send me encrypted messages that only me can read (you have my public key), send me an encrypted message with an encryption key in it. Just make up a random encryption key that we’ll both use to encrypt and decrypt the messages between us during this session . </p>
<p>A simple symmetric key is enought. We’ll use the same key to encrypt and decrypt the messages.</p>
<ul>
<li>So there’s no way that anybody with your public<br>key can trick others to believe that he is you ? </li>
<li>Nope. That’s the beauty of the assymetric encryption. </li>
</ul>
<p>When you send the public key to the victim’s contain your public key + a certificate that this public key belongs to you. If you are a website, then the certificate will contain the domain name of the website. Basically, a certificate says something like:  the following public key “XYZ123” belongs to example.com. </p>
<p>that’s why we have “Certificate Authorities” like Verisign, Digicert or even Symantec. It is believed that these companies have the necessary trustworthiness to deliver certificates to different •entities.<br>Think of a CA like a registrar for public keys. Just like registrars assert that a domain name belongs to a certain person or company, CAS assert that a public key belongs to a certain domain name (or IP address) . </p>
<p>The certificate will contain the CA that delivered it, but you don’t even have to check with them because the certificate is signed by them. That signature alone is enough proof that the certificate comes from them. </p>
<p>A signature is simply a small message that is encrypted with their private key. Since private keys are asymetric, that means that only the associated public key can decrypt it.</p>
<p>Asymmetric encryption works in both way. public -&gt; private and private -&gt; public.<br>What the public key encrypts only the private key can decrypt, and what the private key can encrypt only the public key can decrypt.</p>
<p>for PKI, we’re not looking for secrecy here, we only want to prove that we’ re the real authors of the message. Suppose I send you the message “HELLO WORLD”, encrypted with my private key. The encrypted message would be, for example, “XYZ1234”. So you receive “XYZ1234” . If I give you my public key, you would be able to decrypt “XYZ1234” into “HELLO WORLD” . And by doing so, you would have proof that that message was sent by me, because the public key you used decrypts messages that were encrypted by my private key only. And since I am the only person in the universe who has that private key, that proves that I am the author of that message. </p>
<p>Really nice. So I don’t have to contact the CA to check the validity of the certificate, all I have to do is use their public key to decrypt the signature that’s in it. If it’s the same as err, wait, what should I compare the decrypted signature to again ? </p>
<p>You have to find the same hash as the one you have calculated. They are sending a small hash of the whole certificate. So what you have to do is to calculate the hash of the certificate yourself, then compare it to the hash you get when you decrypt the signature. If the two are the same that means two things </p>
<ol>
<li>The CA’s public key worked, so the signature was encrypted by the associated private key, which means the certificate was really issued by the CA. </li>
<li>Since the hash is the same, it also means that you are seeing the exact same certificate that the CA delivered to the website you are visiting. The information contained inside hasn’t been tampered with. </li>
</ol>
<p>That’s really good. So, let me recap one more time . </p>
<ol>
<li>I contact you for an HTTPS page. </li>
<li>You send me an SSL certificate that contains your public key and a signature from the CA that delivered </li>
<li>I make sure the certificate is valid by using the CA’s public key to decrypt the signature. In parallel, I also calculate the hash of the certificate. </li>
</ol>
<p>If my hash and the one I got from decrypting the signature are equal, that means that the certificate was really issued by the CA and that I can be sure that the public key you sent me is really yours. </p>
<p>Because you implicitly trust the CA.</p>
<p>Let’s continue: </p>
<ol start="4">
<li>I generate a random key that we’ll both use as a symmetric key to encrypt and decrypt the messages we’ll be sending each other. </li>
<li>I encrypt this symmetric key with your public key and send it to you. </li>
<li>You decrypt my message with your private key and find my secret key. </li>
<li>Every request or response between us will be encrypted with this shared secret symmetric key. </li>
</ol>
<h2 id="CN"><a href="#CN" class="headerlink" title="CN"></a>CN</h2><p>The Common Name (AKA CN) represents the server name protected by the SSL certificate.</p>
<p>The certificate is valid only if the request hostname matches the certificate common name.</p>
<p>To check the status, such as </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo openssl x509 -noout -<span class="keyword">in</span> xxx.com.cer -text</span><br></pre></td></tr></table></figure>

<p> Subject: C=UK, ST=London, L=London, O=AAA Bank, OU=Product and Markets, CN=*.xxxtest.com<br>        Subject Public Key Info:</p>
<h3 id="commonName-format"><a href="#commonName-format" class="headerlink" title="commonName format"></a>commonName format</h3><p>The common name is not a URL. It doesn’t include any protocol (e.g. http:// or https://), port number, or pathname. For instance, <a href="https://example.com" target="_blank" rel="noopener">https://example.com</a> or example.com/path are incorrect. In both cases, the common name should be example.com</p>
<h4 id="Common-Name-vs-Subject-Alternative-Name"><a href="#Common-Name-vs-Subject-Alternative-Name" class="headerlink" title="Common Name vs Subject Alternative Name"></a>Common Name vs Subject Alternative Name</h4><p>The common name can only contain up to one entry: either a wildcard or non-wildcard name. It’s not possible to specify a list of names covered by an SSL certificate in the common name field.</p>
<p>The Subject Alternative Name extension (also called Subject Alternate Name or SAN) was introduced to solve this limitation. The SAN allows issuance of multi-name SSL certificates.</p>
<h1 id="SHA-2-SSL-Certificates"><a href="#SHA-2-SSL-Certificates" class="headerlink" title="SHA-2 SSL Certificates"></a>SHA-2 SSL Certificates</h1><p>Almost all certificates are currently signed with the SHA-2 hash algorithm.</p>
<p>This article provides a simple overview of the SHA-1 to SHA-2 transition plans, as well additional informations on the SHA-2 hash algorithm and SSL certificates purchased with DNSimple previous than September 2014.</p>
<p>The SHA family of hashing algorithms were developed by the National Institute of Standards and Technology (NIST) and are used by certificate authorities (CAs) when digitally signing issued certificates.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://support.dnsimple.com/articles/what-is-ssl-certificate-chain/" target="_blank" rel="noopener">https://support.dnsimple.com/articles/what-is-ssl-certificate-chain/</a></li>
<li><a href="https://www.thawte.com/resources/getting-started/how-ssl-works/" target="_blank" rel="noopener">https://www.thawte.com/resources/getting-started/how-ssl-works/</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Kafka</title>
    <url>/2019-07-07-Kafka/</url>
    <content><![CDATA[<h1 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h1><p>Kafka is fast. A single node can handle hundreds of read/writes from thousands of clients in real time. Kafka is also distributed and scalable. It creates and takes down nodes in an elastic manner, without incurring any downtime. Data streams are split into partitions and spread over different brokers for capability and redundancy.</p>
<h1 id="History-of-Kafka"><a href="#History-of-Kafka" class="headerlink" title="History of Kafka"></a>History of Kafka</h1><p>The result was a publish/subscribe messaging system that had an interface typical of messaging systems but a storage layer more like a log-aggregation system. Combined with the adoption of Apache Avro for message serialization, Kafka was effective for handling both metrics and user-activity tracking at a scale of billions of messages per day.</p>
<h2 id="Kafka-features"><a href="#Kafka-features" class="headerlink" title="Kafka features"></a>Kafka features</h2><ul>
<li><p>Language Agnostic<br>Producers and consumers use binary protocol to talk to a Kafka cluster.</p>
</li>
<li><p>Durability<br>Kafka does not track which messages were read by each consumer. Kafka keeps all messages for a finite amount of time, and it is consumers’ responsibility to track their location per topic, i.e. offsets.</p>
</li>
</ul>
<h2 id="Terminology"><a href="#Terminology" class="headerlink" title="Terminology:"></a>Terminology:</h2><p>Topic: a feed of messages or packages<br>Partition: group of topics split for scalability and redundancy<br>Producer: process that introduces messages into the queue<br>Consumer: process that subscribes to various topics and processes from a feed of published messages<br>Broker: a node that is part of the Kafka cluster</p>
<h2 id="Topics-and-Partitions"><a href="#Topics-and-Partitions" class="headerlink" title="Topics and Partitions"></a>Topics and Partitions</h2><p>Messages in Kafka are categorized into topics. The closest analogies for a topic are a database table or a folder in a filesystem. Topics are additionally broken down into a number of partitions. Going back to the “commit log” description, a partition is a sin‐ gle log. Messages are written to it in an append-only fashion, and are read in order from beginning to end. Note that as a topic typically has multiple partitions, there is no guarantee of message time-ordering across the entire topic, just within a single partition. </p>
<p>Partitions are also the way that Kafka provides redundancy and scalability. Each partition can be hosted on a different server, which means that a single topic can be scaled horizontally across multiple servers to provide performance far beyond the ability of a single server.</p>
<h1 id="Producers-and-consumers"><a href="#Producers-and-consumers" class="headerlink" title="Producers and consumers"></a>Producers and consumers</h1><p>Kafka clients are users of the system, and there are two basic types: producers and consumers. There are also advanced client APIs—Kafka Connect API for data inte‐ gration and Kafka Streams for stream processing. The advanced clients use producers and consumers as building blocks and provide higher-level functionality on top.</p>
<h2 id="producers"><a href="#producers" class="headerlink" title="producers"></a>producers</h2><p>Producers create new messages. In other publish/subscribe systems, these may be called publishers or writers. In general, a message will be produced to a specific topic. By default, the producer does not care what partition a specific message is written to and will balance messages over all partitions of a topic evenly. In some cases, the pro‐ ducer will direct messages to specific partitions. This is typically done using the mes‐ sage key and a partitioner that will generate a hash of the key and map it to a specific partition. This assures that all messages produced with a given key will get written to the same partition. The producer could also use a custom partitioner that follows other business rules for mapping messages to partitions.</p>
<h2 id="Consumers"><a href="#Consumers" class="headerlink" title="Consumers"></a>Consumers</h2><p>Consumers read messages. In other publish/subscribe systems, these clients may be called subscribers or readers. The consumer subscribes to one or more topics and reads the messages in the order in which they were produced. The consumer keeps track of which messages it has already consumed by keeping track of the offset of messages. The offset is another bit of metadata—an integer value that continually increases—that Kafka adds to each message as it is produced. Each message in a given partition has a unique offset. By storing the offset of the last consumed message for each partition, either in Zookeeper or in Kafka itself, a consumer can stop and restart without losing its place.</p>
<p>Consumers work as part of a consumer group, which is one or more consumers that work together to consume a topic. The group assures that each partition is only con‐ sumed by one member. there are three consumers in a single group consuming a topic. Two of the consumers are working from one partition each, while the third consumer is working from two partitions. The mapping of a consumer to a partition is often called ownership of the partition by the consumer.</p>
<h3 id="Consumer-group"><a href="#Consumer-group" class="headerlink" title="Consumer group"></a>Consumer group</h3><p>Consumers may be grouped in a consumer group with multiple consumers. Each consumer in a consumer group will read messages from a unique subset of partitions in each topic they subscribe to. Each message is delivered to one consumer in the group, and all messages with the same key arrive at the same consumer.</p>
<h2 id="Brokers-and-Clusters"><a href="#Brokers-and-Clusters" class="headerlink" title="Brokers and Clusters"></a>Brokers and Clusters</h2><p>A single Kafka server is called a broker. The broker receives messages from producers, assigns offsets to them, and commits the messages to storage on disk. It also services consumers, responding to fetch requests for partitions and responding with the mes‐ sages that have been committed to disk. Depending on the specific hardware and its performance characteristics, a single broker can easily handle thousands of partitions and millions of messages per second.<br>Kafka brokers are designed to operate as part of a cluster. Within a cluster of brokers, one broker will also function as the cluster controller (elected automatically from the live members of the cluster). The controller is responsible for administrative operations, including assigning partitions to brokers and monitoring for broker failures. A partition is owned by a single broker in the cluster, and that broker is called the leader of the partition. A partition may be assigned to multiple brokers, which will result in the partition being replicated This provides redundancy of messages in the partition, such that another broker can take over leadership if there is a broker failure. However, all consumers and producers operating on that partition must connect to the leader. </p>
<h2 id="retentions"><a href="#retentions" class="headerlink" title="retentions"></a>retentions</h2><p>A key feature of Apache Kafka is that of retention, which is the durable storage of messages for some period of time. Kafka brokers are configured with a default reten‐ tion setting for topics, either retaining messages for some period of time (e.g., 7 days) or until the topic reaches a certain size in bytes (e.g., 1 GB). Once these limits are reached, messages are expired and deleted so that the retention configuration is a minimum amount of data available at any time. Individual topics can also be config‐ ured with their own retention settings so that messages are stored for only as long as they are useful. For example, a tracking topic might be retained for several days, whereas application metrics might be retained for only a few hours. Topics can also be configured as log compacted, which means that Kafka will retain only the last mes‐ sage produced with a specific key. This can be useful for changelog-type data, where only the last update is interesting.</p>
<h2 id="mirror-maker"><a href="#mirror-maker" class="headerlink" title="mirror maker"></a>mirror maker</h2><p>The Kafka project includes a tool called MirrorMaker, used for this purpose. At its core, MirrorMaker is simply a Kafka consumer and producer, linked together with a queue. Messages are consumed from one Kafka cluster and produced for another.</p>
<h1 id="Why-Kafka"><a href="#Why-Kafka" class="headerlink" title="Why Kafka?"></a>Why Kafka?</h1><h2 id="Multiple-Producers"><a href="#Multiple-Producers" class="headerlink" title="Multiple Producers"></a>Multiple Producers</h2><p>Kafka is able to seamlessly handle multiple producers, whether those clients are using many topics or the same topic. </p>
<h2 id="Multiple-Consumers"><a href="#Multiple-Consumers" class="headerlink" title="Multiple Consumers"></a>Multiple Consumers</h2><p>In addition to multiple producers, Kafka is designed for multiple consumers to read any single stream of messages without interfering with each other. This is in contrast to many queuing systems where once a message is consumed by one client, it is not available to any other. Multiple Kafka consumers can choose to operate as part of a group and share a stream, assuring that the entire group processes a given message only once.</p>
<p>##Disk-Based Retention<br>Not only can Kafka handle multiple consumers, but durable message retention means that consumers do not always need to work in real time. Messages are committed to disk, and will be stored with configurable retention rules. </p>
<h2 id="Scalable"><a href="#Scalable" class="headerlink" title="Scalable"></a>Scalable</h2><p>Kafka’s flexible scalability makes it easy to handle any amount of data. Users can start with a single broker as a proof of concept, expand to a small development cluster of three brokers, and move into production with a larger cluster of tens or even hun‐ dreds of brokers that grows over time as the data scales up.</p>
<h2 id="High-Performance"><a href="#High-Performance" class="headerlink" title="High Performance"></a>High Performance</h2><p>All of these features come together to make Apache Kafka a publish/subscribe mes‐ saging system with excellent performance under high load. Producers, consumers, and brokers can all be scaled out to handle very large message streams with ease. This can be done while still providing subsecond message latency from producing a mes‐ sage to availability to consumers.</p>
<h1 id="Process-of-producing-message"><a href="#Process-of-producing-message" class="headerlink" title="Process of producing message"></a>Process of producing message</h1><p>We start producing messages to Kafka by creating a ProducerRecord, which must include the topic we want to send the record to and a value. Optionally, we can also specify a key and/or a partition. Once we send the ProducerRecord, the first thing the producer will do is serialize the key and value objects to ByteArrays so they can be sent over the network.<br>Next, the data is sent to a partitioner. If we specified a partition in the ProducerRecord, the partitioner doesn’t do anything and simply returns the partition we specified. If we didn’t, the partitioner will choose a partition for us, usually based on the ProducerRecord key. Once a partition is selected, the producer knows which topic and partition the record will go to. It then adds the record to a batch of records that will also be sent to the same topic and partition. A separate thread is responsible for sending those batches of records to the appropriate Kafka brokers.<br>When the broker receives the messages, it sends back a response. If the messages were successfully written to Kafka, it will return a RecordMetadata object with the topic, partition, and the offset of the record within the partition. If the broker failed to write the messages, it will return an error. When the producer receives an error, it may retry sending the message a few more times before giving up and returning an error.</p>
<h1 id="Constructing-a-Kafka-Producer"><a href="#Constructing-a-Kafka-Producer" class="headerlink" title="Constructing a Kafka Producer"></a>Constructing a Kafka Producer</h1><p>The first step in writing messages to Kafka is to create a producer object with the properties you want to pass to the producer. A Kafka producer has three mandatory properties:</p>
<h2 id="bootstrap-servers"><a href="#bootstrap-servers" class="headerlink" title="bootstrap.servers"></a>bootstrap.servers</h2><p>List of host:port pairs of brokers that the producer will use to establish initial connection to the Kafka cluster. This list doesn’t need to include all brokers, since the producer will get more information after the initial connection. But it is rec‐ ommended to include at least two, so in case one broker goes down, the producer will still be able to connect to the cluster.</p>
<h2 id="key-serializer"><a href="#key-serializer" class="headerlink" title="key.serializer"></a>key.serializer</h2><p>Name of a class that will be used to serialize the keys of the records we will pro‐ duce to Kafka. Kafka brokers expect byte arrays as keys and values of messages. However, the producer interface allows, using parameterized types, any Java object to be sent as a key and value. This makes for very readable code, but it also means that the producer has to know how to convert these objects to byte arrays. key.serializer should be set to a name of a class that implements the org.apache.kafka.common.serialization.Serializer interface. The producer will use this class to serialize the key object to a byte array. The Kafka client pack‐ age includes ByteArraySerializer (which doesn’t do much), StringSerializer, and IntegerSerializer, so if you use common types, there is no need to implement your own serializers. Setting key.serializer is required even if you intend to send only values.</p>
<h2 id="value-serializer"><a href="#value-serializer" class="headerlink" title="value.serializer"></a>value.serializer</h2><p>Name of a class that will be used to serialize the values of the records we will pro‐ duce to Kafka. The same way you set key.serializer to a name of a class that will serialize the message key object to a byte array, you set value.serializer to a class that will serialize the message value object.</p>
<h2 id="Sample-code-to-generate-producer-record"><a href="#Sample-code-to-generate-producer-record" class="headerlink" title="Sample code to generate producer record"></a>Sample code to generate producer record</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Properties kafkaProps = <span class="keyword">new</span> Properties();</span><br><span class="line">    kafkaProps.put(<span class="string">"bootstrap.servers"</span>, <span class="string">"broker1:9092,broker2:9092"</span>);</span><br><span class="line">    kafkaProps.put(<span class="string">"key.serializer"</span>,       <span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>);</span><br><span class="line">    kafkaProps.put(<span class="string">"value.serializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>);</span><br><span class="line">    producer = <span class="keyword">new</span> KafkaProducer&lt;String, String&gt;(kafkaProps);</span><br></pre></td></tr></table></figure>

<h2 id="Deliver-message"><a href="#Deliver-message" class="headerlink" title="Deliver message"></a>Deliver message</h2><p>Once we instantiate a producer, it is time to start sending messages. There are three primary methods of sending messages:</p>
<h3 id="Fire-and-forget"><a href="#Fire-and-forget" class="headerlink" title="Fire-and-forget"></a>Fire-and-forget</h3><p>We send a message to the server and don’t really care if it arrives succesfully or not. Most of the time, it will arrive successfully, since Kafka is highly available and the producer will retry sending messages automatically. However, some mes‐ sages will get lost using this method.</p>
<h3 id="Synchronous-send"><a href="#Synchronous-send" class="headerlink" title="Synchronous send"></a>Synchronous send</h3><p>We send a message, the send() method returns a Future object, and we use get() to wait on the future and see if the send() was successful or not.</p>
<h3 id="Asynchronous-send"><a href="#Asynchronous-send" class="headerlink" title="Asynchronous send"></a>Asynchronous send</h3><p>We call the send() method with a callback function, which gets triggered when it receives a response from the Kafka broker.</p>
<p>Sample code</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ProducerRecord&lt;String, String&gt; record =</span><br><span class="line">            <span class="keyword">new</span> ProducerRecord&lt;&gt;(<span class="string">"CustomerCountry"</span>, <span class="string">"Precision Products"</span>,</span><br><span class="line"><span class="string">"France"</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      producer.send(record);  <span class="comment">//fire and forget</span></span><br><span class="line">      producer.send(record).get(); <span class="comment">// synchronously, calling Future.get()</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>We use the producer object send() method to send the ProducerRecord. As we’ve seen in the producer architecture diagram in Figure 3-1, the message will be placed in a buffer and will be sent to the broker in a separate thread. The send() method returns a Java Future object with RecordMetadata</p>
<h3 id="Samle-code-of-asynchronous"><a href="#Samle-code-of-asynchronous" class="headerlink" title="Samle code of asynchronous"></a>Samle code of asynchronous</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoProducerCallback</span> <span class="keyword">implements</span> <span class="title">Callback</span> </span>&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompletion</span><span class="params">(RecordMetadata recordMetadata, Exception e)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">             e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">&#125; &#125;</span><br><span class="line">    ProducerRecord&lt;String, String&gt; record =</span><br><span class="line">            <span class="keyword">new</span> ProducerRecord&lt;&gt;(<span class="string">"CustomerCountry"</span>, <span class="string">"Biomedical Materials"</span>, <span class="string">"USA"</span>);</span><br><span class="line">    producer.send(record, <span class="keyword">new</span> DemoProducerCallback());</span><br></pre></td></tr></table></figure>

<h2 id="Rebalancing"><a href="#Rebalancing" class="headerlink" title="Rebalancing"></a>Rebalancing</h2><p>Moving partition ownership from one consumer to another is called a rebalance. Rebalances are important because they provide the consumer group with high availa‐ bility and scalability (allowing us to easily and safely add and remove consumers), but in the normal course of events they are fairly undesirable. During a rebalance, con‐ sumers can’t consume messages, so a rebalance is basically a short window of unavail‐ ability of the entire consumer group. In addition, when partitions are moved from one consumer to another, the consumer loses its current state; if it was caching any data, it will need to refresh its caches—slowing down the application until the con‐ sumer sets up its state again. Throughout this chapter we will discuss how to safely handle rebalances and how to avoid unnecessary ones.</p>
<h2 id="cosumber"><a href="#cosumber" class="headerlink" title="cosumber"></a>cosumber</h2><h3 id="Subscribing-to-Topics"><a href="#Subscribing-to-Topics" class="headerlink" title="Subscribing to Topics"></a>Subscribing to Topics</h3><p>Once we create a consumer, the next step is to subscribe to one or more topics. The subcribe() method takes a list of topics as a parameter, so it’s pretty simple to use:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">consumer.subscribe(Collections.singletonList(<span class="string">"customerCountries"</span>));</span><br></pre></td></tr></table></figure>

<p>Here we simply create a list with a single element: the topic name customerCountries.</p>
<h3 id="Sample-consumer-code"><a href="#Sample-consumer-code" class="headerlink" title="Sample consumer code"></a>Sample consumer code</h3><p>The Poll Loop<br>At the heart of the consumer API is a simple loop for polling the server for more data. Once the consumer subscribes to topics, the poll loop handles all details of coordina‐ tion, partition rebalances, heartbeats, and data fetching, leaving the developer with a clean API that simply returns available data from the assigned partitions. The main body of a consumer will look as follows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">          ConsumerRecords&lt;String, String&gt; records = consumer.poll(<span class="number">100</span>);</span><br><span class="line">          <span class="keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : records)</span><br><span class="line">          &#123;</span><br><span class="line">              log.debug(<span class="string">"topic = %s, partition = %s, offset = %d,</span></span><br><span class="line"><span class="string">                 customer = %s, country = %s\n"</span>,</span><br><span class="line">                 record.topic(), record.partition(), record.offset(),</span><br><span class="line">                 record.key(), record.value());</span><br><span class="line">              <span class="keyword">int</span> updatedCount = <span class="number">1</span>;</span><br><span class="line">              <span class="keyword">if</span> (custCountryMap.countainsValue(record.value())) &#123;</span><br><span class="line">                  updatedCount = custCountryMap.get(record.value()) + <span class="number">1</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              custCountryMap.put(record.value(), updatedCount)</span><br><span class="line">              JSONObject json = <span class="keyword">new</span> JSONObject(custCountryMap);</span><br><span class="line">              System.out.println(json.toString(<span class="number">4</span>))</span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      consumer.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="Thread-safety"><a href="#Thread-safety" class="headerlink" title="Thread safety"></a>Thread safety</h3><p>Thread Safety<br>You can’t have multiple consumers that belong to the same group in one thread and you can’t have multiple threads safely use the same consumer. One consumer per thread is the rule. To run mul‐ tiple consumers in the same group in one application, you will need to run each in its own thread. It is useful to wrap the con‐ sumer logic in its own object and then use Java’s ExecutorService to start multiple threads each with its own consumer. </p>
<h2 id="Commit"><a href="#Commit" class="headerlink" title="Commit"></a>Commit</h2><p>As discussed before, one of Kafka’s unique characteristics is that it does not track acknowledgments from consumers the way many JMS queues do. Instead, it allows consumers to use Kafka to track their posi‐ tion (offset) in each partition.<br>We call the action of updating the current position in the partition a commit.</p>
<p>How does a consumer commit an offset? It produces a message to Kafka, to a special <code>__consumer_offsets</code> topic, with the committed offset for each partition. As long as all your consumers are up, running, and churning away, this will have no impact. However, if a consumer crashes or a new consumer joins the consumer group, this will trigger a rebalance. After a rebalance, each consumer may be assigned a new set of partitions than the one it processed before. In order to know where to pick up the work, the consumer will read the latest committed offset of each partition and con‐ tinue from there.</p>
<h3 id="Automatic-Commit"><a href="#Automatic-Commit" class="headerlink" title="Automatic Commit"></a>Automatic Commit</h3><p>With autocommit enabled, a call to poll will always commit the last offset returned by the previous poll. It doesn’t know which events were actually processed, so it is critical to always process all the events returned by poll() before calling poll() again. (Just like poll(), close() also commits offsets automatically.) This is usually not an issue, but pay attention when you handle exceptions or exit the poll loop prematurely.</p>
<h3 id="Manual-commit"><a href="#Manual-commit" class="headerlink" title="Manual commit"></a>Manual commit</h3><p>It is important to remember that commitSync() will commit the latest offset returned by poll(), so make sure you call commitSync() after you are done processing all the records in the collection, or you risk missing messages as described previously. When rebalance is triggered, all the messages from the beginning of the most recent batch until the time of the rebalance will be processed twice.<br>Here is how we would use commitSync to commit offsets after we finished processing the latest batch of messages:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        ConsumerRecords&lt;String, String&gt; records = consumer.poll(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : records)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.printf(<span class="string">"topic = %s, partition = %s, offset =</span></span><br><span class="line"><span class="string">              %d, customer = %s, country = %s\n"</span>,</span><br><span class="line">                 record.topic(), record.partition(),</span><br><span class="line">                 record.offset(), record.key(), record.value());</span><br><span class="line">&#125; <span class="keyword">try</span> &#123;</span><br><span class="line">          consumer.commitSync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CommitFailedException e) &#123;</span><br><span class="line">            log.error(<span class="string">"commit failed"</span>, e)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Combining-Synchronous-and-Asynchronous-Commits"><a href="#Combining-Synchronous-and-Asynchronous-Commits" class="headerlink" title="Combining Synchronous and Asynchronous Commits"></a>Combining Synchronous and Asynchronous Commits</h2><p>Normally, occasional failures to commit without retrying are not a huge problem because if the problem is temporary, the following commit will be successful. But if we know that this is the last commit before we close the consumer, or before a reba‐ lance, we want to make extra sure that the commit succeeds.<br>Therefore, a common pattern is to combine commitAsync() with commitSync() just before shutdown. Here is how it works (we will discuss how to commit just before rebalance when we get to the section about rebalance listeners):</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            ConsumerRecords&lt;String, String&gt; records = consumer.poll(<span class="number">100</span>);</span><br><span class="line">            <span class="keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : records) &#123;</span><br><span class="line">                System.out.printf(<span class="string">"topic = %s, partition = %s, offset = %d,</span></span><br><span class="line"><span class="string">                customer = %s, country = %s\n"</span>,</span><br><span class="line">                record.topic(), record.partition(),</span><br><span class="line">                record.offset(), record.key(), record.value());</span><br><span class="line">&#125;</span><br><span class="line">            consumer.commitAsync();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="string">"Unexpected error"</span>, e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            consumer.commitSync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            consumer.close();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Exit"><a href="#Exit" class="headerlink" title="Exit"></a>Exit</h2><p>When you decide to exit the poll loop, you will need another thread to call con sumer.wakeup(). If you are running the consumer loop in the main thread, this can be done from ShutdownHook. <code>Note that consumer.wakeup() is the only consumer method that is safe to call from a different thread.</code> Calling wakeup will cause poll() to exit with WakeupException, or if consumer.wakeup() was called while the thread was not waiting on poll, the exception will be thrown on the next iteration when poll() is called. </p>
<h1 id="The-Controller"><a href="#The-Controller" class="headerlink" title="The Controller"></a>The Controller</h1><p>The controller is one of the Kafka brokers that, in addition to the usual broker func‐ tionality, is responsible for electing partition leaders (we’ll discuss partition leaders and what they do in the next section). The first broker that starts in the cluster becomes the controller by creating an ephemeral node in ZooKeeper called /control ler. When other brokers start, they also try to create this node, but receive a “node already exists” exception, which causes them to “realize” that the controller node already exists and that the cluster already has a controller. </p>
<h1 id="Replication"><a href="#Replication" class="headerlink" title="Replication"></a>Replication</h1><p>Replication is at the heart of Kafka’s architecture. The very first sentence in Kafka’s documentation describes it as “a distributed, partitioned, replicated commit log ser‐ vice.” Replication is critical because it is the way Kafka guarantees availability and durability when individual nodes inevitably fail.</p>
<h2 id="Memeroy"><a href="#Memeroy" class="headerlink" title="Memeroy"></a>Memeroy</h2><p>Kafka should run entirely on RAM. JVM heap size shouldn’t be bigger than your available RAM. That is to avoid swapping.</p>
<h3 id="Swap-usage"><a href="#Swap-usage" class="headerlink" title="Swap usage"></a>Swap usage</h3><p>Watch for swap usage, as it will degrade performance on Kafka and lead to operations timing out (set vm.swappiness = 0).    When used swap is &gt; 128MB.</p>
<h1 id="Kafka-Monitoring-Tools"><a href="#Kafka-Monitoring-Tools" class="headerlink" title="Kafka Monitoring Tools"></a>Kafka Monitoring Tools</h1><p>Any monitoring tools with JMX support should be able to monitor a Kafka cluster. Here are 3 monitoring tools we liked:</p>
<p>First one is check_kafka.pl from Hari Sekhon. It performs a complete end to end test, i.e. it inserts a message in Kafka as a producer and then extracts it as a consumer. This makes our life easier when measuring service times.</p>
<p>Another useful tool is KafkaOffsetMonitor for monitoring Kafka consumers and their position (offset) in the queue. It aids our understanding of how our queue grows and which consumers groups are lagging behind.</p>
<p>Last but not least, the LinkedIn folks have developed what we think is the smartest tool out there: Burrow. It analyzes consumer offsets and lags over a window of time and determines the consumer status. You can retrieve this status over an HTTP endpoint and then plug it into your favourite monitoring tool (Server Density for example).</p>
<p>Oh, and we would be amiss if we didn’t mention Yahoo’s Kafka-Manager. While it does include some basic monitoring, it is more of a management tool. If you are just looking for a Kafka management tool, check out AirBnb’s kafkat.</p>
<h1 id="commands"><a href="#commands" class="headerlink" title="commands"></a>commands</h1><h2 id="Start-zookeeper"><a href="#Start-zookeeper" class="headerlink" title="Start zookeeper"></a>Start zookeeper</h2><p>bin/zookeeper-server-start.sh config/zookeeper.properties</p>
<p>bin/kafka-server-start.sh config/server.properties</p>
<p>~/dev/git/kafka-demo/kafka_2.11-2.0.0/bin/kafka-topics.sh –create –zookeeper localhost:2181 –replication-factor 1 –partitions 1 –topic todtest<br> bin/kafka-topics.sh –list –zookeeper localhost:2181<br>bin/kafka-console-producer.sh –broker-list localhost:9092 –topic todtest<br>bin/kafka-console-consumer.sh –bootstrap-server localhost:9092 –topic todtest –from-beginning</p>
<p>bin/kafka-topics.sh –describe –zookeeper localhost:2181 –topic test</p>
<h2 id="list-topics"><a href="#list-topics" class="headerlink" title="list topics"></a>list topics</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./kafka-topics.sh --list --zookeeper localhost:2181</span><br></pre></td></tr></table></figure>

<h2 id="describe-topics"><a href="#describe-topics" class="headerlink" title="describe topics"></a>describe topics</h2><p>./kafka-topics.sh –describe –zookeeper localhost:2181</p>
<h3 id="using-connector"><a href="#using-connector" class="headerlink" title="using connector"></a>using connector</h3><p>bin/connect-standalone.sh config/connect-standalone.properties config/connect-file-source.properties config/connect-file-sink.properties</p>
<p>mvn archetype:generate <br>    -DarchetypeGroupId=org.apache.kafka <br>    -DarchetypeArtifactId=streams-quickstart-java <br>    -DarchetypeVersion=2.0.0 <br>    -DgroupId=io <br>    -DartifactId=todzhang <br>    -Dversion=0.1 <br>    -Dpackage=todzhangapp</p>
<h1 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h1><p>The keystore stores each machine’s own identity. The truststore stores all the certificates that the machine should trust. Importing a certificate into one’s truststore also means trusting all certificates that are signed by that certificate. As the analogy above, trusting the government (CA) also means trusting all passports (certificates) that it has issued. This attribute is called the chain of trust, and it is particularly useful when deploying SSL on a large Kafka cluster. You can sign all certificates in the cluster with a single CA, and have all machines share the same truststore that trusts the CA. That way all machines can authenticate all other machines.</p>
<p>To deploy SSL, the general steps are:</p>
<ul>
<li>Generate the keys and certificates</li>
<li>Create your own Certificate Authority (CA)</li>
<li>Sign the certificate</li>
</ul>
<p>Generate the key and the certificate for each Kafka broker in the cluster. Generate the key into a keystore called kafka.server.keystore so that you can export and sign it later with CA. The keystore file contains the private key of the certificate; therefore, it needs to be kept safely.</p>
<h2 id="With-user-prompts"><a href="#With-user-prompts" class="headerlink" title="With user prompts"></a>With user prompts</h2><p>keytool -keystore kafka.server.keystore.jks -alias localhost -genkey</p>
<h2 id="Without-user-prompts-pass-command-line-arguments"><a href="#Without-user-prompts-pass-command-line-arguments" class="headerlink" title="Without user prompts, pass command line arguments"></a>Without user prompts, pass command line arguments</h2><p>keytool -keystore kafka.server.keystore.jks -alias localhost -validity {validity} -genkey -storepass {keystore-pass} -keypass {key-pass} -dname {distinguished-name} -ext SAN=DNS:{hostname}<br>Ensure that the common name (CN) exactly matches the fully qualified domain name (FQDN) of the server. The client compares the CN with the DNS domain name to ensure that it is indeed connecting to the desired server, not a malicious one. The hostname of the server can also be specified in the Subject Alternative Name (SAN). Since the distinguished name is used as the server principal when SSL is used as the inter-broker security protocol, it is useful to have hostname as a SAN rather than the CN.</p>
<h2 id="Create-your-own-Certificate-Authority-CA"><a href="#Create-your-own-Certificate-Authority-CA" class="headerlink" title="Create your own Certificate Authority (CA)"></a>Create your own Certificate Authority (CA)</h2><p>Generate a CA that is simply a public-private key pair and certificate, and it is intended to sign other certificates.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl req -new -x509 -keyout ca-key -out ca-cert -days &#123;validity&#125;</span><br></pre></td></tr></table></figure>

<p>Add the generated CA to the clients’ truststore so that the clients can trust this CA:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">keytool -keystore kafka.client.truststore.jks -<span class="built_in">alias</span> CARoot -import -file ca-cert</span><br></pre></td></tr></table></figure>

<p>Add the generated CA to the brokers’ truststore so that the brokers can trust this CA.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">keytool -keystore kafka.server.truststore.jks -<span class="built_in">alias</span> CARoot -import -file ca-cert</span><br></pre></td></tr></table></figure>

<h2 id="Sign-the-certificate"><a href="#Sign-the-certificate" class="headerlink" title="Sign the certificate"></a>Sign the certificate</h2><p>To sign all certificates in the keystore with the CA that you generated:</p>
<p>Export the certificate from the keystore:</p>
<p>keytool -keystore kafka.server.keystore.jks -alias localhost -certreq -file cert-file<br>Sign it with the CA:</p>
<p>openssl x509 -req -CA ca-cert -CAkey ca-key -in cert-file -out cert-signed -days {validity} -CAcreateserial -passin pass:{ca-password}<br>Import both the certificate of the CA and the signed certificate into the broker keystore:</p>
<p>keytool -keystore kafka.server.keystore.jks -alias CARoot -import -file ca-cert<br>keytool -keystore kafka.server.keystore.jks -alias localhost -import -file cert-signed</p>
<h2 id="SASL"><a href="#SASL" class="headerlink" title="SASL"></a>SASL</h2><p>Simple Authentication and Security Layer (SASL) is a framework for authentication and data security in Internet protocols. It decouples authentication mechanisms from application protocols, in theory allowing any authentication mechanism supported by SASL to be used in any application protocol that uses SASL. Authentication mechanisms can also support proxy authorization, a facility allowing one user to assume the identity of another. They can also provide a data security layer offering data integrity and data confidentiality services. DIGEST-MD5 provides an example of mechanisms which can provide a data-security layer. Application protocols that support SASL typically also support Transport Layer Security (TLS) to complement the services offered by SASL.</p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://blog.serverdensity.com/how-to-monitor-kafka/" target="_blank" rel="noopener">https://blog.serverdensity.com/how-to-monitor-kafka/</a></li>
</ul>
]]></content>
      <tags>
        <tag>2018-08-16-Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>Conversations with God</title>
    <url>/2019-09-12-Conversations-with-God/</url>
    <content><![CDATA[<p>Feelings is the language of the soul.<br>If you want to know what’s true for you about something, look to how your’re feeling about.</p>
]]></content>
  </entry>
  <entry>
    <title>Java Deep Notes</title>
    <url>/2020-05-10-Java-Deep-Notes/</url>
    <content><![CDATA[<p>Java Deep Notes</p>
<h1 id="Is-string-concatenation-a-devil"><a href="#Is-string-concatenation-a-devil" class="headerlink" title="Is string concatenation a devil?"></a>Is string concatenation a devil?</h1><p>In fact, a string concatenation is going to be just fine, as the javac compiler will optimize the string concatenation as a series of append operations on a StringBuilder anyway. Here’s a part of the disassembly of the bytecode from the for loop from the above program:</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Kafka In Spring</title>
    <url>/2019-09-02-Kafka-In-Spring/</url>
    <content><![CDATA[<p>Enable Kafka listener annotated endpoints that are created under the covers by a AbstractListenerContainerFactory. To be used on Configuration classes as follows:<br>   @Configuration<br>   @EnableKafka<br>   public class AppConfig {<br>       @Bean<br>       public ConcurrentKafkaListenerContainerFactory myKafkaListenerContainerFactory() {<br>           ConcurrentKafkaListenerContainerFactory factory = new ConcurrentKafkaListenerContainerFactory();<br>           factory.setConsumerFactory(consumerFactory());<br>           factory.setConcurrency(4);<br>           return factory;<br>       }<br>       // other @Bean definitions<br>   }</p>
<p>The KafkaListenerContainerFactory is responsible to create the listener container for a particular endpoint. Typical implementations, as the ConcurrentKafkaListenerContainerFactory used in the sample above, provides the necessary configuration options that are supported by the underlying MessageListenerContainer.<br>@EnableKafka enables detection of KafkaListener annotations on any Spring-managed bean in the container. For example, given a class MyService:<br>   package com.acme.foo;</p>
<p>   public class MyService {<br>       @KafkaListener(containerFactory = “myKafkaListenerContainerFactory”, topics = “myTopic”)<br>       public void process(String msg) {<br>           // process incoming message<br>       }<br>   }</p>
<p>The container factory to use is identified by the containerFactory attribute defining the name of the KafkaListenerContainerFactory bean to use. When none is set a KafkaListenerContainerFactory bean with name kafkaListenerContainerFactory is assumed to be present.<br>the following configuration would ensure that every time a message is received from topic “myQueue”, MyService.process() is called with the content of the message:<br>   @Configuration<br>   @EnableKafka<br>   public class AppConfig {<br>       @Bean<br>       public MyService myService() {<br>           return new MyService();<br>       }</p>
<pre><code>// Kafka infrastructure setup</code></pre><p>   }</p>
<p>Alternatively, if MyService were annotated with @Component, the following configuration would ensure that its @KafkaListener annotated method is invoked with a matching incoming message:<br>   @Configuration<br>   @EnableKafka<br>   @ComponentScan(basePackages = “com.acme.foo”)<br>   public class AppConfig {<br>   }</p>
<p>Note that the created containers are not registered with the application context but can be easily located for management purposes using the KafkaListenerEndpointRegistry.<br>Annotated methods can use a flexible signature; in particular, it is possible to use the Message abstraction and related annotations, see KafkaListener Javadoc for more details. For instance, the following would inject the content of the message and the kafka partition header:<br>   @KafkaListener(containerFactory = “myKafkaListenerContainerFactory”, topics = “myTopic”)<br>   public void process(String msg, @Header(“kafka_partition”) int partition) {<br>       // process incoming message<br>   }</p>
<p>These features are abstracted by the MessageHandlerMethodFactory that is responsible to build the necessary invoker to process the annotated method. By default, DefaultMessageHandlerMethodFactory is used.<br>When more control is desired, a @Configuration class may implement KafkaListenerConfigurer. This allows access to the underlying KafkaListenerEndpointRegistrar instance. The following example demonstrates how to specify an explicit default KafkaListenerContainerFactory<br>   {<br>       @code<br>       @Configuration<br>       @EnableKafka<br>       public class AppConfig implements KafkaListenerConfigurer {<br>           @Override<br>           public void configureKafkaListeners(KafkaListenerEndpointRegistrar registrar) {<br>               registrar.setContainerFactory(myKafkaListenerContainerFactory());<br>           }</p>
<pre><code>    @Bean
    public KafkaListenerContainerFactory&lt;?, ?&gt; myKafkaListenerContainerFactory() {
        // factory settings
    }

    @Bean
    public MyService myService() {
        return new MyService();
    }
}</code></pre><p>   }</p>
<p>It is also possible to specify a custom KafkaListenerEndpointRegistry in case you need more control on the way the containers are created and managed. The example below also demonstrates how to customize the org.springframework.messaging.handler.annotation.support.DefaultMessageHandlerMethodFactory as well as how to supply a custom Validator so that payloads annotated with Validated are first validated against a custom Validator.<br>   {<br>       @code<br>       @Configuration<br>       @EnableKafka<br>       public class AppConfig implements KafkaListenerConfigurer {<br>           @Override<br>           public void configureKafkaListeners(KafkaListenerEndpointRegistrar registrar) {<br>               registrar.setEndpointRegistry(myKafkaListenerEndpointRegistry());<br>               registrar.setMessageHandlerMethodFactory(myMessageHandlerMethodFactory);<br>               registrar.setValidator(new MyValidator());<br>           }</p>
<pre><code>    @Bean
    public KafkaListenerEndpointRegistry myKafkaListenerEndpointRegistry() {
        // registry configuration
    }

    @Bean
    public MessageHandlerMethodFactory myMessageHandlerMethodFactory() {
        DefaultMessageHandlerMethodFactory factory = new DefaultMessageHandlerMethodFactory();
        // factory configuration
        return factory;
    }

    @Bean
    public MyService myService() {
        return new MyService();
    }
}</code></pre><p>   }</p>
<p>Implementing KafkaListenerConfigurer also allows for fine-grained control over endpoints registration via the KafkaListenerEndpointRegistrar. For example, the following configures an extra endpoint:<br>   {<br>       @code<br>       @Configuration<br>       @EnableKafka<br>       public class AppConfig implements KafkaListenerConfigurer {<br>           @Override<br>           public void configureKafkaListeners(KafkaListenerEndpointRegistrar registrar) {<br>               SimpleKafkaListenerEndpoint myEndpoint = new SimpleKafkaListenerEndpoint();<br>               // … configure the endpoint<br>               registrar.registerEndpoint(endpoint, anotherKafkaListenerContainerFactory());<br>           }</p>
<pre><code>    @Bean
    public MyService myService() {
        return new MyService();
    }

    @Bean
    public KafkaListenerContainerFactory&lt;?, ?&gt; anotherKafkaListenerContainerFactory() {
        // ...
    }

    // Kafka infrastructure setup
}</code></pre><p>   }</p>
<p>Note that all beans implementing KafkaListenerConfigurer will be detected and invoked in a similar fashion. The example above can be translated in a regular bean definition registered in the context in case you use the XML configuration.<br>See Also:<br>KafkaListener, KafkaListenerAnnotationBeanPostProcessor, org.springframework.kafka.config.KafkaListenerEndpointRegistrar, org.springframework.kafka.config.KafkaListenerEndpointRegistry<br>  spring-kafka-dist.spring-kafka.main</p>
<h1 id="flush"><a href="#flush" class="headerlink" title="flush"></a>flush</h1><p>If you wish to block the sending thread, to await the result, you can invoke the future’s get() method. You may wish to invoke flush() before waiting or, for convenience, the template has a constructor with an autoFlush parameter which will cause the template to flush() on each send. Note, however that flushing will likely significantly reduce performance.</p>
<h2 id="Non-Blocking-Async"><a href="#Non-Blocking-Async" class="headerlink" title="Non Blocking (Async)."></a>Non Blocking (Async).</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendToKafka</span><span class="params">(<span class="keyword">final</span> MyOutputData data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> ProducerRecord&lt;String, String&gt; record = createRecord(data);</span><br><span class="line">ListenableFuture&lt;SendResult&lt;Integer, String&gt;&gt; future = template.send(record); future.addCallback(<span class="keyword">new</span> ListenableFutureCallback&lt;SendResult&lt;Integer, String&gt;&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(SendResult&lt;Integer, String&gt; result)</span> </span>&#123; handleSuccess(data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Throwable ex)</span> </span>&#123; handleFailure(data, record, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;); &#125;</span><br></pre></td></tr></table></figure>

<h2 id="Blocking-Sync"><a href="#Blocking-Sync" class="headerlink" title="Blocking (Sync)."></a>Blocking (Sync).</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendToKafka</span><span class="params">(<span class="keyword">final</span> MyOutputData data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> ProducerRecord&lt;String, String&gt; record = createRecord(data);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">template.send(record).get(<span class="number">10</span>, TimeUnit.SECONDS); handleSuccess(data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">        handleFailure(data, record, e.getCause());</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">catch</span> (TimeoutException | InterruptedException e) &#123; handleFailure(data, record, e);</span><br><span class="line">&#125; &#125;</span><br></pre></td></tr></table></figure>

<h2 id="KafkaTransactionManager"><a href="#KafkaTransactionManager" class="headerlink" title="KafkaTransactionManager"></a>KafkaTransactionManager</h2><p>The <code>KafkaTransactionManager</code> is an implementation of Spring Framework’s <code>PlatformTransactionManager</code>;</p>
]]></content>
  </entry>
  <entry>
    <title>Java 8 Tips</title>
    <url>/2017-01-14-Java-8/</url>
    <content><![CDATA[<h1 id="This-blog-is-listing-key-new-features-introduced-in-Java-8"><a href="#This-blog-is-listing-key-new-features-introduced-in-Java-8" class="headerlink" title="This blog is listing key new features introduced in Java 8"></a>This blog is listing key new features introduced in Java 8</h1><p>It is best to think of a lambda expression as a function, not an object, and to accept that it can be converted to a functional interface.</p>
<h2 id="New-comparator-method-in-Java-8"><a href="#New-comparator-method-in-Java-8" class="headerlink" title="New comparator method in Java 8"></a>New comparator method in Java 8</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Track&gt; tracks = asList(<span class="keyword">new</span> Track(<span class="string">"Bakai"</span>, <span class="number">524</span>),</span><br><span class="line">                            <span class="keyword">new</span> Track(<span class="string">"Violets for Your Furs"</span>, <span class="number">378</span>),</span><br><span class="line">                            <span class="keyword">new</span> Track(<span class="string">"Time Was"</span>, <span class="number">451</span>));</span><br><span class="line"></span><br><span class="line">Track shortestTrack = tracks.stream()</span><br><span class="line">                            .min(Comparator.comparing(track -&gt; track.getLength()))</span><br><span class="line">                            .get();</span><br><span class="line"></span><br><span class="line">assertEquals(tracks.get(<span class="number">1</span>), shortestTrack);</span><br></pre></td></tr></table></figure>

<p>When we think about maximum and minimum elements, the first thing we need to think about is the ordering that we’re going to be using. When it comes to finding the shortest track, the ordering is provided by the length of the ”</p>
<p>In order to inform the Stream that we’re using the length of the track, we give it a Comparator. Conveniently, Java 8 has added a static method called comparing that lets us build a comparator using keys. Previously, we always encountered an ugly pattern in which we had to write code that got a field out of both the objects being compared, then compare these field values. Now, to get the same element out of both elements being compared, we just provide a getter function for the value. In this case we’ll use length, which is a getter function in disguise.<br>It’s worth reflecting on the comparing method for a moment. This is actually a function that takes a function and returns a function. Pretty meta, I know, but also incredibly useful. At any point in the past, this method could have been added to the Java standard library, but the poor readability and verbosity issues surrounding anonymous inner classes would have made it impractical. Now, with lambda expressions, it’s convenient and concise.<br>”
But thinking of passing code to methods as a mere consequence of Streamsdownplays its range of uses within Java 8. It gives you a new concise way to express behavior parameterization.</p>
<p>It might sound surprising, but interfaces in Java 8 can now declare methods with implementation code; this can happen in two ways. First, Java 8 allows static methods inside interfaces. Second, Java 8 introduces a new feature called default methods that allows you to provide a default implementation for methods in an interface. In other words, interfaces can provide concrete implementation for methods. As a result, existing classes implementing an interface will automatically inherit the default implementations if they don’t provide one explicitly. This allows you to evolve interfaces nonintrusively. You’ve been using several default methods all along. Two examples you’ve seen are sort in the List interface and stream in the Collection interface.<br>Wow! Are interfaces like abstract classes now? Yes and no; there are fundamental differences, which we explain in this chapter. But more important, why should you care about default methods? The main users of default methods are library designers. As we explain later, default methods were introduced to evolve libraries such as the Java API in a compatible way,</p>
<p>Now that static methods can exist inside interfaces, such utility classes in your code can go away and their static methods can be moved inside an interface. These companion classes will remain in the Java API in order to preserve backward compatibility.<br>Adding a new method to an interface is binary compatible; this means existing class file implementations will still run without the implementation of the new method, if there’s no attempt to recompile them. In this case the game will still run (unless it’s recompiled) despite adding the method setRelativeSize to the Resizable interface</p>
<h2 id="Abstract-classes-vs-interfaces-in-Java-8"><a href="#Abstract-classes-vs-interfaces-in-Java-8" class="headerlink" title="Abstract classes vs. interfaces in Java 8"></a>Abstract classes vs. interfaces in Java 8</h2><p>So what’s the difference between an abstract class and an interface? They both can contain abstract methods and methods with a body.</p>
<ul>
<li><p>First, a class can extend only from one abstract class, but a class can implement multiple interfaces.</p>
</li>
<li><p>Second, an abstract class can enforce a common state through instance variables (fields). An interface can’t have instance variables.</p>
</li>
</ul>
<p>Keeping interfaces minimal and orthogonal lets you achieve great reuse and composition of behavior inside your codebase.</p>
<p>Minimal interfaces with orthogonal functionalities<br>Inheritance considered harmful<br>Inheritance shouldn’t be your answer to everything when it comes down to reusing code. For example, inheriting from a class that has 100 methods and fields just to reuse one method is a bad idea, because it adds unnecessary complexity. You’d be better off using delegation: create a method that calls directly the method of the class you need via a member variable. This is why you’ll sometime find classes that are declared “final” intentionally: they can’t be inherited from to prevent this kind of antipattern or have their core behavior messed with. Note that sometimes final classes have a place; for example, String is final because we don’t want anybody to be able to interfere with such core functionality.</p>
<h2 id="Three-resolution-rules-to-know"><a href="#Three-resolution-rules-to-know" class="headerlink" title="Three resolution rules to know"></a>Three resolution rules to know</h2><p>There are three rules to follow when a class inherits a method with the same signature from multiple places (such as another class or interface):</p>
<ol>
<li><p>Classes always win. A method declaration in the class or a superclass takes priority over any default method declaration.</p>
</li>
<li><p>Otherwise, sub-interfaces win: the method with the same signature in the most specific default-providing interface is selected. (If B extends A, B is more specific than A).</p>
</li>
<li><p>Finally, if the choice is still ambiguous, the class inheriting from multiple interfaces has to explicitly select which default method implementation to use by overriding it and calling the desired method explicitly.</p>
</li>
</ol>
<p>These are the only rules you need to know! </p>
<h2 id="Lambda-Interfaces"><a href="#Lambda-Interfaces" class="headerlink" title="Lambda Interfaces"></a>Lambda Interfaces</h2><p>This conversion to interfaces is what makes lambda expressions so compelling. The syntax is short and simple.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BiFunction&lt;String, String, Integer&gt; comp</span><br><span class="line">   = (first, second) -&gt; Integer.compare(first.length(), second.length());</span><br></pre></td></tr></table></figure>

<p>The expression System.out::printlnis a method reference that is equivalent to the lambda expression x -&gt; System.out.println(x).</p>
<p>There are three principal cases:</p>
<ul>
<li>object::instanceMethod</li>
<li>Class::staticMethod</li>
<li>Class::instanceMethod</li>
</ul>
<p>In the third case, the first parameter becomes the target of the method. For example, String::compareToIgnoreCaseis the same as (x, y) -&gt; x.compareToIgnoreCase(y).</p>
<p>Just like lambda expressions, method references don’t live in isolation. They are always turned into instances of functional interfaces.</p>
<h2 id="Constructor-References"><a href="#Constructor-References" class="headerlink" title="Constructor References"></a>Constructor References</h2><p><code>Constructor references are just like method references, except that the name of the method is new</code>å. For example, Button::new is a reference to a Button constructor. Which constructor? It depends on the context.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; labels = ...;</span><br><span class="line">Stream&lt;Button&gt; stream = labels.stream().map(Button::<span class="keyword">new</span>);</span><br><span class="line">List&lt;Button&gt; buttons = stream.collect(Collectors.toList());</span><br></pre></td></tr></table></figure>

<p>For example, suppose we want to have an array of buttons. The Stream interface has a toArraymethod that returns an Object array:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object[] buttons = stream.toArray();</span><br></pre></td></tr></table></figure>

<p>we need to refine our understanding of a lambda expression. A lambda expression has three ingredients:</p>
<ol>
<li>A block of code</li>
<li>Parameters</li>
<li>Values for the free variables, that is, the variables that are not parameters and not defined inside the code</li>
</ol>
<p>The technical term for a block of code together with the values of the free variables is a closure. If someone gloats that their language has closures, rest assured that Java has them as well. In Java, lambda expressions are closures. In fact, inner classes have been closures all along. Java 8 gives us closures with an attractive syntax.</p>
<p>Inner classes can also capture values from an enclosing scope. Before Java 8, inner classes were only allowed to access finallocal variables. This rule has now been relaxed to match that for lambda expressions. An inner class can access any effectively final local variable—that is, any variable whose value does not change.</p>
<p>When you use the this keyword in a lambda expression, you refer to the this parameter of the method that creates the lambda. For example, consider</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      Runnable runner = () -&gt; &#123; ...; System.out.println(<span class="keyword">this</span>.toString()); ... &#125;;</span><br><span class="line">      ...</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The expression this.toString()calls the toString method of the Application object, not the Runnable instance. There is nothing special about the use of this in a lambda expression. The scope of the lambda expression is nested inside the doWork method, and this has the same meaning anywhere in that method.</p>
<h1 id="default-methods"><a href="#default-methods" class="headerlink" title="default methods"></a>default methods</h1><p>The Java designers decided to solve this problem once and for all by allowing interface methods with concrete implementations (called default methods). Those methods can be safely added to existing interfaces.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">long</span> <span class="title">getId</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">default</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">"John Q. Public"</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The interface has two methods: getId, which is an abstract method, and the default method getName. A concrete class that implements the Person interface must, of course, provide an implementation of getId, but it can choose to keep the implementation of getName or to override it.</p>
<p>Default methods put an end to the classic pattern of providing an interface and an abstract class that implements most or all of its methods, such as Collection/AbstractCollectionor/WindowListener/WindowAdapter. Now you can just implement the methods in the interface.</p>
<p>To compare Person objects by name, use Comparator.comparing(Person::getName).</p>
<p>we have compared strings by length with the lambda expression </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(first, second) -&gt; Integer.compare(first.length(), second.length()).</span><br></pre></td></tr></table></figure>

<p>But with the static compare method, we can do much better and simply use </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Comparator.comparing(String::length).</span><br></pre></td></tr></table></figure>

<p>In Java 8, static methods have been added to quite a few interfaces. For example, the Comparator interface has a very useful static comparing method that accepts a “key extraction” function and yields a comparator that compares the extracted keys.</p>
<h2 id="Stream-vs-collections"><a href="#Stream-vs-collections" class="headerlink" title="Stream vs collections"></a>Stream vs collections</h2><p>A stream seems superficially similar to a collection, allowing you to transform and retrieve data. But there are significant differences:</p>
<ul>
<li>A stream does not store its elements. They may be stored in an underlying collection or generated on demand.</li>
<li>Stream operations don’t mutate their source. Instead, they return new streams that hold the result.</li>
<li>Stream operations are lazy when possible. This means they are not executed until their result is needed. For example, if you only ask for the first five long words instead of counting them all, then the filter method will stop filtering after the fifth match. As a consequence, you can even have infinite streams!</li>
</ul>
<p><code>Streams follow the “what, not how” principle</code>. In our stream example, we describe what needs to be done: get the long words and count them. We don’t specify in which order, or in which thread, this should happen.</p>
<h2 id="Work-with-streams"><a href="#Work-with-streams" class="headerlink" title="Work with streams"></a>Work with streams</h2><p>When you work with streams, you set up a pipeline of operations in three stages.</p>
<ol>
<li>You create a stream.</li>
<li>You specify intermediate operations for transforming the initial stream into others, in one or more steps.</li>
<li>You apply a terminal operation to produce a result. This operation forces the execution of the lazy operations that precede it. Afterwards, the stream can no longer be used.</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> count = words.parallelStream().filter(w -&gt; w.length() &gt; <span class="number">12</span>).count();</span><br></pre></td></tr></table></figure>

<p>Stream operations are not executed on the elements in the order in which they are invoked on the streams. In our example, nothing happens until count is called. When the count method asks for the first element, then the filter method starts requesting elements, until it finds one that has length &gt; 12.</p>
<p>To produce infinite sequences such as 0 1 2 3 …, use the iterate method instead. It takes a “seed” value and a function (technically, a UnaryOperator<t>), and repeatedly applies the function to the previous result. For example,</t></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;BigInteger&gt; integers</span><br><span class="line">   = Stream.iterate(BigInteger.ZERO, n -&gt; n.add(BigInteger.ONE));</span><br></pre></td></tr></table></figure>

<p>The first element in the sequence is the seed</p>
<p>You can use the following statement to split a string into words:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; words</span><br><span class="line">   = Pattern.compile(<span class="string">"[\\P&#123;L&#125;]+"</span>).splitAsStream(contents);</span><br></pre></td></tr></table></figure>

<p>The static Files.linesmethod returns a Stream of all lines in a file.</p>
<p>The Stream interface has AutoCloseableas a superinterface. When the close method is called on the stream, the underlying file is also closed.</p>
<p>To make sure that this happens, it is best to use the Java 7 try-with-resources statement:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (Stream&lt;String&gt; lines = Files.lines(path)) &#123;</span><br><span class="line">   Do something with lines</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The stream, and the underlying file with it, will be closed when the try block exits normally or through an exception.</p>
<p>The filter, map, and flatMapMethods<br>A stream transformation reads data from a stream and puts the transformed data into another stream. You have already seen the filter transformation that yields a new stream with all elements that match a certain condition.</p>
<p>2.3. The filter, map, and flatMap Methods<br>A stream transformation reads data from a stream and puts the transformed data into another stream. You have already seen the filtertransformation that yields a new stream with all elements that match a certain condition. Here, we transform a stream of strings into another stream containing only long words:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; wordList = ...;</span><br><span class="line">Stream&lt;String&gt; words = wordList.stream();</span><br><span class="line">Stream&lt;String&gt; longWords = words.filter(w -&gt; w.length() &gt; <span class="number">12</span>);</span><br></pre></td></tr></table></figure>

<p>The argument of filter is a Predicate<t>—that is, a function from T to boolean.</t></p>
<p>Often, you want to transform the values in a stream in some way. Use the map method and pass the function that carries out the transformation. For example, you can transform all words to lowercase like this:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; lowercaseWords = words.map(String::toLowerCase);</span><br></pre></td></tr></table></figure>

<p>Here, we used mapwith a method reference. Often, you will use a lambda expression instead:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Character&gt; firstChars = words.map(s -&gt; s.charAt(<span class="number">0</span>));</span><br></pre></td></tr></table></figure>

<p>The resulting stream contains the first character of each word.</p>
<p>When you use map, a function is applied to each element, and the return values are collected in a new stream. Now suppose that you have a function that returns not just one value but a stream of values, such as this one:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Stream&lt;Character&gt; <span class="title">characterStream</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">   List&lt;Character&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">char</span> c : s.toCharArray()) result.add(c);</span><br><span class="line">   <span class="keyword">return</span> result.stream();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>For example, characterStream(“boat”)is the stream [‘b’, ‘o’, ‘a’, ‘t’]. Suppose you map this method on a stream of strings:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Stream&lt;Character&gt;&gt; result = words.map(w -&gt; characterStream(w));</span><br></pre></td></tr></table></figure>

<p>You will get a stream of streams, like [… [‘y’, ‘o’, ‘u’, ‘r’], [‘b’, ‘o’, ‘a’, ‘t’], …] To flatten it out to a stream of characters [… ‘y’, ‘o’, ‘u’, ‘r’, ‘b’, ‘o’, ‘a’, ‘t’, …], use the flatMapmethod instead of map:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Character&gt; letters = words.flatMap(w -&gt; characterStream(w))</span><br><span class="line">    <span class="comment">// CallscharacterStream on each word and flattens the results</span></span><br></pre></td></tr></table></figure>

<p> NOTE</p>
<p>You may find a flatMap method in classes other than streams. It is a general concept in computer science. Suppose you have a generic type G (such as Stream) and functions ffrom some type T to G<u>and g from U to G<v>. Then you can compose them, that is, first apply f and then g, by using flatMap. This is a key idea in the theory of monads. But don’t worry—you can use flatMapwithout knowing anything about monads.</v></u></p>
<p>This method is particularly useful for cutting infinite streams down to size. For example,</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Double&gt; randoms = Stream.generate(Math::random).limit(<span class="number">100</span>);</span><br></pre></td></tr></table></figure>

<p>yields a stream with 100 random numbers.</p>
<p>The peek method yields another stream with the same elements as the original, but a function is invoked every time an element is retrieved. That is handy for debugging:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object[] powers = Stream.iterate(<span class="number">1.0</span>, p -&gt; p * <span class="number">2</span>)</span><br><span class="line">   .peek(e -&gt; System.out.println(<span class="string">"Fetching "</span> + e))</span><br><span class="line">   .limit(<span class="number">20</span>).toArray();</span><br></pre></td></tr></table></figure>

<p>When an element is actually accessed, a message is printed. This way you can verify that the infinite stream returned by iterate is processed lazily.</p>
<p>The stream transformations of the preceding sections were stateless. When an element is retrieved from a filtered or mapped stream, the answer does not depend on the previous elements. There are also a few stateful transformations. For example, the distinct method returns a stream that yields elements from the original stream, in the same order, except that duplicates are suppressed.</p>
<p>The stream must obviously remember the elements that it has already seen.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; uniqueWords</span><br><span class="line">   = Stream.of(<span class="string">"merrily"</span>, <span class="string">"merrily"</span>, <span class="string">"merrily"</span>, <span class="string">"gently"</span>).distinct();</span><br><span class="line">   <span class="comment">// Only one"merrily" is retained</span></span><br></pre></td></tr></table></figure>

<p>The sorted method must see the entire stream and sort it before it can give out any elements—after all, the smallest one might be the last one. Clearly, you can’t sort an infinite stream.</p>
<p>There are several sorted methods. One works for streams of Comparableelements, and another accepts a Comparator. Here, we sort strings so that the longest ones come first:</p>
<p>Click here to view code image</p>
<p>Stream<string> longestFirst =<br>   words.sorted(Comparator.comparing(String::length).reversed());<br>Of course, you can sort a collection without using streams. The sorted method is useful when the sorting process is a part of a stream pipeline.</string></p>
<p> NOTE</p>
<p>The Collections.sortmethod sorts a collection in place, whereas Stream.sortedreturns a new sorted stream.</p>
<p>The methods that we cover in this section are called reductions. They reduce the stream to a value that can be used in your program. Reductions are terminal operations. After a terminal operation has been applied, the stream ceases to be usable.</p>
<p>In Java 8, the Optional type is the preferred way of indicating a missing return value. We discuss the Optional type in detail in the next section. Here is how you can get the maximum of a stream:</p>
<p>Click here to view code image</p>
<p>Optional<string> largest = words.max(String::compareToIgnoreCase);<br>if (largest.isPresent())<br>   System.out.println(“largest: “ + largest.get());</string></p>
<p>reduce. Each segment needs to start out with its own empty hash set, and reduce only lets you supply one identity value. Instead, use collect. It takes three arguments:</p>
<ol>
<li><p>A supplier to make new instances of the target object, for example, a constructor for a hash set</p>
</li>
<li><p>An accumulatorthat adds an element to the target, for example, an addmethod</p>
</li>
<li><p>A combiner that merges two objects into one, such as addAll</p>
</li>
</ol>
<p> NOTE</p>
<p>The target object need not be a collection. It could be a StringBuilderor an object that tracks a count and a sum.</p>
<p>Here is how the collect method works for a hash set:</p>
<p>Click here to view code image</p>
<p>HashSet<string> result = stream.collect(HashSet::new, HashSet::add, HashSet::addAll);</string></p>
<p>In practice, you don’t have to do that because there is a convenient Collector interface for these three functions, and a Collectors class with factory methods for common collectors. To collect a stream into a list or set, you can simply call</p>
<p>Click here to view code image</p>
<p>List<string> result = stream.collect(Collectors.toList());</string></p>
<p>or</p>
<p>Click here to view code image</p>
<p>Set<string> result = stream.collect(Collectors.toSet());</string></p>
<p>If you want to control which kind of set you get, use the following call instead:</p>
<p>Click here to view code image</p>
<p>TreeSet<string> result = stream.collect(Collectors.toCollection(TreeSet::new));</string></p>
<p>Suppose you want to collect all strings in a stream by concatenating them. You can call</p>
<p>String result = stream.collect(Collectors.joining());</p>
<p>If you want a delimiter between elements, pass it to the joiningmethod:</p>
<p>Click here to view code image</p>
<p>String result = stream.collect(Collectors.joining(“, “));</p>
<p>If your stream contains objects other than strings, you need to first convert them to strings, like this:</p>
<p>Click here to view code image</p>
<p>String result = stream.map(Object::toString).collect(Collectors.joining(“, “));</p>
<p>If you want to reduce the stream results to a sum, average, maximum, or minimum, then use one of the methods summarizing(Int|Long|Double). These methods take a function that maps the stream objects to a number and yield a result of type (Int|Long|Double)SummaryStatistics, with methods for obtaining the sum, average, maximum, and minumum.</p>
<p>Click here to view code image</p>
<p>IntSummaryStatistics summary = words.collect(<br>   Collectors.summarizingInt(String::length));<br>double averageWordLength = summary.getAverage();<br>double maxWordLength = summary.getMax();</p>
<p> NOTE</p>
<p>So far, you have seen how to reduce or collect stream values. But perhaps you just want to print them or put them in a database. Then you can use the forEachmethod:</p>
<p>stream.forEach(System.out::println);</p>
<p>The function that you pass is applied to each element. On a parallel stream, it’s your responsibility to ensure that the function can be executed concurrently. We discuss this in Section 2.13, “Parallel Streams,” on page 40.</p>
<p>On a parallel stream, the elements can be traversed in arbitrary order. If you want to execute them in stream order, call forEachOrderedinstead. Of course, you might then give up most or all of the benefits of parallelism.</p>
<p>The forEachand forEachOrderedmethods are terminal operations. You cannot use the stream again after calling them. If you want to continue using the stream, use peekinstead—see</p>
<p>In the common case that the values should be the actual elements, use Function.identity()for the second function.</p>
<p>Click here to view code image</p>
<p>Map&lt;Integer, Person&gt; idToPerson = people.collect(<br>   Collectors.toMap(Person::getId, Function.identity()));<br>If there is more than one element with the same key, the collector will throw an IllegalStateException. You can override that behavior by supplying a third function argument that determines the value for the key, given the existing and the new value. Your function could return the existing value, the new value, or a combination of them.</p>
<p>Here, we construct a map that contains, for each language in the available locales, as key its name in your default locale (such as “German”), and as value its localized name (such as “Deutsch”).</p>
<p>Click here to view code image</p>
<p>Stream<locale> locales = Stream.of(Locale.getAvailableLocales());<br>Map&lt;String, String&gt; languageNames = locales.collect(<br>   Collectors.toMap(<br>      l -&gt; l.getDisplayLanguage(),<br>      l -&gt; l.getDisplayLanguage(l),<br>      (existingValue, newValue) -&gt; existingValue));<br>We don’t care that the same language might occur twice—for example, German in Germany and in Switzerland, and we just keep the first entry.</locale></p>
<p>However, suppose we want to know all languages in a given country. Then we need a Map&lt;String, Set<string>&gt;. For example, the value for “Switzerland”is the set [French, German, Italian]. At first, we store a singleton set for each language. Whenever a new language is found for a given country, we form the union of the existing and the new set.</string></p>
<p>Click here to view code image</p>
<p>Map&lt;String, Set<string>&gt; countryLanguageSets = locales.collect(<br>   Collectors.toMap(<br>      l -&gt; l.getDisplayCountry(),<br>      l -&gt; Collections.singleton(l.getDisplayLanguage()),<br>      (a, b) -&gt; { // Union of a and b<br>         Set<string> r = new HashSet&lt;&gt;(a);<br>         r.addAll(b);<br>         return r; }));<br>You will see a simpler way of obtaining this map in the next section.</string></string></p>
<p>If you want a TreeMap, then you supply the constructor as the fourth argument. You must provide a merge function. Here is one of the examples from the beginning of the section, now yielding a TreeMap:</p>
<p>Click here to view code image</p>
<p>Map&lt;Integer, Person&gt; idToPerson = people.collect(<br>   Collectors.toMap(<br>      Person::getId,<br>      Function.identity(),<br>      (existingValue, newValue) -&gt; { throw new IllegalStateException(); },<br>      TreeMap::new));</p>
<p>For example, if you want sets instead of lists, you can use the Collectors.toSetcollector that you saw in the preceding section:</p>
<p>Click here to view code image</p>
<p>Map&lt;String, Set<locale>&gt; countryToLocaleSet = locales.collect(<br>   groupingBy(Locale::getCountry, toSet()));</locale></p>
<p>Several other collectors are provided for downstream processing of grouped elements:</p>
<p>• countingproduces a count of the collected elements. For example,</p>
<p>Click here to view code image</p>
<p>Map&lt;String, Long&gt; countryToLocaleCounts = locales.collect(<br>   groupingBy(Locale::getCountry, counting()));<br>counts how many locales there are for each country.</p>
<p>• summing(Int|Long|Double) takes a function argument, applies the function to the downstream elements, and produces their sum. For example,</p>
<p>Click here to view code image</p>
<p>Map&lt;String, Integer&gt; stateToCityPopulation = cities.collect(<br>   groupingBy(City::getState, summingInt(City::getPopulation)));<br>computes the sum of populations per state in a stream of cities.</p>
<p>• maxBy and minBytake a comparator and produce maximum and minimum of the downstream elements. For example,</p>
<p>Click here to view code image</p>
<p>Map&lt;String, City&gt; stateToLargestCity = cities.collect(<br>   groupingBy(City::getState,<br>      maxBy(Comparator.comparing(City::getPopulation))));<br>produces the largest city per state.</p>
<p>• mapping applies a function to downstream results, and it requires yet another collector for processing its results. For example,</p>
<p>Click here to view code image</p>
<p>Map&lt;String, Optional<string>&gt; stateToLongestCityName = cities.collect(<br>   groupingBy(City::getState,<br>      mapping(City::getName,<br>         maxBy(Comparator.comparing(String::length)))));<br>Here, we group cities by state. Within each state, we produce the names of the cities and reduce by maximum length.</string></p>
<p>The mappingmethod also yields a nicer solution to a problem from the preceding section, to gather a set of all languages in a country.</p>
<p>Click here to view code image</p>
<p>Map&lt;String, Set<string>&gt; countryToLanguages = locales.collect(<br>   groupingBy(l -&gt; l.getDisplayCountry(),<br>      mapping(l -&gt; l.getDisplayLanguage(),<br>         toSet())));<br>In the preceding section, I used toMap instead of groupingBy. In this form, you don’t need to worry about combining the individual sets.</string></p>
<p>• If the grouping or mapping function has return type int, long, or double, you can collect elements into a summary statistics object, as discussed in Section 2.9, “Collecting Results,” on page 33. For example,</p>
<p>Click here to view code image</p>
<p>Map&lt;String, IntSummaryStatistics&gt; stateToCityPopulationSummary = cities.collect(<br>   groupingBy(City::getState,<br>      summarizingInt(City::getPopulation)));<br>Then you can get the sum, count, average, minimum, and maximum of the function values from the summary statistics objects of each group.</p>
<p>• Finally, the reducingmethods apply a general reduction to downstream elements. There are three forms: reducing(binaryOperator), reducing(identity, binaryOperator), and reducing(identity, mapper, binaryOperator). In the first form, the identity is null. (Note that this is different from the forms of Stream::reduce, where the method without an identity parameter yields an Optional result.) In the third form, the mapperfunction is applied and its values are reduced.</p>
<p>Here is an example that gets a comma-separated string of all city names in each state. We map each city to its name and then concatenate them.</p>
<p>Click here to view code image</p>
<p>Map&lt;String, String&gt; stateToCityNames = cities.collect(<br>   groupingBy(City::getState,<br>      reducing(“”, City::getName,<br>         (s, t) -&gt; s.length() == 0 ? t : s + “, “ + t)));<br>As with Stream.reduce, Collectors.reducingis rarely necessary. In this case, you can achieve the same result more naturally as</p>
<p>Click here to view code image</p>
<p>Map&lt;String, String&gt; stateToCityNames = cities.collect(<br>   groupingBy(City::getState,<br>      mapping(City::getName,<br>         joining(“, “))));<br>Frankly, the downstream collectors can yield very convoluted expressions. You should only use them in connection with groupingBy or partitioningBy to process the “downstream” map values. Otherwise, simply apply methods such as map, reduce, count, max, or mindirectly on streams.</p>
<p>2.12. Primitive Type Streams<br>So far, we have collected integers in a Stream<integer>, even though it is clearly inefficient to wrap each integer into a wrapper object. The same is true for the other primitive types double, float, long, short, char, byte, and boolean. The stream library has specialized types IntStream, LongStream, and DoubleStream that store primitive values directly, without using wrappers. If you want to store short, char, byte, and boolean, use an IntStream, and for float, use a DoubleStream. The library designers didn’t think it was worth adding another five stream types.</integer></p>
<p>To create an IntStream, you can call the IntStream.of and Arrays.streammethods:</p>
<p>Click here to view code image</p>
<p>IntStream stream = IntStream.of(1, 1, 2, 3, 5);<br>stream = Arrays.stream(values, from, to); // values is an int[] array<br>As with object streams, you can also use the static generate and iterate methods. In addition, IntStreamand LongStreamhave static methods range and rangeClosed that generate integer ranges with step size one:</p>
<p>Click here to view code image</p>
<p>IntStream zeroToNinetyNine = IntStream.range(0, 100); // Upper bound is excluded<br>IntStream zeroToHundred = IntStream.rangeClosed(0, 100); // Upper bound is included<br>The CharSequenceinterface has methods codePoints and chars that yield an IntStream of the Unicode codes of the characters or of the code units in the UTF-16 encoding. (If you don’t know what code units are, you probably shouldn’t use the chars method. Read up on the sordid details in Core Java, 9th Edition, Volume 1, Section 3.3.3.)</p>
<p>Click here to view code image</p>
<p>String sentence = “\uD835\uDD46 is the set of octonions.”;<br>   // \uD835\uDD46 is the UTF-16 encoding of the letter</p>
<p> , unicode U+1D546</p>
<p>IntStream codes = sentence.codePoints();<br>   // The stream with hex values 1D546 20 69 73 20 …<br>When you have a stream of objects, you can transform it to a primitive type stream with the mapToInt, mapToLong, or mapToDoublemethods. For example, if you have a stream of strings and want to process their lengths as integers, you might as well do it in an IntStream:</p>
<p>Click here to view code image</p>
<p>Stream<string> words = …;<br>IntStream lengths = words.mapToInt(String::length);<br>To convert a primitive type stream to an object stream, use the boxed method:</string></p>
<p>Click here to view code image</p>
<p>Stream<integer> integers = IntStream.range(0, 100).boxed();</integer></p>
<p>Generally, the methods on primitive type streams are analogous to those on object streams. Here are the most notable differences:</p>
<p>• The toArraymethods return primitive type arrays.</p>
<p>• Methods that yield an optional result return an OptionalInt, OptionalLong, or OptionalDouble. These classes are analogous to the Optional class, but they have methods getAsInt, getAsLong, and getAsDoubleinstead of the getmethod.</p>
<p>• There are methods sum, average, max, and min that return the sum, average, maximum, and minimum. These methods are not defined for object streams.</p>
<p>• The summaryStatisticsmethod yields an object of type IntSummaryStatistics, LongSummaryStatistics, or DoubleSummaryStatisticsthat can simultaneously report the sum, average, maximum, and minimum of the stream.</p>
<p> NOTE</p>
<p>The Randomclass has methods ints, longs, and doubles that return primitive type streams of random numbers.</p>
<p>2.13. Parallel Streams<br>Streams make it easy to parallelize bulk operations. The process is mostly automatic, but you need to follow a few rules. First of all, you must have a parallel stream. By default, stream operations create sequential streams, except for Collection.parallelStream(). The parallelmethod converts any sequential stream into a parallel one. For example:</p>
<p>Click here to view code image</p>
<p>Stream<string> parallelWords = Stream.of(wordArray).parallel();</string></p>
<p>As long as the stream is in parallel mode when the terminal method executes, all lazy intermediate stream operations will be parallelized.</p>
<p>When stream operations run in parallel, the intent is that the same result is returned as if they had run serially. It is important that the operations are stateless and can be executed in an arbitrary order.</p>
<p>Here is an example of something you cannot do. Suppose you want to count all short words in a stream of strings:</p>
<p>Click here to view code image</p>
<p>int[] shortWords = new int[12];<br>words.parallel().forEach(<br>   s -&gt; { if (s.length() &lt; 12) shortWords[s.length()]++; });<br>      // Error—race condition!
System.out.println(Arrays.toString(shortWords));<br>This is very, very bad code. The function passed to forEachruns concurrently in multiple threads, updating a shared array. That’s a classic race condition. If you run this program multiple times, you are quite likely to get a different sequence of counts in each run, each of them wrong.</p>
<p>It is your responsibility to ensure that any functions that you pass to parallel stream operations are threadsafe. In our example, you could use an array of AtomicIntegerobjects for the counters (see Exercise 12). Or you could simply use the facilities of the streams library and group strings by length (see Exercise 13).</p>
<p>By default, streams that arise from ordered collections (arrays and lists), from ranges, generators, and iterators, or from calling Stream.sorted, are ordered. Results are accumulated in the order of the original elements, and are entirely predictable. If you run the same operations twice, you will get exactly the same results.</p>
<p>Ordering does not preclude parallelization. For example, when computing stream.map(fun), the stream can be partitioned into nsegments, each of which is concurrently processed. Then the results are reassembled in order.</p>
<p>Some operations can be more effectively parallelized when the ordering requirement is dropped. By calling the Stream.unorderedmethod, you indicate that you are not interested in ordering. One operation that can benefit from this is Stream.distinct. On an ordered stream, distinct retains the first of all equal elements. That impedes parallelization—the thread processing a segment can’t know which elements to discard until the preceding segment has been processed. If it is acceptable to retain any of the unique elements, all segments can be processed concurrently (using a shared set to track duplicates).</p>
<p>You can also speed up the limit method by dropping ordering. If you just want any nelements from a stream and you don’t care which ones you get, call</p>
<p>Click here to view code image</p>
<p>Stream<t> sample = stream.parallel().unordered().limit(n);</t></p>
<p>As discussed in Section 2.10, “Collecting into Maps,” on page 34, merging maps is expensive. For that reason, the Collectors.groupingByConcurrentmethod uses a shared concurrent map. Clearly, to benefit from parallelism, the order of the map values will not be the same as the stream order. Even on an ordered stream, that collector has a “characteristic” of being unordered, so that it can be used efficiently without having to make the stream unordered. You still need to make the stream parallel, though:</p>
<p>Click here to view code image</p>
<p>Map&lt;String, List<string>&gt; result = cities.parallel().collect(<br>   Collectors.groupingByConcurrent(City::getState));<br>   // Values aren’t collected in stream order</string></p>
<p> CAUTION</p>
<p>It is very important that you don’t modify the collection that is backing a stream while carrying out a stream operation (even if the modification is threadsafe). Remember that streams don’t collect their own data—the data is always in a separate collection. If you were to modify that collection, the outcome of the stream operations would be undefined. The JDK documentation refers to this requirement as noninterference. It applies both to sequential and parallel streams.</p>
<p>To be exact, since intermediate stream operations are lazy, it is possible to mutate the collection up to the point when the terminal operation executes. For example, the following is correct:</p>
<p>Click here to view code image</p>
<p>List<string> wordList = …;<br>Stream<string> words = wordList.stream();<br>wordList.add(“END”); // Ok<br>long n = words.distinct().count();<br>But this code is not:</string></string></p>
<p>Click here to view code image</p>
<p>Stream<string> words = wordList.stream();<br>words.forEach(s -&gt; if (s.length() &lt; 12) wordList.remove(s));<br>   // Error—interference</string></p>
<p>Exercises</p>
<ol>
<li><p>Write a parallel version of the forloop in Section 2.1, “From Iteration to Stream Operations,” on page 22. Obtain the number of processors. Make that many separate threads, each working on a segment of the list, and total up the results as they come in. (You don’t want the threads to update a single counter. Why?)</p>
</li>
<li><p>Verify that asking for the first five long words does not call the filter method once the fifth long word has been found. Simply log each method call.</p>
</li>
<li><p>Measure the difference when counting long words with a parallelStreaminstead of a stream. Call System.nanoTimebefore and after the call, and print the difference. Switch to a larger document (such as War and Peace) if you have a fast computer.</p>
</li>
<li><p>Suppose you have an array int[] values = { 1, 4, 9, 16 }. What is Stream.of(values)? How do you get a stream of intinstead?</p>
</li>
<li><p>Using Stream.iterate, make an infinite stream of random numbers—not by calling Math.random but by directly implementing a linear congruential generator. In such a generator, you start with x0 = seedand then produce xn + 1 = (a xn + c) %m, for appropriate values of a, c, and m. You should implement a method with parameters a, c, m, and seed that yields a Stream<long>. Try out a = 25214903917, c = 11, and m = 248.</long></p>
</li>
<li><p>The characterStreammethod in Section 2.3, “The filter, map, and flatMapMethods,” on page 25, was a bit clumsy, first filling an array list and then turning it into a stream. Write a stream-based one-liner instead. One approach is to make a stream of integers from 0 to s.length() - 1and map that with the s::charAtmethod reference.</p>
</li>
<li><p>Your manager asks you to write a method public static <t> boolean isFinite(Stream<t> stream). Why isn’t that such a good idea? Go ahead and write it anyway.</t></t></p>
</li>
<li><p>Write a method public static <t> Stream<t> zip(Stream<t> first, Stream<t> second) that alternates elements from the streams first and second, stopping when one of them runs out of elements.</t></t></t></t></p>
</li>
<li><p>Join all elements in a Stream&lt;ArrayList<t>&gt;to one ArrayList<t>. Show how to do this with the three forms of reduce.</t></t></p>
</li>
<li><p>Write a call to reduce that can be used to compute the average of a Stream<double>. Why can’t you simply compute the sum and divide by count()?</double></p>
</li>
<li><p>It should be possible to concurrently collect stream results in a single ArrayList, instead of merging multiple array lists, provided it has been constructed with the stream’s size, since concurrent setoperations at disjoint positions are threadsafe. How can you achieve that?</p>
</li>
<li><p>Count all short words in a parallel Stream<string>, as described in Section 2.13, “Parallel Streams,” on page 40, by updating an array of AtomicInteger. Use the atomic getAndIncrementmethod to safely increment each counter.</string></p>
</li>
<li><p>Repeat the preceding exercise, but filter out the short strings and use the collectmethod with Collectors.groupingByand Collectors.counting.</p>
</li>
</ol>
<p>A function type is alwayscontravariant in its arguments and covariant in its return value. For example, if you have a Function&lt;Person, Employee&gt;, you can safely pass it on to someone who needs a Function&lt;Employee, Person&gt;. They will only call it with employees, whereas your function can handle any person. They will expect the function to return a person, and you give them something even better.</p>
<p>For example, look at the javadoc for Stream<t>:</t></p>
<p>Click here to view code image</p>
<p>void forEach(Consumer&lt;? super T&gt; action)<br>Stream<t> filter(Predicate&lt;? super T&gt; predicate)<br><r> Stream<r> map(Function&lt;? super T, ? extends R&gt; mapper)<br>The general rule is that you use superfor argument types, extends for return types. That way, you can pass a Consumer<object>to forEach on a Stream<string>. If it is willing to consume any object, surely it can consume strings.</string></object></r></r></t></p>
<p>But the wildcards are not always there. Look at</p>
<p>For example, consider the doInOrderAsyncmethod of the preceding section. Instead of</p>
<p>Click here to view code image</p>
<p>public static <t> void doInOrderAsync(Supplier<t> first,<br>   Consumer<t> second, Consumer<throwable> handler)<br>it should be</throwable></t></t></t></p>
<p>Click here to view code image</p>
<p>public static <t> void doInOrderAsync(Supplier&lt;? extends T&gt; first,<br>   Consumer&lt;? super T&gt; second, Consumer&lt;? superThrowable&gt; handler)</t></p>
<p>In our example, we can call</p>
<p>Click here to view code image</p>
<p>largest.updateAndGet(x -&gt; Math.max(x, observed));</p>
<p>or</p>
<p>Click here to view code image</p>
<p>largest.accumulateAndGet(observed, Math::max);</p>
<p>The accumulateAndGetmethod takes a binary operator that is used to combine the atomic value and the supplied argument.</p>
<h2 id="default-in-Java"><a href="#default-in-Java" class="headerlink" title="default in Java"></a><strong>default</strong> in Java</h2><h3 id="There-are-three-rules-about-default"><a href="#There-are-three-rules-about-default" class="headerlink" title="There are three rules about default"></a>There are three rules about <strong>default</strong></h3><p>Regarding how to handle the situation of same default method in multiple inheritance.</p>
<ul>
<li><strong>class win</strong>, any class wins over any interfaces.So if there’s a method with a body, or an abstract declaration, in the superclass chain, we can ignore the interfaces completely.</li>
<li><strong>subtype win supertype</strong>, “which two interfaces are competing to provide a default method and one interface extends the other, the subclass wins.”</li>
<li><strong>No rule 3</strong>. if the previous two rules don’t give us the answer, the subclass must either implement the method or declare it <strong>abstract</strong>.</li>
</ul>
<p>“Interfaces give you multiple inheritance but no fields, while abstract classes let you “inherit fields but you don’t get multiple inheritance.”</p>
<h2 id="Static-method-in-Interface"><a href="#Static-method-in-Interface" class="headerlink" title="Static method in Interface"></a>Static method in Interface</h2><p>We’ve seen a lot of calling of <strong>Stream.of</strong> but haven’t gotten into its details yet. You may recall that Stream is an interface, but this is a static method on an interface. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">stream.collect(toCollection(TreeSet::<span class="keyword">new</span>));</span><br></pre></td></tr></table></figure>

<h1 id="Optional-is-a-better-of-null"><a href="#Optional-is-a-better-of-null" class="headerlink" title="Optional is a better of null"></a><strong>Optional</strong> is a better of <strong>null</strong></h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Optional can be created via factory method 'of', </span></span><br><span class="line">Optional&lt;String&gt; a = Optional.of(<span class="string">"a"</span>);</span><br><span class="line"><span class="comment">// Optional is just a container, you can get the underlying value by 'get' method</span></span><br><span class="line">assertEquals(<span class="string">"a"</span>, a.get());</span><br><span class="line"></span><br><span class="line"><span class="comment">// at the meanwhile, Optional can represent 'absent'</span></span><br><span class="line"><span class="comment">// factory method empty or ofNullable from a nullable object can be used</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOptional</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Optional&lt;String&gt; optA=Optional.of(<span class="string">"a"</span>);</span><br><span class="line">        Assert.assertEquals(<span class="string">"a"</span>, optA.get());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Optional emp=Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line">        Assert.assertEquals(Optional.empty(), emp);</span><br><span class="line">        Assert.assertFalse(emp.isPresent());</span><br><span class="line">        Assert.assertEquals(<span class="string">"b"</span>, emp.orElse(<span class="string">"b"</span>));</span><br><span class="line">        Assert.assertEquals(<span class="string">"c"</span>, emp.orElseGet(()-&gt;<span class="string">"c"</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="method-reference"><a href="#method-reference" class="headerlink" title="method reference"></a>method reference</h1><ul>
<li>** Classname::methodname** , such as Artist::getName is equivalant to artist-&gt;artist.getName()</li>
<li>For constructors can be used Artist::new</li>
<li>You can alos to create new array, String[]::new</li>
</ul>
<h1 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h1><p>“The purpose of streams isn’t just to convert from one collection to another; it’s to be able to provide a common set of operations over data.”</p>
<h2 id="partitioningBy"><a href="#partitioningBy" class="headerlink" title="partitioningBy"></a>partitioningBy</h2><p>To split a stream into two groups, one for ‘trueGroup’ and another group</p>
<h2 id="Lanmbda"><a href="#Lanmbda" class="headerlink" title="Lanmbda"></a>Lanmbda</h2><ul>
<li>It is best to think of a lambda expression as a function, not an object, and to accept that it can be converted to a functional interface.</li>
<li>This conversion to interfaces is what makes lambda expressions so compelling. The syntax is short and simple. <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BiFunction&lt;String, String, Integer&gt; comp</span><br><span class="line">   = (first, second) -&gt; Integer.compare(first.length(), second.length());</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>The expression System.out::printlnis a method reference that is equivalent to the lambda expression x -&gt; System.out.println(x).</p>
<h3 id="There-are-three-principal-cases"><a href="#There-are-three-principal-cases" class="headerlink" title="There are three principal cases:"></a>There are three principal cases:</h3><ul>
<li>object::instanceMethod</li>
<li>Class::staticMethod</li>
<li>Class::instanceMethod</li>
</ul>
<p>In the third case, the first parameter becomes the target of the method. For example, String::compareToIgnoreCaseis the same as (x, y) -&gt; x.compareToIgnoreCase(y).</p>
<p>Just like lambda expressions, method references don’t live in isolation. They are always turned into instances of functional interfaces.</p>
<h3 id="Constructor-References-1"><a href="#Constructor-References-1" class="headerlink" title="Constructor References"></a>Constructor References</h3><p>Constructor references are just like method references, except that the name of the method is new. For example, Button::new is a reference to a Button constructor. Which constructor? It depends on the context. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; labels = ...;</span><br><span class="line">Stream&lt;Button&gt; stream = labels.stream().map(Button::<span class="keyword">new</span>);</span><br><span class="line">List&lt;Button&gt; buttons = stream.collect(Collectors.toList());</span><br></pre></td></tr></table></figure>

<p>For example, suppose we want to have an array of buttons. The Stream interface has a toArraymethod that returns an Object array:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Object[] buttons = stream.toArray();</span><br></pre></td></tr></table></figure>

<p>we need to refine our understanding of a lambda expression. A lambda expression has three ingredients:</p>
<ul>
<li><ol>
<li>A block of code</li>
</ol>
</li>
<li><ol start="2">
<li>Parameters</li>
</ol>
</li>
<li><ol start="3">
<li>Values for the free variables, that is, the variables that are not parameters and not defined inside the code</li>
</ol>
</li>
</ul>
<p>The technical term for a block of code together with the values of the <code>free variables</code> is a <code>closure</code>. If someone gloats that their language has closures, rest assured that Java has them as well. In Java, lambda expressions are closures. In fact, inner classes have been closures all along. Java 8 gives us closures with an attractive syntax.</p>
<p>Inner classes can also capture values from an enclosing scope. Before Java 8, inner classes were only allowed to access <code>final local variables</code>. This rule has now been relaxed to match that for lambda expressions. An inner class can access any effectively final local variable—that is, any variable whose value does not change.</p>
<p>When you use the this keyword in a lambda expression, you refer to the this parameter of the method that creates the lambda. For example, consider</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      Runnable runner = () -&gt; &#123; ...; System.out.println(<span class="keyword">this</span>.toString()); ... &#125;;</span><br><span class="line">      ...</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The expression this.toString()calls the toString method of the Application object, not the Runnable instance. There is nothing special about the use of this in a lambda expression. The scope of the lambda expression is nested inside the doWorkmethod, and thishas the same meaning anywhere in that method.</p>
<p>The Java designers decided to solve this problem once and for all by allowing interface methods with concrete implementations (called default methods). Those methods can be safely added to existing interfaces. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">long</span> <span class="title">getId</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">default</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">"John Q. Public"</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The interface has two methods: getId, which is an abstract method, and the default method getName. A concrete class that implements the Person interface must, of course, provide an implementation of getId, but it can choose to keep the implementation of getName or to override it.</p>
<p>Default methods put an end to the classic pattern of providing an interface and an abstract class that implements most or all of its methods, such as Collection/AbstractCollectionor WindowListener/WindowAdapter. Now you can just implement the methods in the interface.</p>
<p>To compare Person objects by name, use Comparator.comparing(Person::getName).</p>
<p>In this chapter, we have compared strings by length with the lambda expression (first, second) -&gt; Integer.compare(first.length(), second.length()). But But with the static compare method, we can do much better and simply use Comparator.comparing(String::length). </p>
<p>In Java 8, static methods have been added to quite a few interfaces. For example, the Comparator interface has a very useful static comparing method that accepts a “key extraction” function and yields a comparator that compares the extracted keys. </p>
<h3 id="Exercises"><a href="#Exercises" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li><p>Is the comparator code in the Arrays.sort method called in the same thread as the call to sortor a different thread?</p>
</li>
<li><p>Using the listFiles(FileFilter)and isDirectorymethods of the java.io.Fileclass, write a method that returns all subdirectories of a given directory. Use a lambda expression instead of a FileFilterobject. Repeat with a method reference.</p>
</li>
<li><p>Using the list(FilenameFilter)method of the java.io.Fileclass, write a method that returns all files in a given directory with a given extension. Use a lambda expression, not a FilenameFilter. Which variables from the enclosing scope does it capture?</p>
</li>
<li><p>Given an array of File objects, sort it so that the directories come before the files, and within each group, elements are sorted by path name. Use a lambda expression, not a Comparator.</p>
</li>
<li><p>Take a file from one of your projects that contains a number of ActionListener, Runnable, or the like. Replace them with lambda expressions. How many lines did it save? Was the code easier to read? Were you able to use method references?</p>
</li>
<li><p>Didn’t you always hate it that you had to deal with checked exceptions in a Runnable? Write a method uncheck that catches all checked exceptions and turns them into unchecked exceptions. For example,</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(uncheck(</span><br><span class="line">   () -&gt; &#123; System.out.println(<span class="string">"Zzz"</span>); Thread.sleep(<span class="number">1000</span>); &#125;)).start();</span><br><span class="line">      <span class="comment">// Look, nocatch (InterruptedException)!</span></span><br></pre></td></tr></table></figure>

<p>Hint: Define an interface RunnableExwhose runmethod may throw any exceptions. Then implement public static Runnable uncheck(RunnableEx runner). Use a lambda expression inside the uncheckmethod.</p>
<p>Why can’t you just use Callable<void>instead of RunnableEx?</void></p>
<ol start="7">
<li><p>Write a static method andThenthat takes as parameters two Runnableinstances and returns a Runnable that runs the first, then the second. In the main method, pass two lambda expressions into a call to andThen, and run the returned instance.</p>
</li>
<li><p>What happens when a lambda expression captures values in an enhanced forloop such as this one?</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">String[] names = &#123; <span class="string">"Peter"</span>, <span class="string">"Paul"</span>, <span class="string">"Mary"</span> &#125;;</span><br><span class="line">List&lt;Runnable&gt; runners = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (String name : names)</span><br><span class="line">   runners.add(() -&gt; System.out.println(name));</span><br></pre></td></tr></table></figure>

<p>Is it legal? Does each lambda expression capture a different value, or do they all get the last value? What happens if you use a traditional loop for (int i = 0; i &lt; names.length; i++)?</p>
<ol start="9">
<li><p>Form a subinterface Collection2from Collectionand add a default method void forEachIf(Consumer<t> action, Predicate<t> filter) that applies action to each element for which filterreturns true. How could you use it?</t></t></p>
</li>
<li><p>Go through the methods of the Collectionsclass. If you were king for a day, into which interface would you place each method? Would it be a default method or a static method?</p>
</li>
<li><p>Suppose you have a class that implements two interfaces I and J, each of which has a method void f(). Exactly what happens if f is an abstract, default, or static method of I and an abstract, default, or static method of J? Repeat where a class extends a superclass S and implements an interface I, each of which has a method void f().</p>
</li>
<li><p>In the past, you were told that it’s bad form to add methods to an interface because it would break existing code. Now you are told that it’s okay to add new methods, provided you also supply a default implementation. How safe is that? Describe a scenario where the new streammethod of the Collectioninterface causes legacy code to fail compilation. What about binary compatibility? Will legacy code from a JAR file still run?</p>
</li>
</ol>
<h3 id="Stream-vs-Collections"><a href="#Stream-vs-Collections" class="headerlink" title="Stream vs Collections"></a>Stream vs Collections</h3><p>A stream seems superficially similar to a collection, allowing you to transform and retrieve data. But there are significant differences:</p>
<ol>
<li>A stream <code>does not store</code> its elements. They may be stored in an underlying collection or generated on demand.</li>
<li><code>Stream operations don’t mutate their source</code>. Instead, they return new streams that hold the result.</li>
<li><code>Stream operations are lazy</code> when possible. This means they are not executed until their result is needed. For example, if you only ask for the first five long words instead of counting them all, then the filter method will stop filtering after the fifth match. As a consequence, you can even have infinite streams!</li>
</ol>
<ul>
<li>Streams follow <code>the “what, not how” principle</code>. In our stream example, we describe what needs to be done: get the long words and count them. We don’t specify in which order, or in which thread, this should happen.</li>
</ul>
<ul>
<li>When you work with streams, you set up a pipeline of operations in three stages.</li>
</ul>
<ol>
<li>You create a stream.</li>
<li>You specify intermediate operations for transforming the initial stream into others, in one or more steps.</li>
<li>You apply a terminal operation to produce a result. This operation forces the execution of the lazy operations that precede it. Afterwards, the stream can no longer be used.<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> count = words.parallelStream().filter(w -&gt; w.length() &gt; <span class="number">12</span>).count();</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><code>Stream operations are not executed on the elements in the order in which they are invoked on the streams</code>. In our example, nothing happens until count is called. When the count method asks for the first element, then the filter method starts requesting elements, until it finds one that has length &gt; 12.</p>
<p>To produce infinite sequences such as 0 1 2 3 …, use the iterate method instead. It takes a “seed” value and a function (technically, a UnaryOperator<t>), and repeatedly applies the function to the previous result. For example,</t></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;BigInteger&gt; integers</span><br><span class="line">   = Stream.iterate(BigInteger.ZERO, n -&gt; n.add(BigInteger.ONE));</span><br></pre></td></tr></table></figure>

<p>The first element in the sequence is the seed</p>
<p>You can use the following statement to split a string into words:</p>
<p>Stream<string> words<br>   = Pattern.compile(“[\P{L}]+”).splitAsStream(contents);<br>The static Files.linesmethod returns a Stream of all lines in a file. </string></p>
<p>The Streaminterface has AutoCloseableas a superinterface. When the close method is called on the stream, the underlying file is also closed. </p>
<p>To make sure that this happens, it is best to use the Java 7 try-with-resources statement:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (Stream&lt;String&gt; lines = Files.lines(path)) &#123;</span><br><span class="line">   Do something with lines</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The stream, and the underlying file with it, will be closed when the try block exits normally or through an exception.</p>
<p>The filter, map, and flatMapMethods<br>A stream transformation reads data from a stream and puts the transformed data into another stream. You have already seen the filtertransformation that yields a new stream with all elements that match a certain condition. </p>
<p>2.3. The filter, map, and flatMapMethods<br>A stream transformation reads data from a stream and puts the transformed data into another stream. You have already seen the filtertransformation that yields a new stream with all elements that match a certain condition. Here, we transform a stream of strings into another stream containing only long words:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; wordList = ...;</span><br><span class="line">Stream&lt;String&gt; words = wordList.stream();</span><br><span class="line">Stream&lt;String&gt; longWords = words.filter(w -&gt; w.length() &gt; <span class="number">12</span>);</span><br></pre></td></tr></table></figure>

<p>The argument of filter is a Predicate<t>—that is, a function from T to boolean.</t></p>
<p>Often, you want to transform the values in a stream in some way. Use the map method and pass the function that carries out the transformation. For example, you can transform all words to lowercase like this:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; lowercaseWords = words.map(String::toLowerCase);</span><br></pre></td></tr></table></figure>

<p>Here, we used map with a method reference. Often, you will use a lambda expression instead:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Character&gt; firstChars = words.map(s -&gt; s.charAt(<span class="number">0</span>));</span><br></pre></td></tr></table></figure>

<p>The resulting stream contains the first character of each word.</p>
<p>When you use map, a function is applied to each element, and the return values are collected in a new stream. Now suppose that you have a function that returns not just one value but a stream of values, such as this one:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Stream&lt;Character&gt; <span class="title">characterStream</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">   List&lt;Character&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">char</span> c : s.toCharArray()) result.add(c);</span><br><span class="line">   <span class="keyword">return</span> result.stream();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>For example, characterStream(“boat”)is the stream [‘b’, ‘o’, ‘a’, ‘t’]. Suppose you map this method on a stream of strings:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Stream&lt;Character&gt;&gt; result = words.map(w -&gt; characterStream(w));</span><br></pre></td></tr></table></figure>

<p>You will get a stream of streams, like [… [‘y’, ‘o’, ‘u’, ‘r’], [‘b’, ‘o’, ‘a’, ‘t’], …] To flatten it out to a stream of characters [… ‘y’, ‘o’, ‘u’, ‘r’, ‘b’, ‘o’, ‘a’, ‘t’, …], use the flatMapmethod instead of map:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Character&gt; letters = words.flatMap(w -&gt; characterStream(w))</span><br><span class="line">    <span class="comment">// CallscharacterStream on each word and flattens the results</span></span><br><span class="line"> NOTE</span><br></pre></td></tr></table></figure>

<p>You may find a flatMap method in classes other than streams. It is a general concept in computer science. Suppose you have a generic type G (such as Stream) and functions ffrom some type T to G<u>and g from U to G<v>. Then you can compose them, that is, first apply f and then g, by using flatMap. This is a key idea in the theory of monads. But don’t worry—you can use flatMapwithout knowing anything about monads.</v></u></p>
<p>This method is particularly useful for cutting infinite streams down to size. For example,</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Double&gt; randoms = Stream.generate(Math::random).limit(<span class="number">100</span>);</span><br></pre></td></tr></table></figure>

<p>yields a stream with 100 random numbers.</p>
<p>The peek method yields another stream with the same elements as the original, but a function is invoked every time an element is retrieved. That is handy for debugging:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object[] powers = Stream.iterate(<span class="number">1.0</span>, p -&gt; p * <span class="number">2</span>)</span><br><span class="line">   .peek(e -&gt; System.out.println(<span class="string">"Fetching "</span> + e))</span><br><span class="line">   .limit(<span class="number">20</span>).toArray();</span><br></pre></td></tr></table></figure>

<p>When an element is actually accessed, a message is printed. This way you can verify that the infinite stream returned by iterate is processed lazily.</p>
<p>The stream transformations of the preceding sections were <code>stateless</code>. When an element is retrieved from a filtered or mapped stream, the answer does not depend on the previous elements. There are also a few stateful transformations. For example, the distinct method returns a stream that yields elements from the original stream, in the same order, except that duplicates are suppressed.</p>
<p>The stream must obviously remember the elements that it has already seen.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; uniqueWords</span><br><span class="line">   = Stream.of(<span class="string">"merrily"</span>, <span class="string">"merrily"</span>, <span class="string">"merrily"</span>, <span class="string">"gently"</span>).distinct();</span><br><span class="line">   <span class="comment">// Only one"merrily" is retained</span></span><br></pre></td></tr></table></figure>

<p>The sorted method must see the entire stream and sort it before it can give out any elements—after all, the smallest one might be the last one. Clearly, you can’t sort an infinite stream.</p>
<ul>
<li>There are several sorted methods. One works for streams of Comparableelements, and another accepts a Comparator. Here, we sort strings so that the longest ones come first:</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; longestFirst =</span><br><span class="line">   words.sorted(Comparator.comparing(String::length).reversed());</span><br></pre></td></tr></table></figure>

<p>Of course, you can sort a collection without using streams. The sorted method is useful when the sorting process is a part of a stream pipeline.</p>
<p><code>The Collections.sort method sorts a collection in place, whereas Stream.sorted returns a new sorted stream.</code></p>
<p>The methods that we cover in this section are called reductions. <code>They reduce the stream to a value that can be used in your program</code>. Reductions are terminal operations. After a terminal operation has been applied, the stream ceases to be usable.</p>
<p>In Java 8, <code>the Optional type is the preferred way of indicating a missing return value</code>. We discuss the Optional type in detail in the next section. Here is how you can get the maximum of a stream:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;String&gt; largest = words.max(String::compareToIgnoreCase);</span><br><span class="line"><span class="keyword">if</span> (largest.isPresent())</span><br><span class="line">   System.out.println(<span class="string">"largest: "</span> + largest.get());</span><br></pre></td></tr></table></figure>

<p>reduce. Each segment needs to start out with its own empty hash set, and reduce only lets you supply one identity value. </p>
<h2 id="Instead-use-collect-It-takes-three-arguments"><a href="#Instead-use-collect-It-takes-three-arguments" class="headerlink" title="Instead, use collect. It takes three arguments:"></a>Instead, use collect. It takes three arguments:</h2><ol>
<li>A <code>supplier to make new instances of the target object</code>, for example, a constructor for a hash set</li>
<li>An <code>accumulatorthat adds an element to the target</code>, for example, an addmethod</li>
<li>A <code>combiner that merges two objects into one</code>, such as addAll</li>
</ol>
<p>The target object need not be a collection. It could be a StringBuilder or an object that tracks a count and a sum.</p>
<p>Here is how the collect method works for a hash set:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashSet&lt;String&gt; result = stream.collect(HashSet::<span class="keyword">new</span>, HashSet::add, HashSet::addAll);</span><br></pre></td></tr></table></figure>

<p>In practice, you don’t have to do that because there is a convenient Collector interface for these three functions, and a Collectors class with factory methods for common collectors. To collect a stream into a list or set, you can simply call</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; result = stream.collect(Collectors.toList());</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"></span><br><span class="line">Set&lt;String&gt; result = stream.collect(Collectors.toSet());</span><br></pre></td></tr></table></figure>

<p>If you want to control which kind of set you get, use the following call instead:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TreeSet&lt;String&gt; result = stream.collect(Collectors.toCollection(TreeSet::<span class="keyword">new</span>));</span><br></pre></td></tr></table></figure>

<p>Suppose you want to collect all strings in a stream by concatenating them. You can call</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String result = stream.collect(Collectors.joining());</span><br></pre></td></tr></table></figure>

<p>If you want a delimiter between elements, pass it to the joiningmethod:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String result = stream.collect(Collectors.joining(<span class="string">", "</span>));</span><br></pre></td></tr></table></figure>

<p>If your stream contains objects other than strings, you need to first convert them to strings, like this:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String result = stream.map(Object::toString).collect(Collectors.joining(<span class="string">", "</span>));</span><br></pre></td></tr></table></figure>

<p>If you want to reduce the stream results to a sum, average, maximum, or minimum, then use one of the methods summarizing(Int|Long|Double). These methods take a function that maps the stream objects to a number and yield a result of type (Int|Long|Double)SummaryStatistics, with methods for obtaining the sum, average, maximum, and minumum.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">IntSummaryStatistics summary = words.collect(</span><br><span class="line">   Collectors.summarizingInt(String::length));</span><br><span class="line"><span class="keyword">double</span> averageWordLength = summary.getAverage();</span><br><span class="line"><span class="keyword">double</span> maxWordLength = summary.getMax();</span><br></pre></td></tr></table></figure>

<p>So far, you have seen how to reduce or collect stream values. But perhaps you just want to print them or put them in a database. Then you can use the forEach method:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">stream.forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<p>The function that you pass is applied to each element. On a parallel stream, it’s your responsibility to ensure that the function can be executed concurrently. We discuss this in Section 2.13, “Parallel Streams,”.</p>
<p>On a parallel stream, the elements can be traversed in arbitrary order. If you want to execute them in stream order, call forEachOrderedinstead. Of course, you might then give up most or all of the benefits of parallelism.</p>
<p><code>The forEach and forEachOrdered methods are terminal operations</code>. You cannot use the stream again after calling them. If you want to continue using the stream, use peek instead—see</p>
<p>In the common case that the values should be the actual elements, use Function.identity() for the second function.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Integer, Person&gt; idToPerson = people.collect(</span><br><span class="line">   Collectors.toMap(Person::getId, Function.identity()));</span><br></pre></td></tr></table></figure>

<p>If there is more than one element with the same key, the collector will throw an IllegalStateException. You can override that behavior by supplying a third function argument that determines the value for the key, given the existing and the new value. Your function could return the existing value, the new value, or a combination of them.</p>
<p>Here, we construct a map that contains, for each language in the available locales, as key its name in your default locale (such as “German”), and as value its localized name (such as “Deutsch”).</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Locale&gt; locales = Stream.of(Locale.getAvailableLocales());</span><br><span class="line">Map&lt;String, String&gt; languageNames = locales.collect(</span><br><span class="line">   Collectors.toMap(</span><br><span class="line">      l -&gt; l.getDisplayLanguage(),</span><br><span class="line">      l -&gt; l.getDisplayLanguage(l),</span><br><span class="line">      (existingValue, newValue) -&gt; existingValue));</span><br></pre></td></tr></table></figure>

<p>We don’t care that the same language might occur twice—for example, German in Germany and in Switzerland, and we just keep the first entry.</p>
<p>However, suppose we want to know all languages in a given country. Then we need a Map&lt;String, Set<string>&gt;. For example, the value for “Switzerland”is the set [French, German, Italian]. At first, we store a singleton set for each language. Whenever a new language is found for a given country, we form the union of the existing and the new set.</string></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Set&lt;String&gt;&gt; countryLanguageSets = locales.collect(</span><br><span class="line">   Collectors.toMap(</span><br><span class="line">      l -&gt; l.getDisplayCountry(),</span><br><span class="line">      l -&gt; Collections.singleton(l.getDisplayLanguage()),</span><br><span class="line">      (a, b) -&gt; &#123; <span class="comment">// Union of a and b</span></span><br><span class="line">         Set&lt;String&gt; r = <span class="keyword">new</span> HashSet&lt;&gt;(a);</span><br><span class="line">         r.addAll(b);</span><br><span class="line">         <span class="keyword">return</span> r; &#125;));</span><br></pre></td></tr></table></figure>

<p>You will see a simpler way of obtaining this map in the next section.</p>
<p>If you want a TreeMap, then you supply the constructor as the fourth argument. You must provide a merge function. Here is one of the examples from the beginning of the section, now yielding a TreeMap:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Integer, Person&gt; idToPerson = people.collect(</span><br><span class="line">   Collectors.toMap(</span><br><span class="line">      Person::getId,</span><br><span class="line">      Function.identity(),</span><br><span class="line">      (existingValue, newValue) -&gt; &#123; <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(); &#125;,</span><br><span class="line">      TreeMap::<span class="keyword">new</span>));</span><br></pre></td></tr></table></figure>

<p>For example, if you want sets instead of lists, you can use the Collectors.toSetcollector that you saw in the preceding section:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Set&lt;Locale&gt;&gt; countryToLocaleSet = locales.collect(</span><br><span class="line">   groupingBy(Locale::getCountry, toSet()));</span><br></pre></td></tr></table></figure>

<p>Several other collectors are provided for downstream processing of grouped elements:</p>
<p>• counting produces a count of the collected elements. For example,</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Long&gt; countryToLocaleCounts = locales.collect(</span><br><span class="line">   groupingBy(Locale::getCountry, counting()));</span><br></pre></td></tr></table></figure>

<p>counts how many locales there are for each country.</p>
<p>• summing(Int|Long|Double) takes a function argument, applies the function to the downstream elements, and produces their sum. For example,</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Integer&gt; stateToCityPopulation = cities.collect(</span><br><span class="line">   groupingBy(City::getState, summingInt(City::getPopulation)));</span><br></pre></td></tr></table></figure>

<p>computes the sum of populations per state in a stream of cities.</p>
<p>• maxBy and minBy take a comparator and produce maximum and minimum of the downstream elements. For example,</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, City&gt; stateToLargestCity = cities.collect(</span><br><span class="line">   groupingBy(City::getState,</span><br><span class="line">      maxBy(Comparator.comparing(City::getPopulation))));</span><br></pre></td></tr></table></figure>

<p>produces the largest city per state.</p>
<p>• mapping applies a function to downstream results, and it requires yet another collector for processing its results. For example,</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Optional&lt;String&gt;&gt; stateToLongestCityName = cities.collect(</span><br><span class="line">   groupingBy(City::getState,</span><br><span class="line">      mapping(City::getName,</span><br><span class="line">         maxBy(Comparator.comparing(String::length)))));</span><br></pre></td></tr></table></figure>

<p>Here, we group cities by state. Within each state, we produce the names of the cities and reduce by maximum length.</p>
<p>The mapping method also yields a nicer solution to a problem from the preceding section, to gather a set of all languages in a country.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Set&lt;String&gt;&gt; countryToLanguages = locales.collect(</span><br><span class="line">   groupingBy(l -&gt; l.getDisplayCountry(),</span><br><span class="line">      mapping(l -&gt; l.getDisplayLanguage(),</span><br><span class="line">         toSet())));</span><br></pre></td></tr></table></figure>

<p>In the preceding section, I used toMap instead of groupingBy. In this form, you don’t need to worry about combining the individual sets.</p>
<p>• If the grouping or mapping function has return type int, long, or double, you can collect elements into a summary statistics object, as discussed in Section 2.9, “Collecting Results,” on page 33. For example,</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, IntSummaryStatistics&gt; stateToCityPopulationSummary = cities.collect(</span><br><span class="line">   groupingBy(City::getState,</span><br><span class="line">      summarizingInt(City::getPopulation)));</span><br></pre></td></tr></table></figure>

<p>Then you can get the sum, count, average, minimum, and maximum of the function values from the summary statistics objects of each group.</p>
<p>• Finally, the reducingmethods apply a general reduction to downstream elements. There are three forms: reducing(binaryOperator), reducing(identity, binaryOperator), and reducing(identity, mapper, binaryOperator). In the first form, the identity is null. (Note that this is different from the forms of Stream::reduce, where the method without an identity parameter yields an Optional result.) In the third form, the mapperfunction is applied and its values are reduced.</p>
<p>Here is an example that gets a comma-separated string of all city names in each state. We map each city to its name and then concatenate them.</p>
<p>Click here to view code image</p>
<p>Map&lt;String, String&gt; stateToCityNames = cities.collect(<br>   groupingBy(City::getState,<br>      reducing(“”, City::getName,<br>         (s, t) -&gt; s.length() == 0 ? t : s + “, “ + t)));<br>As with Stream.reduce, Collectors.reducingis rarely necessary. In this case, you can achieve the same result more naturally as</p>
<p>Click here to view code image</p>
<p>Map&lt;String, String&gt; stateToCityNames = cities.collect(<br>   groupingBy(City::getState,<br>      mapping(City::getName,<br>         joining(“, “))));<br>Frankly, the downstream collectors can yield very convoluted expressions. You should only use them in connection with groupingBy or partitioningBy to process the “downstream” map values. Otherwise, simply apply methods such as map, reduce, count, max, or mindirectly on streams.</p>
<p>2.12. Primitive Type Streams<br>So far, we have collected integers in a Stream<integer>, even though it is clearly inefficient to wrap each integer into a wrapper object. The same is true for the other primitive types double, float, long, short, char, byte, and boolean. The stream library has specialized types IntStream, LongStream, and DoubleStream that store primitive values directly, without using wrappers. If you want to store short, char, byte, and boolean, use an IntStream, and for float, use a DoubleStream. The library designers didn’t think it was worth adding another five stream types.</integer></p>
<p>To create an IntStream, you can call the IntStream.of and Arrays.streammethods:</p>
<p>Click here to view code image</p>
<p>IntStream stream = IntStream.of(1, 1, 2, 3, 5);<br>stream = Arrays.stream(values, from, to); // values is an int[] array<br>As with object streams, you can also use the static generate and iterate methods. In addition, IntStreamand LongStreamhave static methods range and rangeClosed that generate integer ranges with step size one:</p>
<p>Click here to view code image</p>
<p>IntStream zeroToNinetyNine = IntStream.range(0, 100); // Upper bound is excluded<br>IntStream zeroToHundred = IntStream.rangeClosed(0, 100); // Upper bound is included<br>The CharSequenceinterface has methods codePoints and chars that yield an IntStream of the Unicode codes of the characters or of the code units in the UTF-16 encoding. (If you don’t know what code units are, you probably shouldn’t use the chars method. Read up on the sordid details in Core Java, 9th Edition, Volume 1, Section 3.3.3.)</p>
<p>Click here to view code image</p>
<p>String sentence = “\uD835\uDD46 is the set of octonions.”;<br>   // \uD835\uDD46 is the UTF-16 encoding of the letter  , unicode U+1D546</p>
<p>IntStream codes = sentence.codePoints();<br>   // The stream with hex values 1D546 20 69 73 20 …<br>When you have a stream of objects, you can transform it to a primitive type stream with the mapToInt, mapToLong, or mapToDoublemethods. For example, if you have a stream of strings and want to process their lengths as integers, you might as well do it in an IntStream:</p>
<p>Click here to view code image</p>
<p>Stream<string> words = …;<br>IntStream lengths = words.mapToInt(String::length);<br>To convert a primitive type stream to an object stream, use the boxed method:</string></p>
<p>Click here to view code image</p>
<p>Stream<integer> integers = IntStream.range(0, 100).boxed();</integer></p>
<p>Generally, the methods on primitive type streams are analogous to those on object streams. Here are the most notable differences:</p>
<p>• The toArraymethods return primitive type arrays.</p>
<p>• Methods that yield an optional result return an OptionalInt, OptionalLong, or OptionalDouble. These classes are analogous to the Optional class, but they have methods getAsInt, getAsLong, and getAsDoubleinstead of the getmethod.</p>
<p>• There are methods sum, average, max, and min that return the sum, average, maximum, and minimum. These methods are not defined for object streams.</p>
<p>• The summaryStatisticsmethod yields an object of type IntSummaryStatistics, LongSummaryStatistics, or DoubleSummaryStatisticsthat can simultaneously report the sum, average, maximum, and minimum of the stream.</p>
<p> NOTE</p>
<p>The Randomclass has methods ints, longs, and doubles that return primitive type streams of random numbers.</p>
<p>2.13. Parallel Streams<br>Streams make it easy to parallelize bulk operations. The process is mostly automatic, but you need to follow a few rules. First of all, you must have a parallel stream. By default, stream operations create sequential streams, except for Collection.parallelStream(). The parallelmethod converts any sequential stream into a parallel one. For example:</p>
<p>Click here to view code image</p>
<p>Stream<string> parallelWords = Stream.of(wordArray).parallel();</string></p>
<p>As long as the stream is in parallel mode when the terminal method executes, all lazy intermediate stream operations will be parallelized.</p>
<p>When stream operations run in parallel, the intent is that the same result is returned as if they had run serially. It is important that the operations are stateless and can be executed in an arbitrary order.</p>
<p>Here is an example of something you cannot do. Suppose you want to count all short words in a stream of strings:</p>
<p>Click here to view code image</p>
<p>int[] shortWords = new int[12];<br>words.parallel().forEach(<br>   s -&gt; { if (s.length() &lt; 12) shortWords[s.length()]++; });<br>      // Error—race condition!
System.out.println(Arrays.toString(shortWords));<br>This is very, very bad code. The function passed to forEachruns concurrently in multiple threads, updating a shared array. That’s a classic race condition. If you run this program multiple times, you are quite likely to get a different sequence of counts in each run, each of them wrong.</p>
<p>It is your responsibility to ensure that any functions that you pass to parallel stream operations are threadsafe. In our example, you could use an array of AtomicIntegerobjects for the counters (see Exercise 12). Or you could simply use the facilities of the streams library and group strings by length (see Exercise 13).</p>
<p>By default, streams that arise from ordered collections (arrays and lists), from ranges, generators, and iterators, or from calling Stream.sorted, are ordered. Results are accumulated in the order of the original elements, and are entirely predictable. If you run the same operations twice, you will get exactly the same results.</p>
<p>Ordering does not preclude parallelization. For example, when computing stream.map(fun), the stream can be partitioned into nsegments, each of which is concurrently processed. Then the results are reassembled in order.</p>
<p>Some operations can be more effectively parallelized when the ordering requirement is dropped. By calling the Stream.unorderedmethod, you indicate that you are not interested in ordering. One operation that can benefit from this is Stream.distinct. On an ordered stream, distinct retains the first of all equal elements. That impedes parallelization—the thread processing a segment can’t know which elements to discard until the preceding segment has been processed. If it is acceptable to retain any of the unique elements, all segments can be processed concurrently (using a shared set to track duplicates).</p>
<p>You can also speed up the limit method by dropping ordering. If you just want any nelements from a stream and you don’t care which ones you get, call</p>
<p>Click here to view code image</p>
<p>Stream<t> sample = stream.parallel().unordered().limit(n);</t></p>
<p>As discussed in Section 2.10, “Collecting into Maps,” on page 34, merging maps is expensive. For that reason, the Collectors.groupingByConcurrentmethod uses a shared concurrent map. Clearly, to benefit from parallelism, the order of the map values will not be the same as the stream order. Even on an ordered stream, that collector has a “characteristic” of being unordered, so that it can be used efficiently without having to make the stream unordered. You still need to make the stream parallel, though:</p>
<p>Click here to view code image</p>
<p>Map&lt;String, List<string>&gt; result = cities.parallel().collect(<br>   Collectors.groupingByConcurrent(City::getState));<br>   // Values aren’t collected in stream order<br> CAUTION</string></p>
<p>It is very important that you don’t modify the collection that is backing a stream while carrying out a stream operation (even if the modification is threadsafe). Remember that streams don’t collect their own data—the data is always in a separate collection. If you were to modify that collection, the outcome of the stream operations would be undefined. The JDK documentation refers to this requirement as noninterference. It applies both to sequential and parallel streams.</p>
<p>To be exact, since intermediate stream operations are lazy, it is possible to mutate the collection up to the point when the terminal operation executes. For example, the following is correct:</p>
<p>Click here to view code image</p>
<p>List<string> wordList = …;<br>Stream<string> words = wordList.stream();<br>wordList.add(“END”); // Ok<br>long n = words.distinct().count();<br>But this code is not:</string></string></p>
<p>Click here to view code image</p>
<p>Stream<string> words = wordList.stream();<br>words.forEach(s -&gt; if (s.length() &lt; 12) wordList.remove(s));<br>   // Error—interference</string></p>
<p>Exercises</p>
<ol>
<li><p>Write a parallel version of the forloop in Section 2.1, “From Iteration to Stream Operations,” on page 22. Obtain the number of processors. Make that many separate threads, each working on a segment of the list, and total up the results as they come in. (You don’t want the threads to update a single counter. Why?)</p>
</li>
<li><p>Verify that asking for the first five long words does not call the filter method once the fifth long word has been found. Simply log each method call.</p>
</li>
<li><p>Measure the difference when counting long words with a parallelStreaminstead of a stream. Call System.nanoTimebefore and after the call, and print the difference. Switch to a larger document (such as War and Peace) if you have a fast computer.</p>
</li>
<li><p>Suppose you have an array int[] values = { 1, 4, 9, 16 }. What is Stream.of(values)? How do you get a stream of intinstead?</p>
</li>
<li><p>Using Stream.iterate, make an infinite stream of random numbers—not by calling Math.random but by directly implementing a linear congruential generator. In such a generator, you start with x0 = seedand then produce xn + 1 = (a xn + c) %m, for appropriate values of a, c, and m. You should implement a method with parameters a, c, m, and seed that yields a Stream<long>. Try out a = 25214903917, c = 11, and m = 248.</long></p>
</li>
<li><p>The characterStreammethod in Section 2.3, “The filter, map, and flatMapMethods,” on page 25, was a bit clumsy, first filling an array list and then turning it into a stream. Write a stream-based one-liner instead. One approach is to make a stream of integers from 0 to s.length() - 1and map that with the s::charAtmethod reference.</p>
</li>
<li><p>Your manager asks you to write a method public static <t> boolean isFinite(Stream<t> stream). Why isn’t that such a good idea? Go ahead and write it anyway.</t></t></p>
</li>
<li><p>Write a method public static <t> Stream<t> zip(Stream<t> first, Stream<t> second) that alternates elements from the streams first and second, stopping when one of them runs out of elements.</t></t></t></t></p>
</li>
<li><p>Join all elements in a Stream&lt;ArrayList<t>&gt;to one ArrayList<t>. Show how to do this with the three forms of reduce.</t></t></p>
</li>
<li><p>Write a call to reduce that can be used to compute the average of a Stream<double>. Why can’t you simply compute the sum and divide by count()?</double></p>
</li>
<li><p>It should be possible to concurrently collect stream results in a single ArrayList, instead of merging multiple array lists, provided it has been constructed with the stream’s size, since concurrent setoperations at disjoint positions are threadsafe. How can you achieve that?</p>
</li>
<li><p>Count all short words in a parallel Stream<string>, as described in Section 2.13, “Parallel Streams,” on page 40, by updating an array of AtomicInteger. Use the atomic getAndIncrementmethod to safely increment each counter.</string></p>
</li>
<li><p>Repeat the preceding exercise, but filter out the short strings and use the collectmethod with Collectors.groupingByand Collectors.counting.</p>
</li>
</ol>
<p>A function type is alwayscontravariant in its arguments and covariant in its return value. For example, if you have a Function&lt;Person, Employee&gt;, you can safely pass it on to someone who needs a Function&lt;Employee, Person&gt;. They will only call it with employees, whereas your function can handle any person. They will expect the function to return a person, and you give them something even better.</p>
<p>For example, look at the javadoc for Stream<t>:</t></p>
<p>Click here to view code image</p>
<p>void forEach(Consumer&lt;? super T&gt; action)<br>Stream<t> filter(Predicate&lt;? super T&gt; predicate)<br><r> Stream<r> map(Function&lt;? super T, ? extends R&gt; mapper)<br>The general rule is that you use superfor argument types, extends for return types. That way, you can pass a Consumer<object>to forEach on a Stream<string>. If it is willing to consume any object, surely it can consume strings.</string></object></r></r></t></p>
<p>But the wildcards are not always there. Look at</p>
<p>For example, consider the doInOrderAsyncmethod of the preceding section. Instead of</p>
<p>Click here to view code image</p>
<p>public static <t> void doInOrderAsync(Supplier<t> first,<br>   Consumer<t> second, Consumer<throwable> handler)<br>it should be</throwable></t></t></t></p>
<p>Click here to view code image</p>
<p>public static <t> void doInOrderAsync(Supplier&lt;? extends T&gt; first,<br>   Consumer&lt;? super T&gt; second, Consumer&lt;? superThrowable&gt; handler)</t></p>
<p>In our example, we can call</p>
<p>Click here to view code image</p>
<p>largest.updateAndGet(x -&gt; Math.max(x, observed));</p>
<p>or</p>
<p>Click here to view code image</p>
<p>largest.accumulateAndGet(observed, Math::max);</p>
<p>The accumulateAndGetmethod takes a binary operator that is used to combine the atomic value and the supplied argument.</p>
<p>If you anticipate high contention, you should simply use a LongAdder instead of an AtomicLong. The method names are slightly different. Call increment to increment a counter or add to add a quantity, and sum to retrieve the total.</p>
<p>Click here to view code image</p>
<p>final LongAdder adder = new LongAdder();<br>for (…)<br>   pool.submit(() -&gt; {<br>      while (…) {<br>         …<br>         if (…) adder.increment();<br>      }<br>   });<br>…<br>long total = adder.sum());<br> NOTE</p>
<p>The Arrays class now has a number of parallelized operations. The static Arrays.parallelSortmethod can sort an array of primitive values or objects. For example,</p>
<p>Click here to view code image</p>
<p>String contents = new String(Files.readAllBytes(<br>    Paths.get(“alice.txt”)), StandardCharsets.UTF_8); // Read file into string<br>String[] words = contents.split(“[\P{L}]+”); // Split along nonletters<br>Arrays.parallelSort(words);<br>When you sort objects, you can supply a Comparator. With all methods, you can supply the bounds of a range, such as</p>
<p>Click here to view code image</p>
<p>Arrays.parallelSort(values, values.length / 2, values.length); // Sort the upper half</p>
<p>There was no easy way of saying: “When the result becomes available, here is how to process it.” This is the crucial feature that the new CompletableFuture<t>class provides.</t></p>
<p>This composability is the key aspect of the CompletableFutureclass. Composing future actions solves a serious problem in programming asynchronous applications. The traditional approach for dealing with nonblocking calls is to use event handlers. The programmer registers a handler for the next action after completion. Of course, if the next action is also asynchronous, then the next action after that is in a different event handler. Even though the programmer thinks in terms of “first do step 1, then step 2, then step 3,” the program logic becomes dispersed in different places.</p>
<p>For example, here is a two-stage pipeline for reading and processing the web page:</p>
<p>Click here to view code image</p>
<p>CompletableFuture&lt;List<url>&gt; links<br>   = CompletableFuture.supplyAsync(() -&gt; blockingReadPage(url))<br>      .thenApply(Parser::getLinks);<br>You can have additional processing steps. Eventually, you’ll be done, and you will need to save the results somewhere. Here, we just print the result.</url></p>
<p>Click here to view code image</p>
<p>CompletableFuture<void> links<br>   = CompletableFuture.supplyAsync(() -&gt; blockingReadPage(url))<br>      .thenApply(Parser::getLinks)<br>      .thenAccept(System.out::println);<br>The thenAcceptmethod takes a Consumer—that is, a function with return type void.</void></p>
<p>Ideally, you would never call get on a future. The last step in the pipeline simply deposits the result where it belongs.</p>
<p>Files.lineslazily reads a stream of lines.</p>
<p>• Files.listlazily lists the entries of a directory, and Files.walktraverses them recursively.</p>
<p>8.4.2. Comparators<br>The Comparatorinterface has a number of useful new methods, taking advantage of the fact that interfaces can now have concrete methods.</p>
<p>The static comparingmethod takes a “key extractor” function that maps a type T to a comparable type (such as String). The function is applied to the objects to be compared, and the comparison is then made on the returned keys. For example, suppose you have an array of Personobjects. Here is how you can sort them by name:</p>
<p>Click here to view code image</p>
<p>Arrays.sort(people, Comparator.comparing(Person::getName));</p>
<p>You can chain comparators with the thenComparingmethod for breaking ties. For example,</p>
<p>Click here to view code image</p>
<p>Arrays.sort(people,<br>   Comparator.comparing(Person::getLastName)<br>   .thenComparing(Person::getFirstName));<br>If two people have the same last name, then the second comparator is used.</p>
<p>There are a few variations of these methods. You can specify a comparator to be used for the keys that the comparingand thenComparingmethods extract. For example, here we sort people by the length of their names:</p>
<p>Click here to view code image</p>
<p>Arrays.sort(people, Comparator.comparing(Person::getName,<br>   (s, t) -&gt; Integer.compare(s.length(), t.length())));<br>Moreover, both the comparing and thenComparingmethods have variants that avoid boxing of int, long, or doublevalues. An easier way of producing the preceding operation would be</p>
<p>Click here to view code image</p>
<p>Arrays.sort(people, Comparator.comparingInt(p -&gt; p.getName().length()));</p>
<p>If your key function can return null, you will like the nullsFirst and nullsLast adapters. These static methods take an existing comparator and modify it so that it doesn’t throw an exception when encountering nullvalues but ranks them as smaller or larger than regular values. For example, suppose getMiddleNamereturns a null when a person has no middle name. Then you can use Comparator.comparing(Person::getMiddleName(), Comparator.nullsFirst(…)).</p>
<p>The nullsFirstmethod needs a comparator—in this case, one that compares two strings. The naturalOrdermethod makes a comparator for any class implementing Comparable. A Comparator.<string>naturalOrder()is what we need. Here is the complete call for sorting by potentially null middle names. I use a static import of java.util.Comparator.*, to make the expression more legible. Note that the type for naturalOrder is inferred.</string></p>
<p>Click here to view code image</p>
<p>Arrays.sort(people, comparing(Person::getMiddleName,<br>   nullsFirst(naturalOrder())));<br>The static reverseOrdermethod gives the reverse of the natural order. To reverse any comparator, use the reversed instance method. For example, naturalOrder().reversed()is the same as reverseOrder().</p>
<p>To read the lines of a file lazily, use the Files.linesmethod. It yields a stream of strings, one per line of input:</p>
<p>Click here to view code image</p>
<p>Stream<string> lines = Files.lines(path);<br>Optional<string> passwordEntry = lines.filter(s -&gt; s.contains(“password”)).findFirst();<br>As soon as the first line containing password is found, no further lines are read from the underlying file.</string></string></p>
<p>You will want to close the underlying file. Fortunately, the Stream interface extends AutoCloseable. The streams that you have seen in Chapter 2didn’t need to close any resources. But the Files.linesmethod produces a stream whose closemethod closes the file. The easiest way to make sure the file is indeed closed is to use a Java 7 try-with-resources block:</p>
<p>Click here to view code image</p>
<p>try (Stream<string> lines = Files.lines(path)) {<br>   Optional<string> passwordEntry<br>      = lines.filter(s -&gt; s.contains(“password”)).findFirst();<br>   …<br>} // The stream, and hence the file, will be closed here<br>When a stream spawns another, the close methods are chained. Therefore, you can also write</string></string></p>
<p>Click here to view code image</p>
<p>try (Stream<string> filteredLines<br>      = Files.lines(path).filter(s -&gt; s.contains(“password”))) {<br>   Optional<string> passwordEntry = filteredLines.findFirst();<br>   …<br>}
When filteredLines is closed, it closes the underlying stream, which closes the underlying file.</string></string></p>
<p>If you want to be notified when the stream is closed, you can attach an onClosehandler. Here is how you can verify that closing filteredLinesactually closes the underlying stream:</p>
<p>Click here to view code image</p>
<p>try (Stream<string> filteredLines<br>   = Files.lines(path).onClose(() -&gt; System.out.println(“Closing”))<br>      .filter(s -&gt; s.contains(“password”))) { … }<br>If an IOExceptionoccurs as the stream fetches the lines, that exception is wrapped into an UncheckedIOExceptionwhich is thrown out of the stream operation. </string></p>
<p>In Java 8, just use Files.list.</p>
<p>The list method does not enter subdirectories. To process all descendants of a directory, use the Files.walk method instead.</p>
<p>Click here to view code image</p>
<p>try (Stream<path> entries = Files.walk(pathToRoot)) {<br>   // Contains all descendants, visited in depth-first order<br>}</path></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Coding</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Concurrent</title>
    <url>/2017-04-20-Concurrent-In-Java/</url>
    <content><![CDATA[<h1 id="This-blog-is-about-noteworthy-pivot-points-about-Java-Concurrent-Framework"><a href="#This-blog-is-about-noteworthy-pivot-points-about-Java-Concurrent-Framework" class="headerlink" title="This blog is about noteworthy pivot points about Java Concurrent Framework"></a>This blog is about noteworthy pivot points about Java Concurrent Framework</h1><blockquote>
<p>Back to Java old days there were wait()/notify() which is error prone, while from Java 5.0 there was Concurrent framework being introduced, this page list some pivot points.</p>
</blockquote>
<h1 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h1><ul>
<li>CountDownLatch in Java is a kind of synchronizer which allows one Thread  to wait for one or more Threads before starts processing. </li>
<li>You can also implement same functionality using  wait and notify mechanism in Java but it requires lot of code and getting it write in first attempt is tricky,  With CountDownLatch it can  be done in just few lines.</li>
<li>One of the <strong>disadvantage</strong> of CountDownLatch is that its <strong>not reusable once count reaches to zero</strong> you can not use CountDownLatch any more, but don’t worry Java concurrency API has another concurrent utility called CyclicBarrier for such requirements.<h2 id="When-to-use-CountDownLatch"><a href="#When-to-use-CountDownLatch" class="headerlink" title="When to use CountDownLatch"></a>When to use CountDownLatch</h2>Classical example of using CountDownLatch in Java  is any server side core Java application which uses services architecture,  where multiple services is provided by multiple threads and application can not start processing  until all services have started successfully as shown in our CountDownLatch example.</li>
</ul>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><ul>
<li>Main Thread wait on Latch by calling CountDownLatch.await() method while other thread calls CountDownLatch.countDown() to inform that they have completed.</li>
</ul>
<h1 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h1><ul>
<li>there is different you can not reuse CountDownLatch once the count reaches zero while you can <strong>reuse CyclicBarrier</strong> by calling <strong>reset()</strong> method which resets Barrier to its initial State. What it implies that <strong>CountDownLatch is a good for one-time</strong> events like <strong>application start-up time</strong> and <strong>CyclicBarrier can be used to in case of the recurrent event</strong> e.g. concurrently calculating a solution of the big problem etc.</li>
<li>a simple example of CyclicBarrier in Java on which we initialize CyclicBarrier with 3 parties, means <strong>in order to cross barrier, 3 thread needs to call await() method</strong>. each <strong>thread calls await method</strong> in short duration but they <strong>don’t proceed until all 3 threads reached the barrier</strong>, once <strong>all thread reach the barrier</strong>, barrier gets broker and <strong>each thread started their execution</strong> from that point. </li>
<li>Sample can be found at <strong>CyclicBarrierDemo.java</strong><h2 id="Use-cases"><a href="#Use-cases" class="headerlink" title="Use cases:"></a>Use cases:</h2></li>
<li>To implement multi player game which can not begin until all player has joined.</li>
<li>Perform lenghty calculation by breaking it into smaller individual tasks. In general, to implement Map-Reduce technique.</li>
<li>CyclicBarrier can perform a completion task once all thread reaches to the barrier, This can be provided while creating CyclicBarrier.</li>
<li>If CyclicBarrier is initialized with 3 parties means 3 thread needs to call await method to break the barrier.</li>
<li>The thread will block on await() until all parties reach to the barrier, another thread interrupt or await timed out.</li>
<li>CyclicBarrier.reset() put Barrier on its initial state, other thread which is waiting or not yet reached barrier will terminate with java.util.concurrent.BrokenBarrierException.</li>
</ul>
<h1 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h1><ul>
<li>ThreadLocal in Java is another way to achieve thread-safety <strong>apart from writing immutable</strong> classes.</li>
<li>ThreadLocal in Java is a different way to achieve thread-safety, it doesn’t address synchronization requirement, instead it eliminates sharing by providing explicitly copy of Object to each thread.</li>
<li>Since Object is no more shared there is no requirement of Synchronization which can improve scalability and performance of application.</li>
<li>One of the classic example of ThreadLocal is sharing SimpleDateForamt. Since SimpleDateFormat is not thread safe, having a global formatter may not work but having per Thread formatter will certainly work. but it can <strong>be source of severe memory leak</strong> and java.lang.OutOfMemoryError if not used carefully. so avoid until you don’t have any other option.</li>
</ul>
<h1 id="Semaphone"><a href="#Semaphone" class="headerlink" title="Semaphone"></a>Semaphone</h1><ul>
<li>Semaphore provides two main method acquire() and release() for getting permits and releasing permits. acquire() method blocks until permit is available.</li>
<li>Semaphore provides both blocking method as well as unblocking method to acquire permits. This Java concurrency tutorial focus on a very simple example of Binary Semaphore and demonstrate how mutual exclusion can be achieved using Semaphore in Java.<h2 id="Binary-Semaphone"><a href="#Binary-Semaphone" class="headerlink" title="Binary Semaphone"></a>Binary Semaphone</h2>a Counting semaphore with <strong>one permit is known as binary semaphore</strong> because it has only two state permit available or permit unavailable. Binary semaphore can be used to implement mutual exclusion or critical section where only one thread is allowed to execute. Thread will wait on acquire() until Thread inside critical section release permit by calling release() on semaphore.</li>
</ul>
<h2 id="Scenarios-usage"><a href="#Scenarios-usage" class="headerlink" title="Scenarios usage"></a>Scenarios usage</h2><p>1) To implement better Database connection pool which will block if no more connection is available instead of failing and handover Connection as soon as its available.<br>2) To put a bound on collection classes. by using semaphore you can implement bounded collection whose bound is specified by counting semaphore.<br>3)  That’s all on Counting semaphore example in Java. Semaphore is real nice concurrent utility which can greatly simply design and implementation of bounded resource pool. Java 5 has added several useful  concurrent utility and deserve a better attention than casual look.</p>
<h1 id="Race-condition"><a href="#Race-condition" class="headerlink" title="Race condition"></a>Race condition</h1><ul>
<li>Race conditions occurs when two thread operate on same object without proper synchronization and there operation interleaves on each other. Classical example of Race condition is incrementing a counter since increment is not an atomic operation and can be further divided into three steps like read, update and write. if two threads tries to increment count at same time and if they read same value because of interleaving of read operation of one thread to update operation of another thread, one count will be lost when one thread overwrite increment done by other thread.</li>
<li>I found that two code patterns namely <strong>“check and act”</strong> and <strong>“read modify write”</strong> can <strong>suffer race condition</strong> if not synchronized properly. <ul>
<li>classical example of “check and act” race condition in Java is getInstance() method of Singleton Class,</li>
<li>put if absent scenario. consider below code</li>
</ul>
</li>
</ul>
<p>if(!hashtable.contains(key)){</p>
<p>hashtable.put(key,value);</p>
<p>}</p>
<h2 id="Fix-race-condition"><a href="#Fix-race-condition" class="headerlink" title="Fix race condition:"></a>Fix race condition:</h2><p>-In order to fix this race condition in Java you need to wrap this code <strong>inside synchronized block</strong> which makes them atomic together because no thread can go inside synchronized block if one thread is already there.</p>
<ul>
<li><strong>IllegalMonitorStateException in Java which will occur</strong> if we don’t call wait (), notify () or notifyAll () method from synchronized context.</li>
<li>Any potential race condition between wait and notify method in Java</li>
</ul>
<h1 id="Thread-in-Java"><a href="#Thread-in-Java" class="headerlink" title="Thread in Java"></a>Thread in Java</h1><h2 id="details"><a href="#details" class="headerlink" title="details:"></a>details:</h2><ul>
<li>A thread is essentialy a subdivision of a process, or LWP: lightweight process.</li>
<li>Crucially, each process has its own memory space. </li>
<li>A thread is a subdivision that shares the memory space of its parent process. </li>
<li>Threads belonging to a process usually share a few other key resources as well, such as their working directory, environment variables, file handles etc.</li>
<li>On the other hand, each thread has its <strong>own private stack and registers, including program counter</strong>.  program counter (PC) register keeps track of the current instruction executing at any moment. That is like a pointer to the current instruction in sequence of instructions in a program. </li>
<li>Method area: In general, method area is a logical part of heap area. But that is left to the JVM implementers to decide.  Method area has per class structures and fields. Nothing but static fields and structures.</li>
<li>Depending on the OS, threads may have some other private resources too, such as <strong>thread-local storage</strong> (effectively, a way of referring to “variable number X”, where each thread has its own private value of X).</li>
</ul>
<h2 id="Wait-amp-Notify"><a href="#Wait-amp-Notify" class="headerlink" title="Wait &amp; Notify"></a>Wait &amp; Notify</h2><ul>
<li>Since wait method is <strong>not defined in Thread</strong> class, you cannot simply call Thread.wait(), that won’t work but since many Java developers are used to calling Thread.sleep() they try the same thing with wait() method and stuck.</li>
<li>You need to call <strong>wait() method on the object</strong> which is <strong>shared between two threads</strong>, in producer-consumer problem its the queue which is shared between producer and consumer threads.<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(lock)&#123;</span><br><span class="line">	<span class="keyword">while</span>(!someCondition)&#123;</span><br><span class="line">		lock.wait();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><ul>
<li><strong>Always call wait(), notify() and notifyAll() methods from synchronized method or synchronized block</strong> otherwise JVM will <strong>throw IllegalMonitorStateException</strong>.</li>
<li>Always call wait and notify method <strong>from a loop</strong> and <strong>never from if()</strong> block, because loop test waiting condition before and after sleeping and handles notification even if waiting for the condition is not changed.</li>
<li>Always <strong>call wait in shared object</strong> e.g. shared queue in this example.</li>
<li>Prefer <strong>notifyAll() over notify()</strong> method due to reasons given in this article. </li>
</ul>
<h2 id="Fork-Join"><a href="#Fork-Join" class="headerlink" title="Fork-Join"></a>Fork-Join</h2><ul>
<li>Fork/join tasks is “pure” in-memory algorithms in which no I/O operations come into picture.it is based on a <strong>work-stealing algorithm</strong>. </li>
<li>Java’s most attractive part is it makes things easier and easier.</li>
<li>its really challenging where several threads are working together to accomplish a large task so again java has tried to make things easy and simplifies this concurrency using Executors and Thread Queue.</li>
<li>it work on <strong>divide and conquer algorithm</strong> and <strong>create sub-tasks and communicate with each other to complete</strong>.</li>
<li>New fork-join executor framework has been created which is responsible for creating one new task object which is again responsible for creating new sub-task object and waiting for sub-task to be completed.internally it maintains a thread pool and executor assign pending task to this thread pool to complete when one task is waiting for another task to complete. whole Idea of fork-join framework is to leverage multiple processors of advanced machine.</li>
</ul>
<h2 id="Thread-yield"><a href="#Thread-yield" class="headerlink" title="Thread.yield()"></a>Thread.yield()</h2><ul>
<li>This static method is essentially used to notify the system that the current thread is willing to “give up the CPU” for a while. The general idea is that: The thread scheduler will select a different thread to run instead of the current one. However, the details of how yielding is implemented by the thread scheduler differ from platform to platform. In general, you shouldn’t rely on it behaving in a particular way. Things that differ include:<ul>
<li>when, after yielding, the thread will get an opportunity to run again;</li>
<li>whether or not the thread foregoes its remaining quantum.</li>
</ul>
</li>
</ul>
<h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><ul>
<li>In the Hotspot implementation, the way that Thread.yield() works has changed between Java 5 and Java 6.</li>
<li>In <strong>Java 5, Thread.yield() calls the Windows API call Sleep(0)</strong>. This has the special effect of clearing the current thread’s quantum and putting it to the end of the queue for its priority level. In other words, all runnable threads of the same priority (and those of greater priority) will get a chance to run before the yielded thread is next given CPU time. When it is eventually re-scheduled, it will come back with a full quantum, but doesn’t “carry over” any of the remaining quantum from the time of yielding. This behaviour is a little different from a non-zero sleep where the sleeping thread generally loses 1 quantum value (in effect, 1/3 of a 10 or 15ms tick).</li>
<li>In <strong>Java 6, this behaviour was changed. The Hotspot VM now implements Thread.yield() using the Windows SwitchToThread() API call</strong>. This call makes the current thread give up its current timeslice, but not its entire quantum. This means that depending on the priorities of other threads, the yielding thread can be scheduled back in one interrupt period later. </li>
</ul>
<h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><ul>
<li>Under Linux, Hotspot simply calls sched_yield(). The consequences of this call are a little different, and possibly more severe than under Windows:<ul>
<li>a yielded thread will not get another slice of CPU until all other threads have had a slice of CPU;</li>
<li>(at least in kernel 2.6.8 onwards), the fact that the thread has yielded is <strong>implicitly taken into account by the scheduler’s heuristics on its recent CPU allocation</strong> — thus, implicitly, a thread that has yielded could be given more CPU when scheduled in the future.</li>
</ul>
</li>
</ul>
<h3 id="When-to-use-yield"><a href="#When-to-use-yield" class="headerlink" title="When to use yield()?"></a>When to use yield()?</h3><ul>
<li>I would say <strong>practically never</strong>. Its behaviour isn’t standardly defined and there are generally better ways to perform the tasks that you might want to perform with yield():</li>
<li>if you’re trying to use only a portion of the CPU, you can do this in a more controllable way by estimating how much CPU the thread has used in its last chunk of processing, then <strong>sleeping for some amount of time to compensate: see the sleep() method</strong>;</li>
<li>if you’re <strong>waiting for a process or resource to complete or become available, there are more efficient ways to accomplish this, such as by using join() to wait</strong> for another thread to complete, using the wait/notify mechanism to allow one thread to signal to another that a task is complete, or ideally by using one of the Java 5 concurrency constructs such as a Semaphore or blocking queue.</li>
</ul>
<h2 id="Thread-Scheduling"><a href="#Thread-Scheduling" class="headerlink" title="Thread Scheduling"></a>Thread Scheduling</h2><ul>
<li><strong>thread scheduler</strong>, part of the OS (usually) that is responsible for sharing the available CPUs out between the various threads. How exactly the scheduler works depends on the individual platform, but various modern operating systems (notably Windows and Linux) use largely similar techniques that we’ll describe here.</li>
<li>Note that we’ll continue to talk about a single thread scheduler. On multiprocessor systems, there is generally some kind of scheduler per processor, which then need to be coordinated in some way. </li>
<li>Across platforms, thread scheduling tends to be based on at least the following criteria:<ul>
<li>a <strong>priority</strong>, or in fact usually multiple “priority” settings that we’ll discuss below;</li>
<li>a <strong>quantum, or number of allocated timeslices of CPU</strong>, which essentially determines the amount of CPU time a thread is allotted before it is forced to yield the CPU to another thread of the same or lower priority (the system will keep track of the remaining quantum at any given time, plus its default quantum, which could depend on thread type and/or system configuration);</li>
<li>a <strong>state</strong>, notably “runnable” vs “waiting”;</li>
<li><strong>metrics</strong> about the behaviour of threads, such as recent CPU usage or the time since it last ran (i.e. had a share of CPU), or the fact that it has “just received an event it was waiting for”.</li>
</ul>
</li>
<li>Most systems use what we might dub <strong>priority-based round-robin scheduling</strong> to some extent. The general principles are:<ul>
<li>a thread of <strong>higher priority</strong> (which is a function of base and local priorities) will <strong>preempt</strong> a thread of lower priority;</li>
<li>otherwise, threads of equal priority will essentially <strong>take turns</strong> at getting an allocated slice or quantum of CPU;</li>
<li>there are a few extra “tweaks” to make things work.</li>
</ul>
</li>
</ul>
<h3 id="States"><a href="#States" class="headerlink" title="States"></a>States</h3><p>Depending on the system, there are various states that a thread can be in. Probably the two most interesting are:</p>
<ul>
<li><strong>runnable</strong>, which essentially means “ready to consume CPU”; being runnable is generally the minimum requirement for a thread to actually be scheduled on to a CPU;</li>
<li><strong>waiting</strong>, meaning that the thread currently cannot continue as it is waiting for a resource such as a lock or I/O, for memory to be paged in, for a signal from another thread, or simply for a period of time to elapse (sleep).</li>
</ul>
<p>Other states include <strong>terminated</strong>, which means the thread’s code has finished running but not all of the thread’s resources have been cleared up, and a <strong>new</strong> state, in which the thread has been created, but not all resources necessary for it to be runnable have been created. </p>
<h3 id="Quanta-and-clock-ticks"><a href="#Quanta-and-clock-ticks" class="headerlink" title="Quanta and clock ticks"></a>Quanta and clock ticks</h3><ul>
<li>Each thread has a quantum, which is effectively how long it is allowed to keep hold of the CPU if:<ul>
<li>it remains runnable;</li>
<li>the scheduler determines that no other thread needs to run on that CPU instead.</li>
</ul>
</li>
<li>Thread quanta are generally defined in terms of some number of <strong>clock ticks</strong>. If it doesn’t otherwise cease to be runnable, the scheduler decides whether to preempt the currently running thread every clock tick. As a rough guide:<ul>
<li>a clock tick is typically 10-15 ms under Windows; under Linux, it is 1ms (kernel 2.6.8 onwards);</li>
<li>a quantum is usually a small number of clock ticks, depending on the OS:<br>either 2, 6 or 12 clock ticks on Windows, depending on whether Windows is running in “server” mode:</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>Windows mode</th>
<th>Foreground process</th>
<th>Non-foreground process</th>
</tr>
</thead>
<tbody><tr>
<td>Normal</td>
<td>6 ticks</td>
<td>2 ticks</td>
</tr>
<tr>
<td>Server</td>
<td>12 ticks</td>
<td>12 ticks</td>
</tr>
</tbody></table>
<p>between 10-200 clock ticks (i.e. 10-200 ms) under Linux, though some granularity is introduced in the calculation— see below.<br>a thread is usually allowed to “save up” unused quantum, up to some limit and granularity.</p>
<ul>
<li>In Windows, a thread’s quantum allocation is fairly stable. In Linux, on the other hand, a thread’s quantum is dynamically adjusted when it is scheduled, depending partly on heuristics about its recent resource usage and partly on a nice value</li>
</ul>
<h4 id="Switching-and-scheduling-algorithms"><a href="#Switching-and-scheduling-algorithms" class="headerlink" title="Switching and scheduling algorithms"></a>Switching and scheduling algorithms</h4><ul>
<li>At key moments, the thread scheduler considers whether to switch the thread that is currently running on a CPU. These key moments are usually:<ul>
<li><strong>periodically</strong>, via an interrupt routine, the scheduler will consider whether the currently running thread on each CPU has reached the end of its allotted <strong>quantum</strong>;</li>
<li>at any time, a currently running thread could <strong>cease to be runnable</strong> (e.g. by needing to wait, reaching the end of its execution or being forcibly killed);</li>
<li>when some other attribute of the thread changes (e.g. its priority or processor affinity4) which means that which threads are running needs to be re-assessed.</li>
</ul>
</li>
<li>At these decision points, the scheduler’s job is essentially to decide, of all the <strong>runnable</strong> threads, <strong>which are the most appropriate to actually be running on the available CPUs</strong>. Potentially, this is quite a complex task. But we don’t want the scheduler to waste too much time deciding “what to do next”. So in practice, a few simple heuristics are used each time the scheduler needs to decide which thread to let run next:<ul>
<li>there’s usually <strong>a fast path</strong> for determining that the currently running thread is still the most appropriate one to continue running (e.g. storing a bitmask of which priorities have runnable threads, so the scheduler can quickly determine that there’s none of a higher priority than that currently running);</li>
<li>if there is a runnable <strong>thread of higher priority</strong> than the currently running one, then the higher priority one will be scheduled in3;</li>
<li>if a thread is “preempted” in this way, it is generally allowed to keep its remaining quantum and continue running when the higher-priority thread is scheduled out again;</li>
<li>when a thread’s <strong>quantum runs out</strong>, the thread is <strong>“put to the back of the queue”</strong> of runnable threads with the given priority and if there’s no queued (runnable) thread of higher priority, then next thread of the same priority will be scheduled in;</li>
<li>at the end of its quantum, if there’s “nothing better to run”, then a <strong>thread could immediately get a new quantum and continue running</strong>;</li>
<li>a thread typically gets a temporary boost to its quantum and/or priority at strategic points.</li>
</ul>
</li>
<li>Quantum and priority boosting<br>Both Windows and Linux (kernel 2.6.8 onwards) implement temporary boosting. Strategic points at which a thread may be given a “boost” include:<ul>
<li>when it has just finished waiting for a lock/signal or I/O5;</li>
<li>when it has not run for a long time (in Windows, this appears to be a simple priority boost after a certain time; in Linux, there is an ongoing calculation based on the thread’s nice value and its recent resource usage);</li>
<li>when a GUI event occurs;</li>
<li>while it owns the focussed window (recent versions of Windows give threads of the owning process a larger quantum; earlier versions give them a priority boost).</li>
</ul>
</li>
</ul>
<h4 id="Context-switching"><a href="#Context-switching" class="headerlink" title="Context switching"></a>Context switching</h4><ul>
<li>context switching. Roughly speaking, this is the procedure that takes place when the system switches between threads running on the available CPUs.</li>
<li>the thread scheduler must actually manage the various thread structures and make decisions about which thread to schedule next where, and every time the thread running on a CPU actually changes— often referred to as a context switch</li>
<li>switching between <strong>threads of different processes</strong> (that is, switching to a thread that belongs to a different process from the one last running on that CPU) <strong>will carry a higher cost</strong>, since the address-to-memory mappings must be changed, and the contents of the cache almost certainly will be irrelevant to the next process.</li>
<li>Context switches appear to typically have a cost somewhere between 1 and 10 microseconds (i.e. between a thousandth and a hundredth of a millisecond) between the fastest and slowest cases (same-process threads with little memory contention vs different processes). So the following are acceptable:<br>1 nanoseconds is billionth of one second,<br>1 microsecond is millionth of one second,<br>1 millisecond is thousandth of one second</li>
</ul>
<h5 id="What-causes-too-many-slow-context-switches-in-Java"><a href="#What-causes-too-many-slow-context-switches-in-Java" class="headerlink" title="What causes too many slow context switches in Java?"></a>What causes too many slow context switches in Java?</h5><ul>
<li>Every time we <strong>deliberately</strong> change a thread’s status or attributes (e.g. by sleeping, waiting on an object, changing the thread’s priority etc), we will cause a context switch. But usually we don’t do those things so many times in a second to matter. Typically, the cause of excessive context switching comes from contention on shared resources, <strong>particularly synchronized locks</strong>:<ul>
<li>rarely, a single object very frequently synchronized on could become a bottleneck;</li>
<li>more frequently, a complex application has several different objects that are each synchronized on with moderate frequency, but overall, threads find it difficult to make progress because they <strong>keep hitting different contended locks</strong> at regular intervals.</li>
</ul>
</li>
</ul>
<h5 id="Avoiding-contention-and-context-switches-in-Java"><a href="#Avoiding-contention-and-context-switches-in-Java" class="headerlink" title="Avoiding contention and context switches in Java"></a>Avoiding contention and context switches in Java</h5><ul>
<li>Firstly, before hacking with your code, a first course of action is upgrading your JVM, particularly if you are not yet using Java 6. Most new Java JVM releases have come with improved synchronization optimisation.</li>
<li>Then, a high-level solution to avoiding synchronized lock contention is generally to use the various classes from the Java 5 concurrency framework (see the java.util.concurrent package). For example, instead of using a HashMap with appropriate synchronization, a ConcurrentHashMap can easily double the throughput with 4 threads and treble it with 8 threads (see the aforementioned link for some ConcurrentHashMap performance measurements). A replacement to synchronized with often better concurrency is offered with various explicit lock classes (such as ReentrantLock).</li>
</ul>
<h6 id="Java-thread-priority"><a href="#Java-thread-priority" class="headerlink" title="Java thread priority"></a>Java thread priority</h6><ul>
<li>Lower-priority threads are given CPU when all higher priority threads are waiting (or otherwise unable to run) at that given moment.</li>
<li>Thread priority <strong>isn’t very meaningful when all threads are competing for CPU</strong>.</li>
<li>The number should lie in the range of two constants <strong>MIN_PRIORITY and MAX_PRIORITY defined on Thread</strong>, and will typically reference <strong>NORM_PRIORITY</strong>, the default priority of a thread if we don’t set it to anything else.</li>
<li>For example, to give a thread a priority that is “half way between normal and maximum”, we could call:<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">thr.setPriority((Thread.MAX_PRIORITY - Thread.NORM_PRIORITY) / <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>####### Some points about thread property</p>
<ul>
<li>depending on your OS and VM version, Thread.setPriority() may actually <strong>do nothing at all</strong> (see below for details);</li>
<li>what thread priorities <strong>mean to the thread scheduler differs from scheduler to scheduler</strong>, and may not be what you intuitively presume; in particular: <strong>Priority may not indicate “share of the CPU”</strong>. As we’ll see below, it turns out that “priority” is more or less an indication of CPU distribution on UNIX systems, but not under Windows.</li>
<li>thread priorities are usually a <strong>combination of “global” and “local” priority settings</strong>, and Java’s setPriority() method typically works only on the local priority— in other words, you can’t set priorities across the entire range possible (this is actually a form of protection— you generally don’t want, say, the mouse pointer thread or a thread handling audio data to be preempted by some random user thread);</li>
<li>the number of distinct priorities available differs from system to system, but Java defines 10 (numbered 1-10 inclusive), so you could end up with threads that have different priorities under one OS, but the same priority (and hence unexpected behaviour) on another;</li>
<li>most operating systems’ thread schedulers actually perform <strong>temporary manipulations</strong> to thread priorities at strategic points (e.g. when a thread receives an event or I/O it was waiting for), and often “the OS knows best”; trying to manually manipulate priorities could just interfere with this system;</li>
<li>your application <strong>doesn’t generally know what threads are running in other processes</strong>, so the effect on the overall system of changing the priority of a thread may be hard to predict. So you might find, for example, that your low-priority thread designed to “run sporadically in the background” hardly runs at all due to a virus dection program running at a slightly higher (but still ‘lower-than-normal’) priority, and that the performance unpredictably varies depending on which antivirus program your customer is using. Of course, effects like these will always happen to some extent or other on modern systems.</li>
</ul>
<h2 id="Thread-scheduling-implications-in-Java"><a href="#Thread-scheduling-implications-in-Java" class="headerlink" title="Thread scheduling implications in Java"></a>Thread scheduling implications in Java</h2><h3 id="Thread-Control"><a href="#Thread-Control" class="headerlink" title="Thread Control"></a>Thread Control</h3><ul>
<li>the granularity and responsiveness of the Thread.sleep() method is largely determined by <strong>the scheduler’s interrupt</strong> period and by how quickly the slept thread becomes the “chosen” thread again;</li>
<li>the precise function of the setPriority() method depends on the specific OS’s interpretation of priority (and which underlying API call Java actually uses when several are available): for more information, see the more detailed section on thread priority;</li>
<li>the behaviour of the Thread.yield() method is similarly determined by what particuar underlying API calls do, and which is actually chosen by the VM implementation.</li>
</ul>
<h3 id="“Granularity”-of-threads"><a href="#“Granularity”-of-threads" class="headerlink" title="“Granularity” of threads"></a>“Granularity” of threads</h3><ul>
<li>Although our introduction to threading focussed on how to create a thread, it turns out that <strong>it isn’t appropriate to create a brand new thread just for a very small task</strong>. Threads are actually quite a “coarse-grained” unit of execution, for reasons that are hopefully becoming clear from the previous sections.</li>
</ul>
<h3 id="Overhead-and-limits-of-creating-and-destroying-threads"><a href="#Overhead-and-limits-of-creating-and-destroying-threads" class="headerlink" title="Overhead and limits of creating and destroying threads"></a>Overhead and limits of creating and destroying threads</h3><ul>
<li>creating and tearing down threads isn’t free: there’ll be some CPU overhead each time we do so;</li>
<li>there may be some moderate limit on the number of threads that can be created, determined by the resources that a thread needs to have allocated (if a process has 2GB of address space, and each thread as 512K of stack, that means a maximum of a few thousands threads per process).</li>
</ul>
<h3 id="Avoiding-thread-overhead-in-Java"><a href="#Avoiding-thread-overhead-in-Java" class="headerlink" title="Avoiding thread overhead in Java"></a>Avoiding thread overhead in Java</h3><ul>
<li>In applications such as servers that need to continually execute short, multithreaded tasks, the usual way to avoid the overhead of repeated thread creation is to create a thread pool. </li>
</ul>
<h1 id="Dinnig-Philosophers-problem"><a href="#Dinnig-Philosophers-problem" class="headerlink" title="Dinnig Philosophers problem"></a>Dinnig Philosophers problem</h1><ul>
<li>The problem was designed to <strong>illustrate the challenges of avoiding deadlock</strong>, a system state in which no progress is possible. To see that a proper solution to this problem is not obvious, consider a proposal in which each philosopher is instructed to behave as follows:</li>
</ul>
<ol>
<li>think until the left fork is available; when it is, pick it up;</li>
<li>think until the right fork is available; when it is, pick it up;</li>
<li>when both forks are held, eat for a fixed amount of time;</li>
<li>then, put the right fork down;</li>
<li>then, put the left fork down;</li>
<li>repeat from the beginning.</li>
</ol>
<ul>
<li>This attempted solution fails because it allows the system to reach a deadlock state, in which no progress is possible. This is a state in which each philosopher has picked up the fork to the left, and is waiting for the fork to the right to become available, vice versa. With the given instructions, this state can be reached, and when it is reached, the philosophers will eternally wait for each other to release a fork</li>
<li><strong>Resource starvation</strong> might also occur independently of deadlock if a particular philosopher is unable to acquire both forks because of a timing problem. For example, there might be a rule that the philosophers put down a fork after waiting ten minutes for the other fork to become available and wait a further ten minutes before making their next attempt.</li>
<li>This scheme eliminates the possibility of deadlock (the system can always advance to a different state) but still <strong>suffers from the problem of livelock</strong>. If all five philosophers appear in the dining room <strong>at exactly the same time</strong> and each picks up the left fork at the same time the philosophers will wait ten minutes until they all put their forks down and then wait a further ten minutes before they all pick them up again.<h2 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h2><h3 id="Arbitrator-solution"><a href="#Arbitrator-solution" class="headerlink" title="Arbitrator solution"></a>Arbitrator solution</h3>Another approach is to guarantee that a philosopher can only pick up both forks or none by introducing an arbitrator, e.g., a waiter. In order to pick up the forks, a philosopher must ask permission of the waiter. The waiter gives permission to only one philosopher at a time until the philosopher has picked up both of their forks. Putting down a fork is always allowed. The waiter can be implemented as a mutex. In addition to introducing a new central entity (the waiter), this approach can result in reduced parallelism. if a philosopher is eating and one of their neighbors is requesting the forks, all other philosophers must wait until this request has been fulfilled even if forks for them are still available.</li>
</ul>
<h1 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h1><h2 id="What-is-the-difference-between-poll-and-remove-method-of-Queue-interface-answer"><a href="#What-is-the-difference-between-poll-and-remove-method-of-Queue-interface-answer" class="headerlink" title="What is the difference between poll() and remove() method of Queue interface? (answer)"></a>What is the difference between poll() and remove() method of Queue interface? (answer)</h2><ul>
<li>Though both poll() and remove() method from Queue is used to remove the object and returns the head of the queue, there is a subtle difference between them. If Queue is empty() then a call to <strong>remove() method will throw Exception</strong>, while a call to <strong>poll() method returns null</strong>.</li>
</ul>
<h2 id="What-is-the-difference-between-fail-fast-and-fail-safe-Iterators"><a href="#What-is-the-difference-between-fail-fast-and-fail-safe-Iterators" class="headerlink" title="What is the difference between fail-fast and fail-safe Iterators?"></a>What is the difference between fail-fast and fail-safe Iterators?</h2><ul>
<li>Fail-fast Iterators <strong>throws ConcurrentModificationException</strong> when one Thread is iterating over collection object and <strong>other</strong> thread <strong>structurally modify</strong> Collection either by adding, removing or modifying objects on underlying collection. They are called fail-fast because they try to immediately throw Exception when they encounter failure. On the other hand <strong>fail-safe Iterators</strong> works on <strong>copy of collection instead of original collection</strong></li>
</ul>
<h2 id="To-remove-entry-from-collection"><a href="#To-remove-entry-from-collection" class="headerlink" title="To remove entry from collection"></a>To remove entry from collection</h2><ul>
<li>you need to use Iterator’s remove() method. This method removes current element from Iterator’s perspective. If you use Collection’s or List’s remove() method during iteration then your code will throw <strong>ConcurrentModificationException</strong>. That’s why it’s advised <strong>to use Iterator remove() method to remove objects from Collection</strong>.</li>
</ul>
<h2 id="What-is-the-difference-between-Synchronized-Collection-and-Concurrent-Collection"><a href="#What-is-the-difference-between-Synchronized-Collection-and-Concurrent-Collection" class="headerlink" title="What is the difference between Synchronized Collection and Concurrent Collection?"></a>What is the difference between Synchronized Collection and Concurrent Collection?</h2><ul>
<li>One Significant difference is that <strong>Concurrent Collections has better performance than synchronized Collection ** because they **lock only a portion of Map</strong> to achieve concurrency and Synchronization.</li>
</ul>
<h2 id="When-do-you-use-ConcurrentHashMap-in-Java"><a href="#When-do-you-use-ConcurrentHashMap-in-Java" class="headerlink" title="When do you use ConcurrentHashMap in Java"></a>When do you use ConcurrentHashMap in Java</h2><ul>
<li>ConcurrentHashMap is better suited for situation where you have <strong>multiple readers</strong> and <strong>one<br>Writer or fewer writers</strong> since Map gets locked only during the write operation. <strong>If you have an equal number of reader and writer</strong> than ConcurrentHashMap will perform in the line of <strong>Hashtable or synchronized HashMap</strong>.</li>
</ul>
<h2 id="Sorting-collections"><a href="#Sorting-collections" class="headerlink" title="Sorting collections"></a>Sorting collections</h2><ul>
<li>Sorting is implemented using Comparable and Comparator in Java and when you call Collections.sort() it gets sorted based on the <strong>natural order specified in compareTo()</strong> method while Collections.sort(Comparator) will sort objects based on <strong>compare() method of Comparator</strong>. </li>
</ul>
<h2 id="Hashmap-vs-Hasset"><a href="#Hashmap-vs-Hasset" class="headerlink" title="Hashmap vs Hasset"></a>Hashmap vs Hasset</h2><ul>
<li>HashSet implements java.util.Set interface and that’s why <strong>only contains unique elements</strong>, while <strong>HashMap allows duplicate values</strong>.  In fact, HashSet is actually implemented on top of java.util.HashMap.</li>
</ul>
<h2 id="What-is-NavigableMap-in-Java"><a href="#What-is-NavigableMap-in-Java" class="headerlink" title="What is NavigableMap in Java"></a>What is NavigableMap in Java</h2><ul>
<li>NavigableMap Map was added in Java 1.6, it adds navigation capability to Map data structure. It provides methods like lowerKey() to get keys which is less than specified key, floorKey() to return keys which is less than or equal to specified key, ceilingKey() to get keys which is greater than or equal to specified key and higherKey() to return keys which is greater specified key from a Map. It also provide similar methods to get entries e.g. lowerEntry(), floorEntry(), ceilingEntry() and higherEntry(). Apart from navigation methods, it also provides utilities to create sub-Map e.g. creating a Map from entries of an exsiting Map like tailMap, headMap and subMap. headMap() method returns a NavigableMap whose keys are less than specified, tailMap() returns a NavigableMap whose keys are greater than the specified and subMap() gives a NavigableMap between a range, specified by toKey to fromKey</li>
</ul>
<h2 id="Array-vs-ArrayList"><a href="#Array-vs-ArrayList" class="headerlink" title="Array vs ArrayList"></a>Array vs ArrayList</h2><ul>
<li>Array is fixed length data structure, once created you can not change it’s length. On the other hand, <strong>ArrayList is dynamic</strong>, it automatically allocate a new array and copies content of old array, when it resize.</li>
<li>Another reason of using ArrayList over Array is <strong>support of Generics</strong>.</li>
</ul>
<h2 id="Can-we-replace-Hashtable-with-ConcurrentHashMap"><a href="#Can-we-replace-Hashtable-with-ConcurrentHashMap" class="headerlink" title="Can we replace Hashtable with ConcurrentHashMap?"></a>Can we replace Hashtable with ConcurrentHashMap?</h2><ul>
<li>Since <strong>Hashtable locks whole Map instead of a portion of Map</strong>, <strong>compound operations like if(Hashtable.get(key) == null) put(key, value) works in Hashtable</strong> but <strong>not in concurrentHashMap</strong>. instead of this <strong>use putIfAbsent() method of ConcurrentHashMap</strong></li>
</ul>
<h2 id="What-is-CopyOnWriteArrayList-how-it-is-different-than-ArrayList-and-Vector"><a href="#What-is-CopyOnWriteArrayList-how-it-is-different-than-ArrayList-and-Vector" class="headerlink" title="What is CopyOnWriteArrayList, how it is different than ArrayList and Vector"></a>What is CopyOnWriteArrayList, how it is different than ArrayList and Vector</h2><ul>
<li>CopyOnWriteArrayList is new List implementation introduced in Java 1.5 which provides better concurrent access than Synchronized List. better concurrency is achieved by Copying ArrayList over each write and replace with original instead of locking. Also CopyOnWriteArrayList doesn’t throw any ConcurrentModification Exception. Its different than ArrayList because its thread-safe and ArrayList is not thread-safe and it’s different than Vector in terms of Concurrency. CopyOnWriteArrayList provides better Concurrency by reducing contention among readers and writers.</li>
</ul>
<h2 id="Why-ListIterator-has-added-method-but-Iterator-doesn’t-or-Why-to-add-method-is-declared-in-ListIterator-and-not-on-Iterator-answer"><a href="#Why-ListIterator-has-added-method-but-Iterator-doesn’t-or-Why-to-add-method-is-declared-in-ListIterator-and-not-on-Iterator-answer" class="headerlink" title="Why ListIterator has added() method but Iterator doesn’t or Why to add() method is declared in ListIterator and not on Iterator. (answer)"></a>Why ListIterator has added() method but Iterator doesn’t or Why to add() method is declared in ListIterator and not on Iterator. (answer)</h2><ul>
<li>ListIterator has added() method because of its ability to traverse or iterate in both direction of the collection. it maintains two pointers in terms of previous and next call and in a position to add a new element without affecting current iteration.</li>
</ul>
<h2 id="What-is-BlockingQueue-how-it-is-different-than-other-collection-classes-answer"><a href="#What-is-BlockingQueue-how-it-is-different-than-other-collection-classes-answer" class="headerlink" title="What is BlockingQueue, how it is different than other collection classes? (answer)"></a>What is BlockingQueue, how it is different than other collection classes? (answer)</h2><ul>
<li>BlockingQueue is a Queue implementation available in java.util.concurrent package. It’s one of the concurrent Collection class added on Java 1.5, main difference between BlockingQueue and other collection classes is that apart from storage, <strong>it also provides flow control</strong>. It can be used in inter-thread communication and also provides <strong>built-in thread-safety by using happens-before guarantee</strong>. You can use BlockingQueue to solve Producer Consumer problem, which is what is needed in most of concurrent applications.</li>
</ul>
<h2 id="You-have-thread-T1-T2-and-T3-how-will-you-ensure-that-thread-T2-run-after-T1-and-thread-T3-run-after-T2"><a href="#You-have-thread-T1-T2-and-T3-how-will-you-ensure-that-thread-T2-run-after-T1-and-thread-T3-run-after-T2" class="headerlink" title="You have thread T1, T2 and T3, how will you ensure that thread T2 run after T1 and thread T3 run after T2"></a>You have thread T1, T2 and T3, how will you ensure that thread T2 run after T1 and thread T3 run after T2</h2><ul>
<li>To use <strong>join</strong> method.</li>
</ul>
<h1 id="Happen-before"><a href="#Happen-before" class="headerlink" title="Happen before"></a>Happen before</h1><ul>
<li>In computer science, the happened-before relation (denoted: → {\displaystyle \to ;} \to ;) is a relation between the result of two events, such that if one event should happen before another event, the result must reflect that, even if those events are in reality executed out of order (usually to optimize program flow). </li>
<li>In Java specifically, a happens-before relationship is a guarantee that <strong>memory written to by statement A is visible to statement B</strong>, that is, that statement <strong>A completes its write before</strong> statement B <strong>starts its read</strong></li>
</ul>
<h1 id="Concurrent-framework"><a href="#Concurrent-framework" class="headerlink" title="Concurrent framework"></a>Concurrent framework</h1><ul>
<li>The advantage of using Callable over Runnable is that <strong>Callable</strong> can explicitly <strong>return a value</strong>.</li>
<li>Executors are a big step forward compared to plain old threads because <strong>executors ease the management of concurrent tasks</strong>. </li>
<li>Some types of algorithms exist that require tasks to create subtasks and communicate with each other to complete. Those are the <strong>“divide and conquer” algorithms</strong>, which are also referred to as <strong>“map and reduce,”</strong> in reference to the eponymous functions in functional languages.</li>
<li>The fork/join framework added to the java.util.concurrent package in Java SE 7 through Doug Lea’s efforts fills that gap. The Java SE 5 and Java SE 6 versions of java.util.concurrent helped in <strong>dealing with concurrency</strong>, and the additions in Java SE 7 help with <strong>parallelism</strong>.</li>
<li>First and foremost, fork/join tasks should operate as <strong>“pure” in-memory algorithms in which no I/O operations</strong> come into play. Also, communication between tasks through shared state should be avoided as much as possible, because that implies that locking might have to be performed.</li>
<li>The core addition is a new <strong>ForkJoinPool executor</strong> that is dedicated to running instances implementing ForkJoinTask. ForkJoinTask objects <strong>support the creation of subtasks plus waiting for the subtasks to complete</strong>. With those clear semantics, the <strong>executor is able to dispatch tasks</strong> among its <strong>internal threads pool</strong> by <strong>“stealing” jobs when a task is waiting</strong> for another task to complete and <strong>there are pending tasks to be run</strong>.</li>
<li>ForkJoinTask objects feature two specific methods:<ul>
<li>The fork() method allows a ForkJoinTask to be planned for asynchronous execution. This allows a new ForkJoinTask to be launched from an existing one.</li>
<li>In turn, the join() method allows a ForkJoinTask to wait for the completion of another one.</li>
</ul>
</li>
<li>There are two types of ForkJoinTask specializations:<ul>
<li>Instances of <strong>RecursiveAction</strong> represent executions that <strong>do not yield a return value</strong>.</li>
<li>In contrast, instances of <strong>RecursiveTask yield return values</strong>.
In general, RecursiveTask is preferred because most divide-and-conquer algorithms return a value from a computation over a data set. </li>
</ul>
</li>
<li>The fork and join principle consists of two steps which are performed recursively. These two steps are the fork step and the join step. </li>
<li>A task that uses the fork and join principle can fork (split) itself into smaller subtasks which can be executed concurrently. This is illustrated in the diagram below: </li>
<li>By splitting itself up into subtasks, each <strong>subtask can be executed in parallel by different CPUs</strong>, or <strong>different threads on the same CPU</strong>. </li>
<li><strong>The limit for when</strong> it makes sense to fork a task into subtasks <strong>is also called a threshold</strong>. It is up to each task to decide on a sensible threshold. It depends very much on the kind of work being done.</li>
<li>Once the subtasks have finished executing, the task may <strong>join (merge) all the results into one result</strong>.</li>
<li>Of course, not all types of tasks may return a result. If the tasks do not return a result then a task just waits for its subtasks to complete. No result merging takes place then. </li>
<li>The <strong>ForkJoinPool is a special thread pool</strong> which is designed to work well with fork-and-join task splitting. The ForkJoinPool located in the java.util.concurrent package, so the full class name is java.util.concurrent.ForkJoinPool. </li>
<li>You create a ForkJoinPool using its constructor. As a parameter to the ForkJoinPool constructor you <strong>pass the indicated level of parallelism</strong> you desire. </li>
<li>The parallelism level <strong>indicates how many threads or CPUs</strong> you want to work concurrently on on tasks passed to the ForkJoinPool.</li>
<li>You submit tasks to a ForkJoinPool <strong>similarly to how you submit tasks to an ExecutorService</strong>. You can submit two types of tasks. A task that <strong>does not return any result (an “action”</strong>), and a <strong>task which does return</strong> a result (a “task”).</li>
</ul>
<h2 id="Fork-Join-framework-details"><a href="#Fork-Join-framework-details" class="headerlink" title="Fork/Join framework details"></a>Fork/Join framework details</h2><ul>
<li><p>ForkJoinPool is consists of ForkJoinTask array and ForkJoinWorkerThread array.  </p>
<ul>
<li><p>ForkJoinTask array contains tasks submitted to ForkJoinPool</p>
</li>
<li><p>ForkJoinWorkerThread array in charge of executing those tasks</p>
</li>
<li><p>When you call fork method on ForkJoinTask, program will call “pushTask” asynchronously of ForkJoinWorkerThread, and then return result right away.</p>
</li>
<li><p>“pushTask” will put current task into ForkJoinTask array queue, then execute “signalWork()” of ForkJoinPool to create a new thread to execute task.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">pushTask</span><span class="params">(ForkJoinTask t)</span> </span>&#123;</span><br><span class="line">       ForkJoinTask[] q; <span class="keyword">int</span> s, m;</span><br><span class="line">       <span class="keyword">if</span> ((q = queue) != <span class="keyword">null</span>) &#123;    <span class="comment">// ignore if queue removed</span></span><br><span class="line">           <span class="keyword">long</span> u = (((s = queueTop) &amp; (m = q.length - <span class="number">1</span>)) &lt;&lt; ASHIFT) + ABASE;</span><br><span class="line">           UNSAFE.putOrderedObject(q, u, t);</span><br><span class="line">           queueTop = s + <span class="number">1</span>;         <span class="comment">// or use putOrderedInt</span></span><br><span class="line">           <span class="keyword">if</span> ((s -= queueBase) &lt;= <span class="number">2</span>)</span><br><span class="line">               pool.signalWork();</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (s == m)</span><br><span class="line">               growQueue();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>“join” method main functionality is blocking current thread and wait for resutls.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">join</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (doJoin() != NORMAL)</span><br><span class="line">          <span class="keyword">return</span> reportResult();</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">          <span class="keyword">return</span> getRawResult();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> V <span class="title">reportResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> s; Throwable ex;</span><br><span class="line">		<span class="keyword">if</span> ((s = status) == CANCELLED)</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> CancellationException();</span><br><span class="line"><span class="keyword">if</span> (s == EXCEPTIONAL &amp;&amp; (ex = getThrowableException()) != <span class="keyword">null</span>)</span><br><span class="line">			UNSAFE.throwException(ex);</span><br><span class="line">		<span class="keyword">return</span> getRawResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>When do call doJoin(), you can get status of curent thread. There are 4 status:<ul>
<li>NORMAL: completed</li>
<li>CANCELLED</li>
<li>SIGNAL</li>
<li>EXCEPTIONAL</li>
</ul>
</li>
<li>The method of doJoin()<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">doJoin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       Thread t; ForkJoinWorkerThread w; <span class="keyword">int</span> s; <span class="keyword">boolean</span> completed;</span><br><span class="line">       <span class="keyword">if</span> ((t = Thread.currentThread()) <span class="keyword">instanceof</span> ForkJoinWorkerThread) &#123;</span><br><span class="line">           <span class="keyword">if</span> ((s = status) &lt; <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">return</span> s;</span><br><span class="line">           <span class="keyword">if</span> ((w = (ForkJoinWorkerThread)t).unpushTask(<span class="keyword">this</span>)) &#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   completed = exec();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (Throwable rex) &#123;</span><br><span class="line">                   <span class="keyword">return</span> setExceptionalCompletion(rex);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (completed)</span><br><span class="line">                   <span class="keyword">return</span> setCompletion(NORMAL);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> w.joinTask(<span class="keyword">this</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">           <span class="keyword">return</span> externalAwaitDone();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="newTaskFor"><a href="#newTaskFor" class="headerlink" title="newTaskFor"></a>newTaskFor</h2><p>If a SocketUsingTask is cancelled through its Future, the socket is closed and the</p>
<p>As of <strong>Java 6, ExecutorService implementations can override newTaskFor</strong> in AbstractExecutorService <strong>to control instantiation of the Future corresponding to a submitted Callable or Runnable</strong>. The default implementation just creates a new FutureTask, as shown in Listing 6.12. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="function">RunnableFuture&lt;T&gt; <span class="title">newTaskFor</span><span class="params">(Callable&lt;T&gt; task)</span> </span>&#123; </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> FutureTask&lt;T&gt;(task); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Listing 6.12. Default implementation of newTaskFor in ThreadPoolExecutor.</p>
<h2 id="Thread-shutdown"><a href="#Thread-shutdown" class="headerlink" title="Thread shutdown"></a>Thread shutdown</h2><ul>
<li>Sensible encapsulation practices dictate that you should not manipulate a thread—interrupt it, modify its priority, etc.—unless you own it. The thread API has no formal concept of thread ownership: a thread is represented with a Thread object that can be freely shared like any other object. However, it makes sense <strong>to think of a thread as having an owner</strong>, and this <strong>is usually the class that created the thread</strong>. So <strong>a thread pool owns its worker threads</strong>, and if those threads need to be interrupted, the thread pool should take care of it.</li>
<li>As with any other encapsulated object, <strong>thread ownership is not transitive</strong>: the application may own the service and the service may own the worker threads, but <strong>the application doesn’t own the worker threads and therefore should not attempt to stop them directly</strong>. Instead, the service should provide lifecycle methods for shutting itself down that also shut down the owned threads; then the application can shut down the service, and the service can shut down the threads. Executor- Service provides the shutdown and shutdownNow methods; other thread-owning services should provide a similar shutdown mechanism.</li>
</ul>
<h2 id="Log-service-implemented-by-blocking-queue"><a href="#Log-service-implemented-by-blocking-queue" class="headerlink" title="Log service implemented by blocking queue"></a>Log service implemented by blocking queue</h2><ul>
<li>If you are logging multiple lines as part of a single log message, you may need to use additional client-side locking to prevent undesirable interleaving of output from multiple threads. If two threads logged multiline stack traces to the same stream with one println call per line, the results would be interleaved unpredictably, and could easily look like one large but meaningless stack trace.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogWriter</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> BlockingQueue&lt;String&gt; queue; <span class="keyword">private</span> <span class="keyword">final</span> LoggerThread logger;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LogWriter</span><span class="params">(Writer writer)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.queue = <span class="keyword">new</span> LinkedBlockingQueue&lt;String&gt;(CAPACITY); <span class="keyword">this</span>.logger = <span class="keyword">new</span> LoggerThread(writer);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123; logger.start(); &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException </span>&#123; queue.put(msg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggerThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123; <span class="keyword">private</span> <span class="keyword">final</span> PrintWriter writer;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>)</span><br><span class="line">writer.println(queue.take());</span><br><span class="line">&#125; <span class="keyword">catch</span>(InterruptedException ignored) &#123; &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    writer.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Stop-logging"><a href="#Stop-logging" class="headerlink" title="Stop logging"></a>Stop logging</h3><ul>
<li>However, this approach has race conditions that make it unreliable. The implementation of log is a check-then-act sequence: producers could observe that the service has not yet been shut down but still queue messages after the shutdown, again with the risk that the producer might get blocked in log and never become unblocked. There are tricks that reduce the likelihood of this (like having the consumer wait several seconds before declaring the queue drained), but these do not change the fundamental problem, merely the likelihood that it will cause a failure.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException </span>&#123; </span><br><span class="line">    <span class="keyword">if</span> (!shutdownRequested)</span><br><span class="line">        queue.put(msg);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"logger is shut down"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>The way to provide reliable shutdown for LogWriter is to fix the race con- dition, which means making the submission of a new log message atomic. But we don’t want to hold a lock while trying to enqueue the message, since put could block. Instead, we can atomically check for shutdown and conditionally increment a counter to “reserve” the right to submit a message, as shown in Log- Service in Listing 7.15.</li>
</ul>
<h3 id="Delegate-shutdown-to-high-level-service"><a href="#Delegate-shutdown-to-high-level-service" class="headerlink" title="Delegate shutdown to high level service"></a>Delegate shutdown to high level service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogService</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ExecutorService exec = newSingleThreadExecutor(); ...</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123; <span class="keyword">try</span> &#123;</span><br><span class="line">exec.shutdown();</span><br><span class="line">exec.awaitTermination(TIMEOUT, UNIT);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            writer.close();</span><br><span class="line">&#125; &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span> </span>&#123; <span class="keyword">try</span> &#123;</span><br><span class="line"> &#125; &#125;</span><br><span class="line">exec.execute(<span class="keyword">new</span> WriteTask(msg));</span><br><span class="line">&#125; <span class="keyword">catch</span> (RejectedExecutionException ignored) &#123; &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>It can even delegate to one shot Executor, OneShotExecutionService.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicBoolean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by todzhang on 2017/1/30.</span></span><br><span class="line"><span class="comment"> * If a method needs to process a batch of tasks and does not return</span></span><br><span class="line"><span class="comment"> * until all the tasks are finished, it can simplify service lifecycle management</span></span><br><span class="line"><span class="comment"> * by using a private Executor whose lifetime is bounded by that method.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The checkMail method in Listing checks for new mail in parallel</span></span><br><span class="line"><span class="comment"> * on a number of hosts. It creates a private executor and submits</span></span><br><span class="line"><span class="comment"> * a task for each host: it then shuts down the executor and waits</span></span><br><span class="line"><span class="comment"> * for termination, which occurs when all</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OneShotExecutionService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">checkMail</span><span class="params">(Set&lt;String&gt; hosts, <span class="keyword">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</span><br><span class="line">        ExecutorService exec= Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">final</span> AtomicBoolean hasNewMail=<span class="keyword">new</span> AtomicBoolean(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">final</span> String host : hosts</span><br><span class="line">                    ) &#123;</span><br><span class="line">                exec.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">if</span> (checkMail(host)) &#123;</span><br><span class="line">                            hasNewMail.set(<span class="keyword">true</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span>&#123;</span><br><span class="line">            exec.shutdown();</span><br><span class="line">            exec.awaitTermination(timeout,unit);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hasNewMail.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">checkMail</span><span class="params">(String host)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>When an ExecutorService is shut down abruptly with shutdownNow, it attempts to cancel the tasks currently in progress and returns a list of tasks that were sub- mitted but never started so that they can be logged or saved for later processing. Detailed logic can be found at <a href="https://github.com/CloudsDocker/algo/blob/master/algoWS/src/main/java/com/todzhang/CancelledTaskTrackingExecutor.java" target="_blank" rel="noopener">CancelledTaskTrackingExecutor.java</a></p>
</li>
<li><p>The leading cause of premature thread death is RuntimeException.</p>
</li>
</ul>
<h1 id="JVM-shutdown"><a href="#JVM-shutdown" class="headerlink" title="JVM shutdown"></a>JVM shutdown</h1><ul>
<li>The JVM can shut down in either an <em>orderly</em> or <em>abrupt</em> manner. An orderly shut- down is initiated when the last “normal” (nondaemon) thread terminates, some- one calls System.exit, or by other platform-specific means (such as sending a SIGINT or hitting Ctrl-C). While this is the standard and preferred way for the JVM to shut down, it can also be shut down abruptly by calling <strong>Runtime.halt or by killing the JVM process</strong> through the operating system (such as sending a SIGKILL).</li>
</ul>
<h2 id="Shutdown-hooks"><a href="#Shutdown-hooks" class="headerlink" title="Shutdown hooks"></a>Shutdown hooks</h2><ul>
<li>In an orderly shutdown, the JVM first starts all registered shutdown hooks. Shutdown hooks are unstarted threads that are registered with <strong>Runtime.addShutdownHook</strong>. The JVM makes no guarantees on the order in which shutdown hooks are started. If any application threads (daemon or nondaemon) are still running at shutdown time, they continue to run concurrently with the shutdown process. </li>
<li>When all shutdown hooks have completed, the JVM may choose <strong>to run finalizers if runFinalizersOnExit is true</strong>, </li>
<li>and then halts. </li>
<li>The JVM makes no attempt to stop or interrupt any application threads that are still running at shutdown time; they are abruptly terminated when the JVM eventually halts. If the shutdown hooks or finalizers don’t complete, then the orderly shutdown process “hangs” and the JVM must be shut down abruptly. In an abrupt shutdown, the JVM is not required to do anything other than halt the JVM; shutdown hooks will not run.</li>
<li>Shutdown <strong>hooks should be thread-safe</strong>: they must <strong>use synchronization when accessing shared data</strong> and should be careful to avoid deadlock, just like any other concurrent code. Further, they should not make assumptions about the state of the application (such as whether other services have shut down already or all normal threads have completed) or about why the JVM is shutting down, and <strong>must therefore be coded extremely defensively</strong>. </li>
<li>Finally, they <strong>should exit as quickly as possible</strong>, since their existence delays JVM termination at a time when the user may be expecting the JVM to terminate quickly.</li>
<li>Shutdown hooks can be used for service or <strong>application cleanu</strong>p, such as deleting temporary files or cleaning up resources that are not automatically cleaned up by the OS. Listing 7.26 shows how LogService in Listing 7.16 could register a shutdown hook from its start method to ensure the log file is closed on exit.</li>
<li>Because shutdown hooks all run concurrently, closing the log file could cause trouble for other shutdown hooks who want to use the logger. To avoid this problem, shutdown hooks should not rely on services that can be shut down by the application or other shutdown hooks. <strong>One way to accomplish this is to use a single shutdown hook for all services</strong>, rather than one for each service, and have it call a series of shutdown actions. This ensures that shutdown actions execute sequentially in a single thread, thus avoiding the possibility of race conditions or deadlock between shutdown actions. This technique can be used whether or not you use shutdown hooks; <strong>executing shutdown actions sequentially rather than concurrently</strong> eliminates many potential sources of failure. <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123; </span><br><span class="line">  Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">try</span> &#123; LogService.<span class="keyword">this</span>.stop(); &#125;</span><br><span class="line">          <span class="keyword">catch</span> (InterruptedException ignored) &#123;&#125;</span><br><span class="line">&#125; &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Daemon-thread"><a href="#Daemon-thread" class="headerlink" title="Daemon thread"></a>Daemon thread</h3><ul>
<li>Threads are divided into two types: <strong>normal threads and daemon threads</strong>. When the <strong>JVM starts up</strong>, all the threads it creates (such as garbage collector and other housekeeping threads) <strong>are daemon threads</strong>, except the main thread. When a new thread is created, it inherits the daemon status of the thread that created it, so by default any threads created by the main thread are also normal threads. </li>
<li>Normal threads and daemon threads <strong>differ only in what happens when they exit</strong>. When a thread exits, the JVM performs an inventory of running threads, and <strong>if the only threads that are left are daemon threads, it initiates an orderly shutdown</strong>. When the JVM halts, <strong>any remaining daemon threads are abandoned— finally blocks are not executed</strong>, stacks are not unwound—the JVM just exits.</li>
<li><strong>Daemon threads should be used sparingly</strong>—few processing activities can be safely abandoned at any time with no cleanup. In particular, it is <strong>dangerous to use daemon threads for tasks that might perform any sort of I/O</strong>. Daemon threads are best saved for “housekeeping” tasks, such as a background thread that periodically removes expired entries from an in-memory cache.<br>Daemon threads are not a good substitute for properly managing the life- cycle of services within an application.</li>
</ul>
<h3 id="Finalizer"><a href="#Finalizer" class="headerlink" title="Finalizer"></a>Finalizer</h3><ul>
<li>Finalizers offer <strong>no guarantees</strong> on <strong>when or even if they run</strong>, and they impose a significant performance cost on objects with nontrivial finalizers. They are also extremely difficult to write correctly.9 In most cases, the combination of finally blocks and explicit close methods does a better job of resource management than finalizers; the sole exception is when you need to manage objects that hold resources acquired by native methods.</li>
<li><strong>Java does not provide a preemptive mechanism</strong> for cancelling activities or terminating threads. Instead, <strong>it provides a cooperative interruption mechanism</strong> that can be used to facilitate cancellation, but it is up to you to construct protocols for cancellation and use them consistently. Using <strong>FutureTask and the Executor framework simplifies building cancellable tasks and services</strong>.</li>
</ul>
<h1 id="Thread-Pool"><a href="#Thread-Pool" class="headerlink" title="Thread Pool"></a>Thread Pool</h1><ul>
<li>Thread pools work best when tasks are homogeneous and independent. Mix- ing long-running and short-running tasks risks “clogging” the pool unless it is very large; submitting tasks that depend on other tasks risks deadlock unless the pool is unbounded. Fortunately, requests in typical network-based server applications—web servers, mail servers, file servers—usually meet these guide- lines.</li>
<li>Some tasks have characteristics that require or preclude a specific exe- cution policy. Tasks that depend on other tasks require that the thread pool be large enough that tasks are never queued or rejected; tasks that exploit thread confinement require sequential execution. Document these requirements so that future maintainers do not undermine safety or live- ness by substituting an incompatible execution policy.</li>
<li>In a single-threaded executor, a task that submits another task to the same executor and waits for its result <strong>will always deadlock</strong>.</li>
<li>The same thing can happen in larger thread pools if all threads are executing tasks that are blocked waiting for other tasks still on the work queue. This is called <strong>thread starvation deadlock</strong>, and can occur whenever a pool task initiates an unbounded blocking wait for some resource or condition that can succeed only through the action of another pool task, such as waiting for the return value or side effect of another task, unless you can guarantee that the pool is large enough.</li>
</ul>
<blockquote>
<p>Whenever you submit to an Executor tasks that are not independent, be aware of the possibility of thread starvation deadlock, and document any pool sizing or configuration constraints in the code or configuration file where the Executor is configured.</p>
</blockquote>
<ul>
<li>Task that deadlocks in a single-threaded Executor. Don’t do this.<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Future&lt;String&gt; header,footer;</span><br><span class="line">            header=exec.submit(<span class="keyword">new</span> LoadFileTask(<span class="string">"header.html"</span>));</span><br><span class="line">            footer=exec.submit(<span class="keyword">new</span> LoadFileTask(<span class="string">"footer.html"</span>));</span><br><span class="line">            String body=renderBody();</span><br><span class="line">            <span class="keyword">return</span> header.get()+body+footer.get();</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="Long-running-tasks"><a href="#Long-running-tasks" class="headerlink" title="Long running tasks"></a>Long running tasks</h1><ul>
<li>Thread pools can have responsiveness problems if tasks can block for extended periods of time, even if deadlock is not a possibility. A thread pool can become clogged with long-running tasks, increasing the service time even for short tasks. If the pool size is too small relative to the expected steady-state number of long- running tasks, eventually all the pool threads will be running long-running tasks and responsiveness will suffer.</li>
<li><strong>One technique that can mitigate the ill effects</strong> of long-running tasks is for tasks <strong>to use timed resource waits instead of unbounded waits</strong>. Most blocking methods in the plaform libraries come in both untimed and timed versions, such as Thread.join, BlockingQueue.put, CountDownLatch.await, and Selector.sel- ect. If the wait times out, you can mark the task as failed and abort it or requeue it for execution later. This guarantees that each task eventually makes progress towards either successful or failed completion, freeing up threads for tasks that might complete more quickly. If a thread pool is frequently full of blocked tasks, this may also be a sign that the pool is too small.</li>
</ul>
<h1 id="size-the-thread-pool"><a href="#size-the-thread-pool" class="headerlink" title="size the thread pool"></a>size the thread pool</h1><ul>
<li>The ideal size for a thread pool depends on the types of tasks that will be submitted and the characteristics of the deployment system. <strong>Thread pool sizes should rarely be hard-coded</strong>; instead pool sizes should be provided by a <strong>configuration</strong> mechanism or computed dynamically by consulting <strong>Runtime.availableProcessors</strong>.</li>
<li>If you have different categories of tasks with very different behaviors, consider using multiple thread pools so each can be tuned according to its workload.</li>
<li>The optimal pool size for keeping the processors at the desired utilization is:<br>Nthreads=Ncpu∗Ucpu∗ (1+((W/C)<br>Ncpu: Number of CPU<br>Ucpu: target CPU utilization , 0&lt;Ucpu&lt;1<br>W/C: ratio of wait time to compute time</li>
</ul>
<h1 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h1><ul>
<li>ThreadPoolExecutor provides the base implementation for the executors re- turned by the newCachedThreadPool, newFixedThreadPool, and newScheduled- ThreadExecutor factories in Executors. </li>
<li>Implementation of ThreadPoolExecutor<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,<span class="keyword">int</span> maximumPoolSize, <span class="keyword">long</span> keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue,ThreadFactory threadFactory,RejectedExecutionHandler handler)</span></span>&#123;...&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol>
<li>corePoolSize is the target size, the implementation attempts to maintain the pool at this size when there are no tasks to execute. and will not create more threads than this unless the work queue is full. When a ThreadPoolExecutor is initially created, the core threads are <strong>not started immediately</strong>, but instead as tasks are submitted. Unless you call <strong>prestartAllCoreThreads</strong></li>
<li>The maximum pool size is the upper bound on how many threads can be active at once.</li>
<li>A thread that has been idel for longer than the <strong>keep-alive time</strong> becomes a candidate for reaping and can be terminated if the current <strong>pool size exceed the core size</strong>.</li>
</ol>
<ul>
<li>By tuning the core pool size and keep-alive times, you can encourage the pool to reclaim resources used by otherwise idle threads, making them available for more useful work. (Like everything else, this is a tradeoff: reaping idle threads incurs additional latency due to thread creation if threads must later be created when demand increases.)</li>
<li>The <strong>newFixedThreadPool</strong> factory sets <strong>both the core pool size and the maxi- mum pool size</strong> to the <strong>requested pool size</strong>, creating the effect of <strong>infinite timeout</strong>; </li>
<li>the <strong>newCachedThreadPool</strong> factory sets the <strong>maximum pool size to Integer.MAX_VALUE</strong> and the <strong>core pool size to zero</strong> with a <strong>timeout of one minute</strong>, creating the effect of an <strong>infinitely expandable thread pool</strong> that will contract again when demand decreases. </li>
<li>Other combinations are possible using the explicit ThreadPool- Executor constructor.</li>
<li>ThreadPoolExecutor allows you to supply a BlockingQueue to hold tasks awaiting execution. There are <strong>three basic approaches to task queueing</strong>: <strong>un- bounded queue, bounded queue, and synchronous handoff</strong>. The choice of queue interacts with other configuration parameters such as pool size.</li>
<li>The default for <strong>newFixedThreadPool and newSingleThreadExecutor</strong> is to use an <strong>unbounded LinkedBlockingQueue</strong>. Tasks will queue up if all worker threads are busy, but the queue could grow without bound if the tasks keep arriving faster than they can be executed.</li>
<li>A more stable resource management strategy is to use a bounded queue, such as an ArrayBlockingQueue or a bounded LinkedBlockingQueue or Priority- BlockingQueue. Bounded queues help prevent resource exhaustion but introduce the question of what to do with new tasks when the queue is full. (There are a number of possible <strong>saturation policies</strong> for addressing this problem;</li>
<li>For very large or unbounded pools, you can also bypass queueing entirely and instead hand off tasks directly from producers to worker threads using a SynchronousQueue. <strong>A SynchronousQueue is not really a queue at all, but a mechanism for managing handoffs between threads</strong>. In order to put an element on a SynchronousQueue, another thread must already be waiting to accept the handoff. If no thread is waiting but the current pool size is less than the maximum, ThreadPoolExecutor creates a new thread; otherwise the task is rejected according to the saturation policy. <strong>Using a direct handoff is more efficient because the task can be handed right to the thread that will execute it, rather than first placing it on a queue and then having the worker thread fetch it from the queue</strong>. Synchron- ousQueue is a practical choice only if the pool is unbounded or if rejecting excess tasks is acceptable. The newCachedThreadPool factory uses a SynchronousQueue.</li>
<li>Using a FIFO queue like LinkedBlockingQueue or ArrayBlockingQueue causes tasks to be started in the order in which they arrived. For more con- trol over task execution order, you can use a PriorityBlockingQueue, which orders tasks according to priority. Priority can be defined by natural order (if<br>tasks implement Comparable) or by a Comparator.</li>
<li>The newCachedThreadPool factory is a good default choice for an Executor, providing better queuing performance than a fixed thread pool.5 A fixed size thread pool is a good choice when you need to limit the number of concurrent tasks for resource-management purposes, as in a server application that accepts requests from network clients and would otherwise be vulnerable to overload.</li>
<li>ith tasks that depend on other tasks, bounded thread pools or queues can cause thread starvation deadlock; instead, use an unbounded pool configuration like newCachedThreadPool.</li>
</ul>
<h1 id="Saturation-policies"><a href="#Saturation-policies" class="headerlink" title="Saturation policies"></a>Saturation policies</h1><ul>
<li>When a bounded work queue fills up, the <strong>saturation policy</strong> comes into play. The saturation policy for a ThreadPoolExecutor can be modified by calling setRejectedExecutionHandler. </li>
<li>Several implementations of RejectedExecutionHandler are provided, each implementing a different saturation policy: <strong>AbortPolicy, CallerRunsPolicy, DiscardPolicy, and DiscardOldestPolicy</strong>.</li>
<li>The default policy, <strong>abort</strong>, causes execute to throw the unchecked Rejected- ExecutionException; the caller can catch this exception and implement its own overflow handling as it sees fit. The <strong>discard</strong> policy silently discards the newly submitted task if it cannot be queued for execution; the <strong>discard-oldest</strong> policy discards the task that would otherwise be executed next and tries to resubmit the new task. (If the work queue is a priority queue, this discards the highest-priority element, so the combination of a discard-oldest saturation policy and a priority queue is not a good one.)</li>
<li>The <strong>caller-runs policy</strong> implements a form of throttling that neither discards tasks nor throws an exception, but instead tries to slow down the flow of new tasks by pushing some of the work back to the caller. It executes the newly submitted task not in a pool thread, but in the thread that calls execute. If we modified our WebServer example to use a bounded queue and the caller-runs policy, after all the pool threads were occupied and the work queue filled up the next task would be executed in the main thread during the call to execute. </li>
</ul>
<h1 id="Thread-Factory"><a href="#Thread-Factory" class="headerlink" title="Thread Factory"></a>Thread Factory</h1><ul>
<li><p>Whenever a thread pool needs to create a thread, it does so through a thread factory (see Listing 8.5). The default thread factory creates a new, nondaemon thread with no special configuration. Specifying a thread factory allows you to customize the configuration of pool threads. <strong>ThreadFactory has a single method, newThread, that is called whenever a thread pool needs to create a new thread</strong>.</p>
</li>
<li><p>There are a number of reasons to use a custom thread factory. You might want to specify an UncaughtExceptionHandler for pool threads, or instantiate an instance of a custom Thread class, such as one that performs debug logging.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ThreadFactory</span></span>&#123;</span><br><span class="line">    <span class="function">Thread <span class="title">newThread</span><span class="params">(Runnable r)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>BoundedExecutor.java is using semaphore and Executor for bounded executor service.</p>
</li>
<li><p>MyThreadFactory.java and MyAppThread.java are used to customize ThreadFactory, a customized Thread.</p>
</li>
<li><p>MyExtendedThreadPool.java implemented beforeExecute, afterExecute, etc method to add statistics, such as log and timing for each operations in the thread pool</p>
</li>
</ul>
<h2 id="Process-sequential-processing-to-parallel"><a href="#Process-sequential-processing-to-parallel" class="headerlink" title="Process sequential processing to parallel"></a>Process sequential processing to parallel</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">processSequentially</span><span class="params">(List&lt;Element&gt; elements)</span> </span>&#123; <span class="keyword">for</span> (Element e : elements)</span><br><span class="line">process(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">processInParallel</span><span class="params">(Executor exec, List&lt;Element&gt; elements)</span> </span>&#123; <span class="keyword">for</span> (<span class="keyword">final</span> Element e : elements)</span><br><span class="line">exec.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; process(e); &#125;</span><br><span class="line">&#125;); &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>If you want to submit a set of tasks and wait for them all to complete, you can use <strong>ExecutorService.invokeAll</strong>; to retrieve the results as they become available, you can use a <strong>CompletionService</strong>.</li>
</ul>
<h1 id="Deadlocks"><a href="#Deadlocks" class="headerlink" title="Deadlocks"></a>Deadlocks</h1><ul>
<li>There is often a tension between safety and liveness. We use locking to ensure thread safety, but indiscriminate use of locking can cause <strong>lock-ordering deadlocks</strong>. Similarly, we <strong>use thread pools and semaphores to bound resource consumption</strong>, but failure to understand the activities being bounded can cause <strong>resource deadlocks</strong>. Java applications do not recover from deadlock, so it is worthwhile to ensure that your design precludes the conditions that could cause it. </li>
<li>When a thread holds a lock forever, other threads attempting to acquire that lock will block forever waiting. When thread A holds lock L and tries to acquire lock M, but at the same time thread B holds M and tries to acquire L, both threads will wait forever. This situation is the simplest case of deadlock (or deadly embrace),</li>
<li>Database systems are designed to detect and recover from deadlock. A trans- action may acquire many locks, and locks are held until the transaction commits. So it is quite possible, and in fact not uncommon, for two transactions to deadlock. Without intervention, they would wait forever (holding locks that are probably re- quired by other transactions as well). But the database server is not going to let this happen. When it detects that a set of transactions is deadlocked (which it does by searching the is-waiting-for graph for cycles), it picks a victim and aborts that transaction. This releases the locks held by the victim, allowing the other transactions to proceed. The application can then retry the aborted transaction, which may be able to complete now that any competing transactions have com- pleted.</li>
<li>A program will be free of lock-ordering deadlocks if all threads acquire the locks they need in a fixed global order.</li>
</ul>
<h2 id="To-break-deadlock-by-ensuring-lock-order"><a href="#To-break-deadlock-by-ensuring-lock-order" class="headerlink" title="To break deadlock by ensuring lock order"></a>To break deadlock by ensuring lock order</h2><ul>
<li><p>uses System.identityHashCode to induce a lock ordering. It involves a few extra lines of code, but eliminates the possibility of deadlock.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">identityHashCode</span><span class="params">(Object x)</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>In the rare case that two objects have the same hash code, we must use an arbitrary means of ordering the lock acquisitions, and this reintroduces the pos- sibility of deadlock. To prevent inconsistent lock ordering in this case, a third “tie breaking” lock is used. By acquiring the tie-breaking lock before acquiring either Account lock, we ensure that only one thread at a time performs the risky task of acquiring two locks in an arbitrary order, eliminating the possibility of deadlock (so long as this mechanism is used consistently). If hash collisions were common, this technique might become a concurrency bottleneck (just as having a single, program-wide lock would), but because hash collisions with System.identity- HashCode are vanishingly infrequent, this technique provides that last bit of safety at little cost.</p>
</li>
<li><p>two locks are acquired by two threads in different orders, risking deadlock.</p>
</li>
<li><p>Calling a method <strong>with no locks held is called an open call</strong> [CPJ 2.4.1.3], and classes that rely on open calls are more well-behaved and composable than classes that make calls with locks held. Using open calls to avoid deadlock is analogous to using encapsulation to provide thread safety: while one can certainly construct a thread-safe program without any encapsulation, the thread safety analysis of a program that makes effective use of encapsulation is far easier than that of one that does not.</p>
</li>
</ul>
<h2 id="Avoiding-and-diagnosing-deadlocks"><a href="#Avoiding-and-diagnosing-deadlocks" class="headerlink" title="Avoiding and diagnosing deadlocks"></a>Avoiding and diagnosing deadlocks</h2><ul>
<li>A program that <strong>never acquires more than one lock at a time cannot experience lock-ordering deadlock</strong>. Of course, this is not always practical, but if you can get away with it, it’s a lot less work. If you must <strong>acquire multiple locks, lock ordering must be a part of your design</strong>: try to <strong>minimize the number of potential locking interactions</strong>, and follow and document a lock-ordering protocol for locks that may be acquired together.</li>
<li>In programs that use fine-grained locking, audit your code for deadlock free- dom using a two-part strategy: first, identify where multiple locks could be ac- quired (try to make this a small set), and then perform a global analysis of all such instances to ensure that lock ordering is consistent across your entire pro- gram. Using open calls wherever possible simplifies this analysis substantially. With no non-open calls, finding instances where multiple locks are acquired is fairly easy, either by code review or by automated bytecode or source code anal- ysis.</li>
</ul>
<h2 id="Timed-lock-attempts"><a href="#Timed-lock-attempts" class="headerlink" title="Timed lock attempts"></a>Timed lock attempts</h2><ul>
<li>Another technique for detecting and recovering from deadlocks is to use the timed tryLock feature of the explicit Lock classes (see Chapter 13) instead of intrinsic locking. Where intrinsic locks wait forever if they cannot acquire the lock, explicit locks let you specify a timeout after which tryLock returns failure.</li>
</ul>
<h2 id="JVM-Thread-dump-including-dead-lock"><a href="#JVM-Thread-dump-including-dead-lock" class="headerlink" title="JVM Thread dump including dead lock"></a>JVM Thread dump including dead lock</h2><ul>
<li>There are two threads trying to accquire two locks in different orders</li>
<li><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Java stack information <span class="keyword">for</span> the threads listed above: <span class="string">"ApplicationServerThread "</span>:</span><br><span class="line">at MumbleDBConnection.remove_statement</span><br><span class="line">- waiting to lock &lt;0x650f7f30&gt; (a MumbleDBConnection) at MumbleDBStatement.close</span><br><span class="line">- locked &lt;0x6024ffb0&gt; (a MumbleDBCallableStatement)</span><br><span class="line">...</span><br><span class="line"><span class="string">"ApplicationServerThread "</span>:</span><br><span class="line">at MumbleDBCallableStatement.sendBatch</span><br><span class="line">- waiting to lock &lt;0x6024ffb0&gt; (a MumbleDBCallableStatement) at MumbleDBConnection.commit</span><br><span class="line">- locked &lt;0x650f7f30&gt; (a MumbleDBConnection)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="Other-liveness-hazards"><a href="#Other-liveness-hazards" class="headerlink" title="Other liveness hazards"></a>Other liveness hazards</h1><ul>
<li>While deadlock is the most widely encountered liveness hazard, there are sev- eral other liveness hazards you may encounter in concurrent programs including starvation, missed signals, and livelock.</li>
</ul>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="http://www.javamex.com/tutorials/threads/thread_scheduling.shtml" target="_blank" rel="noopener">http://www.javamex.com/tutorials/threads/thread_scheduling.shtml</a></li>
<li><a href="http://www.javamex.com/tutorials/threads/priority.shtml" target="_blank" rel="noopener">http://www.javamex.com/tutorials/threads/priority.shtml</a></li>
<li><a href="http://www.javamex.com/tutorials/threads/how_threads_work.shtml" target="_blank" rel="noopener">http://www.javamex.com/tutorials/threads/how_threads_work.shtml</a></li>
<li><a href="http://www.javamex.com/tutorials/threads/thread_scheduling_2.shtml" target="_blank" rel="noopener">http://www.javamex.com/tutorials/threads/thread_scheduling_2.shtml</a></li>
<li><a href="http://www.javamex.com/tutorials/threads/yield.shtml" target="_blank" rel="noopener">http://www.javamex.com/tutorials/threads/yield.shtml</a></li>
<li><a href="http://javarevisited.blogspot.in/2012/07/countdownlatch-example-in-java.html" target="_blank" rel="noopener">http://javarevisited.blogspot.in/2012/07/countdownlatch-example-in-java.html</a></li>
<li><a href="http://javarevisited.blogspot.sg/2012/05/how-to-use-threadlocal-in-java-benefits.html" target="_blank" rel="noopener">http://javarevisited.blogspot.sg/2012/05/how-to-use-threadlocal-in-java-benefits.html</a></li>
<li><a href="http://javarevisited.blogspot.com/2012/03/simpledateformat-in-java-is-not-thread.html" target="_blank" rel="noopener">http://javarevisited.blogspot.com/2012/03/simpledateformat-in-java-is-not-thread.html</a></li>
<li><a href="http://javarevisited.blogspot.com/2012/05/counting-semaphore-example-in-java-5.html#ixzz4WRuTQFDF" target="_blank" rel="noopener">http://javarevisited.blogspot.com/2012/05/counting-semaphore-example-in-java-5.html#ixzz4WRuTQFDF</a></li>
<li><a href="http://javarevisited.blogspot.in/2012/02/what-is-race-condition-in.html" target="_blank" rel="noopener">http://javarevisited.blogspot.in/2012/02/what-is-race-condition-in.html</a>          </li>
<li><a href="http://javarevisited.blogspot.in/2011/05/wait-notify-and-notifyall-in-java.html" target="_blank" rel="noopener">http://javarevisited.blogspot.in/2011/05/wait-notify-and-notifyall-in-java.html</a></li>
<li><a href="http://javarevisited.blogspot.in/2015/07/how-to-use-wait-notify-and-notifyall-in.html" target="_blank" rel="noopener">http://javarevisited.blogspot.in/2015/07/how-to-use-wait-notify-and-notifyall-in.html</a></li>
<li><a href="http://javarevisited.blogspot.in/2012/07/cyclicbarrier-example-java-5-concurrency-tutorial.html" target="_blank" rel="noopener">http://javarevisited.blogspot.in/2012/07/cyclicbarrier-example-java-5-concurrency-tutorial.html</a></li>
<li><a href="http://javarevisited.blogspot.in/2011/09/fork-join-task-java7-tutorial.html" target="_blank" rel="noopener">http://javarevisited.blogspot.in/2011/09/fork-join-task-java7-tutorial.html</a></li>
<li><a href="https://en.wikipedia.org/wiki/Dining_philosophers_problem" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Dining_philosophers_problem</a></li>
<li><a href="http://javarevisited.blogspot.com/2011/11/collection-interview-questions-answers.html#ixzz4WTN72QPa" target="_blank" rel="noopener">http://javarevisited.blogspot.com/2011/11/collection-interview-questions-answers.html#ixzz4WTN72QPa</a></li>
<li><a href="http://javarevisited.blogspot.in/2011/11/collection-interview-questions-answers.html" target="_blank" rel="noopener">http://javarevisited.blogspot.in/2011/11/collection-interview-questions-answers.html</a></li>
<li><a href="http://www.oracle.com/technetwork/articles/java/fork-join-422606.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/articles/java/fork-join-422606.html</a></li>
<li><a href="http://tutorials.jenkov.com/java-util-concurrent/java-fork-and-join-forkjoinpool.html" target="_blank" rel="noopener">http://tutorials.jenkov.com/java-util-concurrent/java-fork-and-join-forkjoinpool.html</a></li>
<li><a href="http://coopsoft.com/ar/CalamityArticle.html" target="_blank" rel="noopener">http://coopsoft.com/ar/CalamityArticle.html</a></li>
<li><a href="http://www.infoq.com/cn/articles/fork-join-introduction" target="_blank" rel="noopener">http://www.infoq.com/cn/articles/fork-join-introduction</a></li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Concurrent</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS certification</title>
    <url>/2019-08-25-AWS-Certificate/</url>
    <content><![CDATA[<h1 id="Concepting"><a href="#Concepting" class="headerlink" title="Concepting"></a>Concepting</h1><p>Cloud computing is the on-demand delivery of IT resources and applications via the Internet with pay-as-you-go pricing. Whether you run applications that share photos to millions of mobile users or deliver services that support the critical operations of your business, the cloud provides rapid access to flexible and low-cost IT resources.</p>
<p>In its simplest form, cloud computing <code>provides an easy way to access servers, storage</code>, databases, and a broad set of application services <code>over the Internet</code>.</p>
<h1 id="Benefits-of-AWS"><a href="#Benefits-of-AWS" class="headerlink" title="Benefits of AWS"></a>Benefits of AWS</h1><p>There are six advantages for AWS clouding</p>
<ol>
<li>Global in minutes</li>
<li>Variable vs capital expense</li>
<li>Economies of scale</li>
<li>Stop guessing capacity</li>
<li>Focus on business differentaiors</li>
<li>Increate speed and agility </li>
</ol>
<h2 id="Cost-saving"><a href="#Cost-saving" class="headerlink" title="Cost saving"></a>Cost saving</h2><p>One of the key benefits of cloud computing is the opportunity to <code>replace up-front capital infrastructure expenses with low variable costs</code> that scale with your business. With the cloud, businesses no longer need to plan for and procure servers and other IT infrastructure weeks or months in advance. Instead, they can instantly spin up hundres or thousands of servers in minutes and deliver results faster.</p>
<p>With pay-per-use billing, AWS clouding services <code>become an operational expense instead of a capital expense</code>.</p>
<h1 id="Metadata"><a href="#Metadata" class="headerlink" title="Metadata"></a>Metadata</h1><p>Metadata, known as tags, that you can create and assign to your Amazon EC2 resources</p>
<h1 id="AZ-Available-Zones"><a href="#AZ-Available-Zones" class="headerlink" title="AZ (Available Zones)"></a>AZ (Available Zones)</h1><ul>
<li>Each availability zone is a physical data center in the region, but separate from the other ones (so that they’re isolated from disasters)</li>
<li>AWS Consoles are region scoped (except IAM, S3 &amp; Route53)</li>
</ul>
<h1 id="EC2"><a href="#EC2" class="headerlink" title="EC2"></a>EC2</h1><p>Here you need to create an AMI, but because AMI are bounded in the regions they are created, they need to be copied across regions for disaster recovery purposes</p>
<h2 id="EC2-instance-stopping"><a href="#EC2-instance-stopping" class="headerlink" title="EC2 instance stopping"></a>EC2 instance stopping</h2><p>If you stopped an EBS-backed EC2 instance, the volume is preserved but the data in any attached Instance store volumes will be erased. Keep in mind that an EC2 instance has an underlying physical host computer. If the instance is stopped, AWS usually moves the instance to a new host computer. Your instance may stay on the same host computer if there are no problems with the host computer. In addition, its Elastic IP address is disassociated from the instance if it is an EC2-Classic instance. Otherwise, if it is an EC2-VPC instance, the Elastic IP address remains associated.</p>
<h2 id="Placement-group"><a href="#Placement-group" class="headerlink" title="Placement group"></a>Placement group</h2><p> Placements groups are the answer here, where “cluster” guarantees high network performance (correct answer), whereas “spread” would guarantee independent failures between instances.</p>
<p> When you launch a new EC2 instance, the EC2 service attempts to place the instance in such a way that all of your instances are spread out across underlying hardware to minimize correlated failures. You can use placement groups to influence the placement of a group of interdependent instances to meet the needs of your workload. Depending on the type of workload, you can create a placement group using one of the following placement strategies:</p>
<p> Cluster – packs instances close together inside an Availability Zone. This strategy enables workloads to achieve the low-latency network performance necessary for tightly-coupled node-to-node communication that is typical of HPC applications.</p>
<p> Partition – spreads your instances across logical partitions such that groups of instances in one partition do not share the underlying hardware with groups of instances in different partitions. This strategy is typically used by large distributed and replicated workloads, such as Hadoop, Cassandra, and Kafka.</p>
<p> Spread – strictly places a small group of instances across distinct underlying hardware to reduce correlated failures.</p>
<p> There is no charge for creating a placement group.</p>
<p> Placement Groups is primarily used to determine how your instances are placed on the underlying hardware while Enhanced Networking, on the other hand, is for providing high-performance networking capabilities using single root I/O virtualization (SR-IOV) on supported EC2 instance types.</p>
<h2 id="Security-Group"><a href="#Security-Group" class="headerlink" title="Security Group"></a>Security Group</h2><p>When you create a security group, it has no inbound rules. Therefore, no inbound traffic originating from another host to your instance is allowed until you add inbound rules to the security group. By default, a security group includes an outbound rule that allows all outbound traffic. You can remove the rule and add outbound rules that allow specific outbound traffic only. If your security group has no outbound rules, no outbound traffic originating from your instance is allowed.</p>
<p>Options 1 and 4 are both incorrect because any changes to the Security Groups or Network Access Control Lists are applied immediately and not after 60 minutes or after the instance reboot.</p>
<p>Option 2 is incorrect because the scenario says that VPC is using a default configuration. Since by default, Network ACL allows all inbound and outbound IPv4 traffic, then there is no point of explicitly allowing the port in the Network ACL. Security Groups, on the other hand, does not allow incoming traffic by default, unlike Network ACL.</p>
<h3 id="Custom-port"><a href="#Custom-port" class="headerlink" title="Custom port"></a>Custom port</h3><p>To allow the custom port, you have to change the Inbound Rules in your Security Group to allow traffic coming from the mobile devices. Security Groups usually control the list of ports that are allowed to be used by your EC2 instances and the NACLs control which network or list of IP addresses can connect to your whole VPC.</p>
<h3 id="Cluster"><a href="#Cluster" class="headerlink" title="Cluster"></a>Cluster</h3><p> Cluster Placement Groups</p>
<p>A cluster placement group is a logical grouping of instances within a single Availability Zone. A placement group can span peered VPCs in the same Region. The chief benefit of a cluster placement group, in addition to a 10 Gbps flow limit, is the non-blocking, non-oversubscribed, fully bi-sectional nature of the connectivity. In other words, all nodes within the placement group can talk to all other nodes within the placement group at the full line rate of 10 Gbps flows and 100 Gbps aggregate without any slowing due to over-subscription.</p>
<h2 id="ASG"><a href="#ASG" class="headerlink" title="ASG"></a>ASG</h2><h3 id="ASG-Lauch-configuration"><a href="#ASG-Lauch-configuration" class="headerlink" title="ASG Lauch configuration"></a>ASG Lauch configuration</h3><p>Launch configurations are immutable meaning they cannot be updated. You have to create a new launch configuration, attach it to the ASG and then terminate old instances / launch new instances</p>
<h3 id="ASG-termination"><a href="#ASG-termination" class="headerlink" title="ASG termination"></a>ASG termination</h3><p>AZs will be balanced first, then the instance with the oldest launch configuration within that AZ will be terminated. For a reference to the default termination policy logic, have a look at this link: <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html</a></p>
<h2 id="AMI"><a href="#AMI" class="headerlink" title="AMI"></a>AMI</h2><p>the EC2 instances you are currently using depends on a pre-built AMI. This AMI is not accessible to another region hence,  you have to copy it to the us-west-2 region to properly establish your disaster recovery instance.</p>
<p>You can copy an Amazon Machine Image (AMI) within or across an AWS region using the AWS Management Console, the AWS command line tools or SDKs, or the Amazon EC2 API, all of which support the CopyImage action. You can copy both Amazon EBS-backed AMIs and instance store-backed AMIs. You can copy encrypted AMIs and AMIs with encrypted snapshots</p>
<h1 id="AWS-Device-Farm"><a href="#AWS-Device-Farm" class="headerlink" title="AWS Device Farm"></a>AWS Device Farm</h1><p>AWS Device Farm is an app testing service that lets you test and interact with your Android, iOS, and web apps on many devices at once, or reproduce issues on a device in real time.</p>
<h1 id="IAM"><a href="#IAM" class="headerlink" title="IAM"></a>IAM</h1><p>Your whole AWS security is there:<br>• Users<br>• Groups<br>• Roles</p>
<p>Policies are written in JSON (JavaScript Object Notation)</p>
<p>IAM has a <code>global</code> view</p>
<p>Permissions let you specify access to AWS resources. Permissions are granted to IAM entities (users, groups, and roles) and by default these entities start with no permissions. In other words, IAM entities can do nothing in AWS until you grant them your desired permissions. To give entities permissions, you can attach a policy that specifies the type of access, the actions that can be performed, and the resources on which the actions can be performed. In addition, you can specify any conditions that must be set for access to be allowed or denied.</p>
<h2 id="To-enforce-IAM"><a href="#To-enforce-IAM" class="headerlink" title="To enforce IAM"></a>To enforce IAM</h2><ul>
<li>Enable Multi-Factor Authentication</li>
<li>Assign an IAM role to the Amazon EC2 instance</li>
</ul>
<p>Always remember that you should associate IAM roles to EC2 instances and not an IAM user, for the purpose of accessing other AWS services. IAM roles are designed so that your applications can securely make API requests from your instances, without requiring you to manage the security credentials that the applications use. Instead of creating and distributing your AWS credentials, you can delegate permission to make API requests using IAM roles.</p>
<h2 id="IAM-policies"><a href="#IAM-policies" class="headerlink" title="IAM policies"></a>IAM policies</h2><p>A permissions policy describes who has access to what. Policies attached to an IAM identity are identity-based policies (IAM policies) and policies attached to a resource are resource-based policies. Amazon RDS supports only identity-based policies (IAM policies).</p>
<h2 id="DB-authenticatioin-via-IAM"><a href="#DB-authenticatioin-via-IAM" class="headerlink" title="DB authenticatioin via IAM"></a>DB authenticatioin via IAM</h2><p>MySQL and PostgreSQL both support IAM database authentication.</p>
<p>To protect the confidential data of your customers, you have to ensure that your RDS database can only be accessed using the profile credentials specific to your EC2 instances via an authentication token.   </p>
<p>You can authenticate to your DB instance using AWS Identity and Access Management (IAM) database authentication. IAM database authentication works with MySQL and PostgreSQL. With this authentication method, you don’t need to use a password when you connect to a DB instance. Instead, you use an authentication token.</p>
<p>An authentication token is a unique string of characters that Amazon RDS generates on request. Authentication tokens are generated using AWS Signature Version 4. Each token has a lifetime of 15 minutes. You don’t need to store user credentials in the database, because authentication is managed externally using IAM. You can also still use standard database authentication.</p>
<h2 id="IAM-Federation"><a href="#IAM-Federation" class="headerlink" title="IAM Federation"></a>IAM Federation</h2><p>• Big enterprises usually integrate their own repository of users with IAM<br>• This way, one can login into AWS using their company credentials<br>• Identity Federation uses the SAML standard (Active Directory)</p>
<p>• One IAM User per PHYSICAL PERSON<br>• One IAM Role per Application</p>
<h2 id="STS"><a href="#STS" class="headerlink" title="STS"></a>STS</h2><p>Temporary Security Credentials<br>You can use the AWS Security Token Service (AWS STS) to create and provide trusted users with temporary security credentials that can control access to your AWS resources. Temporary security credentials work almost identically to the long-term access key credentials that your IAM users can use, with the following differences:</p>
<p>Temporary security credentials are short-term, as the name implies. They can be configured to last for anywhere from a few minutes to several hours. After the credentials expire, AWS no longer recognizes them or allows any kind of access from API requests made with them.</p>
<p>Temporary security credentials are not stored with the user but are generated dynamically and provided to the user when requested. When (or even before) the temporary security credentials expire, the user can request new credentials, as long as the user requesting them still has permissions to do so.</p>
<h3 id="Amazon-Cognito"><a href="#Amazon-Cognito" class="headerlink" title="Amazon Cognito"></a>Amazon Cognito</h3><p>This service is primarily used for user authentication and not for providing access to your AWS resources. A JSON Web Token (JWT) is meant to be used for user authentication and session management.</p>
<h3 id="AWS-SSO"><a href="#AWS-SSO" class="headerlink" title="AWS SSO"></a>AWS SSO</h3><p>This service uses STS, it does not issue short-lived credentials by itself. AWS Single Sign-On (SSO) is a cloud SSO service that makes it easy to centrally manage SSO access to multiple AWS accounts and business applications.</p>
<h1 id="Storage"><a href="#Storage" class="headerlink" title="Storage"></a>Storage</h1><h3 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h3><p>Instance Store will have the highest disk performance but comes with the storage being wiped if the instance is terminated, which is acceptable in this case. EBS volumes would provide good performance as far as disk goes, but not as good as Instance Store. EBS data survives instance termination or reboots. EFS is a network drive, and finally S3 cannot be mounted as a local disk (natively).</p>
<p>Need to define two terms:<br>• RPO: Recovery Point Objective<br>• RTO: Recovery Time Objective</p>
<h2 id="S3"><a href="#S3" class="headerlink" title="S3"></a>S3</h2><p>Generating S3 pre-signed URLs would bypass CloudFront, therefore we should use CloudFront signed URL. To generate that URL we must code, and Lambda is the perfect tool for running that code on the fly. </p>
<p>As the file is greater than 5GB in size, you must use Multi Part upload to upload that file to S3.</p>
<h3 id="S3-Glacier"><a href="#S3-Glacier" class="headerlink" title="S3 Glacier"></a>S3 Glacier</h3><p>Expedited retrievals allow you to quickly access your data when occasional urgent requests for a subset of archives are required. For all but the largest archives (250 MB+), data accessed using Expedited retrievals are typically made available within 1–5 minutes. Provisioned Capacity ensures that retrieval capacity for Expedited retrievals is available when you need it.</p>
<p>To make an Expedited, Standard, or Bulk retrieval, set the Tier parameter in the Initiate Job (POST jobs) REST API request to the option you want, or the equivalent in the AWS CLI or AWS SDKs. If you have purchased provisioned capacity, then all expedited retrievals are automatically served through your provisioned capacity.</p>
<p>Provisioned capacity ensures that your retrieval capacity for expedited retrievals is available when you need it. Each unit of capacity provides that at least three expedited retrievals can be performed every five minutes and provides up to 150 MB/s of retrieval throughput. You should purchase provisioned retrieval capacity if your workload requires highly reliable and predictable access to a subset of your data in minutes. Without provisioned capacity Expedited retrievals are accepted, except for rare situations of unusually high demand. However, if you require access to Expedited retrievals under all circumstances, you must purchase provisioned retrieval capacity.</p>
<h4 id="Amazon-Glacier-Select"><a href="#Amazon-Glacier-Select" class="headerlink" title="Amazon Glacier Select"></a>Amazon Glacier Select</h4><p>It is not an archive retrieval option and is primarily used to perform filtering operations using simple Structured Query Language (SQL) statements directly on your data archive in Glacier.</p>
<h4 id="Bulk-retrievals"><a href="#Bulk-retrievals" class="headerlink" title="Bulk retrievals"></a>Bulk retrievals</h4><p>It typically complete within 5–12 hours hence, this does not satisfy the requirement of retrieving the data within 15 minutes. The provisioned capacity option is also not compatible with Bulk retrievals.</p>
<h4 id="ranged-archive-retrievals"><a href="#ranged-archive-retrievals" class="headerlink" title="ranged archive retrievals"></a>ranged archive retrievals</h4><p>using ranged archive retrievals is not enough to meet the requirement of retrieving the whole archive in the given timeframe. In addition, it does not provide additional retrieval capacity which is what the provisioned capacity option can offer.</p>
<h3 id="S3-Select"><a href="#S3-Select" class="headerlink" title="S3 Select"></a>S3 Select</h3><p>It is an Amazon S3 feature that makes it easy to retrieve specific data from the contents of an object using simple SQL expressions without having to retrieve the entire object.<br>Similiarly, Amazon Redshift Spectrum is a feature of Amazon Redshift that enables you to run queries against exabytes of unstructured data in Amazon S3 with no loading or ETL required.</p>
<h3 id="OAI"><a href="#OAI" class="headerlink" title="OAI"></a>OAI</h3><p>Don’t make the S3 bucket public. You cannot attach IAM roles to the CloudFront distribution. S3 buckets don’t have security groups. Here you need to use an OAI. Read more here: <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html</a></p>
<p>Restricting Access to Amazon S3 Content by Using an Origin Access Identity<br>To restrict access to content that you serve from Amazon S3 buckets, you create CloudFront signed URLs or signed cookies to limit access to files in your Amazon S3 bucket, and then you create a special CloudFront user called an origin access identity (OAI) and associate it with your distribution. Then you configure permissions so that CloudFront can use the OAI to access and serve files to your users, but users can’t use a direct URL to the S3 bucket to access a file there. Taking these steps help you maintain secure access to the files that you serve through CloudFront.</p>
<p>In general, if you’re using an Amazon S3 bucket as the origin for a CloudFront distribution, you can either allow everyone to have access to the files there, or you can restrict access. If you limit access by using, for example, CloudFront signed URLs or signed cookies, you also won’t want people to be able to view files by simply using the direct URL for the file. Instead, you want them to only access the files by using the CloudFront URL, so your protections work. For more information about using signed URLs and signed cookies, see Serving Private Content with Signed URLs and Signed Cookies</p>
<h2 id="S3-Q-amp-A"><a href="#S3-Q-amp-A" class="headerlink" title="S3 Q&amp;A"></a>S3 Q&amp;A</h2><p>Amazon S3 now provides increased performance to support at least 3,500 requests per second to add data and 5,500 requests per second to retrieve data, which can save significant processing time for no additional charge. Each S3 prefix can support these request rates, making it simple to increase performance significantly.</p>
<p>Applications running on Amazon S3 today will enjoy this performance improvement with no changes, and customers building new applications on S3 do not have to make any application customizations to achieve this performance. Amazon S3’s support for parallel requests means you can scale your S3 performance by the factor of your compute cluster, without making any customizations to your application. Performance scales per prefix, so you can use as many prefixes as you need in parallel to achieve the required throughput. There are no limits to the number of prefixes.</p>
<p>This S3 request rate performance increase removes any previous guidance to randomize object prefixes to achieve faster performance. That means you can now use logical or sequential naming patterns in S3 object naming without any performance implications. This improvement is now available in all AWS Regions. </p>
<p>Option 1 is incorrect because it is an archival/long term storage solution, which is not optimal if you are serving objects frequently and fast retrieval is a must.</p>
<p>Option 2 is incorrect. Adding a random prefix is not required in this scenario because S3 can now scale automatically to adjust perfomance. You do not need to add a random prefix anymore for this purpose since S3 has increased performance to support at least 3,500 requests per second to add data and 5,500 requests per second to retrieve data, which covers the workload in the scenario.</p>
<p>Option 4 is incorrect because Amazon S3 already maintains an index of object key names in each AWS region. S3 stores key names in alphabetical order. The key name dictates which partition the key is stored in. Using a sequential prefix increases the likelihood that Amazon S3 will target a specific partition for a large number of your keys, overwhelming the I/O capacity of the partition.</p>
<h3 id="Encryption"><a href="#Encryption" class="headerlink" title="Encryption"></a>Encryption</h3><p>With SSE-C, your company can still provide the encryption key but let AWS do the encryption</p>
<h2 id="EBS-Elastic-Block-Storage"><a href="#EBS-Elastic-Block-Storage" class="headerlink" title="EBS (Elastic Block Storage)"></a>EBS (Elastic Block Storage)</h2><p>EBS is already redundant storage (replicated within an AZ)<br>But what if you want to increase IOPS to say 100 000 IOPS?</p>
<h3 id="RAID"><a href="#RAID" class="headerlink" title="RAID"></a>RAID</h3><h4 id="RAID-0-increase-performance"><a href="#RAID-0-increase-performance" class="headerlink" title="RAID 0 (increase performance)"></a>RAID 0 (increase performance)</h4><p> EC2 instance<br>One logical volume<br>either<br>EBS Volume 1<br>• Combining 2 or more volumes and getting the total disk space and I/O<br>• But one disk fails, all the data is failed</p>
<h4 id="RAID-1-increase-fault-tolerance"><a href="#RAID-1-increase-fault-tolerance" class="headerlink" title="RAID 1 (increase fault tolerance)"></a>RAID 1 (increase fault tolerance)</h4><p> EC2 instance<br>One logical volume<br>both<br>• RAID 1 = Mirroring a volume to another<br>• If one disk fails, our logical volume is still working<br>• We have to send the data to two EBS volume at the same time (2x network)</p>
<h3 id="EBS-types"><a href="#EBS-types" class="headerlink" title="EBS types"></a>EBS types</h3><p> keeping as io1 but reducing the iops may interfere with the burst of performance we need. The EC2 instance type changes won’t affect the 90% of the costs that are incurred to us. CloudFormation is a free service to use. Therefore, gp2 is the right choice, allowing us to save on cost while keeping a burst in performance when needed</p>
<p>You can now choose between three Amazon EBS volume types to best meet the needs of your workloads: General Purpose (SSD), Provisioned IOPS (SSD), and Magnetic volumes. </p>
<h4 id="General-Purpose-SSD"><a href="#General-Purpose-SSD" class="headerlink" title="General Purpose (SSD)"></a>General Purpose (SSD)</h4><p>GP2 volumes are suitable for a broad range of workloads, including small to medium-sized databases, development and test environments, and boot volumes. </p>
<h4 id="Provisioned-IOPS-SSD"><a href="#Provisioned-IOPS-SSD" class="headerlink" title="Provisioned IOPS (SSD)"></a>Provisioned IOPS (SSD)</h4><p>Such volumes offer storage with consistent and low-latency performance, are designed for I/O-intensive applications such as large relational or NoSQL databases, and allow you to choose the level of performance you need. </p>
<h4 id="Magnetic-volumes"><a href="#Magnetic-volumes" class="headerlink" title="Magnetic volumes"></a>Magnetic volumes</h4><p>formerly known as Standard volumes, provide the lowest cost per gigabyte of all Amazon EBS volume types and are ideal for workloads where data is accessed infrequently and applications where the lowest storage cost is important.</p>
<p>Backed by Solid-State Drives (SSDs), General Purpose (SSD) volumes provide the ability to burst to 3,000 IOPS per volume, independent of volume size, to meet the performance needs of most applications and also deliver a consistent baseline of 3 IOPS/GB. General Purpose (SSD) volumes offer the same five nines of availability and durable snapshot capabilities as other volume types. Pricing and performance for General Purpose (SSD) volumes are simple and predictable. You pay for each GB of storage you provision, and there are no additional charges for I/O performed on a volume. Prices start as low as $0.10/GB.</p>
<h4 id="EBS-snapshot"><a href="#EBS-snapshot" class="headerlink" title="EBS snapshot"></a>EBS snapshot</h4><p>While it is completing, an in-progress snapshot is not affected by ongoing reads and writes to the volume.</p>
<p>You can take a snapshot of an attached volume that is in use. However, snapshots only capture data that has been written to your Amazon EBS volume at the time the snapshot command is issued. This might exclude any data that has been cached by any applications or the operating system. If you can pause any file writes to the volume long enough to take a snapshot, your snapshot should be complete. However, if you can’t pause all file writes to the volume, you should unmount the volume from within the instance, issue the snapshot command, and then remount the volume to ensure a consistent and complete snapshot. You can remount and use your volume while the snapshot status is pending.</p>
<h4 id="Save-network-cost"><a href="#Save-network-cost" class="headerlink" title="Save network cost"></a>Save network cost</h4><p> S3 would imply changing the application code, Glacier is not applicable as the files are frequently requested, Storage Gateway isn’t for distributing files to end users. CloudFront is the right answer, because we can put it in front of our ASG and leverage a Global Caching feature that will help us distribute the content reliably with dramatically reduced costs (the ASG won’t need to scale as much)</p>
<h2 id="EFS"><a href="#EFS" class="headerlink" title="EFS"></a>EFS</h2><p>Instance Stores or EBS volumes are local disks and cannot be shared across instances. Here, we need a network file system (NFS), which is exactly what EFS is designed for.</p>
<h1 id="Redshift"><a href="#Redshift" class="headerlink" title="Redshift"></a>Redshift</h1><p>Creating a smaller cluster with the cold data would not decrease the storage cost of Redshift, which will increase as we keep on creating data. Moving the data to S3 glacier will prevent us from being able to query it. Redshift’s internal storage does not have “tiers”. Therefore, we should migrate the data to S3 IA and use Athena (serverless SQL query engine on top of S3) to analyze the cold data.</p>
<p>Amazon Redshift is a fast, scalable data warehouse that makes it simple and cost-effective to analyze all your data across your data warehouse and data lake. Redshift delivers ten times faster performance than other data warehouses by using machine learning, massively parallel query execution, and columnar storage on high-performance disk.</p>
<p>In this scenario, there is a requirement to have a storage service which will be used by a business intelligence application and where the data must be stored in a columnar fashion. Business Intelligence reporting systems is a type of Online Analytical Processing (OLAP) which Redshift is known to support. In addition, Redshift also provides columnar storage unlike the other options. Hence, the correct answer in this scenario is Option 1: Amazon Redshift.</p>
<h2 id="RedShift-Spectrum"><a href="#RedShift-Spectrum" class="headerlink" title="RedShift Spectrum"></a>RedShift Spectrum</h2><p>Enables you to run queries against exabytes of data in S3 without having to load or transform any data.<br>Redshift Spectrum doesn’t use Enhanced VPC Routing.<br>If you store data in a columnar format, Redshift Spectrum scans only the columns needed by your query, rather than processing entire rows.<br>If you compress your data using one of Redshift Spectrum’s supported compression algorithms, less data is scanned.</p>
<h1 id="CloundFront"><a href="#CloundFront" class="headerlink" title="CloundFront"></a>CloundFront</h1><h2 id="Origin"><a href="#Origin" class="headerlink" title="Origin"></a>Origin</h2><p>Until now, CloudFront could serve up content from Amazon S3. In content-distribution lingo, S3 was the only supported origin server. You would store your web objects (web pages, style sheets, images, JavaScript, and so forth) in S3, and then create a CloudFront distribution. Here is the basic flow:</p>
<p>Effective today we are opening up CloudFront and giving you the ability to use the origin server of your choice.</p>
<p>You can now create a CloudFront distribution using a custom origin. Each distribution will can point to an S3 or to a custom origin. This could be another storage service, or it could be something more interesting and more dynamic, such as an EC2 instance or even an Elastic Load Balancer:</p>
<h1 id="CloudFormation"><a href="#CloudFormation" class="headerlink" title="CloudFormation"></a>CloudFormation</h1><h2 id="CloudFormation-vs-Elastic-Beanstalk"><a href="#CloudFormation-vs-Elastic-Beanstalk" class="headerlink" title="CloudFormation vs Elastic Beanstalk"></a>CloudFormation vs Elastic Beanstalk</h2><p>Elastic Beanstalk provides an environment to easily deploy and run applications in the cloud.<br>CloudFormation is a convenient provisioning mechanism for a broad range of AWS resources.</p>
<h1 id="VPC"><a href="#VPC" class="headerlink" title="VPC"></a>VPC</h1><p>you can optionally connect to your own network, known as virtual private clouds (VPCs)</p>
<p>Amazon Web Services. Amazon Elastic Compute Cloud.</p>
<p>Amazon VPC lets you provision a logically isolated section of the Amazon Web Services (AWS) cloud where you can launch AWS resources in a virtual network that you define. You have complete control over your virtual networking environment, including selection of your own IP address ranges, creation of subnets, and configuration of route tables and network gateways. You can also create a hardware Virtual Private Network (VPN) connection between your corporate datacenter and your VPC and leverage the AWS cloud as an extension of your corporate datacenter.</p>
<h2 id="Subnet"><a href="#Subnet" class="headerlink" title="Subnet"></a>Subnet</h2><p>A subnet is a range of IP addresses in your VPC. You can launch AWS resources into a specified subnet. Use a public subnet for resources that must be connected to the internet, and a private subnet for resources that won’t be connected to the internet.<br>To protect the AWS resources in each subnet, use security groups and network access control lists (ACL).</p>
<p>Remember that one subnet is mapped into one specific Availability Zone.</p>
<h3 id="Subnet-and-Avaialability-Zone-and-VPC"><a href="#Subnet-and-Avaialability-Zone-and-VPC" class="headerlink" title="Subnet and Avaialability Zone and VPC"></a>Subnet and Avaialability Zone and VPC</h3><p>A VPC spans all the Availability Zones in the region. After creating a VPC, you can add one or more subnets in each Availability Zone. When you create a subnet, you specify the CIDR block for the subnet, which is a subset of the VPC CIDR block. Each subnet must reside entirely within one Availability Zone and cannot span zones. Availability Zones are distinct locations that are engineered to be isolated from failures in other Availability Zones. By launching instances in separate Availability Zones, you can protect your applications from the failure of a single location. AWS assigns a unique ID to each subnet.</p>
<h3 id="Default-subnet"><a href="#Default-subnet" class="headerlink" title="Default subnet"></a>Default subnet</h3><p>By default, a “default subnet” of your VPC is actually a public subnet, because the main route table sends the subnet’s traffic that is destined for the internet to the internet gateway. You can make a default subnet into a private subnet by removing the route from the destination 0.0.0.0/0 to the internet gateway. However, if you do this, any EC2 instance running in that subnet can’t access the internet.</p>
<p>Instances that you launch into a default subnet receive both a public IPv4 address and a private IPv4 address, and both public and private DNS hostnames. Instances that you launch into a nondefault subnet in a default VPC don’t receive a public IPv4 address or a DNS hostname. You can change your subnet’s default public IP addressing behavior</p>
<p>By default, nondefault subnets have the IPv4 public addressing attribute set to false, and default subnets have this attribute set to true. An exception is a nondefault subnet created by the Amazon EC2 launch instance wizard — the wizard sets the attribute to true. </p>
<p>Newly created instance does not have a public IP address since it was deployed on a nondefault subnet. The other 4 instances are accessible over the Internet because they each have an Elastic IP address attached, unlike the last instance which only has a private IP address. An Elastic IP address is a public IPv4 address, which is reachable from the Internet. If your instance does not have a public IPv4 address, you can associate an Elastic IP address with your instance to enable communication with the Internet.</p>
<h2 id="VPC-Endpoint"><a href="#VPC-Endpoint" class="headerlink" title="VPC Endpoint"></a>VPC Endpoint</h2><p>You must remember that the two services that use a VPC Endpoint Gateway are Amazon S3 and DynamoDB. The rest are VPC Endpoint Interface</p>
<h3 id="NACL-Network-ACL"><a href="#NACL-Network-ACL" class="headerlink" title="NACL (Network ACL)"></a>NACL (Network ACL)</h3><p>NACL is stateless.</p>
<p>• NACL are like a firewall which control traffic from and to subnet<br>• Default NACL allows everything outbound and everything inbound<br>• One NACL per Subnet, new Subnets are assigned the Default NACL<br>• Define NACL rules:<br>• Rules have a number (1-32766) and higher precedence with a lower number<br>• E.g. If you define #100 ALLOW <ip> and #200 DENY <ip> , IP will be allowed • Last rule is an asterisk (*) and denies a request in case of no rule match<br>• AWS recommends adding rules by increment of 100<br>• Newly created NACL will deny everything<br>• NACL are a great way of blocking a specific IP at the subnet level</ip></ip></p>
<h3 id="NACL-noteworhty-points"><a href="#NACL-noteworhty-points" class="headerlink" title="NACL noteworhty points"></a>NACL noteworhty points</h3><p>Network ACL Basics</p>
<ul>
<li>Your VPC automatically comes with a modifiable default network ACL. By default, it allows all inbound and outbound IPv4 traffic and, if applicable, IPv6 traffic.</li>
</ul>
<h3 id="IGW-Internet-GateWay"><a href="#IGW-Internet-GateWay" class="headerlink" title="IGW (Internet GateWay)"></a>IGW (Internet GateWay)</h3><p>After creating an IGW, make sure the route tables are updated. Additionally, ensure the security group allow the ICMP protocol for ping requests</p>
<h3 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h3><p>NAT Instances would work but won’t scale and you would have to manage them (as they’re EC2 instances). Egress-Only Internet Gateways are for IPv6, not IPv4. Internet Gateways must be deployed in a public subnet. Therefore you must use a NAT Gateway in your public subnet in order to provide internet access to your instances in your private subnets.</p>
<p>You do not need a NAT Gateway nor a NAT instance when the instances are already in public subnet. Remember that a NAT Gateway or a NAT instance is primarily used to enable instances in a private subnet to connect to the Internet or other AWS services, but prevent the Internet from initiating a connection with those instances.</p>
<h2 id="How-to-prevent-DDoS"><a href="#How-to-prevent-DDoS" class="headerlink" title="How to prevent DDoS"></a>How to prevent DDoS</h2><p>AWS provides flexible infrastructure and services that help customers implement strong DDoS mitigations and create highly available application architectures that follow AWS Best Practices for DDoS Resiliency. These include services such as Amazon Route 53, Amazon CloudFront, Elastic Load Balancing, and AWS WAF to control and absorb traffic, and deflect unwanted requests. These services integrate with AWS Shield, a managed DDoS protection service that provides always-on detection and automatic inline mitigations to safeguard web applications running on AWS.</p>
<h3 id="AWS-Shield"><a href="#AWS-Shield" class="headerlink" title="AWS Shield"></a>AWS Shield</h3><p>AWS Shield is a managed DDoS protection service that is available in two tiers: Standard and Advanced. AWS Shield Standard applies always-on detection and inline mitigation techniques, such as deterministic packet filtering and priority-based traffic shaping, to minimize application downtime and latency. </p>
<h4 id="AWS-Shield-Standard"><a href="#AWS-Shield-Standard" class="headerlink" title="AWS Shield Standard"></a>AWS Shield Standard</h4><p>It is included automatically and transparently to your Elastic Load Balancing load balancers, Amazon CloudFront distributions, and Amazon Route 53 resources at no additional cost. When you use these services that include AWS Shield Standard, you receive comprehensive availability protection against all known infrastructure layer attacks. Customers who have the technical expertise to manage their own monitoring and mitigation of application layer attacks can use AWS Shield together with AWS WAF rules to create a comprehensive DDoS attack mitigation strategy.</p>
<h4 id="AWS-Shield-Advanced"><a href="#AWS-Shield-Advanced" class="headerlink" title="AWS Shield Advanced"></a>AWS Shield Advanced</h4><p>It provides enhanced DDoS attack detection and monitoring for application-layer traffic to your Elastic Load Balancing load balancers, CloudFront distributions, Amazon Route 53 hosted zones and resources attached to an Elastic IP address, such Amazon EC2 instances. AWS Shield Advanced uses additional techniques to provide granular detection of DDoS attacks, such as resource-specific traffic monitoring to detect HTTP floods or DNS query floods. AWS Shield Advanced includes 24x7 access to the AWS DDoS Response Team (DRT), support experts who apply manual mitigations for more complex and sophisticated DDoS attacks, directly create or update AWS WAF rules, and can recommend improvements to your AWS architectures. AWS WAF is included at no additional cost for resources that you protect with AWS Shield Advanced.</p>
<p>AWS Shield Advanced includes access to near real-time metrics and reports, for extensive visibility into infrastructure layer and application layer DDoS attacks. You can combine AWS Shield Advanced metrics with additional, fine-tuned AWS WAF metrics for a more comprehensive CloudWatch monitoring and alarming strategy. Customers subscribed to AWS Shield Advanced can also apply for a credit for charges that result from scaling during a DDoS attack on protected Amazon EC2, Amazon CloudFront, Elastic Load Balancing, or Amazon Route 53 resources. See the AWS Shield Developer Guide for a detailed comparison of the two AWS Shield offerings.</p>
<h2 id="CIDR"><a href="#CIDR" class="headerlink" title="CIDR"></a>CIDR</h2><p>To add a CIDR block to your VPC, the following rules apply:</p>
<p>-The allowed block size is between a /28 netmask and /16 netmask.<br>-The CIDR block must not overlap with any existing CIDR block that’s associated with the VPC.<br>-You cannot increase or decrease the size of an existing CIDR block.<br>-You have a limit on the number of CIDR blocks you can associate with a VPC and the number of routes you can add to a route table. You cannot associate a CIDR block if this results in you exceeding your limits.<br>-The CIDR block must not be the same or larger than the CIDR range of a route in any of the VPC route tables. For example, if you have a route with a destination of 10.0.0.0/24 to a virtual private gateway, you cannot associate a CIDR block of the same range or larger. However, you can associate a CIDR block of 10.0.0.0/25 or smaller.<br>-The first four IP addresses and the last IP address in each subnet CIDR block are not available for you to use, and cannot be assigned to an instance.</p>
<p>IPv4 CIDR block size should be between a /16 netmask (65,536 IP addresses) and /28 netmask (16 IP addresses).<br>The first four IP addresses and the last IP address in each subnet CIDR block are NOT available for you to use, and cannot be assigned to an instance.</p>
<p>If you’re using AWS Direct Connect to connect to multiple VPCs through a direct connect gateway, the VPCs that are associated with the direct connect gateway must not have overlapping CIDR blocks.</p>
<h2 id="Subnet-Routing"><a href="#Subnet-Routing" class="headerlink" title="Subnet Routing"></a>Subnet Routing</h2><p>Each subnet must be associated with a route table, which specifies the allowed routes for outbound traffic leaving the subnet.<br>Every subnet that you create is automatically associated with the main route table for the VPC.<br>You can change the association, and you can change the contents of the main route table.<br>You can allow an instance in your VPC to initiate outbound connections to the internet over IPv4 but prevent unsolicited inbound connections from the internet using a NAT gateway or NAT instance.<br>To initiate outbound-only communication to the internet over IPv6, you can use an egress-only internet gateway</p>
<h2 id="Subnet-Security"><a href="#Subnet-Security" class="headerlink" title="Subnet Security"></a>Subnet Security</h2><h3 id="Security-Groupss-—-control-inbound-and-outbound-traffic-for-your-instances"><a href="#Security-Groupss-—-control-inbound-and-outbound-traffic-for-your-instances" class="headerlink" title="Security Groupss — control inbound and outbound traffic for your instances"></a><code>Security Groups</code>s — control inbound and outbound traffic for your <code>instances</code></h3><p>You can associate one or more (up to five) security groups to an instance in your VPC.<br>If you don’t specify a security group, the instance automatically belongs to the default security group.<br>When you create a security group, it has no inbound rules. By default, it includes an outbound rule that allows all outbound traffic.</p>
<h3 id="Security-groups-are-associated-with-network-interfaces"><a href="#Security-groups-are-associated-with-network-interfaces" class="headerlink" title="Security groups are associated with network interfaces."></a>Security groups are associated with network interfaces.</h3><p><code>Network Access Control Lists</code> — control inbound and outbound traffic for your <code>subnets</code><br>Each subnet in your VPC must be associated with a network ACL. If none is associated, automatically associated with the default network ACL.<br>You can associate a network ACL with multiple subnets; however, a subnet can be associated with only one network ACL at a time.<br>A network ACL contains a numbered list of rules that is evaluated in order, starting with the lowest numbered rule, to determine whether traffic is allowed in or out of any subnet associated with the network ACL.<br>The default network ACL is configured to allow all traffic to flow in and out of the subnets to which it is associated.</p>
<p>Amazon security groups and network ACLs don’t filter traffic to or from link-local addresses or AWS-reserved IPv4 addresses. Flow logs do not capture IP traffic to or from these addresses.</p>
<h3 id="Security-Group-vs-NetACL"><a href="#Security-Group-vs-NetACL" class="headerlink" title="Security Group vs NetACL"></a>Security Group vs NetACL</h3><ul>
<li>Security group operates at the instance level while NetACL at the subnet level</li>
<li>Security group support allow rules only while ACL allows rules and deny rules</li>
<li>Security group is stateful, return traffic is automatcially allowed, regardless of any rules.<br>While ACL is stateless, return traffic must be explicitely allowed by rules</li>
<li>Security group evalaute all rules before deciding whether to allow traffic, while ACL process rules in number order when deciding whether to allow traffic.</li>
<li>Security group appiles to an insatnce only while ACL appies to all instances in teh subect it’s associated with.</li>
</ul>
<h2 id="VPC-NetACL"><a href="#VPC-NetACL" class="headerlink" title="VPC NetACL"></a>VPC NetACL</h2><p>A network access control list (ACL) is an optional layer of security for your VPC that acts as a firewall for controlling traffic in and out of one or more subnets. You might set up network ACLs with rules similar to your security groups in order to add an additional layer of security to your VPC.</p>
<p>Network ACL Rules are evaluated by rule number, <code>from lowest to highest</code>, and <code>executed immediately when a matching allow/deny rule is found</code>s.</p>
<h3 id="Internet-access"><a href="#Internet-access" class="headerlink" title="Internet access"></a>Internet access</h3><p>To enable access to or from the Internet for instances in a VPC subnet, you must do the following:</p>
<ul>
<li>Attach an Internet Gateway to your VPC</li>
<li>Ensure that your subnet’s route table points to the Internet Gateway.</li>
<li>Ensure that instances in your subnet have a globally unique IP address (public IPv4 address, Elastic IP address, or IPv6 address).</li>
<li>Ensure that your network access control and security group rules allow the relevant traffic to flow to and from your instance</li>
</ul>
<h2 id="NAT-1"><a href="#NAT-1" class="headerlink" title="NAT"></a>NAT</h2><p>Enable instances in a private subnet to connect to the internet or other AWS services, but prevent the internet from initiating connections with the instances.<br>NAT Gateways<br>You must specify the public subnet in which the NAT gateway should reside.<br>You must specify an Elastic IP address to associate with the NAT gateway when you create it.</p>
<h2 id="Accessing-a-Corporate-or-Home-Network"><a href="#Accessing-a-Corporate-or-Home-Network" class="headerlink" title="Accessing a Corporate or Home Network"></a>Accessing a Corporate or Home Network</h2><p>You can optionally connect your VPC to your own corporate data center using an IPsec AWS managed VPN connection, making the AWS Cloud an extension of your data center.<br>A VPN connection consists of:</p>
<ul>
<li>a virtual private gateway (which is the VPN concentrator on the Amazon side of the VPN connection) attached to your VPC.</li>
<li>a customer gateway (which is a physical device or software appliance on your side of the VPN connection) located in your data center.</li>
</ul>
<p>By default, instances that you launch into a virtual private cloud (VPC) can’t communicate with your own network. You can enable access to your network from your VPC by attaching a virtual private gateway to the VPC, creating a custom route table, updating your security group rules, and creating an AWS managed VPN connection.</p>
<p>Although the term VPN connection is a general term, in the Amazon VPC documentation, a VPN connection refers to the connection between your VPC and your own network. AWS supports Internet Protocol security (IPsec) VPN connections.</p>
<p>A customer gateway is a physical device or software application on your side of the VPN connection.</p>
<p>To create a VPN connection, you must create a customer gateway resource in AWS, which provides information to AWS about your customer gateway device. Next, you have to set up an Internet-routable IP address (static) of the customer gateway’s external interface.</p>
<p>The following diagram illustrates single VPN connections. The VPC has an attached virtual private gateway, and your remote network includes a customer gateway, which you must configure to enable the VPN connection. You set up the routing so that any traffic from the VPC bound for your network is routed to the virtual private gateway.</p>
<h2 id="Site-to-Site-VPN"><a href="#Site-to-Site-VPN" class="headerlink" title="Site-to-Site VPN"></a>Site-to-Site VPN</h2><p>With AWS Site-to-Site VPN, you can connect to an Amazon VPC in the cloud the same way you connect to your branches. AWS Site-to-Site VPN establishes secure and private sessions with IP Security (IPSec) and Transport Layer Security (TLS) tunnels. a VPN connection is that you will be able to connect your Amazon VPC to other remote networks securely.  Although it is true that a VPN provides a cost-effective, hybrid connection from your VPC to your on-premises data centers, it certainly does not bypasses the public Internet. A VPN connection actually goes through the public Internet, unlike the AWS Direct Connect connection which has a direct and dedicated connection to your on-premises network.</p>
<h2 id="AWS-Direct-Connect"><a href="#AWS-Direct-Connect" class="headerlink" title="AWS Direct Connect"></a>AWS Direct Connect</h2><p>AWS Direct Connect connection which has a direct and dedicated connection to your on-premises network.</p>
<h2 id="AWS-PrivateLink"><a href="#AWS-PrivateLink" class="headerlink" title="AWS PrivateLink"></a>AWS PrivateLink</h2><p>It enables you to privately connect your VPC to supported AWS services, services hosted by other AWS accounts (VPC endpoint services), and supported AWS Marketplace partner services. You do not require an internet gateway, NAT device, public IP address, AWS Direct Connect connection, or VPN connection to communicate with the service. Traffic between your VPC and the service does not leave the Amazon network.</p>
<p>You can create a VPC peering connection between your VPCs, or with a VPC in another AWS account, and enable routing of traffic between the VPCs using private IP addresses. You cannot create a VPC peering connection between VPCs that have overlapping CIDR blocks.</p>
<p>Applications in an Amazon VPC can securely access AWS PrivateLink endpoints across VPC peering connections. The support of VPC peering by AWS PrivateLink makes it possible for customers to privately connect to a service even if that service’s endpoint resides in a different Amazon VPC that is connected using VPC peering.<br>AWS PrivateLink endpoints can now be accessed across both intra- and inter-region VPC peering connections.</p>
<h2 id="HA-for-VPN"><a href="#HA-for-VPN" class="headerlink" title="HA for VPN"></a>HA for VPN</h2><p> You can do the following to provide a highly available, fault-tolerant network connection:</p>
<ul>
<li>Establish a hardware VPN over the Internet between the VPC and the on-premises network.</li>
<li>Establish another AWS Direct Connect connection and private virtual interface in the same AWS region. </li>
</ul>
<h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><p>First, the Network ACL should be properly set to allow communication between the two subnets. The security group should also be properly configured so that your web server can communicate with the database server. Hence, options 1 and 4 are the correct answers:</p>
<p>Check if all security groups are set to allow the application host to communicate to the database on the right port and protocol.<br>Check the Network ACL if it allows communication between the two subnets.</p>
<p>Option 2 is incorrect because the EC2 instances do not need to be of the same class in order to communicate with each other.</p>
<p>Option 3 is incorrect because an Internet gateway is primarily used to communicate to the Internet.</p>
<p>Option 5 is incorrect because Placement Group is mainly used to provide low-latency network performance necessary for tightly-coupled node-to-node communication.</p>
<h1 id="AWS-WAF"><a href="#AWS-WAF" class="headerlink" title="AWS WAF"></a>AWS WAF</h1><p>AWS WAF is a web application firewall that helps protect web applications from common web exploits that could affect application availability, compromise security, or consume excessive resources. You can use AWS WAF to define customizable web security rules that control which traffic accesses your web applications. If you use AWS Shield Advanced, you can use AWS WAF at no extra cost for those protected resources and can engage the DRT to create WAF rules.</p>
<p>AWS WAF rules use conditions to target specific requests and trigger an action, allowing you to identify and block common DDoS request patterns and effectively mitigate a DDoS attack. These include size constraint conditions to block a web request based on the length of its query string or request body, and geographic match conditions to implement geo restriction (also known as geoblocking) on requests that originate from specific countries. </p>
<h1 id="AWS-SSM-Simple-System-Manager"><a href="#AWS-SSM-Simple-System-Manager" class="headerlink" title="AWS SSM (Simple System Manager)"></a>AWS SSM (Simple System Manager)</h1><p>AWS SSM is parameter store.</p>
<h1 id="ELB-Elastic-Load-Balancing"><a href="#ELB-Elastic-Load-Balancing" class="headerlink" title="ELB: Elastic Load Balancing"></a>ELB: Elastic Load Balancing</h1><p>To automatically distribute incoming application traffic across multiple instances, use Elastic Load Balancing. </p>
<p>For HA, even though our ASG is deployed across 3 AZ, the minimum capacity to be highly available is 2. Finally, we can save costs by reserving these two instances as we know they’ll be up and running at any time</p>
<h2 id="Application-Load-Balancer-vs-Network-load-balancer"><a href="#Application-Load-Balancer-vs-Network-load-balancer" class="headerlink" title="Application Load Balancer vs Network load balancer"></a>Application Load Balancer vs Network load balancer</h2><p>Path based routing and host based routing are only available for the Application Load Balancer (ALB). Deploying an NGINX load balancer on EC2 would work but would suffer management and scaling issues. Read more here: <a href="https://aws.amazon.com/blogs/aws/new-host-based-routing-support-for-aws-application-load-balancers/" target="_blank" rel="noopener">https://aws.amazon.com/blogs/aws/new-host-based-routing-support-for-aws-application-load-balancers/</a></p>
<h3 id="ALB-amp-ASG"><a href="#ALB-amp-ASG" class="headerlink" title="ALB &amp; ASG"></a>ALB &amp; ASG</h3><p>Adding the entire CIDR of the ALB would work, but wouldn’t guarantee that only the ALB can access the EC2 instances that are part of the ASG. Here, the right solution is to add a rule on the ASG security group to allow incoming traffic from the security group configured for the ALB.</p>
<h3 id="SNI"><a href="#SNI" class="headerlink" title="SNI"></a>SNI</h3><p>support for multiple TLS/SSL certificates on Application Load Balancers (ALB) using Server Name Indication (SNI). You can now host multiple TLS secured applications, each with its own TLS certificate, behind a single load balancer. In order to use SNI, all you need to do is bind multiple certificates to the same secure listener on your load balancer. ALB will automatically choose the optimal TLS certificate for each client. These new features are provided at no additional charge.</p>
<p>One of our most frequent requests on forums, reddit, and in my e-mail inbox has been to use the Server Name Indication (SNI) extension of TLS to choose a certificate for a client. Since TLS operates at the transport layer, below HTTP, it doesn’t see the hostname requested by a client. SNI works by having the client tell the server “This is the domain I expect to get a certificate for” when it first connects. The server can then choose the correct certificate to respond to the client. All modern web browsers and a large majority of other clients support SNI. In fact, today we see SNI supported by over 99.5% of clients connecting to CloudFront.</p>
<h1 id="RDS"><a href="#RDS" class="headerlink" title="RDS"></a>RDS</h1><p>RDS stands for Relational Database Service</p>
<h2 id="Read-Replics"><a href="#Read-Replics" class="headerlink" title="Read Replics"></a>Read Replics</h2><p>RDS Read Replicas for read scalability</p>
<ul>
<li>Up to 5 Read Replicas</li>
<li>Within AZ, Cross AZ or Cross Region</li>
<li>Replication is ASYNC, so reads are eventually consistent</li>
<li>Replicas can be promoted to their own DB</li>
<li>Applications must update the connection string to leverage read replicas</li>
</ul>
<h2 id="Amazon-RDS-Multi-AZ-Deployments"><a href="#Amazon-RDS-Multi-AZ-Deployments" class="headerlink" title="Amazon RDS Multi-AZ Deployments"></a>Amazon RDS Multi-AZ Deployments</h2><p>Amazon RDS Multi-AZ deployments provide enhanced availability and durability for Database (DB) Instances, making them a natural fit for production database workloads. When you provision a Multi-AZ DB Instance, Amazon RDS automatically creates a primary DB Instance and synchronously replicates the data to a standby instance in a different Availability Zone (AZ). Each AZ runs on its own physically distinct, independent infrastructure, and is engineered to be highly reliable. In case of an infrastructure failure, Amazon RDS performs an automatic failover to the standby (or to a read replica in the case of Amazon Aurora), so that you can resume database operations as soon as the failover is complete. Since the endpoint for your DB Instance remains the same after a failover, your application can resume database operation without the need for manual administrative intervention.</p>
<h2 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h2><p>Use security groups to control what IP addresses or Amazon EC2 instances can connect to your databases on a DB instance.<br>Run your DB instance in an Amazon Virtual Private Cloud (VPC) for the greatest possible network access control.</p>
<h2 id="Working-with-a-DB-Instance-in-a-VPC"><a href="#Working-with-a-DB-Instance-in-a-VPC" class="headerlink" title="Working with a DB Instance in a VPC"></a>Working with a DB Instance in a VPC</h2><p>Your VPC must have at least two subnets. These subnets must be in two different Availability Zones in the region where you want to deploy your DB instance.<br>If you want your DB instance in the VPC to be publicly accessible, you must enable the VPC attributes DNS hostnames and DNS resolution.</p>
<h3 id="performs-a-failover"><a href="#performs-a-failover" class="headerlink" title="performs a failover"></a>performs a failover</h3><p>Amazon RDS automatically performs a failover in the event of any of the following:</p>
<p>Loss of availability in primary Availability Zone<br>Loss of network connectivity to primary<br>Compute unit failure on primary<br>Storage failure on primary</p>
<h1 id="Elastic-Cache"><a href="#Elastic-Cache" class="headerlink" title="Elastic Cache"></a>Elastic Cache</h1><p>IAM Auth is not supported by ElastiCache</p>
<h1 id="Amazon-CloudWatch"><a href="#Amazon-CloudWatch" class="headerlink" title="Amazon CloudWatch"></a>Amazon CloudWatch</h1><p>To monitor basic statistics for your instances and Amazon EBS volumes, use Amazon CloudWatch. </p>
<p>Amazon Web Services. Amazon Elastic Compute Cloud .</p>
<p>Disabling the Termination from the ASG would prevent our ASG to be Elastic and impact our costs. Making a snapshot of the EC2 instance before it gets terminated <em>could</em> work but it’s tedious, not elastic and very expensive, as all we’re interested about are log files. Using AWS Lambda would be extremely hard to use for this task. Here, the natural and by far easiest solution would be to use the CloudWatch Logs agents on the EC2 instances to automatically send log files into CloudWatch, so we can analyze them in the future easily should any problems arise.</p>
<h2 id="Auto-terminate"><a href="#Auto-terminate" class="headerlink" title="Auto terminate"></a>Auto terminate</h2><p>Using Amazon CloudWatch alarm actions, you can create alarms that automatically stop, terminate, reboot, or recover your EC2 instances. You can use the stop or terminate actions to help you save money when you no longer need an instance to be running. You can use the reboot and recover actions to automatically reboot those instances or recover them onto new hardware if a system impairment occurs.</p>
<h3 id="Q-amp-A-1"><a href="#Q-amp-A-1" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h3><p>you can use Amazon CloudWatch to monitor the database and then Amazon SNS to send the emails to the Operations team. Take note that you should use SNS instead of SES (Simple Email Service) when you want to monitor your EC2 instances.</p>
<p>CloudWatch collects monitoring and operational data in the form of logs, metrics, and events, providing you with a unified view of AWS resources, applications, and services that run on AWS, and on-premises servers.</p>
<p>SNS is a highly available, durable, secure, fully managed pub/sub messaging service that enables you to decouple microservices, distributed systems, and serverless applications.</p>
<p>Option 1 is incorrect. SES is a cloud-based email sending service designed to send notification and transactional emails.</p>
<p>Option 3 is incorrect. SQS is a fully-managed message queuing service. It does not monitor applications nor send email notifications unlike SES.</p>
<p>Option 4 is incorrect. Route 53 is a highly available and scalable cloud Domain Name System (DNS) web service. It does not monitor applications nor send email notifications.</p>
<h1 id="API-Gateway"><a href="#API-Gateway" class="headerlink" title="API Gateway"></a>API Gateway</h1><p>Q: What API types are supported by Amazon API Gateway?</p>
<p>Amazon API Gateway offers two options to create RESTful APIs, HTTP APIs (Preview) and REST APIs, as well as an option to create WebSocket APIs.</p>
<p>HTTP API: HTTP APIs, currently available in Preview, are optimized for building APIs that proxy to AWS Lambda functions or HTTP backends, making them ideal for serverless workloads. They do not currently offer API management functionality.</p>
<p>REST API: REST APIs offer API proxy functionality and API management features in a single solution. REST APIs offer API management features such as usage plans, API keys, publishing, and monetizing APIs.</p>
<p>WebSocket API: WebSocket APIs maintain a persistent connection between connected clients to enable real-time message communication. With WebSocket APIs in API Gateway, you can define backend integrations with AWS Lambda functions, Amazon Kinesis, or any HTTP endpoint to be invoked when messages are received from the connected clients.</p>
<h1 id="CloudTrail"><a href="#CloudTrail" class="headerlink" title="CloudTrail"></a>CloudTrail</h1><p>To monitor the calls made to the Amazon EC2 API for your account, including calls made by the AWS Management Console, command line tools, and other services, use AWS CloudTrail.</p>
<p>In general, to analyze any API calls made within your AWS account, you should use CloudTrail</p>
<p>​
Set up a new CloudTrail trail in a new S3 bucket using the AWS CLI and also pass both the –is-multi-region-trail and –include-global-service-events parameters then encrypt log files using KMS encryption. Apply Multi Factor Authentication (MFA) Delete on the S3 bucket and ensure that only authorized users can access the logs by configuring the bucket policies.</p>
<h2 id="Charge"><a href="#Charge" class="headerlink" title="Charge"></a>Charge</h2><p> the first copy of management events is free.</p>
<h2 id="Cloud-Trail-retention-days"><a href="#Cloud-Trail-retention-days" class="headerlink" title="Cloud Trail retention days"></a>Cloud Trail retention days</h2><p>Management event activity is recorded by AWS CloudTrail for the last 90 days, and can be viewed and searched free of charge from the AWS CloudTrail console, or by using the AWS CLI.</p>
<h1 id="AWS-ECS"><a href="#AWS-ECS" class="headerlink" title="AWS ECS"></a>AWS ECS</h1><h2 id="Summary-AWS-ECS-–-Elastic-Container-Service"><a href="#Summary-AWS-ECS-–-Elastic-Container-Service" class="headerlink" title="Summary: AWS ECS – Elastic Container Service"></a>Summary: AWS ECS – Elastic Container Service</h2><p>• ECS is a container orchestration service<br>• ECS helps you run Docker containers on EC2 machines<br>• ECS is complicated, and made of:<br>• “ECS Core”: Running ECS on user-provisioned EC2 instances<br>• Fargate: Running ECS tasks on AWS-provisioned compute (serverless)<br>• EKS: Running ECS on AWS-powered Kubernetes (running on EC2)<br>• ECR: Docker Container Registry hosted by AWS<br>• ECS &amp; Docker are very popular for microservices<br>• For now, for the exam, only “ECS Core” &amp; ECR is in scope<br>• IAM security and roles at the ECS task level</p>
<h2 id="AWS-ECS-–-Concepts"><a href="#AWS-ECS-–-Concepts" class="headerlink" title="AWS ECS – Concepts"></a>AWS ECS – Concepts</h2><p>• ECS cluster: set of EC2 instances<br>• ECS service: applications definitions running on ECS cluster<br>• ECS tasks + definition: containers running to create the application<br>• ECS IAM roles: roles assigned to tasks to interact with AWS</p>
<h2 id="AWS-ECS-–-ALB-integration"><a href="#AWS-ECS-–-ALB-integration" class="headerlink" title="AWS ECS – ALB integration"></a>AWS ECS – ALB integration</h2><p>• Application Load Balancer (ALB) has a direct integration feature with ECS called “port mapping”, This allows you to run multiple instances of the same application on the same EC2 machine</p>
<h3 id="Dynamic-mapping"><a href="#Dynamic-mapping" class="headerlink" title="Dynamic mapping"></a>Dynamic mapping</h3><p>Dynamic Port Mapping is available for the Application Load Balancer. A reverse proxy solution would work but would be too much work to manage. Here the ALB has a feature that provides a direct dynamic port mapping feature and integration with the ECS service so we will leverage that. Read more here: <a href="https://aws.amazon.com/premiumsupport/knowledge-center/dynamic-port-mapping-ecs/" target="_blank" rel="noopener">https://aws.amazon.com/premiumsupport/knowledge-center/dynamic-port-mapping-ecs/</a></p>
<h2 id="AWS-ECS-–-ECS-Setup-amp-Config-file"><a href="#AWS-ECS-–-ECS-Setup-amp-Config-file" class="headerlink" title="AWS ECS – ECS Setup &amp; Config file"></a>AWS ECS – ECS Setup &amp; Config file</h2><p>• Run an EC2 instance, install the ECS agent with ECS config file<br>• Or use an ECS-ready Linux AMI (still need to modify config file) • ECS Config file is at /etc/ecs/ecs.config</p>
<h2 id="AWS-ECR-–-Elastic-Container-Registry"><a href="#AWS-ECR-–-Elastic-Container-Registry" class="headerlink" title="AWS ECR – Elastic Container Registry"></a>AWS ECR – Elastic Container Registry</h2><p>• Store, managed and deploy your containers on AWS<br>• Fully integrated with IAM &amp; ECS<br>• Sent over HTTPS (encryption in flight) and encrypted at rest</p>
<h2 id="Specifying-Sensitive-Data"><a href="#Specifying-Sensitive-Data" class="headerlink" title="Specifying Sensitive Data"></a>Specifying Sensitive Data</h2><p>Amazon ECS enables you to inject sensitive data into your containers by storing your sensitive data in either AWS Secrets Manager secrets or AWS Systems Manager Parameter Store parameters and then referencing them in your container definition. This feature is supported by tasks using both the EC2 and Fargate launch types.</p>
<h3 id="Required-IAM-Permissions-for-Amazon-ECS-Secrets"><a href="#Required-IAM-Permissions-for-Amazon-ECS-Secrets" class="headerlink" title="Required IAM Permissions for Amazon ECS Secrets"></a>Required IAM Permissions for Amazon ECS Secrets</h3><p>To use this feature, you must have the Amazon ECS task execution role and reference it in your task definition. This allows the container agent to pull the necessary AWS Systems Manager or Secrets Manager resources. For more information, see Amazon ECS Task Execution IAM Role.</p>
<p>To provide access to the AWS Systems Manager Parameter Store parameters that you create, manually add the following permissions as an inline policy to the task execution role. For more information, see Adding and Removing IAM Policies.</p>
<p>ssm:GetParameters—Required if you are referencing a Systems Manager Parameter Store parameter in a task definition.</p>
<p>secretsmanager:GetSecretValue—Required if you are referencing a Secrets Manager secret either directly or if your Systems Manager Parameter Store parameter is referencing a Secrets Manager secret in a task definition.</p>
<p>kms:Decrypt—Required only if your secret uses a custom KMS key and not the default key. The ARN for your custom key should be added as a resource.</p>
<h1 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h1><p>AWS Lambda functions time out after 15 minutes, and are not usually meant for long running jobs.</p>
<h2 id="Lambda-parameters-Encryption"><a href="#Lambda-parameters-Encryption" class="headerlink" title="Lambda parameters Encryption"></a>Lambda parameters Encryption</h2><p>Although Lambda encrypts the environment variables in your function by default, the sensitive information would still be visible to other users who have access to the Lambda console. This is because Lambda uses a default KMS key to encrypt the variables, which is usually accessible by other users. The best option in this scenario is to use encryption helpers to secure your environment variables.</p>
<p>Enabling SSL would encrypt data only when in-transit. Your other teams would still be able to view the plaintext at-rest. Use AWS KMS instead.</p>
<p>Option 3 is incorrect since, as mentioned, Lambda does provide encryption functionality of environment variables.    </p>
<h2 id="Lambda-functions"><a href="#Lambda-functions" class="headerlink" title="Lambda functions"></a>Lambda functions</h2><p>You upload your application code in the form of one or more Lambda functions. Lambda stores code in Amazon S3 and encrypts it at rest.</p>
<h3 id="layer"><a href="#layer" class="headerlink" title="layer"></a>layer</h3><p>A layer is a ZIP archive that contains libraries, a custom runtime, or other dependencies. Use layers to manage your function’s dependencies independently and keep your deployment package small.</p>
<h3 id="Invoking-Functions"><a href="#Invoking-Functions" class="headerlink" title="Invoking Functions"></a>Invoking Functions</h3><p>Lambda supports synchronous and asynchronous invocation of a Lambda function. You can control the invocation type only when you invoke a Lambda function (referred to as on-demand invocation).<br>An event source is the entity that publishes events, and a Lambda function is the custom code that processes the events.<br>Event source mapping maps an event source to a Lambda function. It enables automatic invocation of your Lambda function when events occur.</p>
<h2 id="Lambda-deployment"><a href="#Lambda-deployment" class="headerlink" title="Lambda deployment"></a>Lambda deployment</h2><p>If you’re using the AWS Lambda compute platform, you must choose one of the following deployment configuration types to specify how traffic is shifted from the original AWS Lambda function version to the new AWS Lambda function version:</p>
<p>-Canary: Traffic is shifted in two increments. You can choose from predefined canary options that specify the percentage of traffic shifted to your updated Lambda function version in the first increment and the interval, in minutes, before the remaining traffic is shifted in the second increment.<br>-Linear: Traffic is shifted in equal increments with an equal number of minutes between each increment. You can choose from predefined linear options that specify the percentage of traffic shifted in each increment and the number of minutes between each increment.<br>-All-at-once: All traffic is shifted from the original Lambda function to the updated Lambda function version at once.</p>
<h2 id="Lambda-Edge"><a href="#Lambda-Edge" class="headerlink" title="Lambda@Edge"></a>Lambda@Edge</h2><p>Lets you run Lambda functions to customize content that CloudFront delivers, executing the functions in AWS locations closer to the viewer. The functions run in response to CloudFront events, without provisioning or managing servers.</p>
<h1 id="Disaster-Recovery"><a href="#Disaster-Recovery" class="headerlink" title="Disaster Recovery"></a>Disaster Recovery</h1><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>Need to define two terms:<br>• RPO: Recovery Point Objective<br>• RTO: Recover y Time Objective</p>
<p>Disaster Recovery Strategies<br>• Backup and Restore<br>• Pilot Light<br>• Warm Standby<br>• Hot Site / Multi Site Approach</p>
<h1 id="Route53"><a href="#Route53" class="headerlink" title="Route53"></a>Route53</h1><p>Simple Records do not have health checks, here the most likely issue is that the TTL is still in effect so you have to wait until it expires for the new users to perform another DNS query and get the value for your new Load Balancer.</p>
<h1 id="Database"><a href="#Database" class="headerlink" title="Database"></a>Database</h1><p>ElastiCache / RDS / Neptune are not serverless databases. DynamoDB is serverless, single digit latency and horizontally scales.</p>
<h2 id="DynamoDB"><a href="#DynamoDB" class="headerlink" title="DynamoDB"></a>DynamoDB</h2><p>DynamoDB Streams will contain a stream of all the changes that happen to a DynamoDB table. It can be chained with a Lambda function that will be triggered to react to these changes, one of which being a developer’s milestone. DAX is a caching layer </p>
<p>DynamoDB Auto Scaling is primarily used to automate capacity management for your tables and global secondary indexes.</p>
<h3 id="DAX"><a href="#DAX" class="headerlink" title="DAX"></a>DAX</h3><p>DAX will be transparent and won’t require an application refactoring, and will cache the “hot keys”. ElastiCache could also be a solution, but it will require a lot of refactoring work on the AWS Lambda side.</p>
<p>DynamoDB is horizontally scalable, has a DynamoDB streams capability and is multi AZ by default. On top of it, we can adjust the RCU and WCU automatically using Auto Scaling.</p>
<h2 id="DynamoDB’s-partition-key"><a href="#DynamoDB’s-partition-key" class="headerlink" title="DynamoDB’s partition key"></a>DynamoDB’s partition key</h2><p>DynamoDB supports two types of primary keys:</p>
<p>Partition key: A simple primary key, composed of one attribute known as the partition key. Attributes in DynamoDB are similar in many ways to fields or columns in other database systems.<br>Partition key and sort key: Referred to as a composite primary key, this type of key is composed of two attributes. The first attribute is the partition key, and the second attribute is the sort key. Following is an example.</p>
<h3 id="Recommendations-for-partition-keys"><a href="#Recommendations-for-partition-keys" class="headerlink" title="Recommendations for partition keys"></a>Recommendations for partition keys</h3><p>Use high-cardinality attributes. These are attributes that have distinct values for each item, like e-mailid, employee_no, customerid, sessionid, orderid, and so on.</p>
<p>Use composite attributes. Try to combine more than one attribute to form a unique key, if that meets your access pattern. For example, consider an orders table with customerid+productid+countrycode as the partition key and order_date as the sort key.</p>
<p>Cache the popular items when there is a high volume of read traffic using Amazon DynamoDB Accelerator (DAX). The cache acts as a low-pass filter, preventing reads of unusually popular items from swamping partitions. For example, consider a table that has deals information for products. Some deals are expected to be more popular than others during major sale events like Black Friday or Cyber Monday. DAX is a fully managed, in-memory cache for DynamoDB that doesn’t require developers to manage cache invalidation, data population, or cluster management. DAX also is compatible with DynamoDB API calls, so developers can incorporate it more easily into existing applications.</p>
<p>Add random numbers or digits from a predetermined range for write-heavy use cases. Suppose that you expect a large volume of writes for a partition key (for example, greater than 1000 1 K writes per second). In this case, use an additional prefix or suffix (a fixed number from predetermined range, say 1–10) and add it to the partition key.</p>
<h2 id="Durability"><a href="#Durability" class="headerlink" title="Durability"></a>Durability</h2><p>When the word durability pops out, the first service that should come to your mind is Amazon S3. Since this service is not available in the answer options, we can look at the other data store available which is Amazon DynamoDB.</p>
<p>DynamoDB is durable, scalable, and highly available data store which can be used for real-time tabulation. You can also use AppSync with DynamoDB to make it easy for you to build collaborative apps that keep shared data updated in real time. You just specify the data for your app with simple code statements and AWS AppSync manages everything needed to keep the app data updated in real time. This will allow your app to access data in Amazon DynamoDB, trigger AWS Lambda functions, or run Amazon Elasticsearch queries and combine data from these services to provide the exact data you need for your app.</p>
<p>Option 2 is incorrect as Amazon Redshift is mainly used as a data warehouse and for online analytic processing (OLAP). Although this service can be used for this scenario, DynamoDB is still the top choice given its better durability and scalability. </p>
<p>Options 3 and 4 are possible answers in this scenario, however, DynamoDB is much more suitable for simple mobile apps which do not have complicated data relationships compared with enterprise web applications. The scenario says that the mobile app will be used from around the world, which is why you need a data storage service which can be supported globally. It would be a management overhead to implement multi-region deployment for your RDS and Aurora database instances compared to using the Global table feature of DynamoDB.</p>
<h2 id="Aurora"><a href="#Aurora" class="headerlink" title="Aurora"></a>Aurora</h2><p>Aurora Read Replicas can be deployed globally</p>
<h3 id="Aurora-endpoints"><a href="#Aurora-endpoints" class="headerlink" title="Aurora endpoints"></a>Aurora endpoints</h3><p>Amazon Aurora typically involves a cluster of DB instances instead of a single instance. Each connection is handled by a specific DB instance. When you connect to an Aurora cluster, the host name and port that you specify point to an intermediate handler called an endpoint. Aurora uses the endpoint mechanism to abstract these connections. Thus, you don’t have to hardcode all the hostnames or write your own logic for load-balancing and rerouting connections when some DB instances aren’t available.</p>
<p>For certain Aurora tasks, different instances or groups of instances perform different roles. For example, the primary instance handles all data definition language (DDL) and data manipulation language (DML) statements. Up to 15 Aurora Replicas handle read-only query traffic.</p>
<p>Using endpoints, you can map each connection to the appropriate instance or group of instances based on your use case. For example, to perform DDL statements you can connect to whichever instance is the primary instance. To perform queries, you can connect to the reader endpoint, with Aurora automatically performing load-balancing among all the Aurora Replicas. For clusters with DB instances of different capacities or configurations, you can connect to custom endpoints associated with different subsets of DB instances. For diagnosis or tuning, you can connect to a specific instance endpoint to examine details about a specific DB instance.</p>
<h4 id="Types-of-Aurora-Endpoints"><a href="#Types-of-Aurora-Endpoints" class="headerlink" title="Types of Aurora Endpoints"></a>Types of Aurora Endpoints</h4><p>An endpoint is represented as an Aurora-specific URL that contains a host address and a port. The following types of endpoints are available from an Aurora DB cluster.</p>
<h5 id="Cluster-endpoint"><a href="#Cluster-endpoint" class="headerlink" title="Cluster endpoint"></a>Cluster endpoint</h5><p>A cluster endpoint for an Aurora DB cluster that connects to the current primary DB instance for that DB cluster. This endpoint is the only one that can perform write operations such as DDL statements. Because of this, the cluster endpoint is the one that you connect to when you first set up a cluster or when your cluster only contains a single DB instance.<br>Each Aurora DB cluster has one cluster endpoint and one primary DB instance.</p>
<p>You use the cluster endpoint for all write operations on the DB cluster, including inserts, updates, deletes, and DDL changes. You can also use the cluster endpoint for read operations, such as queries.</p>
<p>The cluster endpoint provides failover support for read/write connections to the DB cluster. If the current primary DB instance of a DB cluster fails, Aurora automatically fails over to a new primary DB instance. During a failover, the DB cluster continues to serve connection requests to the cluster endpoint from the new primary DB instance, with minimal interruption of service.</p>
<h5 id="Reader-endpoint"><a href="#Reader-endpoint" class="headerlink" title="Reader endpoint"></a>Reader endpoint</h5><p>A reader endpoint for an Aurora DB cluster connects to one of the available Aurora Replicas for that DB cluster. Each Aurora DB cluster has one reader endpoint. If there is more than one Aurora Replica, the reader endpoint directs each connection request to one of the Aurora Replicas.</p>
<p>The reader endpoint provides load-balancing support for read-only connections to the DB cluster. Use the reader endpoint for read operations, such as queries. You can’t use the reader endpoint for write operations.</p>
<h5 id="Custom-endpoint"><a href="#Custom-endpoint" class="headerlink" title="Custom endpoint"></a>Custom endpoint</h5><p>A custom endpoint for an Aurora cluster represents a set of DB instances that you choose. When you connect to the endpoint, Aurora performs load balancing and chooses one of the instances in the group to handle the connection. You define which instances this endpoint refers to, and you decide what purpose the endpoint serves.</p>
<p>An Aurora DB cluster has no custom endpoints until you create one. You can create up to five custom endpoints for each provisioned Aurora cluster. You can’t use custom endpoints for Aurora Serverless clusters.</p>
<p>The custom endpoint provides load-balanced database connections based on criteria other than the read-only or read-write capability of the DB instances. For example, you might define a custom endpoint to connect to instances that use a particular AWS instance class or a particular DB parameter group. Then you might tell particular groups of users about this custom endpoint. For example, you might direct internal users to low-capacity instances for report generation or ad hoc (one-time) querying, and direct production traffic to high-capacity instances.</p>
<p>Instead of using one DB instance for each specialized purpose and connecting to its instance endpoint, you can have multiple groups of specialized DB instances. In this case, each group has its own custom endpoint. This way, Aurora can perform load balancing among all the instances dedicated to tasks such as reporting or handling production or internal queries. The custom endpoints provide load balancing and high availability for each group of DB instances within your cluster. If one of the DB instances within a group becomes unavailable, Aurora directs subsequent custom endpoint connections to one of the other DB instances associated with the same endpoint.</p>
<h5 id="Instance-endpoint"><a href="#Instance-endpoint" class="headerlink" title="Instance endpoint"></a>Instance endpoint</h5><p>An instance endpoint connects to a specific DB instance within an Aurora cluster. Each DB instance in a DB cluster has its own unique instance endpoint. So there is one instance endpoint for the current primary DB instance of the DB cluster, and there is one instance endpoint for each of the Aurora Replicas in the DB cluster.</p>
<p>The instance endpoint provides direct control over connections to the DB cluster, for scenarios where using the cluster endpoint or reader endpoint might not be appropriate. For example, your client application might require more fine-grained load balancing based on workload type. In this case, you can configure multiple clients to connect to different Aurora Replicas in a DB cluster to distribute read workloads. </p>
<h1 id="Kinesis"><a href="#Kinesis" class="headerlink" title="Kinesis"></a>Kinesis</h1><p>Amazon Kinesis is the streaming data platform of AWS and has four distinct services under it: Kinesis Data Firehose, Kinesis Data Streams, Kinesis Video Streams, and Amazon Kinesis Data Analytics. For a specific use case of the requirement by the question, use Kinesis Data Firehose.</p>
<p>SQS FIFO will not work here as they cannot sustain thousands of messages per second. SNS cannot be used for data streaming. Lambda isn’t meant to retain data. Kinesis is the right answer here, with providing a partition key in our message we can guarantee ordering for a specific sensor, even if our stream is sharded</p>
<h1 id="Amazon-Macie"><a href="#Amazon-Macie" class="headerlink" title="Amazon Macie"></a>Amazon Macie</h1><p>Amazon Macie is mainly used as a security service that uses machine learning to automatically discover, classify, and protect sensitive data in AWS. As a security feature of AWS, it does not meet the requirements of being able to load and stream data into data stores for analytics. You have to use Kinesis Data Firehose instead.</p>
<h2 id="Concepts"><a href="#Concepts" class="headerlink" title="Concepts"></a>Concepts</h2><h3 id="Data-Producer-–-An-application-that-typically-emits-data-records-as-they-are-generated-to-a-Kinesis-data-stream-Data-producers-assign-partition-keys-to-records-Partition-keys-ultimately-determine-which-shard-ingests-the-data-record-for-a-data-stream"><a href="#Data-Producer-–-An-application-that-typically-emits-data-records-as-they-are-generated-to-a-Kinesis-data-stream-Data-producers-assign-partition-keys-to-records-Partition-keys-ultimately-determine-which-shard-ingests-the-data-record-for-a-data-stream" class="headerlink" title="Data Producer – An application that typically emits data records as they are generated to a Kinesis data stream. Data producers assign partition keys to records. Partition keys ultimately determine which shard ingests the data record for a data stream."></a>Data Producer – An application that typically emits data records as they are generated to a Kinesis data stream. Data producers assign partition keys to records. Partition keys ultimately determine which shard ingests the data record for a data stream.</h3><h3 id="Data-Consumer-–-A-distributed-Kinesis-application-or-AWS-service-retrieving-data-from-all-shards-in-a-stream-as-it-is-generated-Most-data-consumers-are-retrieving-the-most-recent-data-in-a-shard-enabling-real-time-analytics-or-handling-of-data"><a href="#Data-Consumer-–-A-distributed-Kinesis-application-or-AWS-service-retrieving-data-from-all-shards-in-a-stream-as-it-is-generated-Most-data-consumers-are-retrieving-the-most-recent-data-in-a-shard-enabling-real-time-analytics-or-handling-of-data" class="headerlink" title="Data Consumer – A distributed Kinesis application or AWS service retrieving data from all shards in a stream as it is generated. Most data consumers are retrieving the most recent data in a shard, enabling real-time analytics or handling of data."></a>Data Consumer – A distributed Kinesis application or AWS service retrieving data from all shards in a stream as it is generated. Most data consumers are retrieving the most recent data in a shard, enabling real-time analytics or handling of data.</h3><h3 id="Data-Stream-–-A-logical-grouping-of-shards-There-are-no-bounds-on-the-number-of-shards-within-a-data-stream-A-data-stream-will-retain-data-for-24-hours-or-up-to-7-days-when-extended-retention-is-enabled"><a href="#Data-Stream-–-A-logical-grouping-of-shards-There-are-no-bounds-on-the-number-of-shards-within-a-data-stream-A-data-stream-will-retain-data-for-24-hours-or-up-to-7-days-when-extended-retention-is-enabled" class="headerlink" title="Data Stream – A logical grouping of shards. There are no bounds on the number of shards within a data stream. A data stream will retain data for 24 hours, or up to 7 days when extended retention is enabled."></a>Data Stream – A logical grouping of shards. There are no bounds on the number of shards within a data stream. A data stream will retain data for 24 hours, or up to 7 days when extended retention is enabled.</h3><h3 id="Shard-–-The-base-throughput-unit-of-a-Kinesis-data-stream"><a href="#Shard-–-The-base-throughput-unit-of-a-Kinesis-data-stream" class="headerlink" title="Shard – The base throughput unit of a Kinesis data stream."></a>Shard – The base throughput unit of a Kinesis data stream.</h3><p>A shard is an append-only log and a unit of streaming capability. A shard contains an ordered sequence of records ordered by arrival time.<br>Add or remove shards from your stream dynamically as your data throughput changes.<br>One shard can ingest up to 1000 data records per second, or 1MB/sec. Add more shards to increase your ingestion capability.<br>When consumers use enhanced fan-out, one shard provides 1MB/sec data input and 2MB/sec data output for each data consumer registered to use enhanced fan-out.<br>When consumers do not use enhanced fan-out, a shard provides 1MB/sec of input and 2MB/sec of data output, and this output is shared with any consumer not using enhanced fan-out.<br>You will specify the number of shards needed when you create a stream and can change the quantity at any time.</p>
<h3 id="Data-Record"><a href="#Data-Record" class="headerlink" title="Data Record"></a>Data Record</h3><p>A record is the unit of data stored in a Kinesis stream. A record is composed of a sequence number, partition key, and data blob.<br>A data blob is the data of interest your data producer adds to a stream. The maximum size of a data blob is 1 MB.</p>
<h3 id="Partition-Key"><a href="#Partition-Key" class="headerlink" title="Partition Key"></a>Partition Key</h3><p>A partition key is typically a meaningful identifier, such as a user ID or timestamp. It is specified by your data producer while putting data into a Kinesis data stream, and useful for consumers as they can use the partition key to replay or build a history associated with the partition key.<br>The partition key is also used to segregate and route data records to different shards of a stream.</p>
<h3 id="Sequence-Number"><a href="#Sequence-Number" class="headerlink" title="Sequence Number"></a>Sequence Number</h3><p>A sequence number is a unique identifier for each data record. Sequence number is assigned by Kinesis Data Streams when a data producer calls PutRecord or PutRecords API to add data to a Kinesis data stream.</p>
<h2 id="Monitoring"><a href="#Monitoring" class="headerlink" title="Monitoring"></a>Monitoring</h2><p>You can monitor shard-level metrics in Kinesis Data Streams.<br>You can monitor your data streams in Amazon Kinesis Data Streams using CloudWatch, Kinesis Agent, Kinesis libraries.<br>Log API calls with CloudTrail.</p>
<h2 id="Kinesis-firehose"><a href="#Kinesis-firehose" class="headerlink" title="Kinesis firehose"></a>Kinesis firehose</h2><p>You can specify a batch size or batch interval to control how quickly data is uploaded to destinations. Additionally, you can specify if data should be compressed.</p>
<p>You can configure Kinesis Data Firehose to prepare your streaming data before it is loaded to data stores. Kinesis Data Firehose provides pre-built Lambda blueprints for converting common data sources such as Apache logs and system logs to JSON and CSV formats. You can use these pre-built blueprints without any change, or customize them further, or write your own custom functions.</p>
<h1 id="BeanStalk"><a href="#BeanStalk" class="headerlink" title="BeanStalk"></a>BeanStalk</h1><p>When you create an AWS Elastic Beanstalk environment, you can specify an Amazon Machine Image (AMI) to use instead of the standard Elastic Beanstalk AMI included in your platform version. A custom AMI can improve provisioning times when instances are launched in your environment if you need to install a lot of software that isn’t included in the standard AMIs. Read more here: <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/using-features.customenv.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/using-features.customenv.html</a></p>
<h1 id="MQ"><a href="#MQ" class="headerlink" title="MQ"></a>MQ</h1><p>SNS, SQS and Kinesis are AWS’ proprietary technologies and do not come with MQTT compatibility. Here the only possible answer is Amazon MQ</p>
<h1 id="X-Ray"><a href="#X-Ray" class="headerlink" title="X Ray"></a>X Ray</h1><p> AWS X-Ray<br>Analyze and debug production, distributed applications</p>
<p>AWS X-Ray helps developers analyze and debug production, distributed applications, such as those built using a microservices architecture. With X-Ray, you can understand how your application and its underlying services are performing to identify and troubleshoot the root cause of performance issues and errors. X-Ray provides an end-to-end view of requests as they travel through your application, and shows a map of your application’s underlying components. You can use X-Ray to analyze both applications in development and in production, from simple three-tier applications to complex microservices applications consisting of thousands of services.</p>
<h1 id="ElasticCache"><a href="#ElasticCache" class="headerlink" title="ElasticCache"></a>ElasticCache</h1><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><h3 id="What-are-Amazon-ElastiCache-for-Redis-nodes-clusters-and-replications-groups"><a href="#What-are-Amazon-ElastiCache-for-Redis-nodes-clusters-and-replications-groups" class="headerlink" title="What are Amazon ElastiCache for Redis nodes, clusters, and replications groups?"></a>What are Amazon ElastiCache for Redis nodes, clusters, and replications groups?</h3><p>An ElastiCache for Redis node is the smallest building block of an Amazon ElastiCache for Redis deployment. Each ElastiCache for Redis node supports the Redis protocol and has its own DNS name and port. Multiple types of ElastiCache for Redis nodes are supported, each with varying amount of CPU capability, and associated memory. An ElastiCache for Redis node may take on a primary or a read replica role. A primary node can be replicated to multiple read replica nodes. An ElastiCache for Redis cluster is a collection of one or more ElastiCache for Redis nodes of the same role; the primary node will be in the primary cluster and the read replica node will be in a read replica cluster. At this time a cluster can only have one node. In the future, we will increase this limit. A cluster manages a logical key space, where each node is responsible for a part of the key space. Most of your management operations will be performed at the cluster level. An ElastiCache for Redis replication group encapsulates the primary and read replica clusters for a Redis installation. A replication group will have only one primary cluster and zero or many read replica clusters. All nodes within a replication group (and consequently cluster) will be of the same node type, and have the same parameter and security group settings.</p>
<h3 id="Does-Amazon-ElastiCache-for-Redis-support-Multi-AZ-operation"><a href="#Does-Amazon-ElastiCache-for-Redis-support-Multi-AZ-operation" class="headerlink" title="Does Amazon ElastiCache for Redis support Multi-AZ operation?"></a>Does Amazon ElastiCache for Redis support Multi-AZ operation?</h3><p>Yes, with Amazon ElastiCache for Redis you can create a read replica in another AWS Availability Zone. Upon a failure of the primary node, we will provision a new primary node. In scenarios where the primary node cannot be provisioned, you can decide which read replica to promote to be the new primary. </p>
<h3 id="What-is-Multi-AZ-for-an-ElastiCache-for-Redis-replication-group"><a href="#What-is-Multi-AZ-for-an-ElastiCache-for-Redis-replication-group" class="headerlink" title="What is Multi-AZ for an ElastiCache for Redis replication group?"></a>What is Multi-AZ for an ElastiCache for Redis replication group?</h3><p>An ElastiCache for Redis replication group consists of a primary and up to five read replicas. Redis asynchronously replicates the data from the primary to the read replicas. During certain types of planned maintenance, or in the unlikely event of ElastiCache node failure or Availability Zone failure, Amazon ElastiCache will automatically detect the failure of a primary, select a read replica, and promote it to become the new primary. ElastiCache also propagates the DNS changes of the promoted read replica, so if your application is writing to the primary node endpoint, no endpoint change will be needed.</p>
<h3 id="How-can-I-use-encryption-in-transit-at-rest-and-Redis-AUTH"><a href="#How-can-I-use-encryption-in-transit-at-rest-and-Redis-AUTH" class="headerlink" title="How can I use encryption in-transit, at-rest, and Redis AUTH?"></a>How can I use encryption in-transit, at-rest, and Redis AUTH?</h3><p>Encryption in-transit, encryption at-rest, and Redis AUTH are all opt-in features. At the time of Redis cluster creation via the console or command line interface, you can specify if you want to enable encryption and Redis AUTH and can proceed to provide an authentication token for communication with the Redis cluster. Once the cluster is setup with encryption enabled, ElastiCache seamlessly manages certificate expiration and renewal without requiring any additional action from the application. Additionally, the Redis clients need to support TLS to avail of the encrypted in-transit traffic.</p>
<h3 id="Is-Redis-password-functionality-supported-in-Amazon-ElastiCache-for-Redis"><a href="#Is-Redis-password-functionality-supported-in-Amazon-ElastiCache-for-Redis" class="headerlink" title="Is Redis password functionality supported in Amazon ElastiCache for Redis?"></a>Is Redis password functionality supported in Amazon ElastiCache for Redis?</h3><p>Yes, Amazon ElastiCache for Redis supports Redis passwords via Redis AUTH feature. It is an opt-in feature available in ElastiCache for Redis version 3.2.6 onwards. You must enable encryption in-transit to use Redis AUTH on your ElastiCache for Redis cluster.</p>
<h3 id="encryption"><a href="#encryption" class="headerlink" title="encryption"></a>encryption</h3><p>ElastiCache for Redis at-rest encryption is an optional feature to increase data security by encrypting on-disk data. When enabled on a replication group, it encrypts the following aspects:</p>
<p>Disk during sync, backup and swap operations</p>
<p>Backups stored in Amazon S3</p>
<p>ElastiCache for Redis offers default (service managed) encryption at rest, as well as ability to use your own symetric customer managed customer master keys in AWS Key Management Service (KMS).</p>
<h4 id="KMS"><a href="#KMS" class="headerlink" title="KMS"></a>KMS</h4><p>Manage keys used for encrypted DB instances using the AWS KMS. KMS encryption keys are specific to the region that they are created in.</p>
<h1 id="BYOIP"><a href="#BYOIP" class="headerlink" title="BYOIP"></a>BYOIP</h1><p>You can bring part or all of your public IPv4 address range from your on-premises network to your AWS account. You continue to own the address range, but AWS advertises it on the Internet. After you bring the address range to AWS, it appears in your account as an address pool. You can create an Elastic IP address from your address pool and use it with your AWS resources, such as EC2 instances, NAT gateways, and Network Load Balancers. This is also called “Bring Your Own IP Addresses (BYOIP)”.</p>
<p>To ensure that only you can bring your address range to your AWS account, you must authorize Amazon to advertise the address range and provide proof that you own the address range.</p>
<p>A Route Origin Authorization (ROA) is a document that you can create through your Regional internet registry (RIR), such as the American Registry for Internet Numbers (ARIN) or Réseaux IP Européens Network Coordination Centre (RIPE). It contains the address range, the ASNs that are allowed to advertise the address range, and an expiration date. Hence, Option 3 is the correct answer.</p>
<p>The ROA authorizes Amazon to advertise an address range under a specific AS number. However, it does not authorize your AWS account to bring the address range to AWS. To authorize your AWS account to bring an address range to AWS, you must publish a self-signed X509 certificate in the RDAP remarks for the address range. The certificate contains a public key, which AWS uses to verify the authorization-context signature that you provide. You should keep your private key secure and use it to sign the authorization-context message.</p>
<p>Option 1 is incorrect because you cannot map the IP address of your on-premises network, which you are migrating to AWS, to an EIP address of your VPC. To satisfy the requirement, you must authorize Amazon to advertise the address range that you own.</p>
<p>Option 2 is incorrect because the IP match condition in CloudFront is primarily used in allowing or blocking the incoming web requests based on the IP addresses that the requests originate from. This is the opposite of what is being asked in the scenario, where you have to migrate your suite of applications from your on-premises network and advertise the address range that you own in your VPC.</p>
<p>Option 4 is incorrect because you don’t need to submit an AWS request in order to do this. You can simply create a Route Origin Authorization (ROA) then once done, provision and advertise your whitelisted IP address range to your AWS account.</p>
<h1 id="AWS-IoT-Core"><a href="#AWS-IoT-Core" class="headerlink" title="AWS IoT Core"></a>AWS IoT Core</h1><p>It is a managed cloud service that lets connected devices easily and securely interact with cloud applications and other devices. AWS IoT Core provides secure communication and data processing across different kinds of connected devices and locations so you can easily build IoT applications.</p>
<h1 id="SQS"><a href="#SQS" class="headerlink" title="SQS"></a>SQS</h1><p>You cannot set a priority to individual items in the SQS queue.<br>In this scenario, it is stated that the SQS queue is configured with the maximum message retention period. The maximum message retention in SQS is 14 days, there will be no missing messages.<br>The queue can contain an unlimited number of messages, not just 10,000 messages.</p>
<p>In Amazon SQS, you can configure the message retention period to a value from 1 minute to 14 days. The default is 4 days. Once the message retention limit is reached, your messages are automatically deleted.</p>
<p>A single Amazon SQS message queue can contain an unlimited number of messages. However, there is a 120,000 limit for the number of inflight messages for a standard queue and 20,000 for a FIFO queue. Messages are inflight after they have been received from the queue by a consuming component, but have not yet been deleted from the queue.</p>
<h1 id="SWF"><a href="#SWF" class="headerlink" title="SWF"></a>SWF</h1><p>SWF workflow defines all the activities in the workflow.</p>
<p>The purpose of a decision task tells the decider the state of the workflow execution. The decider can be viewed as a special type of worker. Like workers, it can be written in any language and asks Amazon SWF for tasks. However, it handles special tasks called decision tasks.</p>
<p>Amazon SWF issues decision tasks whenever a workflow execution has transitions such as an activity task completing or timing out. A decision task contains information on the inputs, outputs, and current state of previously initiated activity tasks. Your decider uses this data to decide the next steps, including any new activity tasks, and returns those to Amazon SWF. Amazon SWF in turn enacts these decisions, initiating new activity tasks where appropriate and monitoring them.</p>
<p>By responding to decision tasks in an ongoing manner, the decider controls the order, timing, and concurrency of activity tasks and consequently the execution of processing steps in the application. SWF issues the first decision task when an execution starts. From there on, Amazon SWF enacts the decisions made by your decider to drive your execution. The execution continues until your decider makes a decision to complete it.</p>
<p>An activity task tells the worker to perform a function</p>
<p>A single task in the workflow represents a single task in the workflow.</p>
<h2 id="Distributed-systems"><a href="#Distributed-systems" class="headerlink" title="Distributed systems"></a>Distributed systems</h2><p>Amazon Simple Queue Service (SQS) and Amazon Simple Workflow Service (SWF) are the services that you can use for creating a decoupled architecture in AWS. Decoupled architecture is a type of computing architecture that enables computing components or layers to execute independently while still interfacing with each other.</p>
<p>Amazon SQS offers reliable, highly-scalable hosted queues for storing messages while they travel between applications or microservices. Amazon SQS lets you move data between distributed application components and helps you decouple these components. Amazon SWF is a web service that makes it easy to coordinate work across distributed application components.</p>
<h1 id="AppSync"><a href="#AppSync" class="headerlink" title="AppSync"></a>AppSync</h1><p>Power your applications with the right data, from one or more data sources, at global scale<br>AWS AppSync simplifies application development by letting you create a flexible API to securely access, manipulate, and combine data from one or more data sources. AppSync is a managed service that uses GraphQL to make it easy for applications to get exactly the data they need.</p>
<p>With AppSync, you can build scalable applications, including those requiring real-time updates, on a range of data sources such as NoSQL data stores, relational databases, HTTP APIs, and your custom data sources with AWS Lambda. For mobile and web apps, AppSync additionally provides local data access when devices go offline, and data synchronization with customizable conflict resolution, when they are back online.</p>
<p>Benefits<br>Start effortlessly; scale with your business<br>Get started in minutes directly from your IDE of choice (such as Xcode, Android Studio, VS Code), leverage the intuitive AWS AppSync management console, or use AWS Amplify CLI to automatically generate your API and client-side code. AWS AppSync integrates with Amazon DynamoDB, Amazon Aurora, Amazon Elasticsearch, AWS Lambda, and other AWS services, enabling you to create sophisticated applications, with virtually unlimited throughput and storage, that scale according to your business needs. </p>
<p>Real-time subscriptions and offline access<br>AWS AppSync enables real-time subscriptions across millions of devices, as well as offline access to app data. When an offline device reconnects, AWS AppSync automatically syncs only the updates that occurred when the device was disconnected, and not the entire data set. AWS AppSync offers user-customizable server-side conflict detection and resolution that does the heavy lifting of managing data conflicts so you don’t have to. </p>
<p>Unify and secure access to your distributed data<br>Perform complex queries and aggregation across multiple data sources with a single network call using GraphQL. AWS AppSync makes it easy to secure your app data using multiple concurrent authentication modes as well as allowing to define security and fine grained access control at the data definition level directly from your GraphQL schema. </p>
<p>Make Mobile Development Easier with Open Source Libraries for iOS and Android<br>Build real-time, global mobile apps that can handle millions of requests per second using Amplify libraries.<br>Read the blog<br>How it works<br>product-page-diagram_AppSync@2x<br>AWS AppSync is generally available. If you would like try building data driven mobile and web applications, watch the re:Invent session video to learn more and open the AWS AppSync console to get started. For pricing details, please see the pricing page. AWS AppSync is available in multiple regions. For details on region availability, please see the regions detail page.</p>
<p>AWS AppSync re:Invent session<br>Customers using AWS AppSync<br>600x400_AmericanCommBargeLine<br>600x400_Puresec<br>600x400_IDT<br>600x400_ASU<br>600x400_PublicGood<br>600x400_cookpad<br>600x400_ALDO<br>ticketmaster-clear-migration<br>Use cases<br>Real Time Collaboration<br>Data Broadcasting<br>You can use AWS AppSync to enable scalable, real-time collaboration use cases by broadcasting data from the backend to all connected clients (one-to-many) or broadcasting data between clients themselves (many-to-many). For example, you can build a second screen scenario where you broadcast the same data to all clients, and users then respond in real time by voting and commenting about what’s on the screen.<br>Reference Architecture: Sample Code</p>
<p>product-page-diagram_AppSync_Data-Broadcasting@2x<br>Chat Applications<br>You can use AWS AppSync to power collaborative and conversational applications. For example, you can build a mobile and web application that supports multiple private chat rooms, offers access to conversation history, and enqueues outbound messages, even when the device is offline.</p>
<p>Reference Architecture: Sample Code</p>
<p>Product-Page-Diagram_AppSync_Chat-Applications_2@2x<br>Internet of Things<br>You can use AWS AppSync to access IoT device data sent to AWS IoT. For instance, you can build a real-time dashboard in a mobile or web application to visualize telemetry from a connected car.<br>Product-Page-Diagram_AppSync_IoT@2x<br>Data Layer<br>Polyglot Backend Data Access<br>You can retrieve or modify data from multiple data sources (SQL databases in Amazon Aurora Serverless, NoSQL tables in Amazon DynamoDB, search data in Amazon Elasticsearch Service, REST endpoints in Amazon API Gateway, or serverless backends in AWS Lambda) with a single call. Query and create relations between data sources using GraphQL connections. Provide real-time and offline capabilities to web and mobile clients. </p>
<p>Product-Page-Diagram_AppSync_Polyglot-Back-end-Data-Access@2x<br>Microservices Access Layer<br>You can use AWS AppSync as a single interface to access and combine data from multiple microservices in your application, even if they’re running in different environments such as containers in a VPC, behind a REST API on Amazon API Gateway, or behind a GraphQL API on another AWS AppSync endpoint.<br>Product-Page-Diagram_AppSync_Microservices-Aggregation@2x<br>Offline<br>Offline Delta Sync<br>You can use AppSync with Amplify DataStore, an on-device persistent storage engine that automatically synchronizes data between mobile/web apps and the cloud using GraphQL with a local-first and familiar programming model, leveraging AWS AppSync built-in support for data versioning with advanced conflict detection and resolution strategies such as auto-merge, optimistic concurrency or custom resolution with your own Lambda functions.</p>
<h1 id="Q-amp-A-2"><a href="#Q-amp-A-2" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h1><ul>
<li><p>Lambda would time out after 15 minutes (2000*3=6000 seconds = 100 minutes). Glue is for performing ETL, but cannot run custom Python scripts. Kinesis Streams is for real time data (here we are in a batch setup), RDS could be used to run SQL queries on the data, but no Python script. The correct answer is EC2</p>
</li>
<li><p>Elastic Beanstalk cannot manage AWS Lambda functions, OpsWorks is for Chef / Puppet, and Trusted Advisor is to get recommendations regarding the 5 pillars of the well architected framework.</p>
</li>
<li><p>Kinesis cannot scale infinitely and we may have the same throughput issues. SNS won’t keep our data if it cannot be delivered, and DAX is used for caching reads, not to help with writes. Here, using SQS as a middleware will help us sustain the write throughput during write peaks</p>
</li>
<li><p>CloudFront is not a good solution here as the content is highly dynamic, and CloudFront will cache things. Dynamic applications cannot be deployed to S3, and Route53 does not help in scaling your application. ASG is the correct answer here</p>
</li>
<li><p>Network Load Balancers expose a fixed IP to the public web, therefore allowing your application to be predictably reached using these IPs, while allowing you to scale your application behind the Network Load Balancer using an ASG. Application and Classic Load Balancers expose a fixed DNS (=URL). Finally, the ASG does not have a dynamic Elastic IPs attachment feature</p>
</li>
<li><p>Hosting the master pack into S3 will require an application code refactor. Upgrading the EC2 instances won’t help save network cost and ELB does not have any caching capability. Here you need to create a CloudFront distribution to add a caching layer in front of your ELB. That caching layer will be very effective as the image pack is a static file, and tremendously save in network cost.</p>
</li>
<li><p>Adding Aurora Read Replicas would greatly increase the cost, switching to a Load Balancer would not improve the problems, and AWS Lambda has no native in memory caching capability. Here, using API Gateway Caching feature is the answer, as we can accept to serve stale data to our users</p>
</li>
<li><p>SQS will allow you to buffer the image compression requests and process them asynchronously. It also has a direct built-in mechanism for retries and scales seamlessly. To process these jobs, due to the unpredictable nature of their volume, and the desire to save on costs, Spot Instances are recommended.</p>
</li>
<li><p>Distributing the static content through S3 allows to offload most of the network usage to S3 and free up our applications running on ECS. EFS will not change anything as static content on EFS would still have to be distributed by our ECS instances</p>
</li>
<li><p>S3 does not work as overwrites are eventually consistent so the latest data will not always be read. Neptune is a graph database so it’s not a good fit, ElastiCache could work but it’s a better fit as a caching technology to enhance reads. Here, the best fit is RDS.</p>
</li>
<li><p>RDS Multi AZ helps with disaster recovery in case of an AZ failure. ElastiCache would definitely help with the read load, but would require a refactor of the application’s core logic. DynamoDB with DAX would also probably help with the read load, but once again it would require a refactor of the application’s core logic. Here, our only option to scale reads is to use RDS Read Replicas</p>
</li>
<li><p>Which of the following AWS services encrypts data at rest by default? (Choose 2)<br>All data transferred between any type of gateway appliance and AWS storage is encrypted using SSL. By default, all data stored by AWS Storage Gateway in S3 is encrypted server-side with Amazon S3-Managed Encryption Keys (SSE-S3). Also, when using the file gateway, you can optionally configure each file share to have your objects encrypted with AWS KMS-Managed Keys using SSE-KMS. This is the reason why Option 1 is correct.</p>
</li>
</ul>
<p>Data stored in Amazon Glacier is protected by default; only vault owners have access to the Amazon Glacier resources they create. Amazon Glacier encrypts your data at rest by default and supports secure data transit with SSL. This is the reason why Option 4 is correct.</p>
<p>Although Amazon RDS, ECS and Lambda all support encryption, you still have to enable and configure them first with tools like AWS KMS to encrypt the data at rest.</p>
<h1 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h1><ul>
<li>RDS cheatsheet: <a href="https://tutorialsdojo.com/aws-cheat-sheet-amazon-relational-database-service-amazon-rds/" target="_blank" rel="noopener">https://tutorialsdojo.com/aws-cheat-sheet-amazon-relational-database-service-amazon-rds/</a></li>
<li>VPC cheatsheet: <a href="https://tutorialsdojo.com/aws-cheat-sheet-amazon-vpc/" target="_blank" rel="noopener">https://tutorialsdojo.com/aws-cheat-sheet-amazon-vpc/</a></li>
<li>Amazon Kinesis cheatsheet: <a href="https://tutorialsdojo.com/aws-cheat-sheet-amazon-kinesis/" target="_blank" rel="noopener">https://tutorialsdojo.com/aws-cheat-sheet-amazon-kinesis/</a></li>
</ul>
]]></content>
      <tags>
        <tag>AWS</tag>
        <tag>Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm notes from Leecode -- 1</title>
    <url>/2020-03-03-Algorithm-Leecode-1/</url>
    <content><![CDATA[<p>Algorithm Leetcode</p>
<p>Links</p>
<ul>
<li><p><a href="https://www.dailycodingproblem.com/?ref=csdojo" target="_blank" rel="noopener">[https://www.dailycodingproblem.com/?ref=csdojo]{.underline}</a></p>
</li>
<li><p><a href="https://www.csdojo.io/#" target="_blank" rel="noopener">[https://www.csdojo.io/#]{.underline}</a></p>
</li>
<li><p><a href="https://github.com/mission-peace/interview/tree/master/src/com/interview/dynamic" target="_blank" rel="noopener">https://github.com/mission-peace/interview/tree/master/src/com/interview/dynamic</a></p>
</li>
<li><p><a href="https://leetcode.com/discuss/general-discussion/458695/dynamic-programming-patterns" target="_blank" rel="noopener">[https://leetcode.com/discuss/general-discussion/458695/dynamic-programming-patterns]{.underline}</a></p>
</li>
<li><p>daily coding problem book pdf free download</p>
</li>
</ul>
<p><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode%20%E9%A2%98%E8%A7%A3%20-%20%E7%9B%AE%E5%BD%95.md" target="_blank" rel="noopener">[https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode%20题解%20-%20目录.md]{.underline}</a></p>
<p>leetcodeGithub project in intelliJ</p>
<p>tasks to hands on</p>
<ul>
<li><p><del>0/1 knapsack</del></p>
</li>
<li><p><del>fibnachi memoized and bottom up approaches</del></p>
</li>
<li><p>median of two sorted array</p>
</li>
<li><p>64 minimum path sum</p>
</li>
<li></li>
<li><p>Maximum sub array (kadane algorithm)</p>
</li>
<li></li>
</ul>
<p>[Slide Window]</p>
<p>（1）没有重复字符的子字符的最大长度：给一个字符串，获得没有重复字符的最长子字符的长度</p>
<p>例子：</p>
<p>输入：&quot;abcbabcbb&quot;</p>
<p>输出：3</p>
<p>解释：因为没有重复字符的子字符是&#39;abc&#39;，所以长度是3</p>
<p>public class Solution {//时间复杂度O(2n)</p>
<p>//滑动窗口算法</p>
<p>public int <strong>[lengthOfLongestSubstring]{.underline}</strong>(String s) {</p>
<p>int n = s.length();</p>
<p>Set&lt;Character&gt; set = new HashSet&lt;&gt;();</p>
<p>int ans = 0, i = 0, j = 0;</p>
<p>while (i &lt; n &amp;&amp; j &lt; n)<br>{//窗口的左边是i，右边是j，下列算法将窗口的左右移动，截取出其中一段</p>
<p>// try to extend the range [i, j]</p>
<p>if<br>(!set.contains(s.charAt(j))){//如果set中不存在该字母，就将j+1，相当于窗口右边向右移动一格，左边不动</p>
<p>set.add(s.charAt(j++));</p>
<p>ans = Math.max(ans, j - i);//记录目前存在过的最大的子字符长度</p>
<p>}</p>
<p>else<br>{//如果set中存在该字母，则将窗口左边向右移动一格，右边不动，直到该窗口中不存在重复的字符</p>
<p>set.remove(s.charAt(i++));</p>
<p>}</p>
<p>}</p>
<p>return ans;</p>
<p>}</p>
<p>}</p>
<p>作者：DrXu</p>
<p>链接：<a href="https://juejin.im/post/5c74a2e2f265da2dea053355" target="_blank" rel="noopener">https://juejin.im/post/5c74a2e2f265da2dea053355</a></p>
<p>来源：掘金</p>
<p>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<p>====</p>
<h3 id="解法3：优化的滑动窗口算法"><a href="#解法3：优化的滑动窗口算法" class="headerlink" title="解法3：优化的滑动窗口算法"></a><strong>解法3：优化的滑动窗口算法</strong></h3><p>上面的滑动窗口算法最多需要2n的步骤，但这其实是能被优化为只需要n步。我们可以使用HashMap定义字符到索引之间的映射，然后，当我们发现子字符串中的重复字符时，可以直接跳过遍历过的字符了。</p>
<p>（2）public class Solution {//时间复杂度o(n)</p>
<p>public int lengthOfLongestSubstring(String s) {</p>
<p>int n = s.length(), ans = 0;</p>
<p>//使用hashmap记录遍历过的字符的索引，当发现重复的字符时，可以将窗口的左边直接跳到该重复字符的索引处</p>
<p>Map&lt;Character, Integer&gt; map = new HashMap&lt;&gt;(); // current index of<br>character</p>
<p>// try to extend the range [i, j]</p>
<p>for (int j = 0, i = 0; j &lt; n; j++)<br>{//j负责向右边遍历，i根据重复字符的情况进行调整</p>
<p>if (map.containsKey(s.charAt(j)))<br>{//当发现重复的字符时,将字符的索引与窗口的左边进行对比，将窗口的左边直接跳到该重复字符的索引处</p>
<p>i = Math.max(map.get(s.charAt(j)), i);</p>
<p>}</p>
<p>//记录子字符串的最大的长度</p>
<p>ans = Math.max(ans, j - i + 1);</p>
<p>//map记录第一次遍历到key时的索引位置，j+1,保证i跳到不包含重复字母的位置</p>
<p>map.put(s.charAt(j), j + 1);</p>
<p>}</p>
<p>return ans;</p>
<p>}</p>
<p>}</p>
<p>作者：DrXu</p>
<p>链接：<a href="https://juejin.im/post/5c74a2e2f265da2dea053355" target="_blank" rel="noopener">https://juejin.im/post/5c74a2e2f265da2dea053355</a></p>
<p>来源：掘金</p>
<p>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<p>[Slide Window]</p>
<p>Min Windows</p>
<p>------------- best solution---</p>
<p>（3）public static String <strong>minWindowBetter</strong>(String s, String t){</p>
<p>if(s==null||t==null|s.length()==0||t.length()==0){</p>
<p>return &quot;&quot;;</p>
<p>}</p>
<p>int left=0,right=0,count=0,min=Integer.MAX_VALUE;</p>
<p>int pool[] = new int[256];</p>
<p>String rtn=&quot;&quot;;</p>
<p>for(int i =0;i&lt;t.length();i++){</p>
<p>pool[t.charAt(i)]++;</p>
<p>}</p>
<p>while(right&lt;s.length()){</p>
<p>if(pool[s.charAt(right++)]--&gt;0){//[!]</p>
<p>// (a) if(pool[s.charAt(right++)]--&gt;=0), rather than<br>if(pool[right++]--&gt;=0)</p>
<p>// (b) this is &quot;&gt;0&quot;, but not &quot;&gt;=0&quot;</p>
<p>count++;</p>
<p>}</p>
<p>while(count==t.length()){</p>
<p>if((right-left)&lt;min){</p>
<p>min=right-left;</p>
<p>rtn=s.substring(left,right);</p>
<p>}</p>
<p>//shrink window</p>
<p>if(++pool[s.charAt(left++)]&gt;0){</p>
<p>count--;</p>
<p>}</p>
<p>}</p>
<p>}</p>
<p>return rtn;</p>
<p>}</p>
<p>10 lines code to solve most “substring” problem</p>
<p>I will first give the solution then show you the magic template.</p>
<p>The code of solving this problem is below. It might be the shortest<br>among all solutions provided in Discuss.</p>
<p>string minWindow(string s, string t) {</p>
<p>vector&lt;int&gt; map(128,0);</p>
<p>for(auto c: t) map[c]++;</p>
<p>int counter=t.size(), begin=0, end=0, d=INT_MAX, head=0;</p>
<p>while(end&lt;s.size()){</p>
<p>if(map[s[end++]]--&gt;0) counter--; //in t</p>
<p>while(counter==0){ //valid</p>
<p>if(end-begin&lt;d) d=end-(head=begin);</p>
<p>if(map[s[begin++]]++==0) counter++; //make it invalid</p>
<p>}</p>
<p>}</p>
<p>return d==INT_MAX? &quot;&quot;:s.substr(head, d);</p>
<p>}</p>
<p>Here comes the template.</p>
<p>For most substring problem, we are given a string and need to find a<br>substring of it which satisfy some restrictions. A general way is to use<br>a hashmap assisted with two pointers. The template is given below.</p>
<p>int findSubstring(string s){</p>
<p>vector&lt;int&gt; map(128,0);</p>
<p>int counter; // check whether the substring is valid</p>
<p>int begin=0, end=0; //two pointers, one point to tail and one head</p>
<p>int d; //the length of substring</p>
<p>for() { /* initialize the hash map here */ }</p>
<p>while(end&lt;s.size()){</p>
<p>if(map[s[end++]]-- ?){ /* modify counter here */ }</p>
<p>while(/* counter condition */){</p>
<p>/* update d here if finding minimum*/</p>
<p>//increase begin to make it invalid/valid again</p>
<p>if(map[s[begin++]]++ ?){ /*modify counter here*/ }</p>
<p>}</p>
<p>/* update d here if finding maximum*/</p>
<p>}</p>
<p>return d;</p>
<p>}</p>
<p>One thing needs to be mentioned is that when asked to find maximum<br>substring, we should update maximum after the inner while loop to<br>guarantee that the substring is valid. On the other hand, when asked to<br>find minimum substring, we should update minimum inside the inner while<br>loop.</p>
<p>The code of solving <strong>[Longest Substring with At Most Two Distinct<br>Characters]{.underline}</strong> is below:</p>
<p>（4）int lengthOfLongestSubstringTwoDistinct(string s) {</p>
<p>vector&lt;int&gt; map(128, 0);</p>
<p>int counter=0, begin=0, end=0, d=0;</p>
<p>while(end&lt;s.size()){</p>
<p>if(map[s[end++]]++==0) counter++;</p>
<p>while(counter&gt;2) if(map[s[begin++]]--==1) counter--;</p>
<p>d=max(d, end-begin);</p>
<p>}</p>
<p>return d;</p>
<p>}</p>
<p>The code of solving <strong>[Longest Substring Without Repeating<br>Characters]{.underline}</strong> is below:</p>
<p>Update 01.04.2016, thanks @weiyi3 for advice.</p>
<p><strong>[（5）]{.underline}</strong>int lengthOfLongestSubstring(string s) {</p>
<p>vector&lt;int&gt; map(128,0);</p>
<p>int counter=0, begin=0, end=0, d=0;</p>
<p>while(end&lt;s.size()){</p>
<p>if(map[s[end++]]++&gt;0) counter++;</p>
<p>while(counter&gt;0) if(map[s[begin++]]--&gt;1) counter--;</p>
<p>d=max(d, end-begin); //while valid, update d</p>
<p>}</p>
<p>return d;</p>
<p>}</p>
<p>I think this post deserves some upvotes! : )</p>
<p><strong>[[sliding window ]]{.underline}</strong></p>
<p>string minWindow(string s, string t) {</p>
<p>unordered_map&lt;char, int&gt; m;</p>
<p>// Statistic for count of char in t</p>
<p>for (auto c : t) m[c]++;</p>
<p>// counter represents the number of chars of t to be found in s.</p>
<p>size_t start = 0, end = 0, counter = t.size(), minStart = 0, minLen =<br>INT_MAX;</p>
<p>size_t size = s.size();</p>
<p>// Move to find a valid window.</p>
<p>while (end &lt; size) {</p>
<p>// If char in s exists in t, decrease counter</p>
<p>if (m[s[end]] &gt; 0)</p>
<p>counter--;</p>
<p>// Decrease m[s[end]]. If char does not exist in t, m[s[end]]<br>will be negative.</p>
<p>m[s[end]]--;</p>
<p>end++;</p>
<p>// When we find a valid window, the move starts to find a smaller<br>window.</p>
<p>while (counter == 0) {</p>
<p>if (end - start &lt; minLen) {</p>
<p>minStart = start;</p>
<p>minLen = end - start;</p>
<p>}</p>
<p>m[s[start]]++;</p>
<p>// When char exists in t, increase the counter.</p>
<p>if (m[s[start]] &gt; 0)</p>
<p>counter++;</p>
<p>start++;</p>
<p>}</p>
<p>}</p>
<p>if (minLen != INT_MAX)</p>
<p>return s.substr(minStart, minLen);</p>
<p>return &quot;&quot;;</p>
<p>}</p>
<p>～～～～java version～～</p>
<p>public String minWindow(String s, String t) {</p>
<p>HashMap&lt;Character,Integer&gt; map = new HashMap();</p>
<p>for(char c : s.toCharArray())</p>
<p>map.put(c,0);</p>
<p>for(char c : t.toCharArray())</p>
<p>{</p>
<p>if(map.containsKey(c))</p>
<p>map.put(c,map.get(c)+1);</p>
<p>else</p>
<p>return &quot;&quot;;</p>
<p>}</p>
<p>int start =0, end=0, minStart=0,minLen = Integer.MAX_VALUE, counter =<br>t.length();</p>
<p>while(end &lt; s.length())</p>
<p>{</p>
<p>char c1 = s.charAt(end);</p>
<p>if(map.get(c1) &gt; 0)</p>
<p>counter--;</p>
<p>map.put(c1,map.get(c1)-1);</p>
<p>end++;</p>
<p>while(counter == 0)</p>
<p>{</p>
<p>if(minLen &gt; end-start)</p>
<p>{</p>
<p>minLen = end-start;</p>
<p>minStart = start;</p>
<p>}</p>
<p>char c2 = s.charAt(start);</p>
<p>map.put(c2, map.get(c2)+1);</p>
<p>if(map.get(c2) &gt; 0)</p>
<p>counter++;</p>
<p>start++;</p>
<p>}</p>
<p>}</p>
<p>return minLen == Integer.MAX_VALUE ? &quot;&quot; :<br>s.substring(minStart,minStart+minLen);</p>
<p>}</p>
<p>[DP]</p>
<p><strong>[（6]{.underline}</strong>）longestCommonSubsequence</p>
<p>public int longestCommonSubsequence(String text1, String text2) {</p>
<p>// xx-est is meant for dynamic programming</p>
<p>// x keys for DP</p>
<p>// 1st, declare a DP table for bottom up</p>
<p>// 2nd set global value</p>
<p>// ================</p>
<p>// for top down, use memo</p>
<p>int m = text1.length(); //[!!!!] it&#39;s &quot;length()&quot; method for String</p>
<p>int n = text2.length();</p>
<p>int[][] memo = new int[m+1][n+1];</p>
<p>for(int i=0;i&lt;m;i++){</p>
<p>for(int j=0;j&lt;n;j++){</p>
<p>// if(i==0||j==0){ //[!!!!!222] here is no need, because default<br>value in array is zero</p>
<p>// // 1st col or 1st row, set to 0</p>
<p>// memo[i][j]=0;</p>
<p>// }else{</p>
<p>if(text1.charAt(i)==text2.charAt(j)){</p>
<p>memo[i+1][j+1] = 1 + memo[i][j];</p>
<p>}else{</p>
<p>// current char is different, so go to carry previous biggest value from<br>either left or up</p>
<p>memo[i+1][j+1] = Math.max(memo[i+1][j],memo[i][j+1]);</p>
<p>}</p>
<p>// }</p>
<p>}</p>
<p>}</p>
<p>return memo[m][n];</p>
<p>}</p>
<p><strong>[DP]</strong></p>
<p>LengthOfLIS</p>
<p><strong>[（7]{.underline}</strong>）public class LengthOfLIS {</p>
<p>System.out.println(&quot;===test failed case (DP)<br>:&quot;+inst.lengthOfLIS_tail(new int[]{4,10,4,3,8,9}));</p>
<p>System.out.println(&quot;===test failed case (DP)<br>:&quot;+inst.lengthOfLIS_tail(new int[]{2,2})); //expect output &quot;1&quot;</p>
<p>public int lengthOfLIS_naive(int[] nums){</p>
<p>//edge case</p>
<p>if(nums.length&lt;0){</p>
<p>return 0;</p>
<p>}</p>
<p>int m=nums.length;</p>
<p>int max=0; // global max</p>
<p>int[] dp=new int[m];</p>
<p>//embedded loop to search max value brute forcely</p>
<p>for (int i = 0; i &lt;m ; i++) {</p>
<p>// loop each digits</p>
<p>int localMax=0; // holder for MAX length of increase sequence before i</p>
<p>for (int j = 0; j &lt; i; j++) {</p>
<p>// loop to find all increasing BEFORE this number</p>
<p>if(dp[j]&gt;localMax &amp;&amp; nums[j]&lt;nums[i]){</p>
<p>// previous number is SMALLER than i and greater than local max, that<br>means it&#39;s increasing</p>
<p>localMax=dp[j];</p>
<p>}</p>
<p>}</p>
<p>// after looped ALL previous numbers, add current one</p>
<p>dp[i]=localMax+1;</p>
<p>max = Math.max(max,dp[i]);</p>
<p>}</p>
<p>return max;</p>
<p>}</p>
<p>public int <strong>[lengthOfLIS_tail]{.underline}</strong>(int[] nums){</p>
<p>int m=nums.length;</p>
<p>if(m==0) return 0;</p>
<p>int[] dp=new int[m]; // dp[x]=y : value &quot;y&quot; of dp stores &quot;the<br>last number&quot; (tail) of increasing sequence whose length is &quot;x&quot;</p>
<p>int maxLen=0;</p>
<p>dp[0]=nums[0];</p>
<p>//for loop each number in array</p>
<p>for (int i = 1; i &lt; m; i++) { //[!!!!!!!!1111111] it should start<br>with &quot;1&quot;, as &quot;0&quot; is already setup</p>
<p>// there are 3 scenarios we need to update dp</p>
<p>if(nums[i]&lt;dp[0]){</p>
<p>// current number is even smaller than most smallest LIS, update it</p>
<p>dp[0]=nums[i];</p>
<p>}else if(nums[i]&gt;dp[maxLen]){</p>
<p>//current number is greater than &#39;tail&#39; of largest LIS, then update<br>the last LIS</p>
<p>dp[++maxLen]=nums[i];</p>
<p>}else{</p>
<p>// current number is in the middle, so we go to find the *correct*<br>position to locate the LIS in DP</p>
<p>dp[binarySearchLIS(dp,0,maxLen,nums[i])]=nums[i];</p>
<p>}</p>
<p>}</p>
<p>return maxLen+1; // because dp is zero based, so add one for result</p>
<p>}</p>
<p>public int <strong>binarySearchLIS</strong>(int[] dp, int min, int max, int<br>target){</p>
<p>while(min&lt;=max){</p>
<p>int middle =min + (max-min)/2; //[!!!!!!!] don&#39;t forget to add prefix<br>&quot;min +&quot; in front of (max-min)/2</p>
<p>if(dp[middle]==target){</p>
<p>return middle;</p>
<p>}else if(dp[middle]&gt;target){</p>
<p>max=middle-1;</p>
<p>} else if(dp[middle]&lt;target){</p>
<p>min=middle+1;</p>
<p>}</p>
<p>}</p>
<p>return min;</p>
<p>}</p>
<p>}</p>
<p>[Graph]</p>
<p>RottingOrange</p>
<p><strong>[（8]{.underline}</strong>）public class GraphRottingOrange {</p>
<p>public static void main(String[] args) {</p>
<p>/*</p>
<p>In a given grid, each cell can have one of three values:</p>
<p>the value 0 representing an empty cell;</p>
<p>the value 1 representing a fresh orange;</p>
<p>the value 2 representing a rotten orange.</p>
<p>Every minute, any fresh orange that is adjacent (4-directionally) to a<br>rotten orange becomes rotten.</p>
<p>Return the minimum number of minutes that must elapse until no cell has<br>a fresh orange. If this is impossible, return -1 instead.</p>
<p>Example 1:</p>
<p>Input: [[2,1,1],[1,1,0],[0,1,1]]</p>
<p>Output: 4</p>
<p>Example 2:</p>
<p>Input: [[2,1,1],[0,1,1],[1,0,1]]</p>
<p>Output: -1</p>
<p>Explanation: The orange in the bottom left corner (row 2, column 0) is<br>never rotten, because rotting only happens 4-directionally.</p>
<p>Example 3:</p>
<p>Input: [[0,2]]</p>
<p>Output: 0</p>
<p>Explanation: Since there are already no fresh oranges at minute 0, the<br>answer is just 0.</p>
<p>Note:</p>
<p>1 &lt;= grid.length &lt;= 10</p>
<p>1 &lt;= grid[0].length &lt;= 10</p>
<p>grid[i][j] is only 0, 1, or 2.</p>
<p>*/</p>
<p>GraphRottingOrange inst = new GraphRottingOrange();</p>
<h1 id="deleted-2-D-array-due-to-hexo-error"><a href="#deleted-2-D-array-due-to-hexo-error" class="headerlink" title="deleted 2-D array due to hexo error"></a>deleted 2-D array due to hexo error</h1><p>System.out.println(&quot;===output of findRottenMinutes:&quot; +<br>inst.orangesRotting(grid));</p>
<p>}</p>
<p>public int orangesRotting(int[][] grid) {</p>
<p>int m = grid.length;</p>
<p>int n = grid[0].length;</p>
<p>List&lt;String&gt; listRotten = new ArrayList&lt;&gt;();</p>
<p>List&lt;String&gt; listFresh = new ArrayList&lt;&gt;();</p>
<p>int nMinutes = 0;</p>
<p>//firstly, find and enlist rotten ones</p>
<p>for (int i = 0; i &lt; m; i++) {</p>
<p>for (int j = 0; j &lt; n; j++) {</p>
<p>if (grid[i][j] == 2) {</p>
<p>//current cell is a rotten tomato, so check adjacent and contract them</p>
<p>listRotten.add(i + &quot;&quot; + j);</p>
<p>} else if (grid[i][j] == 1) {</p>
<p>// fresh tomato, to record it , so check zero of this list to confirm<br>ALL tomato got infected</p>
<p>listFresh.add(i + &quot;&quot; + j);</p>
<p>}</p>
<p>}</p>
<p>}</p>
<p>// loop until empty of fresh ones</p>
<p>while (!listFresh.isEmpty()) {</p>
<p>List&lt;String&gt; infected = new ArrayList&lt;&gt;();</p>
<p>for (String strRotten : listRotten) {</p>
<p>int x = strRotten.charAt(0) - &#39;0&#39;;</p>
<p>int y = strRotten.charAt(1) - &#39;0&#39;;</p>
<p>//to search 4 directions both vertically and horizontally</p>
<h1 id="deleted-2-D-array-due-to-hexo-error-1"><a href="#deleted-2-D-array-due-to-hexo-error-1" class="headerlink" title="deleted 2-D array due to hexo error"></a>deleted 2-D array due to hexo error</h1><p>for (int[] direction : directions) {</p>
<p>int newX = x + direction[0];</p>
<p>int newY = y + direction[1];</p>
<p>String newLoc = newX + &quot;&quot; + newY;</p>
<p>if (listFresh.contains(newLoc)) {</p>
<p>// make new tomato as rotten</p>
<p>listFresh.remove(newLoc);</p>
<p>// listRotten.add(newLoc);</p>
<p>infected.add(newLoc); // add to infected, rather than Rotten to avoid<br>&quot;ConcurrentModificationException&quot; as it&#39;s our loop list</p>
<p>}</p>
<p>}</p>
<p>}</p>
<p>// return -1 in case no more been infected</p>
<p>if (infected.isEmpty()) {</p>
<p>return -1;</p>
<p>}</p>
<p>// assign infected to listRotten to further check</p>
<p>listRotten=infected;</p>
<p>++nMinutes;</p>
<p>}</p>
<p>return nMinutes;</p>
<p>}</p>
<p>}</p>
<p>public int orangesRotting_Iterative(int[][] grid) {</p>
<p>if(grid == null || grid.length == 0) return 0;</p>
<p>int rows = grid.length;</p>
<p>int cols = grid[0].length;</p>
<p>Queue&lt;int[]&gt; queue = new LinkedList&lt;&gt;();</p>
<p>int count_fresh = 0;</p>
<p>//Put the position of all rotten oranges in queue</p>
<p>//count the number of fresh oranges</p>
<p>for(int i = 0 ; i &lt; rows ; i++) {</p>
<p>for(int j = 0 ; j &lt; cols ; j++) {</p>
<p>if(grid[i][j] == 2) {</p>
<p>queue.offer(new int[]{i , j});</p>
<p>}</p>
<p>else if(grid[i][j] == 1) {</p>
<p>count_fresh++;</p>
<p>}</p>
<p>}</p>
<p>}</p>
<p>//if count of fresh oranges is zero --&gt; return 0</p>
<p>if(count_fresh == 0) return 0;</p>
<p>int count = 0;</p>
<h1 id="deleted-2-D-array-due-to-hexo-error-2"><a href="#deleted-2-D-array-due-to-hexo-error-2" class="headerlink" title="deleted 2-D array due to hexo error"></a>deleted 2-D array due to hexo error</h1><p>//bfs starting from initially rotten oranges</p>
<p>while(!queue.isEmpty()) {</p>
<p>++count;</p>
<p>int size = queue.size();</p>
<p>for(int i = 0 ; i &lt; size ; i++) {</p>
<p>int[] point = queue.poll();</p>
<p>for(int dir[] : dirs) {</p>
<p>int x = point[0] + dir[0];</p>
<p>int y = point[1] + dir[1];</p>
<p>//if x or y is out of bound</p>
<p>//or the orange at (x , y) is already rotten</p>
<p>//or the cell at (x , y) is empty</p>
<p>//we do nothing</p>
<p>if(x &lt; 0 || y &lt; 0 || x &gt;= rows || y &gt;= cols ||<br>grid[x][y] == 0 || grid[x][y] == 2) continue;</p>
<p>//mark the orange at (x , y) as rotten</p>
<p>grid[x][y] = 2;</p>
<p>//put the new rotten orange at (x , y) in queue</p>
<p>queue.offer(new int[]{x , y});</p>
<p>//decrease the count of fresh oranges by 1</p>
<p>count_fresh--;</p>
<p>}</p>
<p>}</p>
<p>}</p>
<p>return count_fresh == 0 ? count-1 : -1;</p>
<p>}</p>
<p>[DP]</p>
<p>DecodeWays</p>
<p>package algo;</p>
<p><strong>[（9]{.underline}</strong>）public class DecodeWays {</p>
<p>public static void main(String[] args) {</p>
<p>/*</p>
<p>Similar questions:</p>
<p>62. Unique Paths</p>
<p>70. Climbing Stairs</p>
<p>509. Fibonacci Number</p>
<p>91. Decode Ways</p>
<p>A message containing letters from A-Z is being encoded to numbers using<br>the following mapping:</p>
<p>&#39;A&#39; -&gt; 1</p>
<p>&#39;B&#39; -&gt; 2</p>
<p>...</p>
<p>&#39;Z&#39; -&gt; 26</p>
<p>Given a non-empty string containing only digits, determine the total<br>number of ways to decode it.</p>
<p>Example 1:</p>
<p>Input: &quot;12&quot;</p>
<p>Output: 2</p>
<p>Explanation: It could be decoded as &quot;AB&quot; (1 2) or &quot;L&quot; (12).</p>
<p>Example 2:</p>
<p>Input: &quot;226&quot;</p>
<p>Output: 3</p>
<p>Explanation: It could be decoded as &quot;BZ&quot; (2 26), &quot;VF&quot; (22 6), or<br>&quot;BBF&quot; (2 2 6).</p>
<p>*/</p>
<p>DecodeWays inst = new DecodeWays();</p>
<p>System.out.println(&quot; decode ways: &quot;+ inst.numDecodings(&quot;12&quot;));</p>
<p>}</p>
<p>/*</p>
<p>&quot;&quot;&quot;</p>
<p>s = 123</p>
<p>build up from right =&gt;</p>
<p>num_ways (&quot;&quot;) =&gt; 1 (empty string can be represented by empty string)<br>(i.e. num_ways[n] = 1) NOTE: only for build up with a valid string.<br>Empty string on it&#39;s own doesn&#39;t need to be decoded.</p>
<p>num_ways (&quot;3&quot;) =&gt; 1 (only one way), i.e. num_ways[n-1] = 1</p>
<p>num_ways (&quot;23&quot;) =&gt; &quot;23&quot; or &quot;2&quot;-&quot;3&quot;,</p>
<p>num_ways (&quot;33&quot;) =&gt; &quot;3&quot;&quot;3&quot;</p>
<p>num_ways (&quot;123&quot;) =&gt; &quot;12&quot;(num_ways(&quot;3&quot;)) +<br>&quot;1&quot;(&quot;num_ways(&quot;23&quot;)) (i.e. num_ways[i+2] + num_ways[i+1])</p>
<p>num_ways (&quot;323&quot;) =&gt; &quot;3&quot;(num_ways(&quot;23&quot;)) (i.e. num_ways[i+1])</p>
<p>so basically if s[i:i+1] (both included) &lt;= 26,</p>
<p>num_ways[i+2] + num_ways[i+1]</p>
<p>else:</p>
<p>num_ways[i+1]</p>
<p>case with 0:</p>
<p>num_ways (&quot;103&quot;)</p>
<p>num_ways (&quot;3&quot;) =&gt; 1 (only one way)</p>
<p>num_ways (&quot;03&quot;) =&gt; 0 (can&#39;t decode 0)</p>
<p>num_ways (&quot;003&quot;) =&gt; &quot;00&quot;(num_ways(&quot;3&quot;)) +<br>&quot;0&quot;(num_ways(&quot;03&quot;)) =&gt; no way to decode &quot;00&quot; = 0 + 0</p>
<p>num_ways (&quot;103&quot;) =&gt; &quot;10&quot;(num_ways(&quot;3&quot;)) +<br>&quot;1&quot;(num_ways(&quot;03&quot;)) =&gt; num_ways[i+2] + num_ways[i+1](= 0 in<br>this case)</p>
<p>num_ways (&quot;1003&quot;) =&gt; &quot;10&quot;(num_ways(&quot;03&quot;)) +<br>&quot;1&quot;(num_ways(&quot;003&quot;)) =&gt; same eq = 0(no way to decode &quot;03&quot;) +<br>0(no way to decode 003)</p>
<p>Therefore, if i = &#39;0&#39;, let memo[i] = 0, also implements for a string<br>where the ith character == &#39;0&#39;, string[i:end] can be decoded in 0<br>ways.</p>
<p>&quot;&quot;&quot;</p>
<p>*/</p>
<p>// public class Solution {</p>
<p>public int numDecodings(String s) {</p>
<p>int n = s.length();</p>
<p>if (n == 0) return 0;</p>
<p>int[] memo = new int[n+1];</p>
<p>memo[n] = 1;</p>
<p>memo[n-1] = s.charAt(n-1) != &#39;0&#39; ? 1 : 0;</p>
<p>for (int i = n - 2; i &gt;= 0; i--)</p>
<p>if (s.charAt(i) == &#39;0&#39;) continue;</p>
<p>else memo[i] = (Integer.parseInt(s.substring(i,i+2))&lt;=26) ?<br>memo[i+1]+memo[i+2] : memo[i+1];</p>
<p>return memo[0];</p>
<p>}</p>
<p>// }</p>
<p>/*</p>
<p>Thank you so much for this clean and intuitive solution!!</p>
<p>I wrote some notes for myself reference, hope it might help someone to<br>understand this solution.</p>
<p>dp[i]: represents possible decode ways to the ith char(include i),<br>whose index in string is i-1</p>
<p>Base case: dp[0] = 1 is just for creating base; dp[1], when there&#39;s
one character, if it is not zero, it can only be 1 decode way. If it is<br>0, there will be no decode ways.</p>
<p>Here only need to look at at most two digits before i, cuz biggest valid<br>code is 26, which has two digits.</p>
<p>For dp[i]: to avoid index out of boundry, extract substring of<br>(i-1,i)- which is the ith char(index in String is i-1) and<br>substring(i-2, i)</p>
<p>First check if substring (i-1,i) is 0 or not. If it is 0, skip it,<br>continue right to check substring (i-2,i), cuz 0 can only be decode by<br>being together with the char before 0.</p>
<p>Second, check if substring (i-2,i) falls in 10~26. If it does, means<br>there are dp[i-2] more new decode ways.</p>
<p>Time: should be O(n), where n is the length of String</p>
<p>Space: should be O(n), where n is the length of String</p>
<p>*/</p>
<p>public int <strong>numDecodings_v2</strong>(String s) {</p>
<p>// this is one DP question, so create DP matrxi first</p>
<p>int[] dp = new int[s.length()+1];</p>
<p>// base case</p>
<p>dp[0]=1;</p>
<p>// for only one char, if first char is 0, which is not in the mapping<br>list, so return 0, otherwise return 1</p>
<p>dp[1]=s.charAt(0)==&#39;0&#39;?0:1;</p>
<p>int m=s.length();</p>
<p>for (int i = 2; i &lt;=m ; i++) {</p>
<p>int digitOne=Integer.valueOf(s.substring(i-1,i));</p>
<p>int digitTwo=Integer.valueOf(s.substring(i-2,i));</p>
<p>if(digitOne&gt;=1){</p>
<p>dp[i] = dp[i] +dp[i-1]; // add one to DP as take this single digit<br>into account</p>
<p>}</p>
<p>if(digitTwo&gt;=10 &amp;&amp; digitTwo&lt;=26){</p>
<p>dp[i] = dp[i] + dp[i-2];</p>
<p>}</p>
<p>}</p>
<p>return dp[m];</p>
<p>}</p>
<p>}</p>
<p>[DP]</p>
<p>class Solution {</p>
<p>public int coinChange(int[] coins, int amount) {</p>
<p>// this is one DP problem, so create matrix for number of fewest numbers<br>of coins to form the</p>
<p>int[] dp = new int[amount+1]; // index of array is the amount to be<br>calculated</p>
<p>Arrays.fill(dp,amount+1); // fill DP with *invalid* value so we can<br>update it to valid one late</p>
<p>//base case</p>
<p>dp[0]=0;</p>
<p>for(int i=0;i&lt;=amount;i++){ //[!!!] should be &quot;&lt;=&quot;, rather than<br>&quot;&lt;&quot;</p>
<p>for(int j=0;j&lt;coins.length;j++){</p>
<p>// if current coin is not greater than i (current amount to calculate<br>fewest number)</p>
<p>if(coins[j]&lt;=i){</p>
<p>// two options, do not take current change OR take current change</p>
<p>dp[i] = Math.min(dp[i], 1+dp[i-coins[j]]);</p>
<p>}</p>
<p>}</p>
<p>}</p>
<p>// if dp[amount] &gt; amount, it means it&#39;s amount+1, which is invalid</p>
<p>return dp[amount] &gt; amount ? -1:dp[amount];</p>
<p>}</p>
<p>}</p>
<p><strong>[[Recursive]]{.underline}</strong></p>
<p><strong>[Combination sum II]{.underline}</strong></p>
<p>Each number in candidates may only be used <strong>once</strong> in the combination.</p>
<p>Example 1:</p>
<p>Input: candidates = [10,1,2,7,6,1,5], target = 8,</p>
<p>A solution set is:</p>
<p>[</p>
<p>[1, 7],</p>
<p>[1, 2, 5],</p>
<p>[2, 6],</p>
<p>[1, 1, 6]</p>
<p>]</p>
<p>class Solution {</p>
<p>public List&lt;List&lt;Integer&gt;&gt; combinationSum2(int[] candidates, int<br>target) {</p>
<p>List&lt;List&lt;Integer&gt;&gt; result = new ArrayList&lt;&gt;();</p>
<p>Arrays.sort(candidates); // here is key to make array increasing</p>
<p>findCombination(candidates,0,target,new ArrayList&lt;&gt;(),result);</p>
<p>return result;</p>
<p>}</p>
<p>public void findCombination(int[] candidates, int idx, int target,<br>List&lt;&gt; current, List&lt;List&lt;&gt;&gt; result){</p>
<p>//base case</p>
<p>if(target == 0){</p>
<p>// found correct combination</p>
<p>result.add(current);</p>
<p>return; // should return right away after add</p>
<p>}</p>
<p>// base case 2</p>
<p>if(target&lt;0){</p>
<p>// last element lead to combination&gt;target</p>
<p>return;</p>
<p>}</p>
<p>for(int i=idx;i&lt;candidates.length;i++){</p>
<p>// loop to try combination by DFS</p>
<p>if(i==idx || candidates[i]!=candidates[i-1]){</p>
<p>// here is key for &quot;non dup element&quot;</p>
<p>// as first loop is always unique, no dup</p>
<p>// for non first loop, check it with previous value</p>
<p>current.add(candidates[i]); // Not same as previous one</p>
<p>findCombination(candidates,i+1, target-candidates[i], current,<br>result); // here will DFS try to keep on adding new element to current</p>
<p>current.remove(candidates.length-1);// when above line returned, it<br>means last element is too big</p>
<p>}</p>
<p>}</p>
<p>}</p>
<p>}</p>
<h2 id="reverse-integer-underline"><a href="#reverse-integer-underline" class="headerlink" title="[reverse integer]{.underline}"></a><strong>[reverse integer]{.underline}</strong></h2><p>class Solution {</p>
<p>public int reverse(int x) {</p>
<p>long res = 0;</p>
<p>while (x != 0) {</p>
<p>res *= 10;</p>
<p>res += x % 10;</p>
<p>x /= 10;</p>
<p>}</p>
<p>return (int)res == res ? (int)res : 0;</p>
<p>}</p>
<p>}</p>
<p>public class Solution {</p>
<p>public int reverse(int x) {</p>
<p>long result =0;</p>
<p>while(x != 0)</p>
<p>{</p>
<p>result = (result*10) + (x%10);</p>
<p>if(result &gt; Integer.MAX_VALUE) return 0;</p>
<p>if(result &lt; Integer.MIN_VALUE) return 0;</p>
<p>x = x/10;</p>
<p>}</p>
<p>return (int)result;</p>
<p>}</p>
<p>}</p>
<p><strong>Find median of two sorted array</strong></p>
<p>&lt;1&gt; Set imin = 0, imax = m, then start searching in [imin, imax]</p>
<p>&lt;2&gt; Set i = (imin + imax)/2, j = (m + n + 1)/2 - i</p>
<p>&lt;3&gt; Now we have len(left_part)==len(right_part). And there are only<br>3 situations</p>
<p>that we may encounter:</p>
<p>&lt;a&gt; B[j-1] &lt;= A[i] and A[i-1] &lt;= B[j]</p>
<p>Means we have found the object `i`, so stop searching.</p>
<p>&lt;b&gt; B[j-1] &gt; A[i]</p>
<p>Means A[i] is too small. We must `ajust` i to get `B[j-1] &lt;=
A[i]`.</p>
<p>Can we `increase` i?</p>
<p>Yes. Because when i is increased, j will be decreased.</p>
<p>So B[j-1] is decreased and A[i] is increased, and `B[j-1] &lt;=
A[i]` may</p>
<p>be satisfied.</p>
<p>Can we `decrease` i?</p>
<p>`No!` Because when i is decreased, j will be increased.</p>
<p>So B[j-1] is increased and A[i] is decreased, and B[j-1] &lt;=
A[i] will</p>
<p>be never satisfied.</p>
<p>So we must `increase` i. That is, we must ajust the searching range to</p>
<p>[i+1, imax]. So, set imin = i+1, and goto &lt;2&gt;.</p>
<p>&lt;c&gt; A[i-1] &gt; B[j]</p>
<p>Means A[i-1] is too big. And we must `decrease` i to get<br>`A[i-1]&lt;=B[j]`.</p>
<p>That is, we must ajust the searching range to [imin, i-1].</p>
<p>So, set imax = i-1, and goto &lt;2&gt;.</p>
<p>When the object i is found, the median is:</p>
<p>max(A[i-1], B[j-1]) (when m + n is odd)</p>
<p>or (max(A[i-1], B[j-1]) + min(A[i], B[j]))/2 (when m + n is<br>even)</p>
<p>Number of distinct Islands</p>
<p>private static int rows, cols;</p>
<h1 id="deleted-2-D-array-due-to-hexo-error-3"><a href="#deleted-2-D-array-due-to-hexo-error-3" class="headerlink" title="deleted 2-D array due to hexo error"></a>deleted 2-D array due to hexo error</h1><p>public int numDistinctIslands(int[][] grid) {</p>
<p>cols = grid[0].length;</p>
<p>rows = grid.length;</p>
<p>Set&lt;String&gt; uniqueShapes = new HashSet&lt;&gt;(); // Unique shpes.</p>
<p>StringBuilder shape;</p>
<p>for (int i = 0; i &lt; rows; i++) {</p>
<p>for (int j = 0; j &lt; cols; j++) {</p>
<p>if (grid[i][j] == 1) {</p>
<p>grid[i][j] = 0; // mark it as &#39;visited&#39;</p>
<p>shape = new StringBuilder(&quot;s&quot;); //&#39;s&#39; indicate Start</p>
<p>dfsTraversal(i, j, grid, shape);</p>
<p>uniqueShapes.add(shape.toString());</p>
<p>}</p>
<p>}</p>
<p>}</p>
<p>return uniqueShapes.size();</p>
<p>}</p>
<p>private static void dfsTraversal(int x, int y, int[][] matrix,<br>StringBuilder shape) {</p>
<p>for (int i = 0; i &lt; directions.length; i++) {</p>
<p>int nx = x + directions[i][0];</p>
<p>int ny = y + directions[i][1];</p>
<p>if (nx &gt;= 0 &amp;&amp; ny &gt;= 0 &amp;&amp; nx &lt; rows &amp;&amp; ny &lt; cols) {</p>
<p>if (matrix[nx][ny] == 1) {</p>
<p>matrix[nx][ny] = 0; // mark as &#39;visited&#39;</p>
<p>shape.append(i);</p>
<p>dfsTraversal(nx, ny, matrix, shape);</p>
<p>}</p>
<p>}</p>
<p>}</p>
<p>shape.append(&quot;_&quot;);</p>
<p>}</p>
<p>//=======</p>
<p>class Solution {</p>
<h1 id="deleted-2-D-array-due-to-hexo-error-4"><a href="#deleted-2-D-array-due-to-hexo-error-4" class="headerlink" title="deleted 2-D array due to hexo error"></a>deleted 2-D array due to hexo error</h1><p>public int numDistinctIslands(int[][] grid) {</p>
<p>Set&lt;String&gt; set= new HashSet&lt;&gt;();</p>
<p>int res=0;</p>
<p>for(int i=0;i&lt;grid.length;i++){</p>
<p>for(int j=0;j&lt;grid[0].length;j++){</p>
<p>if(grid[i][j]==1) {</p>
<p>StringBuilder sb= new StringBuilder();</p>
<p>helper(grid,i,j,0,0, sb);</p>
<p>String s=sb.toString();</p>
<p>if(!set.contains(s)){</p>
<p>res++;</p>
<p>set.add(s);</p>
<p>}</p>
<p>}</p>
<p>}</p>
<p>}</p>
<p>return res;</p>
<p>}</p>
<p>public void helper(int[][] grid,int i,int j, int xpos, int<br>ypos,StringBuilder sb){</p>
<p>grid[i][j]=0;</p>
<p>sb.append(xpos+&quot;&quot;+ypos);</p>
<p>for(int[] dir : dirs){</p>
<p>int x=i+dir[0];</p>
<p>int y=j+dir[1];</p>
<p>if(x&lt;0 || y&lt;0 || x&gt;=grid.length || y&gt;=grid[0].length ||<br>grid[x][y]==0) continue;</p>
<p>helper(grid,x,y,xpos+dir[0],ypos+dir[1],sb);</p>
<p>}</p>
<p>}</p>
<p>}</p>
<p>UPDATE: We can use direction string instead of using number string in<br>set.</p>
<p>Below is @wavy code using direction string.</p>
<p>public int numDistinctIslands(int[][] grid) {</p>
<p>Set&lt;String&gt; set = new HashSet&lt;&gt;();</p>
<p>for(int i = 0; i &lt; grid.length; i++) {</p>
<p>for(int j = 0; j &lt; grid[i].length; j++) {</p>
<p>if(grid[i][j] != 0) {</p>
<p>StringBuilder sb = new StringBuilder();</p>
<p>dfs(grid, i, j, sb, &quot;o&quot;); // origin</p>
<p>grid[i][j] = 0;</p>
<p>set.add(sb.toString());</p>
<p>}</p>
<p>}</p>
<p>}</p>
<p>return set.size();</p>
<p>}</p>
<p>private void dfs(int[][] grid, int i, int j, StringBuilder sb,<br>String dir) {</p>
<p>if(i &lt; 0 || i == grid.length || j &lt; 0 || j == grid[i].length</p>
<p>|| grid[i][j] == 0) return;</p>
<p>sb.append(dir);</p>
<p>grid[i][j] = 0;</p>
<p>dfs(grid, i-1, j, sb, &quot;u&quot;);</p>
<p>dfs(grid, i+1, j, sb, &quot;d&quot;);</p>
<p>dfs(grid, i, j-1, sb, &quot;l&quot;);</p>
<p>dfs(grid, i, j+1, sb, &quot;r&quot;);</p>
<p>sb.append(&quot;b&quot;); // back</p>
<p>}</p>
<ul>
<li>In a <strong>complete</strong> binary tree every level, *except possibly the<blockquote>
<p>last<em>, is completely filled, and all nodes in the last level are<br>as far left as possible. It can have between 1 and 2</em>^h^* nodes at<br>the last level<br><em>h</em>.<a href="https://en.wikipedia.org/wiki/Binary_tree#cite_note-complete_binary_tree-18" target="_blank" rel="noopener">^[18]^</a><br>An alternative definition is a perfect tree whose rightmost leaves<br>(perhaps all) have been removed. Some authors use the term<br><strong>complete</strong> to refer instead to a perfect binary tree as defined<br>below, in which case they call this type of tree (with a possibly<br>not filled last level) an <strong>almost complete</strong> binary tree or<br><strong>nearly complete</strong> binary<br>tree.^<a href="https://en.wikipedia.org/wiki/Binary_tree#cite_note-almost_complete_binary_tree-19" target="_blank" rel="noopener">[19]</a><a href="https://en.wikipedia.org/wiki/Binary_tree#cite_note-nearly_complete_binary_tree-20" target="_blank" rel="noopener">[20]</a>^
A complete binary tree can be efficiently represented using an<br>array.<a href="https://en.wikipedia.org/wiki/Binary_tree#cite_note-complete_binary_tree-18" target="_blank" rel="noopener">^[18]^</a></p>
</blockquote>
</li>
</ul>
<blockquote>
<p><img src="media/image1.png" alt>{width=”2.2916666666666665in”<br>height=”1.1944444444444444in”}</p>
<p>A complete binary tree (that is not full)</p>
</blockquote>
<ul>
<li>A <strong>perfect</strong> binary tree is a binary tree in which all interior<blockquote>
<p>nodes have two children <em>and</em> all leaves have the same <em>depth</em> or<br>same<br><em>level</em>.<a href="https://en.wikipedia.org/wiki/Binary_tree#cite_note-21" target="_blank" rel="noopener">^[21]^</a><br>An example of a perfect binary tree is the (non-incestuous)<br><a href="https://en.wikipedia.org/wiki/Ancestry_chart" target="_blank" rel="noopener">ancestry chart</a> of<br>a person to a given depth, as each person has exactly two<br>biological parents (one mother and one father). Provided the<br>ancestry chart always displays the mother and the father on the<br>same side for a given node, their sex can be seen as an analogy of<br>left and right children, <em>children</em> being understood here as an<br>algorithmic term. A perfect tree is therefore always complete but<br>a complete tree is not necessarily perfect.</p>
</blockquote>
</li>
</ul>
<p>Heap Tree is a special balanced binary tree data structure where root<br>node is compared with its children and averaged accordingly. There are<br>two type of trees, min heap tree and map heap tree.</p>
<p>For Min heap tree, it’s parent is either smaller or equals its childers.</p>
<h3 id="Get-Tree-Height"><a href="#Get-Tree-Height" class="headerlink" title="Get Tree Height"></a>Get Tree Height</h3><p>static int getHeight_recursive(TreeNode root){</p>
<p>if(root==null){</p>
<p>return 0;</p>
<p>}</p>
<p>return<br>Math.max(getHeight_recursive(root.left),getHeight_recursive(root.right))+1;<br>//[!!!!!] Here is the key point, it should add &quot;1&quot; at last</p>
<p>}</p>
<p>/*</p>
<p>The basic idea:</p>
<p>1. traverse layer by layer</p>
<p>2. For each layer, firslty get number of element,</p>
<p>3. Then add its left &amp; right child for each element</p>
<p>4. Increase height once all element of current layer finished</p>
<p>*/</p>
<p>static int getHeight_Iteratively(TreeNode root) {</p>
<p>int height=0;</p>
<p>Stack&lt;TreeNode&gt; stack=new Stack&lt;&gt;();</p>
<p>stack.add(root);</p>
<p>while(!stack.isEmpty()){</p>
<p>int numberOfSibling=stack.size();</p>
<p>// loop in all element in this layer till none is left</p>
<p>while(numberOfSibling-- &gt;0){</p>
<p>root = stack.pop();</p>
<p>// add current element&#39;s children</p>
<p>if(root.left!=null) stack.push(root.left);</p>
<p>if(root.right!=null) stack.push(root.right);</p>
<p>}</p>
<p>height++;</p>
<p>}</p>
<p>return height;</p>
<p>}</p>
<h2 id="InvertTree"><a href="#InvertTree" class="headerlink" title="InvertTree"></a>InvertTree</h2><p>package algo;</p>
<p>public class TreeInvertBST {</p>
<p>public static void main(String[] args) {</p>
<p>System.out.printf(&quot;===start===&quot;);</p>
<p>TreeNode root = invertTree(TreeNode.buildBSTTree());</p>
<p>System.out.printf(&quot;invert tree: &quot;+ root);</p>
<p>}</p>
<p>static TreeNode invertTree(TreeNode root){</p>
<p>if(root==null) return null;</p>
<p><strong>TreeNode tmpLeft = root.left;</strong></p>
<p><strong>root.left=invertTree(root.right);</strong></p>
<p><strong>root.right=invertTree(tmpLeft);</strong></p>
<p>return root;</p>
<p>}</p>
<p>}</p>
<h3 id="Number-of-islands-underline"><a href="#Number-of-islands-underline" class="headerlink" title="[Number of islands]{.underline}"></a><strong>[Number of islands]{.underline}</strong></h3><p>static int numberOfIslands(char[][] grid){</p>
<p>int number = 0;</p>
<p>if(grid==null || grid.length &lt;0 || grid[0].length&lt;0 ) {</p>
<p>return 0;</p>
<p>}</p>
<p>for (int i = 0; i &lt; grid.length; i++) {</p>
<p>for (int j = 0; j &lt;grid[i].length ; j++) {</p>
<p>if(grid[i][j]==&#39;1&#39;) {</p>
<p>// DFS to clear adjacent &quot;1&quot; to avoid dup counting</p>
<p>DFS(grid, i, j);</p>
<p>++number;</p>
<p>}</p>
<p>}</p>
<p>}</p>
<p>return number;</p>
<p>}</p>
<p>// the main purpose of calling DFS is to set “0” for all adjacent “1”<br>cells. As they all together to form one island</p>
<p>static void DFS(char[][] grid, int x, int y){</p>
<p>//edge case</p>
<p>if(grid==null || x&lt;0 || x &gt;= grid.length || y&lt;0 ||<br>y&gt;=grid[0].length <strong>|| grid[x][y]==&#39;0&#39;) { //[!!!!] should<br>&gt;= length, not &quot;&gt;&quot;</strong></p>
<p>// if(grid==null || x&lt;0 || x &gt; grid.length || y&lt;0 ||<br>y&gt;grid[0].length || grid[x][y]==0) {</p>
<p>// return if cursor node is NOT 1</p>
<p>return;</p>
<p>}</p>
<p>// means current cursor node is &quot;1&quot;</p>
<p>grid[x][y]=&#39;0&#39;; // mark this cell as visited</p>
<p>// check all adjacent cells</p>
<p>DFS(grid, x-1, y);</p>
<p>DFS(grid, x+1, y);</p>
<p>DFS(grid, x, y-1);</p>
<p>DFS(grid, x, y+1);</p>
<p>}</p>
<p>---------</p>
<p><strong>Is a same tree:</strong></p>
<p>static boolean isSameTree(TreeNode tree1, TreeNode tree2) {</p>
<p>// check base case, null checking</p>
<p>if(tree1==null || tree2 ==null){</p>
<p>return tree1 == tree2; // true when both null, false when only one is<br>null</p>
<p>}</p>
<p>/* same tress should be :</p>
<p>1. node data is same</p>
<p>2. left sub tree is same</p>
<p>4. right sub tree is same</p>
<p>*/</p>
<p>return tree1.val==tree2.val &amp;&amp; isSameTree(tree1.left,tree2.left) &amp;&amp;<br>isSameTree(tree1.right,tree2.right);</p>
<p>}</p>
<p><strong>Search BST</strong></p>
<p>public static TreeNode searchBST(TreeNode root, int val) {</p>
<p>if(root==null){</p>
<p>return null;</p>
<p>}</p>
<p>if(root.val==val){</p>
<p>return root;</p>
<p>}else if(val &gt; root.val){</p>
<p>return searchBST(root.right, val);</p>
<p>} else {</p>
<p>return searchBST(root.left,val);</p>
<p>}</p>
<p>}</p>
<p>public static TreeNode searchBST_Iterative(TreeNode root, int val) {</p>
<p>// recursive approach means recursively assgin/update variables</p>
<p>while(root != null &amp;&amp; root.val != val){</p>
<p>root = val&lt;root.val? root.left:root.right;</p>
<p>}</p>
<p>return root;</p>
<p>}</p>
<p>}</p>
<p><strong>Tree Traverse:</strong></p>
<p>static public List&lt;Integer&gt; <strong>inorderTraversal_better</strong>(TreeNode<br>root) {</p>
<p>List&lt;Integer&gt; listRtn = new ArrayList&lt;&gt;();</p>
<p>// for inorder trave iteratively we&#39;ll push/pop stacks</p>
<p>Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;();</p>
<p>// to determine when to push stack</p>
<p>// for inorder traverse, to push left first, then pop root, then last<br>right</p>
<p>while(root!=null || !stack.empty()) {</p>
<p>while(root!=null){</p>
<p>stack.push(root);</p>
<p>// keep on assign left to root for in order traverse</p>
<p>root=root.left;</p>
<p>}</p>
<p>root = stack.pop(); // pop up value of root</p>
<p>listRtn.add(root.val);</p>
<p>root=root.right;</p>
<p>}</p>
<p>return listRtn;</p>
<p>}</p>
<p>/*</p>
<p>This one is more intuitive</p>
<p>*/</p>
<p>static public List&lt;Integer&gt; <strong>preorderTraversal_better</strong>(TreeNode<br>root) {</p>
<p>List&lt;Integer&gt; listRtn = new ArrayList&lt;&gt;();</p>
<p>Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;();</p>
<p>stack.push(root);</p>
<p>while (!stack.empty()) {</p>
<p>root = stack.pop(); // pop up value of root</p>
<p>if (root != null) {</p>
<p>listRtn.add(root.val);</p>
<p>stack.push(root.right);</p>
<p>stack.push(root.left);</p>
<p>}</p>
<p>}</p>
<p>return listRtn;</p>
<p>}</p>
<p>static List&lt;Integer&gt; <strong>postOrderTraversal_stack_better</strong>(TreeNode<br>node) {</p>
<p>List&lt;Integer&gt; list = new ArrayList&lt;&gt;();</p>
<p>if(node==null) {</p>
<p>return list;</p>
<p>}</p>
<p>Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;();</p>
<p>stack.push(node);</p>
<p>while(!stack.isEmpty()){</p>
<p>node= stack.pop();</p>
<p>list.add(0, node.val); //[!!!!!!!!!!] here is key logic, add item at<br>postion &quot;0&quot; means at the begining</p>
<p>if(node.left!=null) stack.push(node.left);</p>
<p>if(node.right!=null) stack.push(node.right);</p>
<p>}</p>
<p>return list;</p>
<p>}</p>
<p>binaryTreeIsBST</p>
<p>/*</p>
<p>The key logic are:</p>
<p>1. assign two boundaries (lower , upper) for each node,</p>
<p>2. update upper to current node for its left child and lower for its<br>right child</p>
<p>3. recursively check each node</p>
<p>*/</p>
<p>static boolean binaryTreeIsBST(TreeNode node, int lower, int upper){</p>
<p>// for recursive, base case</p>
<p>// Number 1: base case is null return true</p>
<p>if(node==null) return true;</p>
<p>// Number 2: check data</p>
<p>if(node.val &lt; lower || node.val&gt;upper) {</p>
<p>System.out.printf(&quot;%s failed in BST check [%d,%d]: &quot;, node,<br>lower,upper);</p>
<p>return false;</p>
<p>}</p>
<p>// for left child node, it&#39;s value should between current&#39;s node&#39;s
lower boundary and current node&#39;s value</p>
<p>// for right child node, it&#39;s value should between current node&#39;s
value and current&#39;s node&#39;s upper boundary</p>
<p>return binaryTreeIsBST(node.left,lower,node.val) &amp;&amp;<br>binaryTreeIsBST(node.right,node.val, upper);</p>
<p>}</p>
<p><strong>Iteratively check binary tree is BST</strong>: (use inOrder search , only<br>replace list.add with checking pre)</p>
<p>public boolean isValidBST(TreeNode root) {</p>
<p>if (root == null) return true;</p>
<p>Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;();</p>
<p>TreeNode pre = null;</p>
<p>while (root != null || !stack.isEmpty()) {</p>
<p>while (root != null) {</p>
<p>stack.push(root);</p>
<p>root = root.left;</p>
<p>}</p>
<p>root = stack.pop();</p>
<p><strong>if(pre != null &amp;&amp; root.val &lt;= pre.val) return false;</strong></p>
<p><strong>pre = root;</strong></p>
<p>root = root.right;</p>
<p>}</p>
<p>return true;</p>
<p>}</p>
<p>======</p>
<p><strong>Kth smallest element</strong></p>
<p>public int kthSmallest(TreeNode root, int k) {</p>
<p>Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;();</p>
<p>while(root != null || !stack.isEmpty()) {</p>
<p>while(root != null) {</p>
<p>stack.push(root);</p>
<p>root = root.left;</p>
<p>}</p>
<p>root = stack.pop();</p>
<p><strong>if(--k == 0) break;</strong></p>
<p>root = root.right;</p>
<p>}</p>
<p>return root.val;</p>
<p>}</p>
<p>contrapositive</p>
<p>contradiction</p>
<p>cases</p>
<p>induction</p>
<p>Interview tips:</p>
<ul>
<li><p>Do not silent, ask” can I think for a second “</p>
</li>
<li><p>Think out loud</p>
</li>
<li><p>Use examples</p>
</li>
<li><p>Ask “ does that sound a good strategy” rather than write code right</p>
<blockquote>
<p>away</p>
</blockquote>
</li>
<li><p>Better naming variable. For dynamic programing. If you use memoized</p>
<blockquote>
<p>solution, better to name array as “// memorized solitoon memo[]</p>
</blockquote>
</li>
</ul>
<p>编辑距离问题就是给我们两个字符串 s1 和 s2，只能用三种操作，让我们把 s1<br>变成 s2，求最少的操作数。需要明确的是，不管是把 s1 变成 s2<br>还是反过来，结果都是一样的，所以后文就以 s1 变成 s2 举例。</p>
<p>前文「」说过，解决两个字符串的动态规划问题，一般都是用两个指针 i,j<br>分别指向两个字符串的最后，然后一步步往前走，缩小问题的规模。</p>
<p>一、动态规划解法</p>
<p>动态规划的核心设计思想是数学归纳法</p>
<p>总结一下动态规划的设计流程：</p>
<p>首先明确 dp<br>数组所存数据的含义。这步很重要，如果不得当或者不够清晰，会阻碍之后的步骤。</p>
<p>然后根据 dp 数组的定义，运用数学归纳法的思想，假设 $dp[0...i-1]$<br>都已知，想办法求出 $dp[i]$，一旦这一步完成，整个题目基本就解决了。</p>
<p>但如果无法完成这一步，很可能就是 dp 数组的定义不够恰当，需要重新定义 dp<br>数组的含义；或者可能是 dp<br>数组存储的信息还不够，不足以推出下一步的答案，需要把 dp<br>数组扩大成二维数组甚至三维数组。</p>
<p>最后想一想问题的 base case 是什么，以此来初始化 dp<br>数组，以保证算法正确运行。</p>
<p>最长递增子序列（Longest Increasing Subsequence，简写<br>LIS）是比较经典的一个问题，比较容易想到的是动态规划解法，时间复杂度<br>O(N^2)，</p>
<p>我们的定义是这样的：dp[i] 表示以 nums[i]<br>这个数结尾的最长递增子序列的长度。</p>
<p>根据刚才我们对 dp 数组的定义，现在想求 dp[5] 的值，也就是想求以<br>nums[5] 为结尾的最长递增子序列。</p>
<p>nums[5] = 3，既然是递增子序列，我们只要找到前面那些结尾比 3<br>小的子序列，然后把 3<br>接到最后，就可以形成一个新的递增子序列，而且这个新的子序列长度加一。</p>
<p>当然，可能形成很多种新的子序列，但是我们只要最长的，把最长子序列的长度作为<br>dp[5] 的值即可。</p>
<p>还有一个细节问题，dp 数组应该全部初始化为<br>1，因为子序列最少也要包含自己，所以长度最小为<br>1。下面我们看一下完整代码：</p>
<p>public int <strong>[lengthOfLIS]{.underline}</strong>(int[] nums) {</p>
<p>int[] dp = new int[nums.length];</p>
<p>// dp 数组全都初始化为 1</p>
<p>Arrays.fill(dp, 1);</p>
<p>for (int i = 0; i &lt; nums.length; i++) {</p>
<p>for (int j = 0; j &lt; i; j++) {</p>
<p>if (nums[i] &gt; nums[j])</p>
<p>dp[i] = Math.max(dp[i], dp[j] + 1);</p>
<p>}</p>
<p>}</p>
<p>int res = 0;</p>
<p>for (int i = 0; i &lt; dp.length; i++) {</p>
<p>res = Math.max(res, dp[i]);</p>
<p>}</p>
<p>return res;</p>
<p>}</p>
<p>public int lengthOfLIS(int[] nums) {</p>
<p>int[] top = new int[nums.length];</p>
<p>// 牌堆数初始化为 0</p>
<p>int piles = 0;</p>
<p>for (int i = 0; i &lt; nums.length; i++) {</p>
<p>// 要处理的扑克牌</p>
<p>int poker = nums[i];</p>
<p>/***** 搜索左侧边界的二分查找 *****/</p>
<p>int left = 0, right = piles;</p>
<p>while (left &lt; right) {</p>
<p>int mid = (left + right) / 2;</p>
<p>if (top[mid] &gt; poker) {</p>
<p>right = mid;</p>
<p>} else if (top[mid] &lt; poker) {</p>
<p>left = mid + 1;</p>
<p>} else {</p>
<p>right = mid;</p>
<p>}</p>
<p>}</p>
<p>/*********************************/</p>
<p>// 没找到合适的牌堆，新建一堆</p>
<p>if (left == piles) piles++;</p>
<p>// 把这张牌放到牌堆顶</p>
<p>top[left] = poker;</p>
<p>}</p>
<p>// 牌堆数就是 LIS 长度</p>
<p>return piles;</p>
<p>}</p>
<p>至此，二分查找的解法也讲解完毕。</p>
<p>这个解法确实很难想到。首先涉及数学证明，谁能想到按照这些规则执行，就能得到最长递增子序列呢？其次还有二分查找的运用，要是对二分查找的细节不清楚，给了思路也很难写对</p>
<p>/* Dynamic Programming Java implementation of LIS problem */</p>
<p>class LIS</p>
<p>{</p>
<p>/* lis() returns the length of the longest increasing</p>
<p>subsequence in arr[] of size n */</p>
<p>static int lis(int arr[],int n)</p>
<p>{</p>
<p>int lis[] = new int[n];</p>
<p>int i,j,max = 0;</p>
<p>/* Initialize LIS values for all indexes */</p>
<p>for ( i = 0; i &lt; n; i++ )</p>
<p>lis[i] = 1;</p>
<p>/* Compute optimized LIS values in bottom up manner */</p>
<p>for ( i = 1; i &lt; n; i++ )</p>
<p>for ( j = 0; j &lt; i; j++ )</p>
<p>if ( arr[i] &gt; arr[j] &amp;&amp; lis[i] &lt; lis[j] + 1)</p>
<p>lis[i] = lis[j] + 1;</p>
<p>/* Pick maximum of all LIS values */</p>
<p>for ( i = 0; i &lt; n; i++ )</p>
<p>if ( max &lt; lis[i] )</p>
<p>max = lis[i];</p>
<p>return max;</p>
<p>}</p>
<p>public static void main(String args[])</p>
<p>{</p>
<p>int arr[] = { 10, 22, 9, 33, 21, 50, 41, 60 };</p>
<p>int n = arr.length;</p>
<p>System.out.println(&quot;Length of lis is &quot; + lis( arr, n ) + &quot;\n&quot; );</p>
<p>}</p>
<p>}</p>
<p>/*This code is contributed by Raja</p>
<p>-----</p>
<p>Find number of days between two given dates</p>
<p>Given two dates, find total number of days between them. The count of<br>days must be calculated in O(1) time and O(1) auxiliary space.</p>
<p>Examples:</p>
<p>Input: dt1 = {10, 2, 2014}</p>
<p>dt2 = {10, 3, 2015}</p>
<p>Output: 393</p>
<p>dt1 represents &quot;10-Feb-2014&quot; and dt2 represents &quot;10-Mar-2015&quot;</p>
<p>The difference is 365 + 28</p>
<p>Input: dt1 = {10, 2, 2000}</p>
<p>dt2 = {10, 3, 2000}</p>
<p>Output: 29</p>
<p>Note that 2000 is a leap year</p>
<p>Input: dt1 = {10, 2, 2000}</p>
<p>dt2 = {10, 2, 2000}</p>
<p>Output: 0</p>
<p>Both dates are same</p>
<p>Input: dt1 = {1, 2, 2000};</p>
<p>dt2 = {1, 2, 2004};</p>
<p>Output: 1461</p>
<p>Number of days is 365*4 + 1</p>
<p>One Naive Solution is to start from dt1 and keep counting days till dt2<br>is reached. This solution requires more than O(1) time.</p>
<p>A Better and Simple solution is to count total number of days before dt1<br>from i.e., total days from 00/00/0000 to dt1, then count total number of<br>days before dt2. Finally return the difference between two counts.</p>
<p>Let the given two dates be &quot;1-Feb-2000&quot; and &quot;1-Feb-2004&quot;</p>
<p>dt1 = {1, 2, 2000};</p>
<p>dt2 = {1, 2, 2004};</p>
<p>Count number of days before dt1. Let this count be n1.</p>
<p>Every leap year adds one extra day (29 Feb) to total days.</p>
<p>n1 = 2000*365 + 31 + 1 + Number of leap years</p>
<p>Count of leap years for a date &#39;d/m/y&#39; can be calculated</p>
<p>using following formula:</p>
<p>Number leap years</p>
<p>= y/4 - y/100 + y/400 if m &gt; 2</p>
<p>= (y-1)/4 - (y-1)/100 + (y-1)/400 if m &lt;= 2</p>
<p>All above divisions must be done using integer arithmetic</p>
<p>so that the remainder is ignored.</p>
<p>For 01/01/2000, leap year count is 1999/4 - 1999/100</p>
<p>+ 1999/400 which is 499 - 19 + 4 = 484</p>
<p>Therefore n1 is 2000*365 + 31 + 1 + 484</p>
<p>Similarly, count number of days before dt2. Let this</p>
<p>count be n2.</p>
<p>Finally return n2-n1</p>
<hr>
<p>// Java program two find number of</p>
<p>// days between two given dates</p>
<p>class GFG</p>
<p>{</p>
<p>// A date has day &#39;d&#39;, month &#39;m&#39; and year &#39;y&#39;</p>
<p>static class Date</p>
<p>{</p>
<p>int d, m, y;</p>
<p>public Date(int d, int m, int y)</p>
<p>{</p>
<p>this.d = d;</p>
<p>this.m = m;</p>
<p>this.y = y;</p>
<p>}</p>
<p>};</p>
<p>// To store number of days in</p>
<p>// all months from January to Dec.</p>
<p>static int monthDays[] = {31, 28, 31, 30, 31, 30,</p>
<p>31, 31, 30, 31, 30, 31};</p>
<p>// This function counts number of</p>
<p>// leap years before the given date</p>
<p>static int countLeapYears(Date d)</p>
<p>{</p>
<p>int years = d.y;</p>
<p>// Check if the current year needs to be considered</p>
<p>// for the count of leap years or not</p>
<p>if (d.m &lt;= 2)</p>
<p>{</p>
<p>years--;</p>
<p>}</p>
<p>// An year is a leap year if it is a multiple of 4,</p>
<p>// multiple of 400 and not a multiple of 100.</p>
<p>return years / 4 - years / 100 + years / 400;</p>
<p>}</p>
<p>// This function returns number</p>
<p>// of days between two given dates</p>
<p>static int getDifference(Date dt1, Date dt2)</p>
<p>{</p>
<p>// COUNT TOTAL NUMBER OF DAYS BEFORE FIRST DATE &#39;dt1&#39;</p>
<p>// initialize count using years and day</p>
<p>int n1 = dt1.y * 365 + dt1.d;</p>
<p>// Add days for months in given date</p>
<p>for (int i = 0; i &lt; dt1.m - 1; i++)</p>
<p>{</p>
<p>n1 += monthDays[i];</p>
<p>}</p>
<p>// Since every leap year is of 366 days,</p>
<p>// Add a day for every leap year</p>
<p>n1 += countLeapYears(dt1);</p>
<p>// SIMILARLY, COUNT TOTAL NUMBER OF DAYS BEFORE &#39;dt2&#39;</p>
<p>int n2 = dt2.y * 365 + dt2.d;</p>
<p>for (int i = 0; i &lt; dt2.m - 1; i++)</p>
<p>{</p>
<p>n2 += monthDays[i];</p>
<p>}</p>
<p>n2 += countLeapYears(dt2);</p>
<p>// return difference between two counts</p>
<p>return (n2 - n1);</p>
<p>}</p>
<p>// Driver code</p>
<p>public static void main(String[] args)</p>
<p>{</p>
<p>Date dt1 = new Date(1, 2, 2000);</p>
<p>Date dt2 = new Date(1, 2, 2004);</p>
<p>System.out.println(&quot;Difference between two dates is &quot; +</p>
<p>getDifference(dt1, dt2));</p>
<p>}</p>
<p>}</p>
<p>Last Edit: 6 hours ago</p>
<p>karansingh1559</p>
<p>karansingh1559</p>
<p>179</p>
<p>I am trying to compile a list of DP questions commonly asked in<br>interviews. This will help me and others trying to get better at DP. The<br>list will be sorted by difficulty. If you&#39;ve come across DP questions,<br>do mention them in the comments.</p>
<p>EASY:</p>
<p>121. Best time to buy and sell stock</p>
<p>198. House Robber</p>
<p>256. Paint House</p>
<p>MEDIUM:</p>
<p>63. Unique Paths II</p>
<p>64. Minimum Path Sum</p>
<p>91. Decode Ways</p>
<p>139. Word Break</p>
<p>221. Maximal Square</p>
<p>300. Longest Increasing Subsequence</p>
<p>322. Coin Change</p>
<p>464. Can I Win</p>
<p>474. Ones and Zeroes</p>
<p>516. Longest Palindromic Subsequence</p>
<p>698. Partition to K Equal Sum Subsets</p>
<p>787. Cheapest Flights Within K Stops</p>
<p>1027. Longest Arithmetic Sequence</p>
<p>1049. Last Stone Weight II</p>
<p>1105. Filling Bookcase Shelves</p>
<p>1143. Longest Common Subsequence</p>
<p>1155. Dice Roll Sum</p>
<p>HARD:</p>
<p>32. Longest Valid Parantheses</p>
<p>44. Wildcard Matching</p>
<p>72. Edit Distance</p>
<p>123. Best Time to Buy and Sell Stock III</p>
<p>312. Burst Balloons</p>
<p>1000. Minimum Cost to Merge Stones</p>
<p>1335. Minimum Difficulty of a Job Schedule</p>
<p>dynamic programming</p>
<p><strong>Minimum (Maximum) Path to Reach a Target</strong></p>
<p><strong>Generate problem statement for this pattern</strong></p>
<p>Statement</p>
<p>Given a target find minimum (maximum) cost / path / sum to reach the<br>target.</p>
<p>Approach</p>
<p>Choose minimum (maximum) path among all possible paths before the<br>current state, then add value for the current state.</p>
<p>routes[i] = min(routes[i-1], routes[i-2], ... , routes[i-k]) +<br>cost[i]</p>
<p>Generate optimal solutions for all values in the target and return the<br>value for the target.</p>
<p>for (int i = 1; i &lt;= target; ++i) {</p>
<p>for (int j = 0; j &lt; ways.size(); ++j) {</p>
<p>if (ways[j] &lt;= i) {</p>
<p>dp[i] = min(dp[i], dp[i - ways[j]]) + cost / path / sum;</p>
<p>}</p>
<p>}</p>
<p>}</p>
<p>return dp[target]</p>
<p>Similar Problems</p>
<p>746. <strong>[Min Cost Climbing Stairs Easy]{.underline}</strong></p>
<p>for (int i = 2; i &lt;= n; ++i) {</p>
<p>dp[i] = min(dp[i-1], dp[i-2]) + (i == n ? 0 : cost[i]);</p>
<p>}</p>
<p>return dp[n]</p>
<p>64. Minimum Path Sum Medium</p>
<p>for (int i = 1; i &lt; n; ++i) {</p>
<p>for (int j = 1; j &lt; m; ++j) {</p>
<p>grid[i][j] = min(grid[i-1][j], grid[i][j-1]) +<br>grid[i][j];</p>
<p>}</p>
<p>}</p>
<p>return grid[n-1][m-1]</p>
<p>322. Coin Change Medium</p>
<p>for (int j = 1; j &lt;= amount; ++j) {</p>
<p>for (int i = 0; i &lt; coins.size(); ++i) {</p>
<p>if (coins[i] &lt;= j) {</p>
<p>dp[j] = min(dp[j], dp[j - coins[i]] + 1);</p>
<p>}</p>
<p>}</p>
<p>}</p>
<h1 id="Tree"><a href="#Tree" class="headerlink" title="Tree"></a>Tree</h1><h2 id="Find-minimum-path"><a href="#Find-minimum-path" class="headerlink" title="Find minimum path"></a>Find minimum path</h2><p>class Solution {</p>
<p>public int minDepth(TreeNode root) {</p>
<p>if(root == null) return 0; // base case</p>
<p>int left = minDepth(root.left); // get depth of left</p>
<p>int right = minDepth(root.right); // get depth of right</p>
<p>if(root.left == null) return right + 1; // leaf nodes are in right<br>subtree</p>
<p>if(root.right == null) return left + 1; // leaf nodes are in left<br>subtree</p>
<p>// if left/right subtrees both contains leaf nodes</p>
<p>return Math.min(left, right) + 1;</p>
<p>}</p>
<p>}</p>
<p>Get min depth in Iterative approach</p>
<p>public int minDepth(TreeNode root) {</p>
<p>if(root == null)</p>
<p>return 0;</p>
<p>Queue&lt;TreeNode&gt; que = new LinkedList();</p>
<p>int level =1;</p>
<p>que.add(root);</p>
<p>while(!que.isEmpty()){</p>
<p>int size = que.size();</p>
<p>while(size&gt;0){</p>
<p>TreeNode node =que.poll();</p>
<p>if(node.left == null &amp;&amp; node.right ==null)</p>
<p>return level;</p>
<p>if(node.left != null)</p>
<p>que.add(node.left);</p>
<p>if(node.right != null)</p>
<p>que.add(node.right);</p>
<p>size--;</p>
<p>}</p>
<p>level++;</p>
<p>}</p>
<p>return level;</p>
<p>}</p>
<p>=================</p>
<p>two solutions with explanation: DFS &amp; BFS:</p>
<p>/** Solution 1: DFS</p>
<p>* Key point:</p>
<p>* if a node only has one child -&gt; MUST return the depth of the side<br>with child, i.e. MAX(left, right) + 1</p>
<p>* if a node has two children on both side -&gt; return min depth of two<br>sides, i.e. MIN(left, right) + 1</p>
<p>* */</p>
<p>public int minDepth(TreeNode root) {</p>
<p>if (root == null) {</p>
<p>return 0;</p>
<p>}</p>
<p>int left = minDepth(root.left);</p>
<p>int right = minDepth(root.right);</p>
<p>if (left == 0 || right == 0) {</p>
<p>return Math.max(left, right) + 1;</p>
<p>}</p>
<p>else {</p>
<p>return Math.min(left, right) + 1;</p>
<p>}</p>
<p>}</p>
<p>/** Solution 2: BFS level order traversal */</p>
<p>public int minDepth2(TreeNode root) {</p>
<p>if (root == null) {</p>
<p>return 0;</p>
<p>}</p>
<p>Queue&lt;TreeNode&gt; queue = new LinkedList&lt;&gt;();</p>
<p>queue.offer(root);</p>
<p>int level = 1;</p>
<p>while (!queue.isEmpty()) {</p>
<p>int size = queue.size();</p>
<p>for (int i = 0; i &lt; size; i++) {</p>
<p>TreeNode curNode = queue.poll();</p>
<p>if (curNode.left == null &amp;&amp; curNode.right == null) {</p>
<p>return level;</p>
<p>}</p>
<p>if (curNode.left != null) {</p>
<p>queue.offer(curNode.left);</p>
<p>}</p>
<p>if (curNode.right != null) {</p>
<p>queue.offer(curNode.right);</p>
<p>}</p>
<p>}</p>
<p>level++;</p>
<p>}</p>
<p>return level;</p>
<p>}</p>
<p>Preorder Traversal</p>
<p>In preorder traversal, we traverse the root first, then the left and<br>right subtrees.</p>
<p>We can simply implement preorder traversal using recursion:</p>
<p>public void traversePreOrder(Node node) {</p>
<p>if (node != null) {</p>
<p>visit(node.value);</p>
<p>traversePreOrder(node.left);</p>
<p>traversePreOrder(node.right);</p>
<p>}</p>
<p>}</p>
<p>We can also implement preorder traversal without recursion.</p>
<p>To implement an iterative preorder traversal, we&#39;ll need a Stack, and<br>we&#39;ll go through these steps:</p>
<p>Push root in our stack</p>
<p>While stack is not empty</p>
<p>Pop current node</p>
<p>Visit current node</p>
<p>Push right child, then left child to stack</p>
<p>public void traversePreOrderWithoutRecursion() {</p>
<p>Stack&lt;Node&gt; stack = new Stack&lt;Node&gt;();</p>
<p>Node current = root;</p>
<p>stack.push(root);</p>
<p>while(!stack.isEmpty()) {</p>
<p>current = stack.pop();</p>
<p>visit(current.value);</p>
<p>if(current.right != null) {</p>
<p>stack.push(current.right);</p>
<p>}</p>
<p>if(current.left != null) {</p>
<p>stack.push(current.left);</p>
<p>}</p>
<p>}</p>
<p>}</p>
<p>Convert Sorted List to Binary Search Tree</p>
<p>Medium</p>
<p>1503</p>
<p>79</p>
<p>Add to List</p>
<p>Share</p>
<p>Given a singly linked list where elements are sorted in ascending order,<br>convert it to a height balanced BST.</p>
<p>For this problem, a height-balanced binary tree is defined as a binary<br>tree in which the depth of the two subtrees of <em>every</em> node never differ<br>by more than 1.</p>
<p>Example:</p>
<p>Given the sorted linked list: [-10,-3,0,5,9],</p>
<p>One possible answer is: [0,-3,9,-10,null,5], which represents the<br>following height balanced BST:</p>
<p>0</p>
<p>/ \</p>
<p>-3 9</p>
<p>/ /</p>
<p>-10 5</p>
<p><strong>breadth first search</strong></p>
<p>First of all, let&#39;s reuse the algorithm from above, adapted to the new<br>structure:</p>
<p>public static &lt;T&gt; Optional&lt;Node&lt;T&gt;&gt; search(T value, Node&lt;T&gt;<br>start) {</p>
<p>Queue&lt;Node&lt;T&gt;&gt; queue = new ArrayDeque&lt;&gt;();</p>
<p>queue.add(start);</p>
<p>Node&lt;T&gt; currentNode;</p>
<p>while (!queue.isEmpty()) {</p>
<p>currentNode = queue.remove();</p>
<p>if (currentNode.getValue().equals(value)) {</p>
<p>return Optional.of(currentNode);</p>
<p>} else {</p>
<p>queue.addAll(currentNode.getNeighbors());</p>
<p>}</p>
<p>}</p>
<p>return Optional.empty();</p>
<p>}</p>
<h1 id="Binary-search-underline"><a href="#Binary-search-underline" class="headerlink" title="[Binary search]{.underline} "></a>[Binary search]{.underline} </h1><p><strong>分析二分查找的一个技巧是：不要出现 else，而是把所有情况用 else if<br>写清楚，这样可以清楚地展现所有细节</strong>。</p>
<p>------</p>
<p>Sliding window</p>
<p>In any sliding window based problem we have two pointers. One <em>right</em><br>pointer whose job is to expand the current window and then we have the<br><em>left</em> pointer whose job is to contract a given window. At any point in<br>time only one of these pointers move and the other one remains fixed.</p>
<p>Smallest window contains sub string</p>
<p>public class Solution {</p>
<p>public String minWindow(String s, String t) {</p>
<p>if(s == null || s.length() &lt; t.length() || s.length() == 0){</p>
<p>return &quot;&quot;;</p>
<p>}</p>
<p>HashMap&lt;Character,Integer&gt; map = new HashMap&lt;Character,Integer&gt;();</p>
<p>for(char c : t.toCharArray()){</p>
<p>if(map.containsKey(c)){</p>
<p>map.put(c,map.get(c)+1);</p>
<p>}else{</p>
<p>map.put(c,1);</p>
<p>}</p>
<p>}</p>
<p>int left = 0;</p>
<p>int minLeft = 0;</p>
<p>int minLen = s.length()+1;</p>
<p>int count = 0;</p>
<p>for(int right = 0; right &lt; s.length(); right++){</p>
<p>if(map.containsKey(s.charAt(right))){</p>
<p>map.put(s.charAt(right),map.get(s.charAt(right))-1);</p>
<p>if(map.get(s.charAt(right)) &gt;= 0){</p>
<p>count ++;</p>
<p>}</p>
<p>while(count == t.length()){</p>
<p>if(right-left+1 &lt; minLen){</p>
<p>minLeft = left;</p>
<p>minLen = right-left+1;</p>
<p>}</p>
<p>if(map.containsKey(s.charAt(left))){</p>
<p>map.put(s.charAt(left),map.get(s.charAt(left))+1);</p>
<p>if(map.get(s.charAt(left)) &gt; 0){</p>
<p>count --;</p>
<p>}</p>
<p>}</p>
<p>left ++ ;</p>
<p>}</p>
<p>}</p>
<p>}</p>
<p>if(minLen&gt;s.length())</p>
<p>{</p>
<p>return &quot;&quot;;</p>
<p>}</p>
<p>return s.substring(minLeft,minLeft+minLen);</p>
<p>}</p>
<p>}</p>
<p>--</p>
<p>public static String minWindowOp(String s, String t) {</p>
<p>int [] map = new int[128];//map to track number of occurrence of<br>each character of sub string</p>
<p>for (char c : t.toCharArray()) {</p>
<p>map[c]++;</p>
<p>}</p>
<p>int start = 0, end = 0, minStart = 0, minLen = Integer.MAX_VALUE,<br>counter = t.length();</p>
<p>// counter is number of distinct chars in sub string</p>
<p>while (end &lt; s.length()) {</p>
<p>final char c1 = s.charAt(end);// walk through each char in source string</p>
<p>if (map[c1] &gt; 0) {</p>
<p>counter--; // if cached char number greater than 0, decrease counter</p>
<p>}</p>
<p>map[c1]--;//decrease cached char number, for chars not in substring,<br>it will be negative</p>
<p>end++; //move right pointer</p>
<p>while (counter == 0) { //counter is zero means all chars found</p>
<p>if (minLen &gt; end - start) { //to find and cache minimum sliding window<br>length and minimum start</p>
<p>minLen = end - start;</p>
<p>minStart = start;</p>
<p>}</p>
<p>final char c2 = s.charAt(start);</p>
<p>map[c2]++;// A is -2， B is 1</p>
<p>if (map[c2] &gt; 0) {</p>
<p>counter++; //if current char exist in cache, increase counter, otherwise<br>keep counter zero</p>
<p>}</p>
<p>start++;</p>
<p>}</p>
<p>}</p>
<p>return minLen == Integer.MAX_VALUE ? &quot;&quot; : s.substring(minStart,<br>minStart + minLen);</p>
<p>}</p>
<p>------</p>
<p>I agree with your code, but I prefer this code when count == t.length(),</p>
<p>class Solution {</p>
<p>public String minWindow(String s, String t) {</p>
<p>// corner case</p>
<p>if(s == null || t == null || s.length() == 0 || t.length() == 0<br>|| s.length() &lt; t.length()) return &quot;&quot;;</p>
<p>// construct model</p>
<p>int minLeft = 0;</p>
<p>int minRight = 0;</p>
<p>int min = s.length();</p>
<p>boolean flag = false;</p>
<p>Map&lt;Character, Integer&gt; map = new HashMap&lt;&gt;();</p>
<p>int count = t.length(); // the number of characters that I need to match</p>
<p>for(char c : t.toCharArray()) map.put(c, map.getOrDefault(c, 0) + 1);</p>
<p>// unfixed sliding window, 2 pointers</p>
<p>int i = 0;</p>
<p>int j = 0;</p>
<p>while(j &lt; s.length()){</p>
<p>char c = s.charAt(j);</p>
<p>if(map.containsKey(c)){</p>
<p>map.put(c, map.get(c) - 1);</p>
<p>if(map.get(c) &gt;= 0) count--; // if still unmatched characters, then<br>count--</p>
<p>}</p>
<p>// if found a susbtring</p>
<p>while(count == 0 &amp;&amp; i &lt;= j){</p>
<p>// update global min</p>
<p>flag = true;</p>
<p>int curLen = j + 1 - i;</p>
<p>if(curLen &lt;= min){</p>
<p>minLeft = i;</p>
<p>minRight = j;</p>
<p>min = curLen;</p>
<p>}</p>
<p>// shrink left pointer</p>
<p>char leftC = s.charAt(i);</p>
<p>if(map.containsKey(leftC)){</p>
<p>map.put(leftC, map.get(leftC) + 1);</p>
<p>if(map.get(leftC) &gt;= 1) count++;</p>
<p>}</p>
<p>i++;</p>
<p>}</p>
<p>j++;</p>
<p>}</p>
<p>return flag == true ? s.substring(minLeft, minRight + 1): &quot;&quot;;</p>
<p>}</p>
<p>}</p>
<p>First part: when the right pointer is getting incremented we are<br>decrementing the map count of char if it&#39;s part of &#39;t&#39; string. When<br>we see that the map count of that char after decrementing is<br>positive/zero means that the right ptr has found a useful char and hence<br>we increment the &#39;count&#39; variable (which is keeping track of the<br>number of useful chars)</p>
<p>Second part: when the left pointer is getting incremented we are<br>essentially making the window smaller and giving back the chars to the<br>map (i.e. incrementing the map count). If we find that for the<br>particular char the map count has now become positive means that we<br>actually gave back a useful char and hence the &#39;count&#39; is to be<br>decremented.</p>
<p>At this point then we again start increasing our window and see each<br>time if the count has become equal to the number of chars in &#39;t&#39;<br>string.</p>
<p>----</p>
<p>Generally, there are following steps:</p>
<ol>
<li><p>create a hashmap for each character in t and count their frequency</p>
<blockquote>
<p>in t as the value of hashmap.</p>
</blockquote>
</li>
<li><p>Find the first window in S that contains T. But how? there the</p>
<blockquote>
<p>author uses the count.</p>
</blockquote>
</li>
<li><p>Checking from the leftmost index of the window and to see if it</p>
<blockquote>
<p>belongs to t. The reason we do so is that we want to shrink the<br>size of the window.<br>3-1) If the character at leftmost index does not belong to t, we<br>can directly remove this leftmost value and update our window(its<br>minLeft and minLen value)<br>3-2) If the character indeed exists in t, we still remove it, but<br>in the next step, we will increase the right pointer and expect<br>the removed character. If find so, repeat step 3.</p>
</blockquote>
</li>
</ol>
<p>public String minWindow(String s, String t) {</p>
<p>HashMap&lt;Character, Integer&gt; map = new HashMap();</p>
<p>for(char c : t.toCharArray()){</p>
<p>if(map.containsKey(c)){</p>
<p>map.put(c, map.get(c)+1);</p>
<p>}</p>
<p>else{</p>
<p>map.put(c, 1);</p>
<p>}</p>
<p>}</p>
<p>int left = 0, minLeft=0, minLen =s.length()+1, count = 0;</p>
<p>for(int right = 0; right&lt;s.length(); right++){</p>
<p>char r = s.charAt(right);</p>
<p>if(map.containsKey(r)){//the goal of this part is to get the first<br>window that contains whole t</p>
<p>map.put(r, map.get(r)-1);</p>
<p>if(map.get(r)&gt;=0) count++;//identify if the first window is found by<br>counting frequency of the characters of t showing up in S</p>
<p>}</p>
<p>while(count == t.length()){//if the count is equal to the length of t,<br>then we find such window</p>
<p>if(right-left+1 &lt; minLen){//jsut update the minleft and minlen value</p>
<p>minLeft = left;</p>
<p>minLen = right-left+1;</p>
<p>}</p>
<p>char l = s.charAt(left);</p>
<p>if(map.containsKey(l)){//starting from the leftmost index of the window,<br>we want to check if s[left] is in t. If so, we will remove it from the<br>window, and increase 1 time on its counter in hashmap which means we<br>will expect the same character later by shifting right index. At the<br>same time, we need to reduce the size of the window due to the removal.</p>
<p>map.put(l, map.get(l)+1);</p>
<p>if(map.get(l)&gt;0) count--;</p>
<p>}</p>
<p>left++;//if it doesn&#39;t exist in t, it is not supposed to be in the<br>window, left++. If it does exist in t, the reason is stated as above.<br>left++.</p>
<p>}</p>
<p>}</p>
<p>return minLen==s.length()+1?&quot;&quot;:s.substring(minLeft, minLeft+minLen);</p>
<p>------------- best solution---</p>
<p>public static String minWindowBetter(String s, String t){</p>
<p>if(s==null||t==null|s.length()==0||t.length()==0){</p>
<p>return &quot;&quot;;</p>
<p>}</p>
<p>int left=0,right=0,count=0,min=Integer.MAX_VALUE;</p>
<p>int pool[] = new int[256];</p>
<p>String rtn=&quot;&quot;;</p>
<p>for(int i =0;i&lt;t.length();i++){</p>
<p>pool[t.charAt(i)]++;</p>
<p>}</p>
<p>while(right&lt;s.length()){</p>
<p>if(pool[s.charAt(right++)]--&gt;0){//[!]</p>
<p>// (a) if(pool[s.charAt(right++)]--&gt;=0), rather than<br>if(pool[right++]--&gt;=0)</p>
<p>// (b) this is &quot;&gt;0&quot;, but not &quot;&gt;=0&quot;</p>
<p>count++;</p>
<p>}</p>
<p>while(count==t.length()){</p>
<p>if((right-left)&lt;min){</p>
<p>min=right-left;</p>
<p>rtn=s.substring(left,right);</p>
<p>}</p>
<p>//shrink window</p>
<p>if(++pool[s.charAt(left++)]&gt;0){</p>
<p>count--;</p>
<p>}</p>
<p>}</p>
<p>}</p>
<p>return rtn;</p>
<p>}</p>
<p>while(right &lt; length of s){</p>
<blockquote>
<p>Deincrement characters frequence at right pointer in String s from<br>bank</p>
<p>Right -- (expand window)</p>
<p>If that character was inside of t, increase count</p>
<p>while(count equal to length of t - condition){</p>
<p>Check if right-left less than min, if so, update min and curr string</p>
<p>Increate characters frequences at left pointer in string, s from bank</p>
<p>Left++ (shift window)</p>
<p>If bank[character at left pointer]&gt;=0, then decrease count.</p>
</blockquote>
<p>}</p>
<p><strong>[knapsack 0/1 背包]{.underline}</strong></p>
<p>用子问题定义状态：即f[i][v]表示前i件物品恰放入一个容量为v的背包可以获得的最大价值。则其状态转移方程便是：</p>
<p>f[i][v]=max{f[i-1][v],f[i-1][v-c[i]]+w[i]}</p>
<p>这个方程非常重要，基本上所有跟背包相关的问题的方程都是由它衍生出来的。所以有必要将它详细解释一下：”将前i件物品放入容量为v的背包中”这个子问题，若只考虑第i件物品的策略（放或不放），那么就可以转化为一个只牵扯前i-1件物品的问题。如果不放第i件物品，那么问题就转化为”前i-1件物品放入容量为v的背包中”，价值为f[i-1][v]；如果放第i件物品，那么问题就转化为”前i-1件物品放入剩下的容量为v-c[i]的背包中”，此时能获得的最大价值就是f[i-1][v-c[i]]再加上通过放入第i件物品获得的价值w[i]。</p>
<p>private static int knapsack01(int[] weights, int[] value, int quota)<br>{</p>
<p>// we are using dynamic programming bottom up</p>
<p>// one tab to keep track of value, size is quota + 1</p>
<p>int[][] dp = new int[value.length+1][quota+1];</p>
<p>// as size is actual size + 1, so here is &quot;&lt;=&quot; , rather than &quot;&lt;&quot;</p>
<p>for(int i=0;i&lt;=value.length;i++){</p>
<p>for (int j =0;j&lt;=quota;j++){</p>
<p>//base value</p>
<p>if(i==0 || j==0){</p>
<p>// initilize first line and first column to &#39;0&#39;</p>
<p>dp[i][j] = 0;</p>
<p>continue;</p>
<p>}</p>
<p>// non zero</p>
<p>if(j&gt;=weights[i-1]){</p>
<p>// current weight not bigger than current quota</p>
<p>// so add it to our backtrack</p>
<p>// get the max one of (1) Not include , (2) include this node</p>
<p>dp[i][j]= Math.<em>max</em>(dp[i-1][j],
dp[i-1][j-weights[i-1]]+value[i-1]);</p>
<p>}else{</p>
<p>// required weight is less than provided, so skip this</p>
<p>dp[i][j] = dp[i-1][j]; //use value (j) of previous (i-1</p>
<p>}</p>
<p>}</p>
<p>}</p>
<p>return dp[value.length][quota];</p>
<p>}</p>
<p><strong>[KMP 算法]{.underline}</strong></p>
<p>KMP<br>算法永不回退txt的指针i，不走回头路（不会重复扫描txt），而是借助dp数组中储存的信息把pat移到正确的位置继续匹配，时间复杂度只需<br>O(N)，用空间换时间，所以我认为它是一种动态规划算法。</p>
<p>// 暴力匹配（伪码）</p>
<p>int search(String pat, String txt) {</p>
<p>int M = pat.length;</p>
<p>int N = txt.length;</p>
<p>for (int i = 0; i &lt; N - M; i++) {</p>
<p>int j;</p>
<p>for (j = 0; j &lt; M; j++) {</p>
<p>if (pat[j] != txt[i+j])</p>
<p>break;</p>
<p>}</p>
<p>// pat 全都匹配了</p>
<p>if (j == M) return i;</p>
<p>}</p>
<p>// txt 中不存在 pat 子串</p>
<p>return -1;</p>
<p>---</p>
<p>dynamic programming</p>
<p>public class KMP {</p>
<p>private int[][] dp;</p>
<p>private String pat;</p>
<p>public KMP(String pat) {</p>
<p>this.pat = pat;</p>
<p>// 通过 pat 构建 dp 数组</p>
<p>// 需要 O(M) 时间</p>
<p>}</p>
<p>public int search(String txt) {</p>
<p>// 借助 dp 数组去匹配 txt</p>
<p>// 需要 O(N) 时间</p>
<p>}</p>
<p>}</p>
<p>为了描述状态转移图，我们定义一个二维 dp 数组，它的含义如下：</p>
<p>dp[j][c] = next</p>
<p>0 &lt;= j &lt; M，代表当前的状态</p>
<p>0 &lt;= c &lt; 256，代表遇到的字符（ASCII 码）</p>
<p>0 &lt;= next &lt;= M，代表下一个状态</p>
<p>dp[4][&#39;A&#39;] = 3 表示：</p>
<p>当前是状态 4，如果遇到字符 A，</p>
<p>pat 应该转移到状态 3</p>
<p>dp[1][&#39;B&#39;] = 2 表示：</p>
<p>当前是状态 1，如果遇到字符 B，</p>
<p>pat 应该转移到状态 2</p>
<p>根据我们这个 dp 数组的定义和刚才状态转移的过程，我们可以先写出 KMP<br>算法的 search 函数代码：</p>
<p>public int search(String txt) {</p>
<p>int M = pat.length();</p>
<p>int N = txt.length();</p>
<p>// pat 的初始态为 0</p>
<p>int j = 0;</p>
<p>for (int i = 0; i &lt; N; i++) {</p>
<p>// 当前是状态 j，遇到字符 txt[i]，</p>
<p>// pat 应该转移到哪个状态？</p>
<p>j = dp[j][txt.charAt(i)];</p>
<p>// 如果达到终止态，返回匹配开头的索引</p>
<p>if (j == M) return i - M + 1;</p>
<p>}</p>
<p>// 没到达终止态，匹配失败</p>
<p>return -1;</p>
<p>}</p>
<p>for 0 &lt;= j &lt; M: # 状态</p>
<p>for 0 &lt;= c &lt; 256: # 字符</p>
<p>dp[j][c] = next</p>
<p>这个 next<br>状态应该怎么求呢？显然，如果遇到的字符c和pat[j]匹配的话，状态就应该向前推进一个，也就是说next<br>= j + 1，我们不妨称这种情况为状态推进：</p>
<p>如果遇到的字符c和pat[j]不匹配的话，状态就要回退（或者原地不动），我们不妨称这种情况为状态重启：</p>
<p>那么，如何得知在哪个状态重启呢？解答这个问题之前，我们再定义一个名字：影子状态（我编的名字），用变量X表示。所谓影子状态，就是和当前状态具有相同的前缀。比如下面这种情况：</p>
<p>当前状态j = 4，其影子状态为X = 2，它们都有相同的前缀<br>&quot;AB&quot;。因为状态X和状态j存在相同的前缀，所以当状态j准备进行状态重启的时候（遇到的字符c和pat[j]不匹配），可以通过X的状态转移图来获得最近的重启位置。</p>
<p>比如说刚才的情况，如果状态j遇到一个字符<br>&quot;A&quot;，应该转移到哪里呢？首先状态 4 只有遇到 &quot;C&quot; 才能推进状态，遇到<br>&quot;A&quot;<br>显然只能进行状态重启。状态j会把这个字符委托给状态X处理，也就是dp[j][&#39;A&#39;]<br>= dp[X][&#39;A&#39;]：</p>
<p>int X # 影子状态</p>
<p>for 0 &lt;= j &lt; M:</p>
<p>for 0 &lt;= c &lt; 256:</p>
<p>if c == pat[j]:</p>
<p># 状态推进</p>
<p>dp[j][c] = j + 1</p>
<p>else:</p>
<p># 状态重启</p>
<p># 委托 X 计算重启位置</p>
<p>dp[j][c] = dp[X][c]</p>
<p>---</p>
<p>影子状态X是如何得到的呢？下面先直接看完整代码吧。</p>
<p>public class KMP {</p>
<p>private int[][] dp;</p>
<p>private String pat;</p>
<p>public KMP(String pat) {</p>
<p>this.pat = pat;</p>
<p>int M = pat.length();</p>
<p>// dp[状态][字符] = 下个状态</p>
<p>dp = new int[M][256];</p>
<p>// base case</p>
<p>dp[0][pat.charAt(0)] = 1;</p>
<p>// 影子状态 X 初始为 0</p>
<p>int X = 0;</p>
<p>// 当前状态 j 从 1 开始</p>
<p>for (int j = 1; j &lt; M; j++) {</p>
<p>for (int c = 0; c &lt; 256; c++) {</p>
<p>if (pat.charAt(j) == c)</p>
<p>dp[j][c] = j + 1;</p>
<p>else</p>
<p>dp[j][c] = dp[X][c];</p>
<p>}</p>
<p>// 更新影子状态</p>
<p>X = dp[X][pat.charAt(j)];</p>
<p>}</p>
<p>}</p>
<p>public int search(String txt) {...}</p>
<p>}</p>
<p>先解释一下这一行代码：</p>
<p>// base case</p>
<p>dp[0][pat.charAt(0)] = 1;</p>
<p>这行代码是 base case，只有遇到 pat[0] 这个字符才能使状态从 0 转移到<br>1，遇到其它字符的话还是停留在状态 0（Java 默认初始化数组全为 0）。</p>
<p>影子状态X是先初始化为<br>0，然后随着j的前进而不断更新的。下面看看到底应该如何更新影子状态X：</p>
<p>int X = 0;</p>
<p>for (int j = 1; j &lt; M; j++) {</p>
<p>...</p>
<p>// 更新影子状态</p>
<p>// 当前是状态 X，遇到字符 pat[j]，</p>
<p>// pat 应该转移到哪个状态？</p>
<p>X = dp[X][pat.charAt(j)];</p>
<p>}</p>
<p>更新X其实和search函数中更新状态j的过程是非常相似的：</p>
<p>int j = 0;</p>
<p>for (int i = 0; i &lt; N; i++) {</p>
<p>// 当前是状态 j，遇到字符 txt[i]，</p>
<p>// pat 应该转移到哪个状态？</p>
<p>j = dp[j][txt.charAt(i)];</p>
<p>...</p>
<p>}</p>
<p>其中的原理非常微妙，注意代码中 for<br>循环的变量初始值，可以这样理解：后者是在txt中匹配pat，前者是在pat中匹配pat[1:]，状态X总是落后状态j一个状态，与j具有最长的相同前缀。所以我把X比喻为影子状态，似乎也有一点贴切。</p>
<p>另外，构建 dp 数组是根据 base casedp[0][..]向后推演。这就是我认为<br>KMP 算法就是一种动态规划算法的原因。</p>
<p>至此，KMP 算法就已经再无奥妙可言了！看下 KMP 算法的完整代码吧：</p>
<p>public class KMP {</p>
<p>private int[][] dp;</p>
<p>private String pat;</p>
<p>public KMP(String pat) {</p>
<p>this.pat = pat;</p>
<p>int M = pat.length();</p>
<p>// dp[状态][字符] = 下个状态</p>
<p>dp = new int[M][256];</p>
<p>// base case</p>
<p>dp[0][pat.charAt(0)] = 1;</p>
<p>// 影子状态 X 初始为 0</p>
<p>int X = 0;</p>
<p>// 构建状态转移图（稍改的更紧凑了）</p>
<p>for (int j = 1; j &lt; M; j++) {</p>
<p>for (int c = 0; c &lt; 256; c++) {</p>
<p>dp[j][c] = dp[X][c];</p>
<p>dp[j][pat.charAt(j)] = j + 1;</p>
<p>// 更新影子状态</p>
<p>X = dp[X][pat.charAt(j)];</p>
<p>}</p>
<p>}</p>
<p>public int search(String txt) {</p>
<p>int M = pat.length();</p>
<p>int N = txt.length();</p>
<p>// pat 的初始态为 0</p>
<p>int j = 0;</p>
<p>for (int i = 0; i &lt; N; i++) {</p>
<p>// 计算 pat 的下一个状态</p>
<p>j = dp[j][txt.charAt(i)];</p>
<p>// 到达终止态，返回结果</p>
<p>if (j == M) return i - M + 1;</p>
<p>}</p>
<p>// 没到达终止态，匹配失败</p>
<p>return -1;</p>
<p>}</p>
<p>}</p>
<p>经过之前的详细举例讲解，你应该可以理解这段代码的含义了，当然你也可以把<br>KMP 算法写成一个函数。核心代码也就是两个函数中 for<br>循环的部分，数一下有超过十行吗？</p>
<h3 id="labuladong-underline"><a href="#labuladong-underline" class="headerlink" title="[labuladong]{.underline}"></a><strong>[labuladong]{.underline}</strong></h3><p>你只要把住两点就行了：</p>
<p>1、遍历的过程中，所需的状态必须是已经计算出来的。</p>
<p>2、遍历的终点必须是存储结果的那个位置。</p>
<p>PS：但凡遇到需要递归的问题，最好都画出递归树，这对你分析算法的复杂度，寻找算法低效的原因都有巨大帮助</p>
<p>int fib(int n) {</p>
<p>if (n == 2 || n == 1)</p>
<p>return 1;</p>
<p>int prev = 1, curr = 1;</p>
<p>for (int i = 3; i &lt;= n; i++) {</p>
<p>int sum = prev + curr;</p>
<p>prev = curr;</p>
<p>curr = sum;</p>
<p>}</p>
<p>return curr;</p>
<p>}</p>
<p>首先，这个问题是动态规划问题，因为它具有「最优子结构」的。要符合「最优子结构」，子问题间必须互相独立。啥叫相互独立？你肯定不想看数学证明，我用一个直观的例子来讲解。</p>
<p>比如说，你的原问题是考出最高的总成绩，那么你的子问题就是要把语文考到最高，数学考到最高……<br>为了每门课考到最高，你要把每门课相应的选择题分数拿到最高，填空题分数拿到最高……<br>当然，最终就是你每门课都是满分，这就是最高的总成绩。</p>
<p>得到了正确的结果：最高的总成绩就是总分。因为这个过程符合最优子结构，”每门科目考到最高”这些子问题是互相独立，互不干扰的。</p>
<p>但是，如果加一个条件：你的语文成绩和数学成绩会互相制约，此消彼长。这样的话，显然你能考到的最高总成绩就达不到总分了，按刚才那个思路就会得到错误的结果。因为子问题并不独立，语文数学成绩无法同时最优，所以最优子结构被破坏。</p>
<p>PS：为啥 dp 数组初始化为 amount + 1 呢，因为凑成 amount<br>金额的硬币数最多只可能等于 amount（全用 1 元面值的硬币），所以初始化为<br>amount + 1 就相当于初始化为正无穷，便于后续取最小值</p>
<p>最优子结构并不是动态规划独有的一种性质，能求最值的问题大部分都具有这个性质；但反过来，最优子结构性质作为动态规划问题的必要条件，一定是让你求最值的，以后碰到那种恶心人的最值题，思路往动态规划想就对了，这就是套路。</p>
<p>动态规划不就是从最简单的 base case<br>往后推导吗，可以想象成一个链式反应，以小博大。但只有符合最优子结构的问题，才有发生这种链式反应的性质</p>
<p>----------</p>
<p>「状态」很明显，就是当前拥有的鸡蛋数K和需要测试的楼层数N。随着测试的进行，鸡蛋个数可能减少，楼层的搜索范围会减小，这就是状态的变化。</p>
<p>「选择」其实就是去选择哪层楼扔鸡蛋。回顾刚才的线性扫描和二分思路，二分查找每次选择到楼层区间的中间去扔鸡蛋，而线性扫描选择一层层向上测试。不同的选择会造成状态的转移。</p>
<p>现在明确了「状态」和「选择」，动态规划的基本思路就形成了：肯定是个二维的dp数组或者带有两个状态参数的dp函数来表示状态转移；外加一个<br>for 循环来遍历所有选择，择最优的选择更新结果 ：</p>
<p>SuperEggDrop</p>
<p>Drop eggs is a very classical problem.</p>
<p>Some people may come up with idea O(KN^2)</p>
<p>where dp[K][N] = 1 + max(dp[K - 1][i - 1],dp[K][N - i]) for<br>i in 1...N.</p>
<p>However this idea is very brute force, for the reason that you check all<br>possiblity.</p>
<p>So I consider this problem in a different way:</p>
<p>dp[M][K]means that, given K eggs and M moves,</p>
<p>what is the maximum number of floor that we can check.</p>
<p>The dp equation is:</p>
<p>dp[m][k] = dp[m - 1][k - 1] + dp[m - 1][k] + 1,</p>
<p>which means we take 1 move to a floor,</p>
<p>if egg breaks, then we can check dp[m - 1][k - 1] floors.</p>
<p>if egg doesn&#39;t breaks, then we can check dp[m - 1][k] floors.</p>
<p>dp[m][k] is similar to the number of combinations and it increase<br>exponentially to N</p>
<p>public int superEggDrop(int K, int N) {</p>
<p>int[][] floors = new int[N + 1][K + 1];</p>
<p>int move = 0;</p>
<p>while (floors[move][K] &lt; N) {</p>
<p>++m;</p>
<p>for (int egg = 1; egg &lt;= K; ++egg)</p>
<p>floors[move][egg] = floors[move - 1][egg] + 1 + floors[move -<br>1][egg - 1];</p>
<p>}</p>
<p>return m;</p>
<p>}</p>
<p>The dp equation is:</p>
<p>dp[m][k] = dp[m - 1][k - 1] + dp[m - 1][k] + 1,</p>
<p>assume, dp[m-1][k-1] = n0, dp[m-1][k] = n1</p>
<p>the first floor to check is n0+1.</p>
<p>if egg breaks, F must be in [1,n0] floors, we can use m-1 moves and<br>k-1 eggs to find out F is which one.</p>
<p>if egg doesn&#39;t breaks and F is in [n0+2, n0+n1+1] floors, we can use<br>m-1 moves and k eggs to find out F is which one.</p>
<p>So, with m moves and k eggs, we can find out F in n0+n1+1 floors,<br>whichever F is.</p>
<p>---</p>
<p>Great, I understand this solution too.</p>
<p>The key concept of original O(KN^2) solution is to try all the floor to<br>get the min cost min(max(broke, not broke)) as the answer.</p>
<p>This solution is somehow a reverse thinking:</p>
<ol>
<li><p>No matter which floor you try, egg will only break or not break, if</p>
<blockquote>
<p>break, go to downstairs, if not break, go to upstairs.</p>
</blockquote>
</li>
<li><p>No matter you go up or go down, the num of all the floors is always</p>
<blockquote>
<p>upstairs + downstairs + the floor you try, which is dp[m][k] =<br>dp[m - 1][k - 1] + dp[m - 1][k] + 1.</p>
</blockquote>
</li>
</ol>
<p>====</p>
<p>the logic of &quot;dp[m][k] = dp[m - 1][k - 1] + dp[m - 1][k] +<br>1&quot;, my confusion is, if dp[m - 1][k - 1] and dp[m - 1][k] are<br>two different case break or not break; why we combine them together,<br>instead of use the smaller one? would you please explain more?</p>
<p>→</p>
<p>This one move will separate the floors into two non-overlapping groups,<br>below or above (the current level we choose to drop the egg); so no<br>matter what happened to the egg, we only need to check one of those two<br>group. If we need to check the level below the current level, then it<br>means the egg is break, so the maximum level we are able to check is<br>dp[m - 1][k - 1]. Otherwise if we need to check the level above or<br>equal o the current level, it means the egg is not break, so the maximum<br>level we can check is dp[m - 1][k], we should only return dp[m -<br>1][k - 1] + dp[m - 1][k]; however, we count the level from 0,<br>instead of 1, so we need to add the extra one level (i.e; if dp[m -<br>1][k - 1] = 1 and dp[m - 1][k] = 2, means we can check (2 + 3 ==<br>5) levels, so we need to return 4; which is dp[m - 1][k - 1] + dp[m</p>
<ul>
<li>1][k] + 1)</li>
</ul>
<p>Notes:</p>
<ul>
<li>Find max “1” matrix in a square</li>
</ul>
<p>Instead to create a cache and initialise all element by copying when I,j<br>=0.</p>
<p>Better solution is to clone input “matrix” this will lead to faster and<br>cleaner code</p>
<p>If(I=0 || j=0) {// do nothing because those element remain unchanged<br>in matrix copy}</p>
<ul>
<li>For Two sum, should raise Exception e.g. no findings rather than<blockquote>
<p>return “null”</p>
</blockquote>
</li>
</ul>
<p>public int[] <strong>[twoSum]{.underline}</strong>(int[] nums, int target) {</p>
<p>for (int i = 0; i &lt; nums.length; i++) {</p>
<p>for (int j = i + 1; j &lt; nums.length; j++) { // I used int j=i, which is<br>wrong as it may cause one item to be used twice</p>
<p>if (nums[j] == target - nums[i]) {</p>
<p>return new int[] { i, j };</p>
<p>}</p>
<p>}</p>
<p>}</p>
<p>throw new IllegalArgumentException(&quot;No two sum solution&quot;);</p>
<p>}</p>
<ul>
<li>Return specific Exception, e.g.</li>
</ul>
<p>throw new IllegalArgumentException(&quot;No two sum solution&quot;);</p>
<ul>
<li>Error of two sums</li>
</ul>
<blockquote>
<p>if(map1.containsKey(diff)) {</p>
<p>return new int[]{i, map1.get(diff)};</p>
<p>} else{</p>
<p>// be careful put number itself (rather than supplement) to map</p>
<p>map1.put(nums[i], i);</p>
<p>}</p>
</blockquote>
<ul>
<li><p>Summary:</p>
<ul>
<li><p>If possible, make use of HashMap to increase search performance</p>
</li>
<li><p>If there are two loops, try to reduce to use one in-flight</p>
<blockquote>
<p>hashmap lookup</p>
</blockquote>
</li>
</ul>
</li>
<li><p>Multiply string</p>
<ul>
<li>Naiive solution</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>ublic</strong> String <strong>[multiply]{.underline}</strong>(String num1, String num2)<br>{</p>
<p>String n1 = <strong>new</strong> StringBuilder(num1).reverse().toString();</p>
<p>String n2 = <strong>new</strong> StringBuilder(num2).reverse().toString();</p>
<p><strong>int</strong>[] d = <strong>new</strong> <strong>int</strong>[num1.length()+num2.length()];</p>
<p><em>//multiply each digit and sum at the corresponding positions</em></p>
<p><strong>for</strong>(<strong>int</strong> i=0; i&lt;n1.length(); i++){</p>
<p><strong>for</strong>(<strong>int</strong> j=0; j&lt;n2.length(); j++){</p>
<p><strong>d[i+j] += (n1.charAt(i)-&#39;0&#39;) * (n2.charAt(j)-&#39;0&#39;);</strong></p>
<p>}</p>
<p>}</p>
<p>StringBuilder sb = <strong>new</strong> StringBuilder();</p>
<p><em>//calculate each digit</em></p>
<p><strong>for</strong>(<strong>int</strong> i=0; i&lt;d.length; i++){</p>
<p><strong>int</strong> mod = d[i]%10;</p>
<p><strong>int</strong> carry = d[i]/10;</p>
<p><strong>if</strong>(i+1&lt;d.length){</p>
<p>d[i+1] += carry;</p>
<p>}</p>
<p>sb.insert(0, mod);</p>
<p>}</p>
<p><em>//remove front 0&#39;s</em></p>
<p><strong>while</strong>(sb.charAt(0) == &#39;0&#39; &amp;&amp; sb.length()&gt; 1){</p>
<p>sb.deleteCharAt(0);</p>
<p>}</p>
<p><strong>return</strong> sb.toString();</p>
<p>}</p>
<p>-----Best Multiply String---</p>
<p>private static String multiply(String num1, String num2) {</p>
<p>int nLen1 = num1.length(), nLen2=num2.length();</p>
<p>int[] result = new int[nLen1+nLen2];</p>
<p>for(int c1=nLen1-1;c1&gt;=0;c1--) {</p>
<p>for(int c2=nLen2-1;c2&gt;=0;c2--){</p>
<p>int nMulti= (num1.charAt(c1) - &#39;0&#39;) * (num2.charAt(c2) - &#39;0&#39;);</p>
<p>int sum = nMulti + result[c1+c2+1];</p>
<p>result[c1+c2] += sum / 10; //This is for “carry”, so must to be “+”<br>in front of “=”</p>
<p>result[c1+c2+1] = sum % 10; // This is a reminder, so this only be<br>assigned without “+”</p>
<p>}</p>
<p>}</p>
<p>StringBuffer buff = new StringBuffer();</p>
<p>for(int p:result) {</p>
<p>if(!(result.length==0 &amp;&amp; p==0)) {</p>
<p>//remove prefix 0</p>
<p>buff.append(p);</p>
<p>}</p>
<p>}</p>
<p>return buff.toString();</p>
<p>}</p>
</blockquote>
<ul>
<li>greedy algorithm</li>
</ul>
<blockquote>
<p>[Greedy]</p>
<p>const int N = 5;</p>
<p>int Count[N] = {5,2,2,3,5};//每一张纸币的数量</p>
<p>int Value[N] = {1,5,10,50,100};</p>
<p>int <strong>[solve]{.underline}</strong>(int money) {</p>
<p>int num = 0;</p>
<p>for(int i = N-1;i&gt;=0;i--) {</p>
<p>int c = min(money/Value[i],Count[i]);//每一个所需要的张数</p>
<p>money = money-c*Value[i];</p>
<p>num += c;//总张数</p>
<p>}</p>
<p>if(money&gt;0) num=-1;</p>
<p>return num;</p>
<p>}</p>
</blockquote>
<ul>
<li>Add One:</li>
</ul>
<blockquote>
<p>private static int[] plusOneBest(int[] ary) {</p>
<p>for (int i = ary.length - 1; i &gt;= 0; i--) {</p>
<p>if (ary[i] != 9) {</p>
<p>ary[i]++; //[!] Here is key step, for two cases: (1) last digit,<br>add one then exit (2) Next digit with carry, add on and exit</p>
<p>break;</p>
<p>} else {</p>
<p>ary[i] = 0;</p>
<p>}</p>
<p>}</p>
<p>if (ary[0] == 0) {</p>
<p>int[] aryRtn = new int[ary.length + 1];</p>
<p>System.arraycopy(aryRtn, 1, ary, 0, ary.length);</p>
<p>aryRtn[0] = 1;</p>
<p>return aryRtn;</p>
<p>} else {</p>
<p>return ary;</p>
<p>}</p>
<p>}</p>
</blockquote>
<ul>
<li>Add two Single nodes</li>
</ul>
<blockquote>
<p>/**</p>
<p>* Definition for singly-linked list.</p>
<p>* public class ListNode {</p>
<p>* int val;</p>
<p>* ListNode next;</p>
<p>* ListNode(int x) { val = x; }</p>
<p>* }</p>
<p>*/</p>
<p>class Solution {</p>
<p>public ListNode addTwoNumbers(ListNode l1, ListNode l2) {</p>
<p>ListNode lResult = new ListNode(0);</p>
<p>int carry=0,sum =0;</p>
<p>ListNode itNode = lResult; // [!] to setup an iterator</p>
<p>while(l1!=null || l2!=null){</p>
<p>// sum = l1.val + l2.val;</p>
<p>sum = (l1!=null?l1.val:0) + (l2!=null?l2.val:0); // to void null in<br>get reference</p>
<p>sum += carry; // to accumulate &#39;carry&#39;</p>
<p>carry = sum /10;</p>
<p>// lResult.val = sum % 10;</p>
<p>itNode.next = new ListNode(sum % 10);</p>
<p>itNode = itNode.next; // [!] this is the key step</p>
<p>if(l1!=null) {</p>
<p>l1 = l1.next;</p>
<p>}</p>
<p>if(l2!=null){</p>
<p>l2 = l2.next;</p>
<p>}</p>
<p>if(carry&gt;0) itNode.next = new ListNode(carry);</p>
<p>}</p>
<p>return lResult.next;</p>
<p>}</p>
<p>}</p>
</blockquote>
<ul>
<li><p>Longest unique characters</p>
<ul>
<li>Naive approach</li>
</ul>
</li>
</ul>
<blockquote>
<p>class Solution {</p>
<p>public int lengthOfLongestSubstring(String s) {</p>
<p>// analysis:</p>
<p>// embeded two loops to foreach every element and inner loop step from<br>current element of 1st loop</p>
<p>// check whether each sub-string is all unique</p>
<p>// if so, get length and compare with global temp max length</p>
<p>int maxLen=0;</p>
<p>for(int i=0;i&lt;s.length();i++) {</p>
<p>//for inner loop, it start from i+1 (rather than i)</p>
<p>for(int j=i+1;i&lt;=s.length();j++){</p>
<p>if(noDup(s, i , j)){</p>
<p>maxLen = Math.max(maxLen, (j-i));</p>
<p>}</p>
<p>}</p>
<p>}</p>
<p>return maxLen;</p>
<p>}</p>
<p>private boolean noDup(String sub, int start, int end){</p>
<p>//check whether thsi sub string is unique</p>
<p>// char[] aryOccurance=new char[127];</p>
<p>// int[] aryOccurance=new int[127];</p>
<p>Set&lt;Character&gt; set=new HashSet&lt;&gt;();</p>
<p>for(int k=start;k&lt;end;k++){</p>
<p>Character c = sub.charAt(k);</p>
<p>if(set.contains(c)){</p>
<p>return false;</p>
<p>}else{</p>
<p>set.add(c);</p>
<p>}</p>
<p>}</p>
<p>return true;</p>
<p>}</p>
<p>}</p>
</blockquote>
<ul>
<li>Sliding window</li>
</ul>
<blockquote>
<p><a href="https://developpaper.com/share-several-algorithmic-interview-questions-related-to-sliding-window/" target="_blank" rel="noopener">[https://developpaper.com/share-several-algorithmic-interview-questions-related-to-sliding-window/]{.underline}</a></p>
<p><strong>*[Longest Substring Without Repeating Characters]{.underline}*</strong></p>
<p>public int lengthOfLongestSubstring(String s) {</p>
<p>Map&lt;Character, Integer&gt; map= new HashMap&lt;&gt;();// map to cache<br>position of each occruance</p>
<p>int start=0, len=0;</p>
<p>// abba</p>
<p>for(int i=0; i&lt;s.length(); i++) {</p>
<p>char c = s.charAt(i);</p>
<p>if (map.containsKey(c)) {// here is the key step for “without<br>repeating chars” in questions.</p>
<p>if (map.get(c) &gt;= start)</p>
<p>start = map.get(c) + 1;// found duplicate, so get started a new round,<br>assign start from 1st occurance of ‘duplicate char’ plus one.</p>
<p>}</p>
<p>len = Math.max(len, i-start+1);</p>
<p>map.put(c, i);</p>
<p>}</p>
<p>return len;</p>
<p>}</p>
<p>My solution vs leetcode one, latter one is much more consice</p>
<p>// better solution leveraging slide window</p>
<p>// Runtime: 12 ms, faster than 26.95% of Java online submissions for<br>Longest Substring Without Repeating Characters.</p>
<p>public int lengthOfLongestSubstring(String s){</p>
<p>Set&lt;Character&gt; set =new HashSet&lt;&gt;();</p>
<p>int maxLen = 0, left=0,right =-1, n=s.length();</p>
<p>while(left&lt;n) {</p>
<p>if((right+1)&lt;n &amp;&amp; !set.contains(s.charAt(right+1))){</p>
<p>// not in slide window</p>
<p>right++;//expand slide window</p>
<p>set.add(s.charAt(right));</p>
<p>}else{</p>
<p>// dup with existing slide window</p>
<p>// shrink window</p>
<p>set.remove(s.charAt(left));</p>
<p>left++;</p>
<p>}</p>
<p>maxLen = Math.max(maxLen, right - left +1);// [!] be carefulf there<br>is &quot;+1&quot; as this is for getting count</p>
<p>}</p>
<p>return maxLen;</p>
<p>}</p>
<p>-----leetcode solution-----</p>
<p>public int lengthOfLongestSubstring(String s){</p>
<p>int i=0,j=0,n=s.length(),rtn=0;</p>
<p>Set&lt;Character&gt; set = new HashSet&lt;&gt;();</p>
<p>while(i&lt;n &amp;&amp; j&lt;n) {</p>
<p>if(!set.contains(s.charAt(j))) {</p>
<p>set.add(s.charAt(j++));</p>
<p>rtn = Math.max(rtn, j-i) ;</p>
<p>}else{</p>
<p>set.remove(s.charAt(i++));</p>
<p>}</p>
<p>}</p>
<p>return rtn;</p>
<p>}</p>
<p>-----------</p>
</blockquote>
<ul>
<li>Palindrome integer (not string)</li>
</ul>
<blockquote>
<p>class Solution {</p>
<p>public boolean isPalindrome(int x) {</p>
<p>//first of all, boundary (or edge case)</p>
<p>if(x&lt;0 || (x!=0 &amp;&amp; x%10==0)) {</p>
<p>return false;</p>
<p>}</p>
<p>int reverse =0;</p>
<p>while(x&gt; reverse) {</p>
<p>reverse = reverse * 10 + x%10;</p>
<p>x /= 10;</p>
<p>}</p>
<p>// When the length is an odd number, we can get rid of the middle<br>digit by revertedNumber/10</p>
<p>// For example when the input is 12321, at the end of the while loop<br>we get x = 12, revertedNumber = 123,</p>
<p>// since the middle digit doesn&#39;t matter in palindrome(it will always<br>equal to itself), we can simply get rid of it.</p>
<p>return x == reverse || x == reverse/10;</p>
<p>}</p>
<p>}</p>
</blockquote>
<ul>
<li>Find longest common sub array among two arrays</li>
</ul>
<p>[DP]</p>
<blockquote>
<p>public static int findLength_dp(int[] A, int[] B) {</p>
<p>// for dynamic programing, normally it compare itself with its<br>sibling, using max/min</p>
<p>// try to construct a matrix to keep track of path</p>
<p>int m=A.length,n=B.length,max=0;</p>
<p>int[][] memo = new int[m+1][n+1]; // &quot;+1&quot; to keep extra<br>space</p>
<p>for(int i = 0;i &lt;= m;i++) {</p>
<p>for (int j = 0; j &lt;= n; j++) {</p>
<p>//for DP, firstly to setup begin point</p>
<p>if(i==0 || j==0) {</p>
<p>memo[i][j]=0;</p>
<p>}else{</p>
<p>if(A[i-1]==B[j-1]){ // it they are same</p>
<p>memo[i][j] = 1+ memo[i-1][j-1]; // increase one to cache</p>
<p>max = Math.max(max,memo[i][j]); // get global max</p>
<p>}</p>
<p>}</p>
<p>}</p>
<p>}</p>
<p>return max;</p>
<p>}</p>
</blockquote>
<ul>
<li>Dynamic programing:</li>
</ul>
<p>重叠子问题、最优子结构、状态转移方程就是动态规划三要素。</p>
<p>What is dynamic programming?</p>
<p>Simply put, dynamic programming is an optimization technique that we can<br>use to solve problems where the same work is being repeated over and<br>over. You know how a web server may use caching? Dynamic programming is<br>basically that.</p>
<p>However, dynamic programming doesn’t work for every problem. There are a<br>lot of cases in which dynamic programming simply won’t help us improve<br>the runtime of a problem at all. If we aren’t doing repeated work, then<br>no amount of caching will make any difference.</p>
<p><strong>A problem can be optimized using dynamic programming if it:</strong></p>
<ol>
<li><p>has an optimal substructure.</p>
</li>
<li><p>has overlapping subproblems</p>
</li>
</ol>
<p><strong>[Optimal substructure]{.underline}</strong> simply means that you can find<br>the optimal solution to a problem by considering the optimal solution to<br>its subproblems.</p>
<h3 id="Overlapping-Subproblems"><a href="#Overlapping-Subproblems" class="headerlink" title="Overlapping Subproblems"></a>Overlapping Subproblems</h3><p><a href="https://en.wikipedia.org/wiki/Overlapping_subproblems" target="_blank" rel="noopener">Overlapping<br>subproblems</a> is<br>the second key property that our problem must have to allow us to<br>optimize using dynamic programming. Simply put, having overlapping<br>subproblems means we are computing the same problem more than once.</p>
<p>Imagine you have a server that caches images. If the same image gets<br>requested over and over again, you’ll save a ton of time. However, if no<br>one ever requests the same image more than once, what was the benefit of<br>caching them?</p>
<h2 id="Dynamic-Programming-Methods-underline"><a href="#Dynamic-Programming-Methods-underline" class="headerlink" title="[Dynamic Programming Methods]{.underline}"></a><strong>[Dynamic Programming Methods]{.underline}</strong></h2><p>DP offers two methods to solve a problem:</p>
<p><strong>1. Top-down with Memoization</strong></p>
<p>In this approach, we try to solve the bigger problem by recursively<br>finding the solution to smaller sub-problems. Whenever we solve a<br>sub-problem, we cache its result so that we don’t end up solving it<br>repeatedly if it’s called multiple times. Instead, we can just return<br>the saved result. This technique of storing the results of already<br>solved subproblems is called <strong>Memoization</strong>.</p>
<p><strong>2. Bottom-up with Tabulation</strong></p>
<p>Tabulation is the opposite of the top-down approach and avoids<br>recursion. In this approach, we solve the problem “bottom-up” (i.e. by<br>solving all the related sub-problems first). This is typically done by<br>filling up an n-dimensional table. Based on the results in the table,<br>the solution to the top/original problem is then computed.</p>
<p>Tabulation is the opposite of Memoization, as in Memoization we solve<br>the problem and maintain a map of already solved sub-problems. In other<br>words, in memoization, we do it top-down in the sense that we solve the<br>top problem first (which typically recurses down to solve the<br>sub-problems).</p>
<p>Let’s apply Tabulation to our example of Fibonacci numbers. Since we<br>know that every Fibonacci number is the sum of the two preceding<br>numbers, we can use this fact to populate our table.</p>
<p>Here is the code for our bottom-up dynamic programming approach:</p>
<p><strong>class</strong> Fibonacci {</p>
<p><strong>public</strong> int CalculateFibonacci(int n) {</p>
<p>int dp[] = <strong>new</strong> int[n+1];</p>
<p>//base cases</p>
<p>dp[0] = 0;</p>
<p>dp[1] = 1;</p>
<p><strong>for</strong>(int i=2; i&lt;=n; i++)</p>
<p>dp[i] = dp[i-1] + dp[i-2];</p>
<p><strong>return</strong> dp[n];</p>
<p>}</p>
<p><strong>public</strong> <strong>static</strong> void main(<strong>String</strong>[] args) {</p>
<p>Fibonacci fib = <strong>new</strong> Fibonacci();</p>
<p><strong>System</strong>.out.println(&quot;5th Fibonacci is ---&gt; &quot; +<br>fib.CalculateFibonacci(5));</p>
<p><strong>System</strong>.out.println(&quot;6th Fibonacci is ---&gt; &quot; +<br>fib.CalculateFibonacci(6));</p>
<p><strong>System</strong>.out.println(&quot;7th Fibonacci is ---&gt; &quot; +<br>fib.CalculateFibonacci(7));</p>
<p>}</p>
<p>}</p>
<p>Generally speaking, dynamic programming is the technique of storing<br>repeated computations in memory, rather than recomputing them every time<br>you need them. The ultimate goal of this process is to improve runtime.<br>Dynamic programming allows you to use more space to take less time.</p>
<p>Dynamic programming relies on overlapping subproblems, because it uses<br>memory to save the values that have already been computed to avoid<br>computing them again. The more overlap there is, the more computational<br>time is saved.</p>
<p><strong>Top-down and bottom-up</strong></p>
<p>Top-down and bottom-up refer to two general approaches to dynamic<br>programming. A top-down solution starts with the final result and<br>recursively breaks it down into subproblems. The bottom-up method does<br>the opposite. It takes an iterative approach to solve the subproblems<br>first and then works up to the desired solution.</p>
<p>both solutions are equally valid and that one solution can be determined<br>from the other. In an interview situation, although bottom-up solutions<br>often result in more concise code, either approach is appropriate. I<br>recommend that you use whatever solution makes the most sense to you.</p>
<p>The important point is that top-down = recursive and bottom-up =<br>iterative.</p>
<blockquote>
<p>There are four steps in the FAST method:</p>
</blockquote>
<ol>
<li><p><strong>F</strong>irst solution</p>
</li>
<li><p><strong>A</strong>nalyze the first solution</p>
</li>
<li><p>Identify the <strong>S</strong>ubproblems</p>
</li>
<li><p><strong>T</strong>urn the solution around</p>
</li>
</ol>
<p><strong>First solution</strong></p>
<p>This is an important step for any interview question but is particularly<br>important for dynamic programming. This step finds the first possible<br>solution. This solution will be brute force and recursive. The goal is<br>to solve the problem without concern for efficiency. It means that if<br>you need to find the biggest/ smallest/longest/shortest something, you<br>should write code that goes through every possibility and then compares<br>them all to find the best one.</p>
<p>Your solution must also meet these restrictions:</p>
<ul>
<li><p>The recursive calls must be self-contained. That means no global</p>
<blockquote>
<p>variables.</p>
</blockquote>
</li>
<li><p>You cannot do tail recursion. Your solution must compute the results</p>
<blockquote>
<p>to each subproblem and then combine them afterwards.</p>
</blockquote>
</li>
<li><p>Do not pass in unnecessary variables. Eg. If you can count the depth</p>
<blockquote>
<p>of your recursion as you return, don’t pass a count variable into<br>your recursive function.</p>
</blockquote>
</li>
</ul>
<blockquote>
<p><strong>Analyze the first solution</strong></p>
</blockquote>
<p>In this step, we will analyze the first solution that you came up with.<br>This involves determining the time and space complexity of your first<br>solution and asking whether there is obvious room for improvement.</p>
<p><em>// Compute the nth Fibonacci number recursively. // Optimized by<br>caching subproblem results</em> public int fib(int n) {</p>
<blockquote>
<p>if (n &lt; 2) return n;</p>
<p><em>// Create cache and initialize to -1</em></p>
<p>int[] cache = new int[n+1];</p>
<p>for (int i = 0; i &lt; cache.length; i++) {</p>
<p>cache[i] = -1;</p>
<p>}</p>
<p><em>// Fill initial values in cache</em></p>
<p>cache[0] = 0;</p>
<p>cache[1] = 1;</p>
<p>return fib(n, cache);</p>
</blockquote>
<p>}</p>
<p><em>// Overloaded private method</em></p>
<p>private int fib(int n, int[] cache) {</p>
<p><em>// If value is set in cache, return</em></p>
<blockquote>
<p>if (cache[n] &gt;= 0) return cache[n];</p>
<p><em>// Compute and add to cache before returning</em></p>
<p>cache[n] = fib(n-1, cache) + fib(n-2, cache);</p>
<p>return cache[n];</p>
<p>}</p>
</blockquote>
<p><em>Fig 3. Top-down dynamic Fibonacci solution</em></p>
<blockquote>
<p><strong>Turn the solution around</strong></p>
</blockquote>
<p>Since we now have a <strong>top-down solution</strong>, it is possible to reverse the<br>process and solve it from the bottom up. This <strong>*[can be done by<br>starting with the base cases and building up the solution from there by<br>computing the results of each subsequent subproblem, until we reach our<br>result.]{.underline}*</strong></p>
<p>In this problem, *[our base cases are fib(0) = 0 and fib(1) = 1. From<br>these two values, we can compute the next largest Fibonacci number,<br>fib(2) = fib(0) + fib(1). Once we have the value of fib(2), we can<br>calculate fib(3) etc. As we successively compute each Fibonacci number,<br>the previous values are saved and referred to as necessary, eventually<br>reaching fib(n).]{.underline}*</p>
<p>Our code for this process is fairly straightforward (<em>fig 5</em>).</p>
<p>This process yields a bottom-up solution. Since we iterate through all<br>of the numbers from 0 to n once, our time complexity will be O(n) and<br>our space will also be O(n), since we create a 1D array from 0 to n.<br>This makes our current solution comparable to the top-down solution,<br>although without recursion. This code is likely easier to understand.</p>
<p><em>// Compute the nth Fibonacci number iteratively</em></p>
<blockquote>
<p>public int fib(int n) {</p>
<p>if (n == 0) return 0;</p>
<p><em>// Initialize cache</em></p>
<p>int[] cache = new int[n+1];</p>
<p>cache[1] = 1;</p>
<p><em>// Fill cache iteratively</em></p>
<p>for (int i = 2; i &lt;= n; i++) {</p>
<p>cache[i] = cache[i-1] + cache[i-2];</p>
<p>}</p>
<p>return cache[n];</p>
<p>}</p>
<p><em>Fig 5. Bottom-up dynamic Fibonacci solution</em></p>
<p>it is possible to improve our solution further. During the computation<br>process, we only refer to the most recent two subproblems<br>(cache[i-1] and cache[i-2]) to compute the value of the current<br>subproblem. Therefore, cache[0] through cache[i-3] are unnecessary<br>and do not need to be kept in memory.</p>
</blockquote>
<p>We can, therefore, improve the space complexity of our solution to O(1)<br>by only caching the most recent two values.</p>
<blockquote>
<p><em>// Compute the nth Fibonacci number iteratively // with constant<br>space. We only need to save // the two most recently computed values</em></p>
<p>public int fib(int n) {</p>
<p>if (n &lt; 2) return n;</p>
<p>int n1 = 1, n2 = 0;</p>
<p>for (int i = 2; i &lt; n; i++) {</p>
<p>int n0 = n1 + n2;</p>
<p>n2 = n1;</p>
<p>n1 = n0;</p>
<p>}</p>
<p>return n1 + n2;</p>
<p>}</p>
</blockquote>
<p>For any problem where you are asked <strong>[to find the most/least/<br>largest/smallest]{.underline}</strong> etc, an excellent technique <strong>[is to<br>compare every possible combination]{.underline}</strong>. Although it will be<br>inefficient, efficiency is not the most important current consideration<br>and a solution of that nature is easy to make dynamic.</p>
<blockquote>
<p>Make change</p>
<p>// Brute force solution. Go through every</p>
<p>// combination of coins that sum up to c to // find the minimum number</p>
<p>public static int makeChange(int c) {</p>
<p>int[] coins = new int[]{10, 6, 1};</p>
<p>if (c == 0) return 0;</p>
<p>int minCoins = Integer.<em>MAX_VALUE</em>;</p>
<p>// Try removing each coin from the total and // see how many more<br>coins are required</p>
<p>for (int coin : coins) {</p>
<p>// Skip a coin if it’s value is greater</p>
<p>// than the amount remaining</p>
<p>if (c - coin &gt;= 0) {</p>
<p>int currMinCoins = <em>makeChange</em>(c - coin);</p>
<p>if (currMinCoins &lt; minCoins)</p>
<p>minCoins = currMinCoins;</p>
<p>} }</p>
<p>// Add back the coin removed recursively</p>
<p>return minCoins + 1;</p>
<p>}</p>
</blockquote>
<ul>
<li>How to convert one naive loop solution to dynamic programming<blockquote>
<p>top-down approach</p>
</blockquote>
</li>
</ul>
<p>Based on this understanding, we can turn our solution into a top-down<br>dynamic solution. We can cache the results as they are computed. That<br>means that we will cache the minimum number of coins needed to make<br>various smaller amounts of change.</p>
<p>Like the Fibonacci problem, our code doesn’t actually have to change<br>very much. It’s only necessary to overload our function with another<br>that can initialize the cache. Then we update the original function in<br>order to check the cache before doing the computation and saving the<br>result to the cache afterwards</p>
<p>// Top down dynamic solution. Cache the values as we compute them</p>
<p>// transform naive approach to top-down need:</p>
<p>// overload existing method with new one accept cache</p>
<p>// while existing one do two tasks: (1) initialize cache (2) call new<br>method passing in cache</p>
<p>public int makeChange_top_down(int c) {</p>
<p>// Initialize cache with values as -1</p>
<p>int[] cache = new int[c + 1];</p>
<p>for (int i = 1; i &lt; c + 1; i++)</p>
<p>cache[i] = -1;</p>
<p>return makeChange_top_down(c, cache);</p>
<p>}</p>
<p>// Overloaded recursive function</p>
<p>private int makeChange_top_down(int c, int[] cache) {</p>
<p>int[] coins = new int[]{10, 6, 1};</p>
<p>// Return the value if it’s in the cache</p>
<p>if (cache[c] &gt;= 0) return cache[c];</p>
<p>int minCoins = Integer.<em>MAX_VALUE</em>; //declare result oppositely, e.g.<br>question is &quot;min&quot;, so init return value would be Integer.MAX_VALUE</p>
<p>// Find the best coin</p>
<p>for (int coin : coins) {</p>
<p>if (c - coin &gt;= 0) {</p>
<p>int currMinCoins =</p>
<p>makeChange_top_down(c - coin, cache);</p>
<p>if (currMinCoins &lt; minCoins)</p>
<p>minCoins = currMinCoins;</p>
<p>} }</p>
<p>// Save the value into the cache</p>
<p>cache[c] = minCoins + 1; // add one to the return value</p>
<p>return cache[c];</p>
<p>}</p>
<p><strong>Turn the solution around</strong></p>
<p>Once the top-down solution is completed, it’s possible to flip it<br>around. We do this by solving the same subproblems in reverse order.<br>Rather than starting with our result in mind, we start with no change<br>and work our way up until we reach the solution.</p>
<p>The next step is to determine the subproblems that must be solved, in<br>order to solve successive subproblems. If we want to compute<br>makeChange(c), then we will have n different subproblems. If our coins<br>are {10, 6, 1}, we need to have the solutions for makeChange(c - 10),<br>makeChange(c - 6), and makeChange(c - 1).</p>
<p>Once makeChange() is solved for 0 through c - 1, it will be easy to<br>compute the value of makeChange(c). This is done by using the first<br>value, 0 as our base case. We can then compute the remaining values from<br>the previously computed values.</p>
<p><em>// Bottom up dynamic programming solution. // Iteratively compute<br>number of coins for // larger and larger amounts of change</em></p>
<p>public int makeChange(int c) {</p>
<p>int[] cache = new int[c + 1];</p>
<p>for (int i = 1; i &lt;= c; i++) {</p>
<p>int minCoins = Integer.MAX_VALUE;</p>
<p><em>// Try removing each coin from the total</em></p>
<p><em>// and see which requires the fewest</em></p>
<p><em>// extra coins</em></p>
<p>for (int coin : coins) {</p>
<p>if (i - coin &gt;= 0) {</p>
<p>int currCoins = cache[i-coin] + 1;</p>
<p>if (currCoins &lt; minCoins) {</p>
<p>minCoins = currCoins;</p>
<p>}</p>
<p>} }</p>
<p>cache[i] = minCoins;</p>
<p>}</p>
<p>return cache[c];</p>
<p>}</p>
]]></content>
      <tags>
        <tag>Leetcode</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
</search>
