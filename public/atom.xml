<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Clouds &amp; Docker</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.todzhang.com/"/>
  <updated>2019-05-31T13:03:27.151Z</updated>
  <id>http://www.todzhang.com/</id>
  
  <author>
    <name>Todd Zhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mifid</title>
    <link href="http://www.todzhang.com/2019-01-17-Mifid/"/>
    <id>http://www.todzhang.com/2019-01-17-Mifid/</id>
    <published>2019-05-31T13:03:27.151Z</published>
    <updated>2019-05-31T13:03:27.151Z</updated>
    
    <content type="html">&lt;p&gt;FX Spot is not covered by the regulation, as it is not considered to be a financial instrument by ESMA, the European Union (EU) regulator. As FX is considered “illiquid” it does not have pre-trade reporting requirements.&lt;/p&gt;
&lt;p&gt;Recordkeeping – MiFID II requires firms to keep extensive records of all transactions, communications, services and activities for 10 years, in order for them to be able to provide transparency into the trade life cycle. This is to support trade reconstruction if required.&lt;/p&gt;
&lt;p&gt;Overall there are 3 points in the text which we think will be of particular interest to foreign exchange brokers.&lt;/p&gt;
&lt;p&gt;The EC has determined that FX Forward contracts remain outside the scope of MiFID II if they satisfy all of the following conditions:&lt;br&gt;The contract for deliverable FX is physically settled&lt;br&gt;At least one of the parties to the contract is a non-financial counterparty&lt;br&gt;The purpose of the contract is to facilitate payment for identifiable goods, services or direct investment&lt;br&gt;The contract is not traded on a trading venue  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;FX Forwards will qualify for the means of payment exclusion if they meet the following criteria:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The counterparty is a corporate entity (a non-financial counterparty (‘NFC’) as defined under EMIR);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The FX forwards are traded for the purpose of facilitating payment for identifiable goods or services (for example, entering into an FX forward in order to pay an upcoming invoice in a foreign currency, or in preparation of an upcoming purchase in a foreign currency, as opposed to trading FX forwards for speculative purposes); and&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The FX forwards are traded bilaterally, as opposed to on a regulated trading venue (note that Agile Markets is not a regulated trading venue and does not affect eligibility);&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The Financial Conduct Authority has provided some examples of scenarios that would fit within the exclusion.  Please find the examples provided on the link here.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;FX Spot is not covered by the regulation, as it is not considered to be a financial instrument by ESMA, the European Union (EU) regulator
    
    </summary>
    
    
      <category term="MTF" scheme="http://www.todzhang.com/tags/MTF/"/>
    
      <category term="Mifid" scheme="http://www.todzhang.com/tags/Mifid/"/>
    
  </entry>
  
  <entry>
    <title>SSL certificate</title>
    <link href="http://www.todzhang.com/2019-02-26-TLS-SSL-HTTPS/"/>
    <id>http://www.todzhang.com/2019-02-26-TLS-SSL-HTTPS/</id>
    <published>2019-05-31T13:03:27.151Z</published>
    <updated>2019-05-31T13:03:27.151Z</updated>
    
    <content type="html">&lt;h1 id=&quot;What’s-TLS&quot;&gt;&lt;a href=&quot;#What’s-TLS&quot; class=&quot;headerlink&quot; title=&quot;What’s TLS&quot;&gt;&lt;/a&gt;What’s TLS&lt;/h1&gt;&lt;p&gt;TLS (Transport Layer Security) and its predecessor, SSL (Secure Sockets Layer), are security protocols designed to secure the communication between a server and a client, for example, a web server and a browser. Both protocols are frequently referred to as SSL.&lt;/p&gt;
&lt;p&gt;A TLS/SSL certificate (simply called SSL certificate) is required to enable SSL/TLS on your site and serve your website using the secure HTTPS protocol.&lt;/p&gt;
&lt;p&gt;We offer different types of domain-validated SSL certificates signed by globally recognized certificate authorities.&lt;/p&gt;
&lt;h1 id=&quot;CA&quot;&gt;&lt;a href=&quot;#CA&quot; class=&quot;headerlink&quot; title=&quot;CA&quot;&gt;&lt;/a&gt;CA&lt;/h1&gt;&lt;p&gt;A Certificate Authority (CA) (or Certification Authority) is an entity that issues digital certificates.&lt;/p&gt;
&lt;p&gt;The digital certificate &lt;em&gt;certifies the ownership&lt;/em&gt; of a public key by the named subject of the certificate. This allows others (relying parties) to rely upon signatures or assertions made by the private key that corresponds to the public key that is certified.&lt;/p&gt;
&lt;h1 id=&quot;Root-certificate&quot;&gt;&lt;a href=&quot;#Root-certificate&quot; class=&quot;headerlink&quot; title=&quot;Root certificate&quot;&gt;&lt;/a&gt;Root certificate&lt;/h1&gt;&lt;p&gt;In the SSL ecosystem, anyone can generate a signing key and sign a new certificate with that signature. However, that certificate is not considered valid unless it has been directly or indirectly signed by a trusted CA.&lt;/p&gt;
&lt;p&gt;A trusted certificate authority is an entity that has been entitled to verify that someone is effectively who it declares to be. In order for this model to work, all the participants on the game must agree on a set of CA which they trust. All operating systems and most of web browsers ship with a set of trusted CAs.&lt;/p&gt;
&lt;p&gt;The SSL ecosystem is based on a &lt;em&gt; model of trust relationship&lt;/em&gt;, also called &lt;strong&gt; “chain of trust” &lt;/strong&gt;. When a device validates a certificate, it compares the certificate issuer with the list of trusted CAs. If a match is not found, the client will then check to see if the certificate of the issuing CA was issued by a trusted CA, and so on until the end of the certificate chain. The top of the chain, the root certificate, must be issued by a trusted Certificate Authority.&lt;/p&gt;
&lt;h2 id=&quot;Tips&quot;&gt;&lt;a href=&quot;#Tips&quot; class=&quot;headerlink&quot; title=&quot;Tips&quot;&gt;&lt;/a&gt;Tips&lt;/h2&gt;&lt;p&gt;The root certificate is generally embedded in your connected device. In the case of web browsers, root certificates are packaged with the browser software.&lt;/p&gt;
&lt;h3 id=&quot;To-install-the-Intermediate-SSL-certificates&quot;&gt;&lt;a href=&quot;#To-install-the-Intermediate-SSL-certificates&quot; class=&quot;headerlink&quot; title=&quot;To  install the Intermediate SSL certificates?&quot;&gt;&lt;/a&gt;To  install the Intermediate SSL certificates?&lt;/h3&gt;&lt;p&gt;The procedure to install the Intermediate SSL certificates depends on the web server and the environment where you install the certificate.&lt;/p&gt;
&lt;p&gt;For instance, Apache requires you to bundle the intermediate SSL certificates and assign the location of the bundle to the SSLCertificateChainFile configuration. Conversely, NGINX requires you to package the intermediate SSL certificates in a single bundle with the end-user certificate.&lt;/p&gt;
&lt;h1 id=&quot;SSL-certificate-chain&quot;&gt;&lt;a href=&quot;#SSL-certificate-chain&quot; class=&quot;headerlink&quot; title=&quot;SSL certificate chain&quot;&gt;&lt;/a&gt;SSL certificate chain&lt;/h1&gt;&lt;p&gt;There are two types of certificate authorities (CAs): root CAs and intermediate CAs. In order for an SSL certificate to be trusted, that certificate must have been issued by a CA that is included in the trusted store of the device that is connecting.&lt;/p&gt;
&lt;p&gt;In this model of trust relationships, a CA is a trusted third party that is trusted by both the subject (owner) of the certificate and the party relying upon the certificate.&lt;/p&gt;
&lt;p&gt;In the context of a website, when we use the term digital certificate we often refer to SSL certificates. The CA is the authority responsible for issuing SSL certificates publicly trusted by web browsers.&lt;/p&gt;
&lt;p&gt;Anyone can issue SSL certificates, but those certificates would not be trusted automatically by web browsers. Certificates such as these are called self-signed. The CA has the responsibility to validate the entity behind an SSL certificate request and, upon successful validation, the ability to issue publicly trusted SSL certificates that will be accepted by web browsers. Essentially, the browser vendors rely on CAs to validate the entity behind a web site.&lt;/p&gt;
&lt;h1 id=&quot;How-SSL-work-in-browser&quot;&gt;&lt;a href=&quot;#How-SSL-work-in-browser&quot; class=&quot;headerlink&quot; title=&quot;How SSL work in browser&quot;&gt;&lt;/a&gt;How SSL work in browser&lt;/h1&gt;&lt;p&gt;There are 3 essential elements at work in the process described above: a protocol for communications (SSL), credentials for establishing identity (the SSL certificate), and a third party that vouches for the credentials (the certificate authority). &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Computers use protocols to allow different systems to work together. Web servers and web browsers rely on the Secure Sockets Layer (SSL) protocol to enable encrypted communications. The browser’s request that the server identify itself is a function of the SSL protocol.
Credentials for establishing identity are common to our everyday lives: a driver’s license, a passport, a company badge. An SSL certificate is a type of digital certificate that serves as a credential in the online world. Each SSL certificate uniquely identifies a specific domain (such as thawte.com) and a web server.
Our trust of a credential depends on our confidence in the organization that issued it. Certificate authorities have a variety of methods to verify information provided by individuals or organizations. Established certificate authorities, such as Thawte, are well known and trusted by browser vendors. Browsers extend that trust to digital certificates that are verified by the certificate authority.
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;PKI&quot;&gt;&lt;a href=&quot;#PKI&quot; class=&quot;headerlink&quot; title=&quot;PKI&quot;&gt;&lt;/a&gt;PKI&lt;/h2&gt;&lt;p&gt;You are correct that SSL uses an asymmetric key pair. One public and one private key is generated which also known as public key infrastructure (PKI). The public key is what is distributed to the world, and is used to encrypt the data. Only the private key can actually decrypt the data though.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Say we both go to walmart.com and buy stuff. Each of us get a copy of Walmart’s public key to sign our transaction with. Once the transaction is signed by Walmart’s public key, only Walmart’s private key can decrypt the transaction. If I use my copy of Walmart’s public key, it will not decrypt your transaction. Walmart must keep their private key very private and secure, else anyone who gets it can decrypt transactions to Walmart. This is why the DigiNotar breach was such a big deal&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;A-sample-of-how-browser-get-SSL-certificate&quot;&gt;&lt;a href=&quot;#A-sample-of-how-browser-get-SSL-certificate&quot; class=&quot;headerlink&quot; title=&quot;A sample of how browser get SSL certificate&quot;&gt;&lt;/a&gt;A sample of how browser get SSL certificate&lt;/h1&gt;&lt;p&gt;If I get an SSL certificate from a well-known provider, what does that prove about my site and how?&lt;/p&gt;
&lt;p&gt;Here’s what I know:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Assume Alice and Bob both have public and private keys
If Alice encrypts something with Bob&amp;apos;s public key, she ensures that only Bob can decrypt it (using his private key)
If Alice encrypts something with her own private key, anyone can decrypt it (using her public key), but they will know that it was encrypted by her
Therefore, if Alice encrypts a message first with her own private key, then with Bob&amp;apos;s public key, she will ensure that only Bob can decrypt it and that Bob will know the message is from her.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Regarding certificates, here’s what I think happens (updated):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;I generate a request for a certificate. In that request, I put my public key and a bunch of information about myself.
The certificate issuer (in theory) checks me out to make sure it knows who I am: talks to me in person, sees my driver&amp;apos;s license, retina scan, or whatever.
If they&amp;apos;re satisfied, the certificate issuer then encrypts my request with their private key. Anyone who decrypts it with their public key knows that they vouch for the information it contains: they agree that the public key is mine and that the information stated is true about me. This encrypted endorsement is the certificate that they issue to me.
When you connect to my site via https, I send you the certificate.
Your browser already knows the issuer&amp;apos;s public key because your browser came installed with that information.
Your browser uses the issuer&amp;apos;s public key to decrypt what I sent you. The fact that the issuer&amp;apos;s public key works to decrypt it proves that the issuer&amp;apos;s private key was used to encrypt it, and therefore, that the issuer really did create this certificate.
Inside the decrypted information is my public key, which you now know has been vouched for. You use that to encrypt some data to send to me.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Your key theory: basically right, but authentication is usually done by encrypting a cryptographically secure hash of the data rather than the data itself.&lt;/p&gt;
&lt;p&gt;A CA’s signature on an SSL certificate should indicate that the CA has done a certain amount of diligence to ensure that the credentials on the certificate match the owner. That diligence varies, but the ultimate point is that they’re saying that the certificate they signed belongs to the entity named on it.&lt;/p&gt;
&lt;p&gt;See &lt;a href=&quot;http://en.wikipedia.org/wiki/Digital_signature#Definition&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://en.wikipedia.org/wiki/Digital_signature#Definition&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A public key certificate is the signed combination between a public key, identifiers, and possibly other attributes. Those who sign this document effectively assert the authenticity of the binding between the public key and the identifier and these attributes, in the same way as a passport issuing authority asserts the binding between the picture and the name in a passport, as various other pieces of information (nationality, date of birth, …).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The private key is used for signing and deciphering/decrypting.
The public key is used for verifying signatures and enciphering/encrypting.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;public key cryptography: A class of cryptographic techniques employing two-key ciphers. Messages encrypted with the public key can only be decrypted with the associated private key. Conversely, messages signed with the private key can be verified with the public key.&lt;/p&gt;
&lt;p&gt;It should be pointed out, along with all the other answers, that your private key is not always just one key that is used for both decrypting and signing messages. These should be two separate keys. This would create 4 keys for each person:&lt;/p&gt;
&lt;p&gt;Public Encryption Key - Used to encrypt data to send to me.&lt;/p&gt;
&lt;p&gt;Private Decryption Key - Used to decrypt messages that were encrypted using my Public Encryption Key.&lt;/p&gt;
&lt;p&gt;Private Signing Key - Used to sign messages that I send to other people.&lt;/p&gt;
&lt;p&gt;Public Verify Key - Used to verify that a message was, in fact, signed by me.&lt;/p&gt;
&lt;p&gt;How do I request an Internal SSL Certificate?&lt;/p&gt;
&lt;p&gt;Expand/Collapse panel display&lt;br&gt;To request or renew an internal SSL certificate go to the Venafi (Aperture) portal and log on with your NAB network ID and password.&lt;/p&gt;
&lt;p&gt;Venafi Trust Protection Platform&lt;/p&gt;
&lt;p&gt;Venafi is a made-up word created by combining two Latin roots—Vena (vein or root) and Fides (trust or faith). Venafi secures the root of trust—the encryption keys and certificates.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Savvis&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://en.wikipedia.org/wiki/Savvis&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Savvis - Wikipedia&lt;/p&gt;
&lt;p&gt;Savvis, formerly SVVS on Nasdaq and formerly known as Savvis Communications Corporation, and, later, Savvis Inc., is a subsidiary of CenturyLink, a company headquartered in Monroe, Louisiana.[1] The company sells managed hosting and colocation services with more than 50 data centers[2] (over 2 million square feet) in North America, Europe, and Asia, automated management and provisioning systems, and information technology consulting. Savvis has approximately 2,500 unique business and government customers.[3][4] &lt;/p&gt;
&lt;p&gt;The file extensions .CRT and .CER are interchangeable.  If your server requires that you use the .CER file extension, you can change the extension by following the steps below:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Double-click on the yourwebsite.crt file to open it into the certificate display.
Select the Details tab, then select the Copy to file button.
Hit Next on the Certificate Wizard.
Select Base-64 encoded X.509 (.CER), then Next.
Select Browse (to locate a destination) and type in the filename yourwebsite.
Hit Save. You now have the file yourwebsite.cer


File extensions for cryptographic certificates aren&amp;apos;t really as standardized as you&amp;apos;d expect. Windows by default treats double-clicking a .crt file as a request to import the certificate into the Windows Root Certificate store, but treats a .cer file as a request just to view the certificate. So, they&amp;apos;re different in that sense, at least, that Windows has some inherent different meaning for what happens when you double click each type of file.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But the way that Windows handles them when you double-click them is about the only difference between the two. Both extensions just represent that it contains a public certificate. You can rename a file or use one in place of the other in any system or configuration file that I’ve seen. And on non-Windows platforms (and even on Windows), people aren’t particularly careful about which extension they use, and treat them both interchangeably, as there’s no difference between them as long as the contents of the file are correct.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;.pem, &lt;/em&gt;.crt, &lt;em&gt;.ca-bundle, &lt;/em&gt;.cer, &lt;em&gt;.p7b, &lt;/em&gt;.p7s files contain one or more X.509 digital certificate files that use base64 (ASCII) encoding. &lt;/p&gt;
&lt;p&gt;.DER = The DER extension is used for binary DER encoded certificates. These files may also bear the CER or the CRT extension.   Proper English usage would be “I have a DER encoded certificate” not “I have a DER certificate”.&lt;/p&gt;
&lt;p&gt;.PEM = The PEM extension is used for different types of X.509v3 files which contain ASCII (Base64) armored data prefixed with a “—– BEGIN …” line.&lt;/p&gt;
&lt;p&gt;.CRT = The CRT extension is used for certificates. The certificates may be encoded as binary DER or as ASCII PEM. The CER and CRT extensions are nearly synonymous.  Most common among *nix systems&lt;/p&gt;
&lt;p&gt;CER = alternate form of .crt (Microsoft Convention) You can use MS to convert .crt to .cer (.both DER encoded .cer, or base64[PEM] encoded .cer)  The .cer file extension is also recognized by IE as a command to run a MS cryptoAPI command (specifically rundll32.exe cryptext.dll,CryptExtOpenCER) which displays a dialogue for importing and/or viewing certificate contents.&lt;/p&gt;
&lt;p&gt;.KEY = The KEY extension is used both for public and private PKCS#8 keys. The keys may be encoded as binary DER or as ASCII PEM.&lt;/p&gt;
&lt;p&gt;The only time CRT and CER can safely be interchanged is when the encoding type can be identical.  (ie  PEM encoded CRT = PEM encoded CER)&lt;/p&gt;
&lt;p&gt;What is the SSL Certificate Chain?&lt;/p&gt;
&lt;p&gt;There are two types of certificate authorities (CAs): root CAs and intermediate CAs. In order for an SSL certificate to be trusted, that certificate must have been issued by a CA that is included in the trusted store of the device that is connecting.&lt;/p&gt;
&lt;p&gt;Good. I see you want to access this particular page.  I need to send the page to you in a secure way. If I&lt;br&gt;encrypt it using my public key, you won’t be able to decrypt it because you don’t have my private key. And since you don’t have any public key of your own that I can use to encrypt the page for you here’s what I propose&lt;br&gt;Since you can send me encrypted messages that only me can read (you have my public key), send me an encrypted message with an encryption key in it. Just make up a random encryption key that we’ll both use to encrypt and decrypt the messages between us during this session . &lt;/p&gt;
&lt;p&gt;A simple symmetric key is enought. We’ll use the same key to encrypt and decrypt the messages.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;So there’s no way that anybody with your public&lt;br&gt;key can trick others to believe that he is you ? &lt;/li&gt;
&lt;li&gt;Nope. That’s the beauty of the assymetric encryption. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When you send the public key to the victim’s contain your public key + a certificate that this public key belongs to you. If you are a website, then the certificate will contain the domain name of the website. Basically, a certificate says something like:  the following public key “XYZ123” belongs to example.com. &lt;/p&gt;
&lt;p&gt;that’s why we have “Certificate Authorities” like Verisign, Digicert or even Symantec. It is believed that these companies have the necessary trustworthiness to deliver certificates to different •entities.&lt;br&gt;Think of a CA like a registrar for public keys. Just like registrars assert that a domain name belongs to a certain person or company, CAS assert that a public key belongs to a certain domain name (or IP address) . &lt;/p&gt;
&lt;p&gt;The certificate will contain the CA that delivered it, but you don’t even have to check with them because the certificate is signed by them. That signature alone is enough proof that the certificate comes from them. &lt;/p&gt;
&lt;p&gt;A signature is simply a small message that is encrypted with their private key. Since private keys are asymetric, that means that only the associated public key can decrypt it.&lt;/p&gt;
&lt;p&gt;Asymmetric encryption works in both way. public -&amp;gt; private and private -&amp;gt; public.&lt;br&gt;What the public key encrypts only the private key can decrypt, and what the private key can encrypt only the public key can decrypt.&lt;/p&gt;
&lt;p&gt;for PKI, we’re not looking for secrecy here, we only want to prove that we’ re the real authors of the message. Suppose I send you the message “HELLO WORLD”, encrypted with my private key. The encrypted message would be, for example, “XYZ1234”. So you receive “XYZ1234” . If I give you my public key, you would be able to decrypt “XYZ1234” into “HELLO WORLD” . And by doing so, you would have proof that that message was sent by me, because the public key you used decrypts messages that were encrypted by my private key only. And since I am the only person in the universe who has that private key, that proves that I am the author of that message. &lt;/p&gt;
&lt;p&gt;Really nice. So I don’t have to contact the CA to check the validity of the certificate, all I have to do is use their public key to decrypt the signature that’s in it. If it’s the same as err, wait, what should I compare the decrypted signature to again ? &lt;/p&gt;
&lt;p&gt;You have to find the same hash as the one you have calculated. They are sending a small hash of the whole certificate. So what you have to do is to calculate the hash of the certificate yourself, then compare it to the hash you get when you decrypt the signature. If the two are the same that means two things &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The CA’s public key worked, so the signature was encrypted by the associated private key, which means the certificate was really issued by the CA. &lt;/li&gt;
&lt;li&gt;Since the hash is the same, it also means that you are seeing the exact same certificate that the CA delivered to the website you are visiting. The information contained inside hasn’t been tampered with. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That’s really good. So, let me recap one more time . &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I contact you for an HTTPS page. &lt;/li&gt;
&lt;li&gt;You send me an SSL certificate that contains your public key and a signature from the CA that delivered &lt;/li&gt;
&lt;li&gt;I make sure the certificate is valid by using the CA’s public key to decrypt the signature. In parallel, I also calculate the hash of the certificate. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If my hash and the one I got from decrypting the signature are equal, that means that the certificate was really issued by the CA and that I can be sure that the public key you sent me is really yours. &lt;/p&gt;
&lt;p&gt;Because you implicitly trust the CA.&lt;/p&gt;
&lt;p&gt;Let’s continue: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I generate a random key that we’ll both use as a symmetric key to encrypt and decrypt the messages we’ll be sending each other. &lt;/li&gt;
&lt;li&gt;I encrypt this symmetric key with your public key and send it to you. &lt;/li&gt;
&lt;li&gt;You decrypt my message with your private key and find my secret key. &lt;/li&gt;
&lt;li&gt;Every request or response between us will be encrypted with this shared secret symmetric key. &lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;CN&quot;&gt;&lt;a href=&quot;#CN&quot; class=&quot;headerlink&quot; title=&quot;CN&quot;&gt;&lt;/a&gt;CN&lt;/h2&gt;&lt;p&gt;The Common Name (AKA CN) represents the server name protected by the SSL certificate.&lt;/p&gt;
&lt;p&gt;The certificate is valid only if the request hostname matches the certificate common name.&lt;/p&gt;
&lt;p&gt;To check the status, such as&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo openssl x509 -noout -in xxx.com.cer -text&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt; Subject: C=UK, ST=London, L=London, O=AAA Bank, OU=Product and Markets, CN=*.xxxtest.com&lt;br&gt;        Subject Public Key Info:&lt;/p&gt;
&lt;h3 id=&quot;commonName-format&quot;&gt;&lt;a href=&quot;#commonName-format&quot; class=&quot;headerlink&quot; title=&quot;commonName format&quot;&gt;&lt;/a&gt;commonName format&lt;/h3&gt;&lt;p&gt;The common name is not a URL. It doesn’t include any protocol (e.g. http:// or https://), port number, or pathname. For instance, &lt;a href=&quot;https://example.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://example.com&lt;/a&gt; or example.com/path are incorrect. In both cases, the common name should be example.com&lt;/p&gt;
&lt;h4 id=&quot;Common-Name-vs-Subject-Alternative-Name&quot;&gt;&lt;a href=&quot;#Common-Name-vs-Subject-Alternative-Name&quot; class=&quot;headerlink&quot; title=&quot;Common Name vs Subject Alternative Name&quot;&gt;&lt;/a&gt;Common Name vs Subject Alternative Name&lt;/h4&gt;&lt;p&gt;The common name can only contain up to one entry: either a wildcard or non-wildcard name. It’s not possible to specify a list of names covered by an SSL certificate in the common name field.&lt;/p&gt;
&lt;p&gt;The Subject Alternative Name extension (also called Subject Alternate Name or SAN) was introduced to solve this limitation. The SAN allows issuance of multi-name SSL certificates.&lt;/p&gt;
&lt;h1 id=&quot;SHA-2-SSL-Certificates&quot;&gt;&lt;a href=&quot;#SHA-2-SSL-Certificates&quot; class=&quot;headerlink&quot; title=&quot;SHA-2 SSL Certificates&quot;&gt;&lt;/a&gt;SHA-2 SSL Certificates&lt;/h1&gt;&lt;p&gt;Almost all certificates are currently signed with the SHA-2 hash algorithm.&lt;/p&gt;
&lt;p&gt;This article provides a simple overview of the SHA-1 to SHA-2 transition plans, as well additional informations on the SHA-2 hash algorithm and SSL certificates purchased with DNSimple previous than September 2014.&lt;/p&gt;
&lt;p&gt;The SHA family of hashing algorithms were developed by the National Institute of Standards and Technology (NIST) and are used by certificate authorities (CAs) when digitally signing issued certificates.&lt;/p&gt;
&lt;h1 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://support.dnsimple.com/articles/what-is-ssl-certificate-chain/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://support.dnsimple.com/articles/what-is-ssl-certificate-chain/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.thawte.com/resources/getting-started/how-ssl-works/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.thawte.com/resources/getting-started/how-ssl-works/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;What’s-TLS&quot;&gt;&lt;a href=&quot;#What’s-TLS&quot; class=&quot;headerlink&quot; title=&quot;What’s TLS&quot;&gt;&lt;/a&gt;What’s TLS&lt;/h1&gt;&lt;p&gt;TLS (Transport Layer Security) and its
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Distruptor</title>
    <link href="http://www.todzhang.com/2018-09-06-mockito/"/>
    <id>http://www.todzhang.com/2018-09-06-mockito/</id>
    <published>2019-05-31T13:03:27.150Z</published>
    <updated>2019-05-31T13:03:27.150Z</updated>
    
    <content type="html">&lt;h1 id=&quot;multithreading&quot;&gt;&lt;a href=&quot;#multithreading&quot; class=&quot;headerlink&quot; title=&quot;multithreading&quot;&gt;&lt;/a&gt;multithreading&lt;/h1&gt;&lt;p&gt;Concurrent execution of code ia bout two things: mutal exclusion and visibility of change.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mutual exclusion is about managing contented updtes to some resources.&lt;/li&gt;
&lt;li&gt;Visibiliyt of change is about controlling when such changes are made visible to other threads.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;mutal-exclusion&quot;&gt;&lt;a href=&quot;#mutal-exclusion&quot; class=&quot;headerlink&quot; title=&quot;mutal exclusion&quot;&gt;&lt;/a&gt;mutal exclusion&lt;/h2&gt;&lt;p&gt;It is possible to avoid the need for mutal exclusion if you can eliminate the need for contented updates. If your algorithm can guarantee that any given resource is modified by only one thread then utal exclusion is unnecessary.&lt;/p&gt;
&lt;p&gt;Read and write operations require that all changes are made visible to other threads.&lt;/p&gt;
&lt;p&gt;The most costly operation in any concurrent environment is a contended write access.&lt;/p&gt;
&lt;h3 id=&quot;locks&quot;&gt;&lt;a href=&quot;#locks&quot; class=&quot;headerlink&quot; title=&quot;locks&quot;&gt;&lt;/a&gt;locks&lt;/h3&gt;&lt;p&gt;Lock provide mutual exclusion and ensure that the visibility of change occurs in an ordered manner. Locks are incredibly expensive because they require arbitration when contended. This arbitration is achieved by a context switch to the OS kernerl which will suspend threads waiting on a lock until it’s released. During such a context switch , as well as releasing control to the OS which may decided to do other house-keeping tasks which it has control, execution context can lose previously cached data nad instrucionts. This can have a serious performance impact on modern CPU. &lt;/p&gt;
&lt;h1 id=&quot;References&quot;&gt;&lt;a href=&quot;#References&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/protocol-buffers/docs/overview&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developers.google.com/protocol-buffers/docs/overview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;multithreading&quot;&gt;&lt;a href=&quot;#multithreading&quot; class=&quot;headerlink&quot; title=&quot;multithreading&quot;&gt;&lt;/a&gt;multithreading&lt;/h1&gt;&lt;p&gt;Concurrent execution o
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>YAML</title>
    <link href="http://www.todzhang.com/2018-09-16-yaml-config/"/>
    <id>http://www.todzhang.com/2018-09-16-yaml-config/</id>
    <published>2019-05-31T13:03:27.150Z</published>
    <updated>2019-05-31T13:03:27.150Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Key-points&quot;&gt;&lt;a href=&quot;#Key-points&quot; class=&quot;headerlink&quot; title=&quot;Key points&quot;&gt;&lt;/a&gt;Key points&lt;/h1&gt;&lt;p&gt;All YAML files (regardless of their association with Ansible or not) can optionally begin with — and end with …. This is part of the YAML format and indicates the start and end of a document.&lt;/p&gt;
&lt;p&gt;In a way, YAML is to JSON what Markdown is to HTML.&lt;/p&gt;
&lt;p&gt;# &lt;/p&gt;
&lt;h1 id=&quot;References&quot;&gt;&lt;a href=&quot;#References&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/protocol-buffers/docs/overview&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developers.google.com/protocol-buffers/docs/overview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Key-points&quot;&gt;&lt;a href=&quot;#Key-points&quot; class=&quot;headerlink&quot; title=&quot;Key points&quot;&gt;&lt;/a&gt;Key points&lt;/h1&gt;&lt;p&gt;All YAML files (regardless of their as
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Guice</title>
    <link href="http://www.todzhang.com/2018-09-18-Google-Guice/"/>
    <id>http://www.todzhang.com/2018-09-18-Google-Guice/</id>
    <published>2019-05-31T13:03:27.150Z</published>
    <updated>2019-05-31T13:03:27.150Z</updated>
    
    <content type="html">&lt;h1 id=&quot;A-new-type-of-Juice&quot;&gt;&lt;a href=&quot;#A-new-type-of-Juice&quot; class=&quot;headerlink&quot; title=&quot;A new type of Juice&quot;&gt;&lt;/a&gt;A new type of Juice&lt;/h1&gt;&lt;p&gt;Put simply, Guice alleviates the need for factories and the use of new in your Java code. Think of Guice’s @Inject as the new new. You will still need to write factories in some cases, but your code will not depend directly on them. Your code will be easier to change, unit test and reuse in other contexts.&lt;/p&gt;
&lt;p&gt;Guice embraces Java’s type safe nature, especially when it comes to features introduced in Java 5 such as generics and annotations. You might think of Guice as filling in missing features for core Java. Ideally, the language itself would provide most of the same features, but until such a language comes along, we have Guice.&lt;/p&gt;
&lt;p&gt;Guice helps you design better APIs, and the Guice API itself sets a good example. Guice is not a kitchen sink. We justify each feature with at least three use cases. When in doubt, we leave it out. We build general functionality which enables you to extend Guice rather than adding every feature to the core framework.&lt;/p&gt;
&lt;h1 id=&quot;Guice-vs-Spring&quot;&gt;&lt;a href=&quot;#Guice-vs-Spring&quot; class=&quot;headerlink&quot; title=&quot;Guice vs Spring&quot;&gt;&lt;/a&gt;Guice vs Spring&lt;/h1&gt;&lt;p&gt;Spring and Google Guice are two powerful dependency injection frameworks in use today. Both frameworks fully embrace the concepts of dependency injection, but each has its own way of implementing them. Although Spring provides many benefits, it was created in a pre-Java-5 world. The Guice framework takes DI to the next level.&lt;/p&gt;
&lt;p&gt;The advent of Java 5 brought significant changes to the language like generics and annotations: features that enhance the power of Java static typing. Guice is a DI framework that was built from the ground up with the intent to take full advantage of these new features and that has focused on one primary goal: to do dependency injection well.&lt;/p&gt;
&lt;p&gt;Guice aims to make development and debugging easier and faster, not harder and slower. In that vein, Guice steers clear of surprises and magic. You should be able to understand code with or without tools, though tools can make things even easier. When errors do occur, Guice goes the extra mile to generate helpful messages.&lt;/p&gt;
&lt;h3 id=&quot;core-differences-between-the-two-and-see-why-I-prefer-to-use-Guice&quot;&gt;&lt;a href=&quot;#core-differences-between-the-two-and-see-why-I-prefer-to-use-Guice&quot; class=&quot;headerlink&quot; title=&quot;core differences between the two, and see why I prefer to use Guice.&quot;&gt;&lt;/a&gt;core differences between the two, and see why I prefer to use Guice.&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Living in XML Hell&lt;/li&gt;
&lt;li&gt;Eliminating reliance on String identifiers&lt;/li&gt;
&lt;li&gt;Preferring Constructor Injection&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Although Spring and Guice both support constructor and setter injection, each framework has a preference. Spring has long favored setter injection. Back in the early days of Spring, the authors believed the lack of argument names and default arguments in constructor injection reduced clarity. In addition, constructor injection makes it difficult to have optional dependencies, requires dependencies to be configured in a specific order, and forces subclasses to deal with superclass dependencies. Using setter injection eliminates these problems, and so Spring favors that approach.&lt;/p&gt;
&lt;p&gt;The Guice authors saw difficulties with setter injection. One problem is immutability: it is impossible to make immutable a class that uses setter injection. Constructor injection, on the other hand, makes the creation of immutable classes easy, an important consideration in writing multi-threaded applications. In addition, optional dependencies, while perhaps convenient, can introduce confusion about how a class is configured at runtime. Configuring a class through setter injection can often lead to missed required dependencies. Though Spring does provide a @Required annotation to solve this problem, using constructor injection eliminates it by default.&lt;/p&gt;
&lt;p&gt;Constructor injection also makes a class’s dependencies immediately clear at a glance. If you’re writing or modifying a unit test, it’s easy to read what the system-under-test needs. Lastly, because Guice uses types to wire classes together, constructor argument order isn’t an issue. You can feel free to reorder them how you want without needing to modify configuration code at all.&lt;/p&gt;
&lt;p&gt;The potential drawbacks posed by setter injection outweigh the benefits in many common scenarios, and so Guice established a best practice of favoring constructor injection instead. Its API is well-suited to that approach. But if you should choose to switch from one form of injection to the other, Guice makes that easy too. Changing from setter to constructor injection or vice versa is simply a matter of modifying the class in question. Unlike in Spring, you need never touch a configuration file.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Nullifying NullPointerExceptions&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Null is easily one of the most non-communicative return values possible from a method call.&lt;br&gt;Guice hates nulls as much as I do. By default, Guice refuses to inject a null into any object, and if an accidental null shows up during wiring, it fails-fast with a ProvisionException. Guice does allow for the exception case by permitting fields to be annotated with @Nullable, but this is discouraged.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Intruding into the domain&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Guice aims to eliminate all of this boilerplate without sacrificing maintainability.&lt;br&gt;With Guice, you implement modules. Guice passes a binder to your module, and your module uses the binder to map interfaces to implementations. The following module tells Guice to map Service to ServiceImpl in singleton scope:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyModule&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Module&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Binder binder)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          binder.bind(Service.class)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           .to(ServiceImpl.class)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           .in(Scopes.SINGLETON);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;A module tells Guice what we want to inject. Now, how do we tell Guice where we want it injected? With Guice, you annotate constructors, methods and fields with @Inject.&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Client&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Service service;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Inject&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Service service)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.service = service;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           service.go();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Guice-vs-Dependency-Injection-By-Hand&quot;&gt;&lt;a href=&quot;#Guice-vs-Dependency-Injection-By-Hand&quot; class=&quot;headerlink&quot; title=&quot;Guice vs. Dependency Injection By Hand&quot;&gt;&lt;/a&gt;Guice vs. Dependency Injection By Hand&lt;/h2&gt;&lt;p&gt;As you can see, Guice saves you from having to write factory classes. You don’t have to write explicit code wiring clients to their dependencies. If you forget to provide a dependency, Guice fails at startup. Guice handles circular dependencies automatically.&lt;br&gt;Guice enables you to specify scopes declaratively. For example, you don’t have to write the same code to store an object in the HttpSession over and over.&lt;br&gt;In the real world, you often don’t know an implementation class until runtime. You need meta factories or service locators for your factories. Guice addresses these problems with minimal effort.&lt;br&gt;When injecting dependencies by hand, you can easily slip back into old habits and introduce direct dependencies, especially if you’re new to the concept of dependency injection. Using Guice turns the tables and makes doing the right thing easier. Guice helps keep you on track.&lt;/p&gt;
&lt;h2 id=&quot;Guice-annotations&quot;&gt;&lt;a href=&quot;#Guice-annotations&quot; class=&quot;headerlink&quot; title=&quot;Guice annotations&quot;&gt;&lt;/a&gt;Guice annotations&lt;/h2&gt;&lt;p&gt;When possible, Guice enables you to use annotations in lieu of explicit bindings and eliminate even more boilerplate code. Back to our example, if you need an interface to simplify unit testing but you don’t care about compile time dependencies, you can point to a default implementation directly from your interface.&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;meta&quot;&gt;@ImplementedBy&lt;/span&gt;(ServiceImpl.class)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Service&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;If a client needs a Service and Guice can’t find an explicit binding, Guice will&lt;br&gt;inject an instance of ServiceImpl.&lt;/p&gt;
&lt;p&gt;By default, Guice injects a new instance every time. If you want to specify a&lt;br&gt;different scope, you can annotate the implementation class, too.&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Singleton&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ServiceImpl&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Service&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;Architectural-Overview&quot;&gt;&lt;a href=&quot;#Architectural-Overview&quot; class=&quot;headerlink&quot; title=&quot;Architectural Overview&quot;&gt;&lt;/a&gt;Architectural Overview&lt;/h1&gt;&lt;p&gt;We can break Guice’s architecture down into two distinct stages: startup and&lt;br&gt;runtime. You build an Injector during startup and use it to inject objects at runtime.&lt;/p&gt;
&lt;h2 id=&quot;Startup&quot;&gt;&lt;a href=&quot;#Startup&quot; class=&quot;headerlink&quot; title=&quot;Startup&quot;&gt;&lt;/a&gt;Startup&lt;/h2&gt;&lt;p&gt;You configure Guice by implementing Module. You pass Guice a module, Guice passes your module a Binder, and your module uses the binder to configure bindings. A binding most commonly consists of a mapping between an interface and a concrete implementation. For example:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyModule&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Module&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Binder binder)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;comment&quot;&gt;// Bind Foo to FooImpl. Guice will create a new&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;comment&quot;&gt;// instance of FooImpl for every injection.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           binder.bind(Foo.class).to(FooImpl.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;comment&quot;&gt;// Bind Bar to an instance of Bar.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           Bar bar = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Bar();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           binder.bind(Bar.class).toInstance(bar);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;Injecting-Providers&quot;&gt;&lt;a href=&quot;#Injecting-Providers&quot; class=&quot;headerlink&quot; title=&quot;Injecting Providers&quot;&gt;&lt;/a&gt;Injecting Providers&lt;/h1&gt;&lt;p&gt;With normal dependency injection, each type gets exactly one instance of each of its dependent types. The RealBillingService gets one CreditCardProcessor and one TransactionLog. Sometimes you want more than one instance of your dependent types. When this flexibility is necessary, Guice binds a provider. Providers produce a value when the get() method is invoked:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Provider&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;T &lt;span class=&quot;title&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;Provides-Methods&quot;&gt;&lt;a href=&quot;#Provides-Methods&quot; class=&quot;headerlink&quot; title=&quot;@Provides Methods&quot;&gt;&lt;/a&gt;@Provides Methods&lt;/h1&gt;&lt;p&gt;When you need code to create an object, use an @Provides method. The method must be defined within a module, and it must have an @Provides annotation. The method’s return type is the bound type. Whenever the injector needs an instance of that type, it will invoke the method.&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BillingModule&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AbstractModule&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Provides&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;TransactionLog &lt;span class=&quot;title&quot;&gt;provideTransactionLog&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    DatabaseTransactionLog transactionLog = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DatabaseTransactionLog();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    transactionLog.setJdbcUrl(&lt;span class=&quot;string&quot;&gt;&quot;jdbc:mysql://localhost/pizza&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    transactionLog.setThreadPoolSize(&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; transactionLog;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;If the @Provides method has a binding annotation like @PayPal or @Named(“Checkout”), Guice binds the annotated type. Dependencies can be passed in as parameters to the method. The injector will exercise the bindings for each of these before invoking the method.&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Provides&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;@PayPal&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;CreditCardProcessor &lt;span class=&quot;title&quot;&gt;providePayPalCreditCardProcessor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Named(&lt;span class=&quot;string&quot;&gt;&quot;PayPal API key&quot;&lt;/span&gt;)&lt;/span&gt; String apiKey) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  PayPalCreditCardProcessor processor = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PayPalCreditCardProcessor();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  processor.setApiKey(apiKey);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; processor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;References&quot;&gt;&lt;a href=&quot;#References&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h1&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;A-new-type-of-Juice&quot;&gt;&lt;a href=&quot;#A-new-type-of-Juice&quot; class=&quot;headerlink&quot; title=&quot;A new type of Juice&quot;&gt;&lt;/a&gt;A new type of Juice&lt;/h1&gt;&lt;p&gt;Pu
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Citrix receiver</title>
    <link href="http://www.todzhang.com/2018-09-26-Citrix/"/>
    <id>http://www.todzhang.com/2018-09-26-Citrix/</id>
    <published>2019-05-31T13:03:27.150Z</published>
    <updated>2019-05-31T13:03:27.150Z</updated>
    
    <content type="html">&lt;h1 id=&quot;“Cannot-connect-to-remote-desktop”-with-Citrix-Receiver&quot;&gt;&lt;a href=&quot;#“Cannot-connect-to-remote-desktop”-with-Citrix-Receiver&quot; class=&quot;headerlink&quot; title=&quot;“Cannot connect to remote desktop” with Citrix Receiver&quot;&gt;&lt;/a&gt;“Cannot connect to remote desktop” with Citrix Receiver&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; /opt/Citrix/ICAClient/keystore/ &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt;: rm -rf cacerts and finally: ln &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; /etc/ssl/certs cacerts&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Cann’t-show-full-sreen-in-linux-citrix-receiver&quot;&gt;&lt;a href=&quot;#Cann’t-show-full-sreen-in-linux-citrix-receiver&quot; class=&quot;headerlink&quot; title=&quot;Cann’t show full sreen in linux citrix receiver&quot;&gt;&lt;/a&gt;Cann’t show full sreen in linux citrix receiver&lt;/h1&gt;&lt;p&gt;There is workaround, i.e. Press &lt;code&gt;Alt&lt;/code&gt; and drag RDP window, then maximum it.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;“Cannot-connect-to-remote-desktop”-with-Citrix-Receiver&quot;&gt;&lt;a href=&quot;#“Cannot-connect-to-remote-desktop”-with-Citrix-Receiver&quot; class=&quot;h
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Citrix receiver</title>
    <link href="http://www.todzhang.com/2018-10-13-SBE/"/>
    <id>http://www.todzhang.com/2018-10-13-SBE/</id>
    <published>2019-05-31T13:03:27.150Z</published>
    <updated>2019-05-31T13:03:27.150Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Simple-Binary-Encoding-SBE&quot;&gt;&lt;a href=&quot;#Simple-Binary-Encoding-SBE&quot; class=&quot;headerlink&quot; title=&quot;Simple Binary Encoding (SBE)&quot;&gt;&lt;/a&gt;Simple Binary Encoding (SBE)&lt;/h1&gt;&lt;p&gt;SBE is an OSI layer 6 presentation for encoding and decoding binary application messages for low-latency financial applications. &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Simple-Binary-Encoding-SBE&quot;&gt;&lt;a href=&quot;#Simple-Binary-Encoding-SBE&quot; class=&quot;headerlink&quot; title=&quot;Simple Binary Encoding (SBE)&quot;&gt;&lt;/a&gt;Simple
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Inter Processes Communication</title>
    <link href="http://www.todzhang.com/2019-01-03-IPC/"/>
    <id>http://www.todzhang.com/2019-01-03-IPC/</id>
    <published>2019-05-31T13:03:27.150Z</published>
    <updated>2019-05-31T13:03:27.150Z</updated>
    
    <content type="html">&lt;h1 id=&quot;IPC&quot;&gt;&lt;a href=&quot;#IPC&quot; class=&quot;headerlink&quot; title=&quot;IPC&quot;&gt;&lt;/a&gt;IPC&lt;/h1&gt;&lt;p&gt;interprocess communication (IPC)&lt;/p&gt;
&lt;p&gt;Posted by: Margaret Rouse&lt;br&gt;WhatIs.com&lt;/p&gt;
&lt;p&gt;Interprocess communication (IPC) is a set of programming interfaces that allow a programmer to coordinate activities among different program processes that can run concurrently in an operating system. This allows a program to handle many user requests at the same time. Since even a single user request may result in multiple processes running in the operating system on the user’s behalf, the processes need to communicate with each other. The IPC interfaces make this possible. Each IPC method has its own advantages and limitations so it is not unusual for a single program to use all of the IPC methods.&lt;/p&gt;
&lt;p&gt;Inter process communication (IPC) is a mechanism which allows processes to communicate each other and synchronize their actions. The communication between these processes can be seen as a method of co-operation between them. Processes can communicate with each other using these two ways:&lt;br&gt;Shared Memory&lt;br&gt;Message passing&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;IPC&quot;&gt;&lt;a href=&quot;#IPC&quot; class=&quot;headerlink&quot; title=&quot;IPC&quot;&gt;&lt;/a&gt;IPC&lt;/h1&gt;&lt;p&gt;interprocess communication (IPC)&lt;/p&gt;
&lt;p&gt;Posted by: Margaret Rouse&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Seconds</title>
    <link href="http://www.todzhang.com/2018-11-01-seconds/"/>
    <id>http://www.todzhang.com/2018-11-01-seconds/</id>
    <published>2019-05-31T13:03:27.150Z</published>
    <updated>2019-05-31T13:07:34.336Z</updated>
    
    <content type="html">&lt;h1 id=&quot;nano-seconds&quot;&gt;&lt;a href=&quot;#nano-seconds&quot; class=&quot;headerlink&quot; title=&quot;nano seconds&quot;&gt;&lt;/a&gt;nano seconds&lt;/h1&gt;&lt;p&gt;ns: 1/1,000,000,000 second, i.e. 10(-9) seconds&lt;br&gt;1 ns = 1/1,000 micro second&lt;br&gt;1 ns = 1/1,000,000 milis second&lt;/p&gt;
&lt;p&gt;used in telecommunications&lt;/p&gt;
&lt;h1 id=&quot;micro-seconds&quot;&gt;&lt;a href=&quot;#micro-seconds&quot; class=&quot;headerlink&quot; title=&quot;micro seconds&quot;&gt;&lt;/a&gt;micro seconds&lt;/h1&gt;&lt;p&gt;Its symbol is μs. 微秒&lt;br&gt;1 μs = 1000 ns&lt;br&gt;1 μs = 1/1,000 milli Seconds&lt;/p&gt;
&lt;p&gt;8.01 μs： light took the time to travel 1 mile in vaccum&lt;/p&gt;
&lt;p&gt;The average human eye blink takes 350,000 microseconds (just over 1/3 of one second).&lt;br&gt;The average human finger snap takes 150,000 microseconds (just over 1/7 of one second).&lt;br&gt;A camera flash illuminates for 1000 microseconds.&lt;/p&gt;
&lt;h1 id=&quot;milli-second&quot;&gt;&lt;a href=&quot;#milli-second&quot; class=&quot;headerlink&quot; title=&quot;milli second&quot;&gt;&lt;/a&gt;milli second&lt;/h1&gt;&lt;p&gt;ms 毫秒&lt;br&gt;1 ms = 1/1,000 second&lt;br&gt;1 ms = 1,000 μs = 1,000,000 ns&lt;/p&gt;
&lt;p&gt;3 ms: fly flgp its wing&lt;br&gt;5 ms: bee flap wing&lt;br&gt;300-400 ms: human eye to blink&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;nano-seconds&quot;&gt;&lt;a href=&quot;#nano-seconds&quot; class=&quot;headerlink&quot; title=&quot;nano seconds&quot;&gt;&lt;/a&gt;nano seconds&lt;/h1&gt;&lt;p&gt;ns: 1/1,000,000,000 second, i.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Foreign Exchange</title>
    <link href="http://www.todzhang.com/2019-01-17-FX-ForeignExchange/"/>
    <id>http://www.todzhang.com/2019-01-17-FX-ForeignExchange/</id>
    <published>2019-05-31T13:03:27.150Z</published>
    <updated>2019-05-31T13:03:27.150Z</updated>
    
    <content type="html">&lt;h1 id=&quot;currency-pairs&quot;&gt;&lt;a href=&quot;#currency-pairs&quot; class=&quot;headerlink&quot; title=&quot;currency pairs&quot;&gt;&lt;/a&gt;currency pairs&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Direct ccy: means USD is part of currency pair&lt;/li&gt;
&lt;li&gt;Cross ccy: means ccy wihtout USD, so except NDF, the deal will be split to legs, both with USD. e.g. EUR/GBP will split to EURUSD and USDGBP&lt;/li&gt;
&lt;li&gt;non-convention ccy pair: that’s depends on where you sit on. e.g. for Aussie traders, they would trade AUDNZD, but for kiwi traders, they would trade for NZDAUD, then AUDNZD would be non-convention&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;currency-pairs&quot;&gt;&lt;a href=&quot;#currency-pairs&quot; class=&quot;headerlink&quot; title=&quot;currency pairs&quot;&gt;&lt;/a&gt;currency pairs&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Direct ccy: mean
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Zoo-keeper</title>
    <link href="http://www.todzhang.com/2018-08-19-ZooKeeper/"/>
    <id>http://www.todzhang.com/2018-08-19-ZooKeeper/</id>
    <published>2019-05-31T13:03:27.149Z</published>
    <updated>2019-05-31T13:03:27.149Z</updated>
    
    <content type="html">&lt;h1 id=&quot;ZK-Motto&quot;&gt;&lt;a href=&quot;#ZK-Motto&quot; class=&quot;headerlink&quot; title=&quot;ZK Motto&quot;&gt;&lt;/a&gt;ZK Motto&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;the motto “ZooKeeper: Because Coordinating Distributed Systems is a Zoo.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Features-of-Zookeeper&quot;&gt;&lt;a href=&quot;#Features-of-Zookeeper&quot; class=&quot;headerlink&quot; title=&quot;Features of Zookeeper&quot;&gt;&lt;/a&gt;Features of Zookeeper&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Synchronization − Mutual exclusion and co-operation between server processes.&lt;/li&gt;
&lt;li&gt;Ordered Messages - The strict ordering means that sophisticated synchronization primitives can be implemented at the client.&lt;/li&gt;
&lt;li&gt;Reliability - The reliability aspects keep it from being a single point of failure.&lt;/li&gt;
&lt;li&gt;Atomicity − Data transfer either succeeds or fails completely, but no transaction is partial.&lt;/li&gt;
&lt;li&gt;High performant - The performance aspects of Zookeeper means it can be used in large, distributed systems.&lt;/li&gt;
&lt;li&gt;Distributed.&lt;/li&gt;
&lt;li&gt;High avaliablity.&lt;/li&gt;
&lt;li&gt;Fault-tolerant.&lt;/li&gt;
&lt;li&gt;Loose coupling.&lt;/li&gt;
&lt;li&gt;Partial failure.&lt;/li&gt;
&lt;li&gt;High throughput and low latency - data is stored data in memory and on disk as well.&lt;/li&gt;
&lt;li&gt;Replicated.&lt;/li&gt;
&lt;li&gt;Automatic failover: When a Zookeeper dies, the session is automatically migrated over to another Zookeeper.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Different-type-of-data&quot;&gt;&lt;a href=&quot;#Different-type-of-data&quot; class=&quot;headerlink&quot; title=&quot;Different type of data&quot;&gt;&lt;/a&gt;Different type of data&lt;/h2&gt;&lt;p&gt;When designing an application with ZooKeeper, one ideally separates application data from control or coordination data. For example, the users of a web-mail service are interested in their mailbox content, but not on which server is handling the requests of a particular mailbox. The mailbox content is application data, whereas the mapping of the mailbox to a specific mail server is part of the coordination data (or metadata). A ZooKeeper ensemble manages the latter.&lt;/p&gt;
&lt;p&gt;The multiple processes consequently need to implement mutual exclusion. We can actually think of the task of acquiring mastership as the one of acquiring a lock: the process that acquires the mastership lock exercises the role of master.&lt;/p&gt;
&lt;p&gt;Coordination does not always take the form of synchronization primitives like leader election or locks. Configuration metadata is often used as a way for a process to convey what others should be doing. For example, in a master-worker system, workers need to know the tasks that have been assigned to them, and this information must be available even if the master crashes.&lt;/p&gt;
&lt;h2 id=&quot;How-world-work-without-ZooKeeper&quot;&gt;&lt;a href=&quot;#How-world-work-without-ZooKeeper&quot; class=&quot;headerlink&quot; title=&quot;How world work without ZooKeeper&quot;&gt;&lt;/a&gt;How world work without ZooKeeper&lt;/h2&gt;&lt;p&gt;It is certainly possible to build distributed systems without using ZooKeeper. ZooKeep‐ er, however, offers developers the possibility of focusing more on application logic rather than on arcane distributed systems concepts. Programming distributed systems without ZooKeeper is possible, but more difficult.&lt;/p&gt;
&lt;h2 id=&quot;What-does-ZooKeeper-does-not-do&quot;&gt;&lt;a href=&quot;#What-does-ZooKeeper-does-not-do&quot; class=&quot;headerlink&quot; title=&quot;What does ZooKeeper does not do&quot;&gt;&lt;/a&gt;What does ZooKeeper does not do&lt;/h2&gt;&lt;p&gt;The ensemble of ZooKeeper servers manages critical application data related to coor‐ dination. ZooKeeper is not for bulk storage. For bulk storage of application data, there are a number of options available, such as databases and distributed file systems. When designing an application with ZooKeeper, one ideally separates application data from control or coordination data.&lt;/p&gt;
&lt;p&gt;ZooKeeper, however, does not implement the tasks for you. It does not elect a master or track live processes for the application out of the box. Instead, it provides the tools for implementing such tasks. The developer decides what coordination tasks to implement.&lt;/p&gt;
&lt;p&gt;Processes in a distributed system have two broad options for communication: they can exchange messages directly through a network, or read and write to some shared storage. ZooKeeper uses the shared storage model to let applications implement coordination and synchronization primitives. But shared storage itself requires network communi‐ cation between the processes and the storage. It is important to stress the role of network communication because it is an important source of complications in the design of a distributed system.&lt;/p&gt;
&lt;p&gt;This scenario leads to a problem commonly called split-brain: two or more parts of the system make progress independ‐ ently, leading to inconsistent behavior. As part of coming up with a way to cope with master failures, it is critical that we avoid split-brain scenarios.&lt;/p&gt;
&lt;h1 id=&quot;Tasks&quot;&gt;&lt;a href=&quot;#Tasks&quot; class=&quot;headerlink&quot; title=&quot;Tasks&quot;&gt;&lt;/a&gt;Tasks&lt;/h1&gt;&lt;p&gt;The following requirements for our master-worker architecture:&lt;br&gt;Master election&lt;br&gt;It is critical for progress to have a master available to assign tasks to workers.&lt;br&gt;Crash detection&lt;br&gt;The master must be able to detect when workers crash or disconnect.&lt;br&gt;Group membership management&lt;br&gt;The master must be able to figure out which workers are available to execute tasks.&lt;br&gt;Metadata management&lt;br&gt;The master and the workers must be able to store assignments and execution sta‐ tuses in a reliable manner.&lt;/p&gt;
&lt;h1 id=&quot;CAP&quot;&gt;&lt;a href=&quot;#CAP&quot; class=&quot;headerlink&quot; title=&quot;CAP&quot;&gt;&lt;/a&gt;CAP&lt;/h1&gt;&lt;p&gt;known as CAP, which stands for Consistency, Availability, and Partition-tolerance, says that when designing a distributed system we may want all three of those properties, but that no system can handle all three.2 Zoo‐ Keeper has been designed with mostly consistency and availability in mind, although it also provides read-only capability in the presence of network partitions.&lt;/p&gt;
&lt;h1 id=&quot;ZooKeeper-Basics&quot;&gt;&lt;a href=&quot;#ZooKeeper-Basics&quot; class=&quot;headerlink&quot; title=&quot;ZooKeeper Basics&quot;&gt;&lt;/a&gt;ZooKeeper Basics&lt;/h1&gt;&lt;p&gt;Several primitives used for coordination are commonly shared across many applica‐ tions. Consequently, one way of designing a service used for coordination is to come up with a list of primitives, expose calls to create instances of each primitive, and ma‐ nipulate these instances directly. For example, we could say that distributed locks con‐ stitute an important primitive and expose calls to create, acquire, and release locks.&lt;br&gt;Such a design, however, suffers from a couple of important shortcomings. First, we need to either come up with an exhaustive list of primitives used beforehand, or keep ex‐ tending the API to introduce new primitives. Second, it does not give flexibility to the application using the service to implement primitives in the way that is most suitable for it.&lt;br&gt;We consequently have taken a different path with ZooKeeper. ZooKeeper does not ex‐ pose primitives directly. Instead, it exposes a file system-like API comprised of a small set of calls that enables applications to implement their own primitives. We typically use recipes to denote these implementations of primitives. Recipes include ZooKeeper operations that manipulate small data nodes, called znodes, that are organized hier‐ archically as a tree, just like in a file system.&lt;/p&gt;
&lt;h2 id=&quot;znodes&quot;&gt;&lt;a href=&quot;#znodes&quot; class=&quot;headerlink&quot; title=&quot;znodes&quot;&gt;&lt;/a&gt;znodes&lt;/h2&gt;&lt;p&gt;a few other znodes that could be useful in a master- worker configuration:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The /workers znode is the parent znode to all znodes representing a worker avail‐ able in the system. Figure 2-1 shows that one worker (foo.com:2181) is available. If a worker becomes unavailable, its znode should be removed from /workers.&lt;/li&gt;
&lt;li&gt;The /tasks znode is the parent of all tasks created and waiting for workers to execute them. Clients of the master-worker application add new znodes as children of /tasks to represent new tasks and wait for znodes representing the status of the task.&lt;/li&gt;
&lt;li&gt;The /assign znode is the parent of all znodes representing an assignment of a task to a worker. When a master assigns a task to a worker, it adds a child znode to /assign.&lt;h2 id=&quot;API&quot;&gt;&lt;a href=&quot;#API&quot; class=&quot;headerlink&quot; title=&quot;API&quot;&gt;&lt;/a&gt;API&lt;/h2&gt;API Overview&lt;br&gt;Znodes may or may not contain data. If a znode contains any data, the data is stored as a byte array. The exact format of the byte array is specific to each application, and ZooKeeper does not directly provide support to parse it. Serialization packages such as Protocol Buffers, Thrift, Avro, and MessagePack may be handy for dealing with the format of the data stored in znodes, but sometimes string encodings such as UTF-8 or ASCII suffice.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;The-ZooKeeper-API-exposes-the-following-operations&quot;&gt;&lt;a href=&quot;#The-ZooKeeper-API-exposes-the-following-operations&quot; class=&quot;headerlink&quot; title=&quot;The ZooKeeper API exposes the following operations:&quot;&gt;&lt;/a&gt;The ZooKeeper API exposes the following operations:&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;create /path data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Creates a znode named with /path and containing data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;delete /path&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Deletes the znode /path&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;exists /path&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Checks whether /path exists&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setData /path data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Sets the data of znode /path to data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;getData /path&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Returns the data in /path&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;getChildren /path&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Returns the list of children under /path&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;One important note is that ZooKeeper does not allow partial writes or reads of the znode data. When setting the data of a znode or reading it, the content of the znode is replaced or read entirely.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ZooKeeper clients connect to a ZooKeeper service and establish a session through which they make API calls. &lt;/p&gt;
&lt;p&gt;If a worker becomes unavailable, its session expires and its znode in /workers disappears automatically.&lt;/p&gt;
&lt;p&gt;An ephemeral znode can be deleted in two situations:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When the session of the client creator ends, either by expiration or because it ex‐ plicitly closed.&lt;/li&gt;
&lt;li&gt;When a client, not necessarily the creator, deletes it.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Sequential-znodes&quot;&gt;&lt;a href=&quot;#Sequential-znodes&quot; class=&quot;headerlink&quot; title=&quot;Sequential znodes&quot;&gt;&lt;/a&gt;Sequential znodes&lt;/h3&gt;&lt;p&gt;A znode can also be set to be sequential. A sequential znode is assigned a unique, mo‐ notonically increasing integer. This sequence number is appended to the path used to create the znode. For example, if a client creates a sequential znode with the path /tasks/ task-, ZooKeeper assigns a sequence number, say 1, and appends it to the path. The path of the znode becomes /tasks/task-1. Sequential znodes provide an easy way to create znodes with unique names. They also provide a way to easily see the creation order of znodes.&lt;/p&gt;
&lt;h3 id=&quot;watch&quot;&gt;&lt;a href=&quot;#watch&quot; class=&quot;headerlink&quot; title=&quot;watch&quot;&gt;&lt;/a&gt;watch&lt;/h3&gt;&lt;p&gt;This is a common problem with polling. To replace the client polling, we have opted for a mechanism based on notifications: clients register with ZooKeeper to receive notifi‐ cations of changes to znodes. Registering to receive a notification for a given znode consists of setting a watch. A watch is a one-shot operation, which means that it triggers one notification. To receive multiple notifications over time, the client must set a new watch upon receiving each notification. &lt;/p&gt;
&lt;h2 id=&quot;Versions&quot;&gt;&lt;a href=&quot;#Versions&quot; class=&quot;headerlink&quot; title=&quot;Versions&quot;&gt;&lt;/a&gt;Versions&lt;/h2&gt;&lt;p&gt;Each znode has a version number associated with it that is incremented every time its data changes. A couple of operations in the API can be executed conditionally: setDa ta and delete. Both calls take a version as an input parameter, and the operation suc‐ ceeds only if the version passed by the client matches the current version on the server. The use of versions is important when multiple ZooKeeper clients might be trying to perform operations over the same znode. For example, suppose that a client c1 writes a znode /config containing some configuration. If another client c2 concurrently updates the znode, the version c1 has is stale and the setData of c1 must not succeed. Using versions avoids such situations. In this case, the version that c1 uses when writing back doesn’t match and the operation fails. &lt;/p&gt;
&lt;h1 id=&quot;ZooKeeper-Architecture&quot;&gt;&lt;a href=&quot;#ZooKeeper-Architecture&quot; class=&quot;headerlink&quot; title=&quot;ZooKeeper Architecture&quot;&gt;&lt;/a&gt;ZooKeeper Architecture&lt;/h1&gt;&lt;p&gt;Now that we have discussed at a high level the operations that ZooKeeper exposes to applications, we need to understand more of how the service actually works. Applica‐ tions make calls to ZooKeeper through a client library. The client library is responsible for the interaction with ZooKeeper servers.&lt;/p&gt;
&lt;p&gt;ZooKeeper servers run in two modes: standalone and quorum. Standalone mode is pretty much what the term says: there is a single server, and ZooKeeper state is not replicated. In quorum mode, a group of ZooKeeper servers, which we call a ZooKeeper ensemble, replicates the state, and together they serve client requests. From this point on, we use the term “ZooKeeper ensemble” to denote an installation of servers. This installation could contain a single server and operate in standalone mode or contain a group of servers and operate in quorum mode.&lt;/p&gt;
&lt;h2 id=&quot;ZooKeeper-Quorums&quot;&gt;&lt;a href=&quot;#ZooKeeper-Quorums&quot; class=&quot;headerlink&quot; title=&quot;ZooKeeper Quorums&quot;&gt;&lt;/a&gt;ZooKeeper Quorums&lt;/h2&gt;&lt;p&gt;In quorum mode, ZooKeeper replicates its data tree across all servers in the ensemble. But if a client had to wait for every server to store its data before continuing, the delays might be unacceptable. In public administration, a quorum is the minimum number of legislators required to be present for a vote. In ZooKeeper, it is the minimum number of servers that have to be running and available in order for ZooKeeper to work. This number is also the minimum number of servers that have to store a client’s data before telling the client it is safely stored. For instance, we might have five ZooKeeper servers in total, but a quorum of three. So long as any three servers have stored the data, the client can continue, and the other two servers will eventually catch up and store the data.&lt;/p&gt;
&lt;p&gt;It is important to choose an adequate size for the quorum. Quorums must guarantee that, regardless of delays and crashes in the system, any update request the service pos‐ itively acknowledges will persist until another request supersedes it.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;The bottom line is that we should always shoot for an odd number of servers.&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;sessions&quot;&gt;&lt;a href=&quot;#sessions&quot; class=&quot;headerlink&quot; title=&quot;sessions&quot;&gt;&lt;/a&gt;sessions&lt;/h2&gt;&lt;p&gt;All operations a client submits to ZooKeeper are associated to a session. When a session ends for any reason, the ephemeral nodes created during that session disappear.&lt;/p&gt;
&lt;p&gt;the session may be moved to a different server if the client has not heard from its current server for some time. Moving a session to a different server is handled transparently by the ZooKeeper client library.&lt;/p&gt;
&lt;p&gt;Sessions offer order guarantees, which means that requests in a session are executed in FIFO (first in, first out) order. Typically, a client has only a single session open, so its requests are all executed in FIFO order. If a client has multiple concurrent sessions, FIFO ordering is not necessarily preserved across the sessions.&lt;/p&gt;
&lt;h2 id=&quot;Commands&quot;&gt;&lt;a href=&quot;#Commands&quot; class=&quot;headerlink&quot; title=&quot;Commands&quot;&gt;&lt;/a&gt;Commands&lt;/h2&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[zk: 127.0.0.1:2181,127.0.0.1:2182(CONNECTED) 5] &lt;span class=&quot;built_in&quot;&gt;stat&lt;/span&gt; /master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cZxid = 0x4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ctime = Mon Aug 20 21:10:23 AEST 2018&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mZxid = 0x4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mtime = Mon Aug 20 21:10:23 AEST 2018&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pZxid = 0x4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cversion = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dataVersion = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;aclVersion = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ephemeralOwner = 0x10003c70e250001&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dataLength = 11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;numChildren = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[zk: 127.0.0.1:2181,127.0.0.1:2182(CONNECTED) 8] create /workers &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Created /workers&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[zk: 127.0.0.1:2181,127.0.0.1:2182(CONNECTED) 9] create /tasks &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Created /tasks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[zk: 127.0.0.1:2181,127.0.0.1:2182(CONNECTED) 10] create /assign &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Created /assign&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[zk: 127.0.0.1:2181,127.0.0.1:2182(CONNECTED) 11] ls /&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[assign, master, tasks, workers, zookeeper]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;link-master-and-workers&quot;&gt;&lt;a href=&quot;#link-master-and-workers&quot; class=&quot;headerlink&quot; title=&quot;link master and workers&quot;&gt;&lt;/a&gt;link master and workers&lt;/h2&gt;&lt;p&gt;In a real application, these znodes need to be created either by a primary process before it starts assigning tasks or by some bootstrap procedure. Regardless of how they are created, once they exist, the master needs to watch for changes in the children of /workers and /tasks:&lt;br&gt;    [zk: localhost:2181(CONNECTED) 4] ls /workers true&lt;br&gt;    []&lt;br&gt;    [zk: localhost:2181(CONNECTED) 5] ls /tasks true&lt;br&gt;    []&lt;br&gt;    [zk: localhost:2181(CONNECTED) 6]&lt;br&gt;Note that we have used the optional true parameter with ls, as we did before with stat on the master. The true parameter, in this case, creates a watch for changes to the set of children of the corresponding znode.&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[zk: 127.0.0.1:2181,127.0.0.1:2182(CONNECTED) 14] create &lt;span class=&quot;_&quot;&gt;-e&lt;/span&gt; /workers/todd-worker1 &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Created /workers/todd-worker1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;WATCHER::&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;WatchedEvent state:SyncConnected &lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;:NodeChildrenChanged path:/workers&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[zk: 127.0.0.1:2181,127.0.0.1:2182(CONNECTED) 15]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Recall that the master has set a watch for changes to the children of /workers. Once the worker creates a znode under /workers, the master observes the following notification:&lt;br&gt;    WATCHER::&lt;br&gt;    WatchedEvent state:SyncConnected type:NodeChildrenChanged path:/workers&lt;/p&gt;
&lt;h2 id=&quot;Tasks-workflows&quot;&gt;&lt;a href=&quot;#Tasks-workflows&quot; class=&quot;headerlink&quot; title=&quot;Tasks workflows&quot;&gt;&lt;/a&gt;Tasks workflows&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Clients add tasks to the system. Here we assume that the client asks the master-worker system to run a command cmd. To add a task to the system, a client executes the following:&lt;br&gt;  [zk: localhost:2181(CONNECTED) 0] create -s /tasks/task- “cmd”&lt;br&gt;  Created /tasks/task-0000000000&lt;/li&gt;
&lt;li&gt;The client now has to wait until the task is executed. &lt;/li&gt;
&lt;li&gt;The worker that executes the task creates a status znode for the task once the task completes. &lt;/li&gt;
&lt;li&gt;The client determines that the task has been executed when it sees that a status znode for the task has been created; &lt;/li&gt;
&lt;li&gt;the client consequently must watch for the creation of the status znode:&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[zk: 127.0.0.1:2181,127.0.0.1:2182(CONNECTED) 18] create &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; /tasks/task- &lt;span class=&quot;string&quot;&gt;&quot;cmd&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Created /tasks/task-0000000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[zk: 127.0.0.1:2181,127.0.0.1:2182(CONNECTED) 19] ls /tasks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[task-0000000000]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[zk: 127.0.0.1:2181,127.0.0.1:2182(CONNECTED) 20] ls -w /tasks/task-0000000000 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[zk: 127.0.0.1:2181,127.0.0.1:2182(CONNECTED) 21] ls -w /workers&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[todd-worker1]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[zk: 127.0.0.1:2181,127.0.0.1:2182(CONNECTED) 22] create /assign/todd-worker1/task-0000000000 &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ephemerals cannot have children: /assign/todd-worker1/task-0000000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[zk: 127.0.0.1:2181,127.0.0.1:2182(CONNECTED) 23] delete /assign/todd-worker1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[zk: 127.0.0.1:2181,127.0.0.1:2182(CONNECTED) 24] create /assign/todd-worker1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Created /assign/todd-worker1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[zk: 127.0.0.1:2181,127.0.0.1:2182(CONNECTED) 25] create /assign/todd-worker1/task-0000000000 &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Created /assign/todd-worker1/task-0000000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[zk: 127.0.0.1:2181,127.0.0.1:2182(CONNECTED) 26] ls /assign/todd-worker1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[task-0000000000]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Once the worker finishes executing the task, it adds a status znode to /tasks:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [zk: localhost:2181(CONNECTED) 4] create /tasks/task-0000000000/status &lt;span class=&quot;string&quot;&gt;&quot;done&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Created /tasks/task-0000000000/status&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [zk: localhost:2181(CONNECTED) 5]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# and the client receives a notification and checks the result:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;WATCHER::&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    WatchedEvent state:SyncConnected &lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;:NodeChildrenChanged&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    path:/tasks/task-0000000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [zk: localhost:2181(CONNECTED) 2] get /tasks/task-0000000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;cmd&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;ZooKeeper-API&quot;&gt;&lt;a href=&quot;#ZooKeeper-API&quot; class=&quot;headerlink&quot; title=&quot;ZooKeeper API&quot;&gt;&lt;/a&gt;ZooKeeper API&lt;/h1&gt;&lt;h2 id=&quot;Setting-the-ZooKeeper-CLASSPATH&quot;&gt;&lt;a href=&quot;#Setting-the-ZooKeeper-CLASSPATH&quot; class=&quot;headerlink&quot; title=&quot;Setting the ZooKeeper CLASSPATH&quot;&gt;&lt;/a&gt;Setting the ZooKeeper CLASSPATH&lt;/h2&gt;&lt;p&gt; ZOOBINDIR=”&lt;path_to_distro&gt;/bin”&lt;br&gt;    . “$ZOOBINDIR”/zkEnv.sh&lt;/path_to_distro&gt;&lt;/p&gt;
&lt;h2 id=&quot;handle&quot;&gt;&lt;a href=&quot;#handle&quot; class=&quot;headerlink&quot; title=&quot;handle&quot;&gt;&lt;/a&gt;handle&lt;/h2&gt;&lt;p&gt;The ZooKeeper API is built around a ZooKeeper handle that is passed to every API call. This handle represents a session with ZooKeeper. A session that is established with one ZooKeeper server will migrate to another ZooKeeper server if its connection is broken. As long as the session is alive, the handle will remain valid, and the ZooKeeper client library will continually try to keep an active connection to a ZooKeeper server to keep the session alive. If the handle is closed, the ZooKeeper client library will tell the ZooKeeper servers to kill the session. If ZooKeeper decides that a client has died, it will invalidate the session. If a client later tries to reconnect to a Zoo‐ Keeper server using the handle that corresponds to the invalidated session, the Zoo‐ Keeper server informs the client library that the session is no longer valid and the handle returns errors for all operations.&lt;/p&gt;
&lt;p&gt;The constructor that creates a ZooKeeper handle usually looks like:&lt;br&gt;ZooKeeper(&lt;br&gt;String connectString, int sessionTimeout, Watcher watcher)&lt;/p&gt;
&lt;h3 id=&quot;Implementing-a-Watcher&quot;&gt;&lt;a href=&quot;#Implementing-a-Watcher&quot; class=&quot;headerlink&quot; title=&quot;Implementing a Watcher&quot;&gt;&lt;/a&gt;Implementing a Watcher&lt;/h3&gt;&lt;p&gt;To receive notifications from ZooKeeper, we need to implement watchers. Let’s look a bit more closely at the Watcher interface. It has the following declaration:&lt;br&gt;public interface Watcher {&lt;br&gt;void process(WatchedEvent event);&lt;br&gt;}&lt;/p&gt;
&lt;h3 id=&quot;Sample-ZooKeeper-handle&quot;&gt;&lt;a href=&quot;#Sample-ZooKeeper-handle&quot; class=&quot;headerlink&quot; title=&quot;Sample ZooKeeper handle&quot;&gt;&lt;/a&gt;Sample ZooKeeper handle&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.apache.zookeeper.ZooKeeper; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.apache.zookeeper.Watcher;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Master&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Watcher&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ZooKeeper zk;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String hostPort;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Master(String hostPort) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.hostPort = hostPort;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;startZK&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;zk = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ZooKeeper(hostPort, &lt;span class=&quot;number&quot;&gt;15000&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(WatchedEvent e)&lt;/span&gt; &lt;/span&gt;&amp;#123; System.out.println(e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String args[])&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Master m = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Master(args[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            m.startZK();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// wait for a bit&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Thread.sleep(&lt;span class=&quot;number&quot;&gt;60000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;nce we have connected to ZooKeeper, there will be a background thread that will maintain the ZooKeeper session. This thread is a daemon thread, which means that the program may exit even if the thread is still active. Here we sleep for a bit so that we can see some events come in before the program exits.&lt;br&gt;We can compile this simple example using the following:&lt;br&gt;$ javac -cp $CLASSPATH Master.java&lt;br&gt;Once we have compiled Master.java, we run it and see the following:&lt;br&gt;$ java -cp $CLASSPATH Master 127.0.0.1:2181&lt;/p&gt;
&lt;h2 id=&quot;disconnect&quot;&gt;&lt;a href=&quot;#disconnect&quot; class=&quot;headerlink&quot; title=&quot;disconnect&quot;&gt;&lt;/a&gt;disconnect&lt;/h2&gt;&lt;p&gt;When developers see the Disconnected event, some think they need to create a new ZooKeeper handle to reconnect to the service. Do not do that! See what happens when you start the server, start the Master, and then stop and start the server while the Master is still running. You should see the SyncConnected event followed by the Disconnec ted event and then another SyncConnected event. The ZooKeeper client library takes care of reconnecting to the service for you. Unfortunately, network outages and server failures happen. Usually, ZooKeeper can deal with these failures.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ZK-Motto&quot;&gt;&lt;a href=&quot;#ZK-Motto&quot; class=&quot;headerlink&quot; title=&quot;ZK Motto&quot;&gt;&lt;/a&gt;ZK Motto&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;the motto “ZooKeeper: Because Coo
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Sudo in a Nutshell</title>
    <link href="http://www.todzhang.com/2018-08-21-sudo/"/>
    <id>http://www.todzhang.com/2018-08-21-sudo/</id>
    <published>2019-05-31T13:03:27.149Z</published>
    <updated>2019-05-31T13:03:27.149Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Sudo-in-a-Nutshell&quot;&gt;&lt;a href=&quot;#Sudo-in-a-Nutshell&quot; class=&quot;headerlink&quot; title=&quot;Sudo in a Nutshell&quot;&gt;&lt;/a&gt;Sudo in a Nutshell&lt;/h1&gt;&lt;p&gt;Sudo (su “do”) allows a system administrator to give certain users (or groups of users) the ability to run some (or all) commands as root while logging all commands and arguments. Sudo operates on a per-command basis, it is not a replacement for the shell. Its features include:&lt;/p&gt;
&lt;p&gt;The ability to restrict what commands a user may run on a per-host basis.&lt;br&gt;Sudo does copious logging of each command, providing a clear audit trail of who did what. When used in tandem with syslogd, the system log daemon, sudo can log all commands to a central host (as well as on the local host). At CU, all admins use sudo in lieu of a root shell to take advantage of this logging.&lt;br&gt;Sudo uses timestamp files to implement a “ticketing” system. When a user invokes sudo and enters their password, they are granted a ticket for 5 minutes (this timeout is configurable at compile-time). Each subsequent sudo command updates the ticket for another 5 minutes. This avoids the problem of leaving a root shell where others can physically get to your keyboard. There is also an easy way for a user to remove their ticket file, useful for placing in a .logout file.&lt;br&gt;Sudo’s configuration file, the sudoers file, is setup in such a way that the same sudoers file may be used on many machines. This allows for central administration while keeping the flexibility to define a user’s privileges on a per-host basis. Please see the samples sudoers file below for a real-world example.&lt;/p&gt;
&lt;h1 id=&quot;sudo-conf&quot;&gt;&lt;a href=&quot;#sudo-conf&quot; class=&quot;headerlink&quot; title=&quot;sudo.conf&quot;&gt;&lt;/a&gt;sudo.conf&lt;/h1&gt;&lt;p&gt;The sudo.conf file is used to configure the sudo front end. It specifies the security policy and I/O logging plugins, debug flags as well as plugin-agnostic path names and settings.&lt;/p&gt;
&lt;p&gt;sudo supports a plugin architecture for security policies and input/output logging. Third parties can develop and distribute their own policy and I/O logging plugins to work seamlessly with the sudo front end. Plugins are dynamically loaded based on the contents of sudo.conf.&lt;br&gt;A Plugin line consists of the Plugin keyword, followed by the symbol_name and the path to the dynamic shared object that contains the plugin. The symbol_name is the name of the struct policy_plugin or struct io_plugin symbol contained in the plugin. The path may be fully qualified or relative. If not fully qualified, it is relative to the directory specified by the plugin_dir Path setting, which defaults to /usr/local/libexec/sudo. In other words:&lt;br&gt;Plugin sudoers_policy sudoers.so&lt;br&gt;is equivalent to:&lt;br&gt;Plugin sudoers_policy /usr/local/libexec/sudo/sudoers.so&lt;/p&gt;
&lt;h2 id=&quot;Configurations&quot;&gt;&lt;a href=&quot;#Configurations&quot; class=&quot;headerlink&quot; title=&quot;Configurations&quot;&gt;&lt;/a&gt;Configurations&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;sudoers_file=pathname&lt;br&gt;The sudoers_file argument can be used to override the default path to the sudoers file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;sudoers_uid=uid&lt;br&gt;The sudoers_uid argument can be used to override the default owner of the sudoers file. It should be specified as a numeric user ID.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;email-notification&quot;&gt;&lt;a href=&quot;#email-notification&quot; class=&quot;headerlink&quot; title=&quot;email notification&quot;&gt;&lt;/a&gt;email notification&lt;/h1&gt;&lt;p&gt;If a user who is not listed in the policy tries to run a command via sudo, mail is sent to the proper authorities. The address used for such mail is configurable via the mailto Defaults entry (described later) and defaults to root.&lt;/p&gt;
&lt;p&gt;Note that no mail will be sent if an unauthorized user tries to run sudo with the -l or -v option unless there is an authentication error and either the mail_always or mail_badpass flags are enabled. This allows users to determine for themselves whether or not they are allowed to use sudo. All attempts to run sudo (successful or not) will be logged, regardless of whether or not mail is sent.&lt;/p&gt;
&lt;p&gt;sudoers uses per-user time stamp files for credential caching. Once a user has been authenticated, a record is written containing the user ID that was used to authenticate, the terminal session ID, the start time of the session leader (or parent process) and a time stamp (using a monotonic clock if one is available). The user may then use sudo without a password for a short period of time (5 minutes unless overridden by the timestamp_timeout option). By default, sudoers uses a separate record for each terminal, which means that a user’s login sessions are authenticated separately. The timestamp_type option can be used to select the type of time stamp record sudoers will use.&lt;/p&gt;
&lt;h1 id=&quot;File-format&quot;&gt;&lt;a href=&quot;#File-format&quot; class=&quot;headerlink&quot; title=&quot;File format&quot;&gt;&lt;/a&gt;File format&lt;/h1&gt;&lt;p&gt;The sudoers file is composed of two types of entries: aliases (basically variables) and user specifications (which specify who may run what).&lt;/p&gt;
&lt;p&gt;When multiple entries match for a user, they are applied in order. Where there are multiple matches, the last match is used (which is not necessarily the most specific match).&lt;br&gt;The sudoers file grammar will be described below in Extended Backus-Naur Form (EBNF). Don’t despair if you are unfamiliar with EBNF; it is fairly simple, and the definitions below are annotated.&lt;/p&gt;
&lt;h1 id=&quot;environment&quot;&gt;&lt;a href=&quot;#environment&quot; class=&quot;headerlink&quot; title=&quot;environment&quot;&gt;&lt;/a&gt;environment&lt;/h1&gt;&lt;p&gt;By default, the env_reset option is enabled. This causes commands to be executed with a new, minimal environment.&lt;/p&gt;
&lt;p&gt;Lists have two additional assignment operators, += and -=. These operators are used to add to and delete from a list respectively. It is not an error to use the -= operator to remove an element that does not exist in a list.&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;35 Defaults    env_reset&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36 Defaults    env_keep += &lt;span class=&quot;string&quot;&gt;&quot;BLOCKSIZE&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37 Defaults    env_keep += &lt;span class=&quot;string&quot;&gt;&quot;COLORFGBG COLORTERM&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38 Defaults    env_keep += &lt;span class=&quot;string&quot;&gt;&quot;__CF_USER_TEXT_ENCODING&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39 Defaults    env_keep += &lt;span class=&quot;string&quot;&gt;&quot;CHARSET LANG LANGUAGE LC_ALL LC_COLLATE LC_CTYPE&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40 Defaults    env_keep += &lt;span class=&quot;string&quot;&gt;&quot;LC_MESSAGES LC_MONETARY LC_NUMERIC LC_TIME&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41 Defaults    env_keep += &lt;span class=&quot;string&quot;&gt;&quot;LINES COLUMNS&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42 Defaults    env_keep += &lt;span class=&quot;string&quot;&gt;&quot;LSCOLORS&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43 Defaults    env_keep += &lt;span class=&quot;string&quot;&gt;&quot;SSH_AUTH_SOCK&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44 Defaults    env_keep += &lt;span class=&quot;string&quot;&gt;&quot;TZ&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45 Defaults    env_keep += &lt;span class=&quot;string&quot;&gt;&quot;DISPLAY XAUTHORIZATION XAUTHORITY&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46 Defaults    env_keep += &lt;span class=&quot;string&quot;&gt;&quot;EDITOR VISUAL&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47 Defaults    env_keep += &lt;span class=&quot;string&quot;&gt;&quot;HOME MAIL&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49 Defaults    lecture_file = &lt;span class=&quot;string&quot;&gt;&quot;/etc/sudo_lecture&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;lecture&quot;&gt;&lt;a href=&quot;#lecture&quot; class=&quot;headerlink&quot; title=&quot;lecture&quot;&gt;&lt;/a&gt;lecture&lt;/h3&gt;&lt;h4 id=&quot;lecture-1&quot;&gt;&lt;a href=&quot;#lecture-1&quot; class=&quot;headerlink&quot; title=&quot;lecture&quot;&gt;&lt;/a&gt;lecture&lt;/h4&gt;&lt;p&gt;This option controls when a short lecture will be printed along with the password prompt. It has the following possible values:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;always&lt;br&gt;Always lecture the user.&lt;/li&gt;
&lt;li&gt;never&lt;br&gt;Never lecture the user.&lt;/li&gt;
&lt;li&gt;once&lt;br&gt;Only lecture the user the first time they run sudo.&lt;br&gt;If no value is specified, a value of once is implied. Negating the option results in a value of never being used. The default value is once.&lt;h4 id=&quot;lecture-file&quot;&gt;&lt;a href=&quot;#lecture-file&quot; class=&quot;headerlink&quot; title=&quot;lecture_file&quot;&gt;&lt;/a&gt;lecture_file&lt;/h4&gt;Path to a file containing an alternate sudo lecture that will be used in place of the standard lecture if the named file exists. By default, sudo uses a built-in lecture.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Everything-is-file&quot;&gt;&lt;a href=&quot;#Everything-is-file&quot; class=&quot;headerlink&quot; title=&quot;Everything is file&quot;&gt;&lt;/a&gt;Everything is file&lt;/h1&gt;&lt;p&gt;A fundamental and very powerful, consistent abstraction provided in UNIX and compatible operating systems is the file abstraction. Many OS services and device interfaces are implemented to provide a file or file system metaphor to applications.&lt;/p&gt;
&lt;h1 id=&quot;manage-user-group&quot;&gt;&lt;a href=&quot;#manage-user-group&quot; class=&quot;headerlink&quot; title=&quot;manage user group&quot;&gt;&lt;/a&gt;manage user group&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Alternatively, gpasswd may be used. Though the username can only be added (or removed) from one group at a time:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gpasswd --add username group&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Add users to a group with the gpasswd command:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gpasswd &lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; user group&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#To remove users from a group:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gpasswd &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; user group&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gpasswd - administer the /etc/group file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;EXAMPLES&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1. Add user (tracy) to the group (hrd)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ gpasswd &lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; tracy hrd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2. Add multiper users to the group (developer)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ gpasswd &lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; pavan,john developer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3. Remove user (rakesh) from group (sqa)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ gpasswd &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; rakesh sqa&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4. Remove multiple users from group (managers)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ gpasswd &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; shane,ron,ram managers&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5. Set user (joy) and group administrator &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (managers)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ gpasswd -A joy managers&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;to-show-user-details&quot;&gt;&lt;a href=&quot;#to-show-user-details&quot; class=&quot;headerlink&quot; title=&quot;to show user details&quot;&gt;&lt;/a&gt;to show user details&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;id todzhang&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Display-group-membership-with-the-groups-command&quot;&gt;&lt;a href=&quot;#Display-group-membership-with-the-groups-command&quot; class=&quot;headerlink&quot; title=&quot;Display group membership with the groups command:&quot;&gt;&lt;/a&gt;Display group membership with the groups command:&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ groups user&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;To-change-the-user’s-login-shell&quot;&gt;&lt;a href=&quot;#To-change-the-user’s-login-shell&quot; class=&quot;headerlink&quot; title=&quot;To change the user’s login shell:&quot;&gt;&lt;/a&gt;To change the user’s login shell:&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# usermod -s /bin/bash username&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; class=&quot;headerlink&quot; title=&quot;reference&quot;&gt;&lt;/a&gt;reference&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.sudo.ws/man/sudo.conf.man.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.sudo.ws/man/sudo.conf.man.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Sudo-in-a-Nutshell&quot;&gt;&lt;a href=&quot;#Sudo-in-a-Nutshell&quot; class=&quot;headerlink&quot; title=&quot;Sudo in a Nutshell&quot;&gt;&lt;/a&gt;Sudo in a Nutshell&lt;/h1&gt;&lt;p&gt;Sudo (
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Protobuf</title>
    <link href="http://www.todzhang.com/2018-08-23-protobuf/"/>
    <id>http://www.todzhang.com/2018-08-23-protobuf/</id>
    <published>2019-05-31T13:03:27.149Z</published>
    <updated>2019-05-31T13:03:27.149Z</updated>
    
    <content type="html">&lt;h1 id=&quot;What-are-protocol-buffers&quot;&gt;&lt;a href=&quot;#What-are-protocol-buffers&quot; class=&quot;headerlink&quot; title=&quot;What are protocol buffers?&quot;&gt;&lt;/a&gt;What are protocol buffers?&lt;/h1&gt;&lt;p&gt;Protocol buffers are a flexible, efficient, automated mechanism for serializing structured data – think XML, but smaller, faster, and simpler.&lt;/p&gt;
&lt;p&gt;You define how you want your data to be structured once, then you can use special generated source code to easily write and read your structured data to and from a variety of data streams and using a variety of languages. You can even update your data structure without breaking deployed programs that are compiled against the “old” format.&lt;/p&gt;
&lt;h1 id=&quot;How-do-they-work&quot;&gt;&lt;a href=&quot;#How-do-they-work&quot; class=&quot;headerlink&quot; title=&quot;How do they work?&quot;&gt;&lt;/a&gt;How do they work?&lt;/h1&gt;&lt;p&gt;You specify how you want the information you’re serializing to be structured by defining protocol buffer message types in .proto files. Each protocol buffer message is a small logical record of information, containing a series of name-value pairs. &lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;message Person &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  required string name = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  required int32 id = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  optional string email = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; PhoneType &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MOBILE = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    HOME = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    WORK = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  message PhoneNumber &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    required string number = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    optional PhoneType type = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; [&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; = HOME];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  repeated PhoneNumber phone = &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;As you can see, the message format is simple – each message type has one or more uniquely numbered fields, and each field has a name and a value type, where value types can be numbers (integer or floating-point), booleans, strings, raw bytes, or even (as in the example above) other protocol buffer message types, allowing you to structure your data hierarchically. You can specify optional fields, required fields, and repeated fields. &lt;/p&gt;
&lt;h1 id=&quot;Why-not-just-use-XML&quot;&gt;&lt;a href=&quot;#Why-not-just-use-XML&quot; class=&quot;headerlink&quot; title=&quot;Why not just use XML?&quot;&gt;&lt;/a&gt;Why not just use XML?&lt;/h1&gt;&lt;p&gt;Protocol buffers have many advantages over XML for serializing structured data. Protocol buffers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;are simpler&lt;/li&gt;
&lt;li&gt;are 3 to 10 times smaller&lt;/li&gt;
&lt;li&gt;are 20 to 100 times faster&lt;/li&gt;
&lt;li&gt;are less ambiguous&lt;/li&gt;
&lt;li&gt;generate data access classes that are easier to use programmatically&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Assigning-Field-Numbers&quot;&gt;&lt;a href=&quot;#Assigning-Field-Numbers&quot; class=&quot;headerlink&quot; title=&quot;Assigning Field Numbers&quot;&gt;&lt;/a&gt;Assigning Field Numbers&lt;/h1&gt;&lt;p&gt;As you can see, each field in the message definition has a unique number. These numbers are used to identify your fields in the message binary format, and should not be changed once your message type is in use. Note that field numbers in the range 1 through 15 take one byte to encode, including the field number and the field’s type (you can find out more about this in Protocol Buffer Encoding). Field numbers in the range 16 through 2047 take two bytes. So you should reserve the field numbers 1 through 15 for very frequently occurring message elements. Remember to leave some room for frequently occurring elements that might be added in the future.&lt;/p&gt;
&lt;h1 id=&quot;Field-Rules&quot;&gt;&lt;a href=&quot;#Field-Rules&quot; class=&quot;headerlink&quot; title=&quot;Field Rules&quot;&gt;&lt;/a&gt;Field Rules&lt;/h1&gt;&lt;p&gt;You specify that message fields are one of the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;required: a well-formed message must have exactly one of this field.&lt;/li&gt;
&lt;li&gt;optional: a well-formed message can have zero or one of this field (but not more than one).&lt;/li&gt;
&lt;li&gt;repeated: this field can be repeated any number of times (including zero) in a well-formed message. The order of the repeated values will be preserved.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Some engineers at Google have come to the conclusion that using required does more harm than good; they prefer to use only optional and repeated. However, this view is not universal.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Combining Messages leads to bloat While multiple message types (such as message, enum, and service) can be defined in a single .proto file, it can also lead to dependency bloat when large numbers of messages with varying dependencies are defined in a single file. It’s recommended to include as few message types per .proto file as possible.&lt;/p&gt;
&lt;h1 id=&quot;Reserved-fields&quot;&gt;&lt;a href=&quot;#Reserved-fields&quot; class=&quot;headerlink&quot; title=&quot;Reserved fields&quot;&gt;&lt;/a&gt;Reserved fields&lt;/h1&gt;&lt;p&gt;to make sure this doesn’t happen is to specify that the field numbers (and/or names, which can also cause issues for JSON serialization) of your deleted fields are reserved. The protocol buffer compiler will complain if any future users try to use these field identifiers.&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;message Foo &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  reserved &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt; to &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  reserved &lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;bar&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Note that you can’t mix field names and field numbers in the same reserved statement.&lt;/p&gt;
&lt;h1 id=&quot;Optional-fields-and-default&quot;&gt;&lt;a href=&quot;#Optional-fields-and-default&quot; class=&quot;headerlink&quot; title=&quot;Optional fields and default&quot;&gt;&lt;/a&gt;Optional fields and default&lt;/h1&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;optional int32 result_per_page = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; [&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Importing-Definitions&quot;&gt;&lt;a href=&quot;#Importing-Definitions&quot; class=&quot;headerlink&quot; title=&quot;Importing Definitions&quot;&gt;&lt;/a&gt;Importing Definitions&lt;/h1&gt;&lt;p&gt;You can use definitions from other .proto files by importing them. To import another .proto’s definitions, you add an import statement to the top of your file:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;myproject/other_protos.proto&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;To-generate-class&quot;&gt;&lt;a href=&quot;#To-generate-class&quot; class=&quot;headerlink&quot; title=&quot;To generate class&quot;&gt;&lt;/a&gt;To generate class&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;../protoc-3/bin/protoc --java_out=./  ticket.proto&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Builders-vs-Messages&quot;&gt;&lt;a href=&quot;#Builders-vs-Messages&quot; class=&quot;headerlink&quot; title=&quot;Builders vs. Messages&quot;&gt;&lt;/a&gt;Builders vs. Messages&lt;/h1&gt;&lt;p&gt;The message classes generated by the protocol buffer compiler are all immutable. Once a message object is constructed, it cannot be modified, just like a Java String. To construct a message, you must first construct a builder, set any fields you want to set to your chosen values, then call the builder’s build() method.&lt;/p&gt;
&lt;p&gt;You may have noticed that each method of the builder which modifies the message returns another builder. The returned object is actually the same builder on which you called the method. It is returned for convenience so that you can string several setters together on a single line of code.&lt;/p&gt;
&lt;p&gt;Here’s an example of how you would create an instance of Person:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Person john =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Person.newBuilder()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .setId(&lt;span class=&quot;number&quot;&gt;1234&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .setName(&lt;span class=&quot;string&quot;&gt;&quot;John Doe&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .setEmail(&lt;span class=&quot;string&quot;&gt;&quot;jdoe@example.com&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .addPhones(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Person.PhoneNumber.newBuilder()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .setNumber(&lt;span class=&quot;string&quot;&gt;&quot;555-4321&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .setType(Person.PhoneType.HOME))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .build();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;Parsing-and-Serialization&quot;&gt;&lt;a href=&quot;#Parsing-and-Serialization&quot; class=&quot;headerlink&quot; title=&quot;Parsing and Serialization&quot;&gt;&lt;/a&gt;Parsing and Serialization&lt;/h1&gt;&lt;p&gt;Finally, each protocol buffer class has methods for writing and reading messages of your chosen type using the protocol buffer binary format. These include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;byte[] toByteArray();: serializes the message and returns a byte array containing its raw bytes.&lt;/li&gt;
&lt;li&gt;static Person parseFrom(byte[] data);: parses a message from the given byte array.&lt;/li&gt;
&lt;li&gt;void writeTo(OutputStream output);: serializes the message and writes it to an OutputStream.&lt;/li&gt;
&lt;li&gt;pstatic Person parseFrom(InputStream input);: reads and parses a message from an InputStream.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Write-a-message&quot;&gt;&lt;a href=&quot;#Write-a-message&quot; class=&quot;headerlink&quot; title=&quot;Write a message&quot;&gt;&lt;/a&gt;Write a message&lt;/h1&gt;&lt;p&gt;// Write the new address book back to disk.&lt;br&gt;    FileOutputStream output = new FileOutputStream(args[0]);&lt;br&gt;    addressBook.build().writeTo(output);&lt;/p&gt;
&lt;h1 id=&quot;Reading-A-Message&quot;&gt;&lt;a href=&quot;#Reading-A-Message&quot; class=&quot;headerlink&quot; title=&quot;Reading A Message&quot;&gt;&lt;/a&gt;Reading A Message&lt;/h1&gt;&lt;p&gt;Use message’s parseFrom method on stream:&lt;br&gt;      AddressBook.parseFrom(new FileInputStream(args[0]));&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; com.example.tutorial.AddressBookProtos.AddressBook;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; com.example.tutorial.AddressBookProtos.Person;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.FileInputStream;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.IOException;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.PrintStream;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ListPeople&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Iterates though all people in the AddressBook and prints info about them.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Print&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(AddressBook addressBook)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Person person: addressBook.getPeopleList()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Person ID: &quot;&lt;/span&gt; + person.getId());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;  Name: &quot;&lt;/span&gt; + person.getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (person.hasEmail()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;  E-mail address: &quot;&lt;/span&gt; + person.getEmail());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Person.PhoneNumber phoneNumber : person.getPhonesList()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (phoneNumber.getType()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; MOBILE:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.print(&lt;span class=&quot;string&quot;&gt;&quot;  Mobile phone #: &quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; HOME:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.print(&lt;span class=&quot;string&quot;&gt;&quot;  Home phone #: &quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; WORK:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.print(&lt;span class=&quot;string&quot;&gt;&quot;  Work phone #: &quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(phoneNumber.getNumber());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Main function:  Reads the entire address book from a file and prints all&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//   the information inside.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (args.length != &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      System.err.println(&lt;span class=&quot;string&quot;&gt;&quot;Usage:  ListPeople ADDRESS_BOOK_FILE&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      System.exit(-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Read the existing address book.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    AddressBook addressBook =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      AddressBook.parseFrom(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FileInputStream(args[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Print(addressBook);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;References&quot;&gt;&lt;a href=&quot;#References&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/protocol-buffers/docs/overview&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developers.google.com/protocol-buffers/docs/overview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;What-are-protocol-buffers&quot;&gt;&lt;a href=&quot;#What-are-protocol-buffers&quot; class=&quot;headerlink&quot; title=&quot;What are protocol buffers?&quot;&gt;&lt;/a&gt;What are p
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Mockito</title>
    <link href="http://www.todzhang.com/2018-09-03-distruptor/"/>
    <id>http://www.todzhang.com/2018-09-03-distruptor/</id>
    <published>2019-05-31T13:03:27.149Z</published>
    <updated>2019-05-31T13:03:27.149Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Feature&quot;&gt;&lt;a href=&quot;#Feature&quot; class=&quot;headerlink&quot; title=&quot;Feature&quot;&gt;&lt;/a&gt;Feature&lt;/h1&gt;&lt;p&gt;There only 2 things you can do with Mockito mocks - verify or stub. Stubbing goes before execution and verification afterwards.&lt;/p&gt;
&lt;h1 id=&quot;References&quot;&gt;&lt;a href=&quot;#References&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mockito/mockito/wiki/Mockito-vs-EasyMock&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/mockito/mockito/wiki/Mockito-vs-EasyMock&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Feature&quot;&gt;&lt;a href=&quot;#Feature&quot; class=&quot;headerlink&quot; title=&quot;Feature&quot;&gt;&lt;/a&gt;Feature&lt;/h1&gt;&lt;p&gt;There only 2 things you can do with Mockito mocks 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Cucumber</title>
    <link href="http://www.todzhang.com/2018-08-08-Cucumber/"/>
    <id>http://www.todzhang.com/2018-08-08-Cucumber/</id>
    <published>2019-05-31T13:03:27.148Z</published>
    <updated>2019-05-31T13:03:27.148Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Acceptance-testing-vs-unit-test&quot;&gt;&lt;a href=&quot;#Acceptance-testing-vs-unit-test&quot; class=&quot;headerlink&quot; title=&quot;Acceptance testing vs unit test&quot;&gt;&lt;/a&gt;Acceptance testing vs unit test&lt;/h1&gt;&lt;p&gt;It’s sometimes said that unit tests ensure you build the thing right, whereas acceptance tests ensure you build the right thing.&lt;/p&gt;
&lt;h1 id=&quot;Cucumber&quot;&gt;&lt;a href=&quot;#Cucumber&quot; class=&quot;headerlink&quot; title=&quot;Cucumber.&quot;&gt;&lt;/a&gt;Cucumber.&lt;/h1&gt;&lt;p&gt;The acceptance testing tool.&lt;/p&gt;
&lt;h1 id=&quot;Source-of-Truth&quot;&gt;&lt;a href=&quot;#Source-of-Truth&quot; class=&quot;headerlink&quot; title=&quot;Source of Truth&quot;&gt;&lt;/a&gt;Source of Truth&lt;/h1&gt;&lt;p&gt;For many teams, the Cucumber feature files become the definitive source of truth as to what the system does.&lt;/p&gt;
&lt;h1 id=&quot;Scenarios&quot;&gt;&lt;a href=&quot;#Scenarios&quot; class=&quot;headerlink&quot; title=&quot;Scenarios&quot;&gt;&lt;/a&gt;Scenarios&lt;/h1&gt;&lt;p&gt;Scenarios are written before production code. They start their life as an executable specification. As the production code emerges, Scenarios take on a role as living documentation and automated tests.&lt;/p&gt;
&lt;p&gt;Each Cucumber test is called a scenario, and each scenario contains steps that tell Cucumber what to do. &lt;/p&gt;
&lt;h1 id=&quot;Gherkin&quot;&gt;&lt;a href=&quot;#Gherkin&quot; class=&quot;headerlink&quot; title=&quot;Gherkin&quot;&gt;&lt;/a&gt;Gherkin&lt;/h1&gt;&lt;p&gt;The keywords Feature, Scenario, Given, When, and Then are the structure, and everything else is documentation.&lt;br&gt;The structure is called Gherkin.&lt;/p&gt;
&lt;p&gt;Cucumber features are all about communicating with business users in their language, and it’s important that we don’t force them to sound like robots.&lt;/p&gt;
&lt;h1 id=&quot;Structure&quot;&gt;&lt;a href=&quot;#Structure&quot; class=&quot;headerlink&quot; title=&quot;Structure&quot;&gt;&lt;/a&gt;Structure&lt;/h1&gt;&lt;p&gt;We start with features, which contain our scenarios and steps. The steps of our scenarios call step definitions that provide the link between the Gherkin fea- tures and the application being built.&lt;/p&gt;
&lt;p&gt;This principle, deliberately doing the minimum useful work the tests will let us get away with, might seem lazy, but in fact it’s a discipline. It ensures that we make our tests thorough: if the test doesn’t drive us to write the right thing, then we need a better test.&lt;/p&gt;
&lt;h1 id=&quot;Step-Definitions&quot;&gt;&lt;a href=&quot;#Step-Definitions&quot; class=&quot;headerlink&quot; title=&quot;Step Definitions&quot;&gt;&lt;/a&gt;Step Definitions&lt;/h1&gt;&lt;p&gt;Step definitions are the glue that binds your Cucumber tests to the application you’re testing. &lt;/p&gt;
&lt;p&gt;A scenario that’s been executed can end up in any of the following states:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Failed&lt;/li&gt;
&lt;li&gt;Pending&lt;/li&gt;
&lt;li&gt;Undefined &lt;/li&gt;
&lt;li&gt;Skipped&lt;/li&gt;
&lt;li&gt;Passed&lt;br&gt;These states are designed to help indicate the progress that you make as you develop your tests.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Pending-Steps&quot;&gt;&lt;a href=&quot;#Pending-Steps&quot; class=&quot;headerlink&quot; title=&quot;Pending Steps&quot;&gt;&lt;/a&gt;Pending Steps&lt;/h3&gt;&lt;p&gt;When Cucumber discovers a step definition that’s halfway through being implemented, it marks the step as pending (yellow). Again, the scenario will be stopped, and the rest of the steps will be skipped or marked as undefined.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Steps&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Given&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;^I have deposited \\$(\\d+) in my account$&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; iHaveDeposited$InMyAccount(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; amount) &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Throwable &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Write code here that turns the phrase above into concrete actions&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PendingException(); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Step-definition-recap&quot;&gt;&lt;a href=&quot;#Step-definition-recap&quot; class=&quot;headerlink&quot; title=&quot;Step definition recap&quot;&gt;&lt;/a&gt;Step definition recap&lt;/h2&gt;&lt;p&gt;The pending status is a bit like those under construction signs you used to see all over the Internet in the 1990s. You can use it as a temporary signpost to your teammates that you’re in the middle of working on something.&lt;/p&gt;
&lt;p&gt;Because regular expressions can contain wildcards, this means you have the flexibility to make the Gherkin steps nice and readable, while keeping your Java step definition code clean and free of duplication.&lt;br&gt;• Step definitions provide a mapping from the Gherkin scenarios’ plain- language descriptions of user actions into Java code, which simulates those actions.&lt;br&gt;• Step definitions are registered with Cucumber by using @Given, @When, @Then, or one of the aliases for your spoken language.&lt;br&gt;• Step definitions use regular expressions to declare the steps that they can handle. Because regular expressions can contain wildcards, one step definition can handle several different steps.&lt;br&gt;• A step definition communicates its result to Cucumber by raising, or not raising, an exception.&lt;/p&gt;
&lt;h1 id=&quot;recap&quot;&gt;&lt;a href=&quot;#recap&quot; class=&quot;headerlink&quot; title=&quot;recap&quot;&gt;&lt;/a&gt;recap&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Readability should be your number-one goal when writing Gherkin fea- tures. Always try to sit together with a stakeholder when you write your scenarios, or at the very least pass them over for feedback once you’ve written them. Keep fine-tuning the language in your scenarios to make them more readable.&lt;/li&gt;
&lt;li&gt;Use a Background to factor out repeated steps from a feature and to help tell a story.&lt;/li&gt;
&lt;li&gt;Repetitive scenarios can be collapsed into a Scenario Outline.&lt;/li&gt;
&lt;li&gt;Steps can be extended with multiline strings or data tables.&lt;/li&gt;
&lt;li&gt;You can organize features into subfolders, like chapters in a book.&lt;/li&gt;
&lt;li&gt;Tags allow you to mark up scenarios and features so you select particular sets to run or report on.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Sample&quot;&gt;&lt;a href=&quot;#Sample&quot; class=&quot;headerlink&quot; title=&quot;Sample&quot;&gt;&lt;/a&gt;Sample&lt;/h1&gt;&lt;h2 id=&quot;compile-and-run-via-CLI&quot;&gt;&lt;a href=&quot;#compile-and-run-via-CLI&quot; class=&quot;headerlink&quot; title=&quot;compile and run via CLI&quot;&gt;&lt;/a&gt;compile and run via CLI&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;javac -cp &lt;span class=&quot;string&quot;&gt;&quot;jars/*&quot;&lt;/span&gt; step_definitions/CheckoutSteps.java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;java -cp &lt;span class=&quot;string&quot;&gt;&quot;jars/*:.&quot;&lt;/span&gt; cucumber.api.cli.Main -p pretty --snippets camelcase \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                          -g step_definitions features&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Line 1 compiles the CheckoutSteps class that we’ve just created. Then line 2 invokes Cucumber. There are two slight additions to Cucumber’s invocation:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We’ve added the current directory “.” to the classpath.&lt;/li&gt;
&lt;li&gt;We’ve added the -g step_definitions command-line argument to tell Cucumber where to look for the step definitions that it will need to “glue” the steps in the feature file to the checkout application (which we haven’t written yet).&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;feature-file&quot;&gt;&lt;a href=&quot;#feature-file&quot; class=&quot;headerlink&quot; title=&quot;feature file&quot;&gt;&lt;/a&gt;feature file&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Feature: Is it Friday yet?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Everybody wants to know when it&amp;apos;s Friday&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Scenario: Sunday isn&amp;apos;t Friday&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Given today is Sunday&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    When I ask whether it&amp;apos;s Friday yet&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Then I should be told &amp;quot;Nope&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The first line of this file starts with the keyword Feature: followed by a name. It’s a good idea to use a name similar to the file name.&lt;/p&gt;
&lt;p&gt;The second line is a brief description of the feature. Cucumber does not execute this line, it’s just documentation.&lt;/p&gt;
&lt;p&gt;The fourth line, Scenario: Sunday is not Friday is a Scenario, which is a concrete example illustrating how the software should behave.&lt;/p&gt;
&lt;p&gt;The last three lines starting with Given, When and Then are the steps of our scenario. This is what Cucumber will execute.&lt;/p&gt;
&lt;p&gt;Notice how we go from Scenario to Scenario Outline when we start using Examples.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Feature: Is it Friday yet?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Everybody wants to know when it&amp;apos;s Friday&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Scenario Outline: Today is or is not Friday&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Given today is &amp;lt;day&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    When I ask whether it&amp;apos;s Friday yet&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Then I should be told &amp;lt;answer&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Examples:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    | day | answer |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    | &amp;quot;Friday&amp;quot; | &amp;quot;TGIF&amp;quot; |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    | &amp;quot;Sunday&amp;quot; | &amp;quot;Nope&amp;quot; |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    | &amp;quot;anything else!&amp;quot; | &amp;quot;Nope&amp;quot; |&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Scenario Outline: Withdraw fixed amount&lt;br&gt;Given I have &lt;balance&gt; in my account&lt;br&gt;When I choose to withdraw the fixed amount of &lt;withdrawal&gt; Then I should receive &lt;received&gt; cash&lt;br&gt;And the balance of my account should be &lt;remaining&gt;&lt;br&gt;Examples:&lt;br&gt;      | Balance | Withdrawal | Received | Remaining |&lt;br&gt;| $500&lt;br&gt;| $500&lt;br&gt;| $500&lt;br&gt;|$50 |$50 |$450 | | $100 | $100 | $400 | | $200 | $200 | $300 |&lt;br&gt;We indicate placeholders within the scenario outline using angle brackets (&amp;lt;..&amp;gt;) where we want real values to be substituted. The scenario outline itself is useless without an Examples table, which lists rows of values to be substituted for each placeholder.&lt;/remaining&gt;&lt;/received&gt;&lt;/withdrawal&gt;&lt;/balance&gt;&lt;/p&gt;
&lt;h2 id=&quot;Doc-Strings&quot;&gt;&lt;a href=&quot;#Doc-Strings&quot; class=&quot;headerlink&quot; title=&quot;Doc Strings&quot;&gt;&lt;/a&gt;Doc Strings&lt;/h2&gt;&lt;p&gt;Doc strings allow you to specify a larger piece of text than you could fit on a single line. For example, if you need to describe the precise content of an email message, you could do it like this:&lt;br&gt;Scenario: Ban Unscrupulous Users&lt;br&gt;When I behave unscrupulously&lt;br&gt;Then I should receive an email containing:&lt;br&gt;“””&lt;br&gt;    Dear Sir,&lt;br&gt;    Your account privileges have been revoked due to your unscrupulous behavior.&lt;br&gt;Sincerely,&lt;br&gt;The Management “””&lt;br&gt;And my account should be locked&lt;br&gt;Just like a data table, the entire string between the “”” triple quotes is attached to the step above it. The indentation of the opening “”” is not important, although common practice is to indent two spaces from the enclosing step, as we’ve shown. The indentation inside the triple quotes, however, is signifi- cant: imagine the left margin running down from the start of the first “””. If you want to include indentation within your string, you need to indent it within this margin.&lt;/p&gt;
&lt;h3 id=&quot;TGIF&quot;&gt;&lt;a href=&quot;#TGIF&quot; class=&quot;headerlink&quot; title=&quot;TGIF&quot;&gt;&lt;/a&gt;TGIF&lt;/h3&gt;&lt;p&gt;Thanks God It’s Friday&lt;/p&gt;
&lt;h2 id=&quot;Data-table&quot;&gt;&lt;a href=&quot;#Data-table&quot; class=&quot;headerlink&quot; title=&quot;Data table&quot;&gt;&lt;/a&gt;Data table&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Given these Users:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| name | date of birth | &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Michael Jackson | August 29, 1958 | &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Elvis | January 8, 1935 | &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| John Lennon | October 9, 1940 |&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;That’s much clearer. The table starts on the line immediately following the step, and its cells are separated using the pipe character: |. You can line up the pipes using whitespace to make the table look tidy, although Cucumber doesn’t mind whether you do; it will strip out the values in each cell, ignoring the surrounding whitespace.&lt;/p&gt;
&lt;p&gt;public class BoardSteps {&lt;br&gt;@Given(“^a board like this:$”)&lt;br&gt;public void aBoardLikeThis(DataTable arg1) throws Throwable {&lt;br&gt;        // Write code here that turns the phrase above into concrete actions&lt;br&gt;        // For automatic transformation, change DataTable to one of&lt;br&gt;        // List&lt;yourtype&gt;, List&lt;list&lt;e&gt;&amp;gt;, List&lt;map&lt;k,v&gt;&amp;gt; or Map&lt;k,v&gt;.&lt;br&gt;        // E,K,V must be a scalar (String, Integer, Date, enum etc)&lt;br&gt;throw new PendingException(); }&lt;/k,v&gt;&lt;/map&lt;k,v&gt;&lt;/list&lt;e&gt;&lt;/yourtype&gt;&lt;/p&gt;
&lt;h1 id=&quot;BDD&quot;&gt;&lt;a href=&quot;#BDD&quot; class=&quot;headerlink&quot; title=&quot;BDD&quot;&gt;&lt;/a&gt;BDD&lt;/h1&gt;&lt;p&gt;The two main practices in the BDD approach are discovery workshops, which bridge the communication gap between business and IT, and executable specifications.&lt;/p&gt;
&lt;h1 id=&quot;Background&quot;&gt;&lt;a href=&quot;#Background&quot; class=&quot;headerlink&quot; title=&quot;Background&quot;&gt;&lt;/a&gt;Background&lt;/h1&gt;&lt;figure class=&quot;highlight gherkin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Background&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Given&lt;/span&gt; I have been issued a new card&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;And&lt;/span&gt; I insert the card, entering the correct PIN &lt;span class=&quot;keyword&quot;&gt;And&lt;/span&gt; I choose &lt;span class=&quot;string&quot;&gt;&quot;Change PIN&quot;&lt;/span&gt; from the menu&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Scenario&lt;/span&gt;: Change PIN successfully&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;When&lt;/span&gt; I change the PIN to 9876&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Then&lt;/span&gt; the system should remember my PIN is now 9876&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Scenario&lt;/span&gt;: Try to change PIN to the same as before&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;When&lt;/span&gt; I try to change the PIN to the original PIN number &lt;span class=&quot;keyword&quot;&gt;Then&lt;/span&gt; I should see a warning message&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;And&lt;/span&gt; the system should not have changed my PIN&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Our refactoring hasn’t changed the behavior of the tests at all: at runtime, the steps in the background are executed at the beginning of each scenario, just as they were before. What we have done is made each individual scenario much easier to read.&lt;/p&gt;
&lt;p&gt;Using a Background element isn’t always necessary, but it’s often useful to improve the readability of your features by removing repetitive steps from individual scenarios. &lt;/p&gt;
&lt;h2 id=&quot;A-good-‘background’&quot;&gt;&lt;a href=&quot;#A-good-‘background’&quot; class=&quot;headerlink&quot; title=&quot;A good ‘background’&quot;&gt;&lt;/a&gt;A good ‘background’&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Make your Background section vivid. Use colorful names and try to tell a story, because your readers can keep track of stories much better than they can keep track of dull names like User A, User B, Site 1, and so on. If it’s worth mentioning at all, make it really stand out.&lt;/li&gt;
&lt;li&gt;Keep your scenarios short, and don’t have too many. If the Background is more than three or four steps long, think about using higher-level steps or splitting the feature file in two. You can use a background as a good indicator of when a feature is getting too long: if the new scenarios you want to add don’t fit with the existing background, consider splitting the feature.&lt;/li&gt;
&lt;li&gt;Avoid putting technical details such as clearing queues, starting back- end services, or opening browsers in a background. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Backgrounds are useful for taking Given (and sometimes When) steps that are repeated in each scenario and moving them to a single place. This helps keep your scenarios clear and concise.&lt;/p&gt;
&lt;h2 id=&quot;Discovery-Workshops&quot;&gt;&lt;a href=&quot;#Discovery-Workshops&quot; class=&quot;headerlink&quot; title=&quot;Discovery Workshops&quot;&gt;&lt;/a&gt;Discovery Workshops&lt;/h2&gt;&lt;p&gt;Discovery workshops (or Specification workshops) are short and frequent meetings where business and IT meet to gain a common understanding of how the software should behave.&lt;/p&gt;
&lt;h2 id=&quot;Relationship-with-TDD&quot;&gt;&lt;a href=&quot;#Relationship-with-TDD&quot; class=&quot;headerlink&quot; title=&quot;Relationship with TDD&quot;&gt;&lt;/a&gt;Relationship with TDD&lt;/h2&gt;&lt;p&gt;The main difference is that Cucumber operates on a higher abstraction level, closer to the domain and farther away from classes and methods. BDD builds on TDD, while preserving a strong link between the business requirements and the technical solution.&lt;/p&gt;
&lt;h2 id=&quot;Outside-in&quot;&gt;&lt;a href=&quot;#Outside-in&quot; class=&quot;headerlink&quot; title=&quot;Outside in&quot;&gt;&lt;/a&gt;Outside in&lt;/h2&gt;&lt;p&gt;This technique is called Outside-in because programmers typically start with the functionality that is closest to the user (the user interface, which is on the outside of the system) and gradually work towards the guts of the system (business logic, persistence, messaging and so on) as they discover more of what needs to be implemented.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Your cucumber features should drive your implementation, not reflect it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This means Cucumber features should be written before the code implementing the feature.&lt;/p&gt;
&lt;p&gt;Notice that we’re just sketching out the interface to the class, rather than adding any implementation to it. This way of working is fundamental to out- side-in development. We try not to think about how the Account is going to work yet but concentrate on what it should be able to do.&lt;/p&gt;
&lt;p&gt;Keeping specifications, regression tests and documentation in a single place reduces the overhead of keeping multiple documents in sync - the Cucumber scenarios work as a shared source of truth for business and IT.&lt;/p&gt;
&lt;p&gt;While many people focus on the value added by the automated “tests” you get out of BDD, the real value is actually the shared understanding we get at the beginning.&lt;/p&gt;
&lt;p&gt;Cucumber is not a tool for testing software. It is a tool for testing people’s understanding of how software (yet to be written) should behave.&lt;/p&gt;
&lt;p&gt;The biggest advantage of BDD approach for software development might be that they describe a set of functions that a user expects from a system in a very concrete and direct manner. The sum of these behaviors essentially document a contract with the user/client. If any of the tests fail, this contract is not upheld.&lt;/p&gt;
&lt;h1 id=&quot;Process&quot;&gt;&lt;a href=&quot;#Process&quot; class=&quot;headerlink&quot; title=&quot;Process&quot;&gt;&lt;/a&gt;Process&lt;/h1&gt;&lt;p&gt;the most important stage of BDD. Three amigos (business persons, developers, testers) get together and identify the expected behavior of our product by discussing examples. We can use feature mapping approach to effectively analyse and elaborate the product behavior.&lt;/p&gt;
&lt;p&gt;always make sure that your scenarios are not tightly coupled with your tests. Your BDD scenarios should change only when the requirement changes, not when the the implementation changes (i.e. your BDD scenarios must drive the implementation, not the other way around).&lt;/p&gt;
&lt;h1 id=&quot;Executable-Specification&quot;&gt;&lt;a href=&quot;#Executable-Specification&quot; class=&quot;headerlink&quot; title=&quot;Executable Specification&quot;&gt;&lt;/a&gt;Executable Specification&lt;/h1&gt;&lt;p&gt;An Executable Specification is a Definition of Done that you can run as a test. In Behavior Driven Development (BDD), we refer to acceptance criteria as “executable specifications.” Executable Specifications are meant to be clear, unambiguous, written in business terms, and easy to automate. Each acceptance criteria is a concrete example of how a user interacts with the system to achieve some business goal.&lt;/p&gt;
&lt;p&gt;The most well-known format for BDD acceptance criteria uses the “Given-When-Then” structure:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Given &amp;lt;some precondition&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;When &amp;lt;something happens&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Then &amp;lt;we expect some outcome&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;This format is a great way to make sure that we are thinking in terms of the outcomes we want to achieve. After all, the outcomes of an application are where the value lies.&lt;/p&gt;
&lt;p&gt;These scenarios are also easy to automate with BDD tools like Cucumber and Specflow.&lt;/p&gt;
&lt;h1 id=&quot;No-silver-bullet&quot;&gt;&lt;a href=&quot;#No-silver-bullet&quot; class=&quot;headerlink&quot; title=&quot;No silver bullet&quot;&gt;&lt;/a&gt;No silver bullet&lt;/h1&gt;&lt;p&gt;“The hardest single part of building a software system is deciding precisely what to build.”&lt;br&gt;We’ve all worked on projects where, because of a misunderstanding, code that we’d worked hard on for several days or more had to be thrown away. Better communication between developers and stakeholders is essential to help avoid this kind of wasted time. One technique that really helps facilitate this communication is the use of concrete examples to illustrate what we want the software to do.&lt;/p&gt;
&lt;h2 id=&quot;Concrete-Examples&quot;&gt;&lt;a href=&quot;#Concrete-Examples&quot; class=&quot;headerlink&quot; title=&quot;Concrete Examples&quot;&gt;&lt;/a&gt;Concrete Examples&lt;/h2&gt;&lt;p&gt;By using real-world examples to describe the desired behavior of the system we want to build, we stay grounded in language and terminology that makes sense to our stakeholders: we’re speaking their language. &lt;/p&gt;
&lt;p&gt;To illustrate this, let’s imagine you’re building a credit card payment system. One of the requirements is to make sure users can’t enter bad data. Here’s one way of expressing that:&lt;br&gt;&lt;code&gt;Customers should be prevented from entering invalid credit card details.&lt;/code&gt;&lt;br&gt;This is an example of what Agile teams often call acceptance criteria or condi- tions of satisfaction.1 We use the word acceptance because they tell us what the system must be able to do in order for our stakeholders to find it acceptable.&lt;/p&gt;
&lt;p&gt;The previous requirements statement is useful, but it leaves far too much room for ambiguity and misunderstanding. It lacks precision. What exactly makes a set of details invalid? How exactly should the user be prevented from entering them? We’ve seen too many projects get dragged into the tar pit2 by these kind of worthy but vague statements. Let’s try illustrating this requirement with a concrete example:&lt;br&gt;&lt;code&gt;If a customer enters a credit card number that isn’t exactly 16 digits long, when they try to submit the form, it should be redisplayed with an error message advising them of the correct number of digits.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Can you see how much more specific this second statement is? As a developer implementing this feature, we know almost everything we need to be able to sit down and start working on the code. As a stakeholder, we have a much clearer idea of what the developer is going to build.&lt;br&gt;In fact, a stakeholder reading this might point out that there are certain types of cards that are valid with fewer than 16 digits and give us another example. This is the real power of examples: they stimulate our imagination, enabling us to explore and discover edge cases we might otherwise not have found until much later.&lt;/p&gt;
&lt;p&gt;By giving an example to illustrate our requirement, we’ve turned an acceptance criterion into an acceptance test. Now we have something unambiguous that we can use to test the behavior of the system, either manually or by using an automated test script.&lt;/p&gt;
&lt;h1 id=&quot;Gherkins&quot;&gt;&lt;a href=&quot;#Gherkins&quot; class=&quot;headerlink&quot; title=&quot;Gherkins&quot;&gt;&lt;/a&gt;Gherkins&lt;/h1&gt;&lt;p&gt;Gherkin use main keywords: Feature, Scenario, Given, When, Then, And, But, Background, Scenario Outline, Examplesand some extra syntax “”” (Doc strings), | (Data tables), @(Tags), # (Comments).&lt;/p&gt;
&lt;h2 id=&quot;dry-run&quot;&gt;&lt;a href=&quot;#dry-run&quot; class=&quot;headerlink&quot; title=&quot;dry run&quot;&gt;&lt;/a&gt;dry run&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ java -cp &lt;span class=&quot;string&quot;&gt;&quot;.:jars/*&quot;&lt;/span&gt; cucumber.api.cli.Main -g step_definitions --dry-run features&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The –dry-run switch tells Cucumber to parse the file without executing it. It&lt;br&gt;will tell you if your Gherkin isn’t valid.&lt;/p&gt;
&lt;h1 id=&quot;Replacing-Given-When-Then-with-Bullets&quot;&gt;&lt;a href=&quot;#Replacing-Given-When-Then-with-Bullets&quot; class=&quot;headerlink&quot; title=&quot;Replacing Given/When/Then with Bullets&quot;&gt;&lt;/a&gt;Replacing Given/When/Then with Bullets&lt;/h1&gt;&lt;p&gt;Some people find Given, When, Then, And, and But a little verbose. There is an additional keyword you can use to start a step: &lt;em&gt; (an asterisk). We could have written the previous scenario like this:&lt;br&gt;Scenario: Attempt withdrawal using stolen card &lt;/em&gt; I have $100 in my account&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;my card is invalid&lt;/li&gt;
&lt;li&gt;I request $50&lt;/li&gt;
&lt;li&gt;my card should not be returned&lt;/li&gt;
&lt;li&gt;I should be told to contact the bank&lt;br&gt;To Cucumber, this is exactly the same scenario. Do you find this version easier to read? Maybe. Did some of the meaning get lost? Maybe. It’s up to you and your team how you want to word things. The only thing that matters is that everybody understands what’s communicated.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;CucumberOptions&quot;&gt;&lt;a href=&quot;#CucumberOptions&quot; class=&quot;headerlink&quot; title=&quot;CucumberOptions&quot;&gt;&lt;/a&gt;CucumberOptions&lt;/h2&gt;&lt;p&gt;the @CucumberOptions. One can define the location of features, glue files (step definitions), and formatter plugins inside this Cucumber options. &lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@CucumberOptions&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        features = &lt;span class=&quot;string&quot;&gt;&quot;src/test/resources/features&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        glue = &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;stepdefs&quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        tags = &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;~@Ignore&quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        format = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;string&quot;&gt;&quot;pretty&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;string&quot;&gt;&quot;html:target/cucumber-reports/cucumber-pretty&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;string&quot;&gt;&quot;json:target/cucumber-reports/CucumberTestReport.json&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;string&quot;&gt;&quot;rerun:target/cucumber-reports/rerun.txt&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TestRunner&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Step-definitions&quot;&gt;&lt;a href=&quot;#Step-definitions&quot; class=&quot;headerlink&quot; title=&quot;Step definitions&quot;&gt;&lt;/a&gt;Step definitions&lt;/h3&gt;&lt;p&gt;Cucumber doesn’t know how to execute your scenarios out-of-the-box. It needs Step Definitions to translate plain text Gherkin steps into actionsthat will interact with the system. When Cucumber executes a Step in a Scenario, it will look for a matching Step Definition to execute.&lt;/p&gt;
&lt;h3 id=&quot;After&quot;&gt;&lt;a href=&quot;#After&quot; class=&quot;headerlink&quot; title=&quot;After&quot;&gt;&lt;/a&gt;After&lt;/h3&gt;&lt;p&gt;one can implement initial configurations of the project in TestNG’s BeforeClass method. In cucumber’s Before hook, one can implement code to open web browser which is a prerequisite for all scenarios. In Background of each feature, one can implement steps to navigate to web site and/or login to account. In Cucumber’s After hook, one can take a snapshot of failure and close the browser.&lt;/p&gt;
&lt;h2 id=&quot;tags&quot;&gt;&lt;a href=&quot;#tags&quot; class=&quot;headerlink&quot; title=&quot;tags&quot;&gt;&lt;/a&gt;tags&lt;/h2&gt;&lt;p&gt;Grouping Features, Scenarios, and Step Definitions using Tags&lt;br&gt;Tags is a great way made for Cucumber power users to organize their features and scenarios. In above example, by changing tags = {“~@Ignore”} line totags = {“@UpdateProfile”}, one can choose run only the features and scenarios tagged with @UpdateProfile tag. A Scenario or feature can have as many tags as you like. Just separate them with spaces: @important @maintenance @db @auth&lt;/p&gt;
&lt;p&gt;If subfolders are the chapters in your book of features, then tags are the sticky notes you’ve put on pages you want to be able to find easily. You tag a scenario by putting a word prefixed with the @ character on the line before the Scenario keyword, like this:&lt;br&gt;@widgets&lt;br&gt;Scenario: Generate report&lt;br&gt;Given I am logged in&lt;/p&gt;
&lt;p&gt;There are three main reasons for tagging scenarios:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Documentation: You want to use a tag to attach a label to certain scenarios, for example to label them with an ID from a project management tool.&lt;/li&gt;
&lt;li&gt;Filtering: Cucumber allows you to use tags as a filter to pick out specific scenarios to run or report on. You can even have Cucumber fail your test run if a certain tag appears too many times.&lt;/li&gt;
&lt;li&gt;Hooks: Run a block of code whenever a scenario with a particular tag is about to start or has just finished.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;config-tag&quot;&gt;&lt;a href=&quot;#config-tag&quot; class=&quot;headerlink&quot; title=&quot;config tag&quot;&gt;&lt;/a&gt;config tag&lt;/h3&gt;&lt;p&gt;Tags are a great way to organise your features and scenarios. Consider this example:&lt;/p&gt;
&lt;p&gt;@billing&lt;br&gt;Feature: Verify billing&lt;/p&gt;
&lt;p&gt;  @important&lt;br&gt;  Scenario: Missing product description&lt;br&gt;    Given hello&lt;/p&gt;
&lt;p&gt;  Scenario: Several products&lt;br&gt;    Given hello&lt;br&gt;A feature or scenario or can have as many tags as you like. Just separate them with spaces:&lt;/p&gt;
&lt;p&gt;@billing @bicker @annoy&lt;br&gt;Feature: Verify billing&lt;br&gt;Tags can be placed above the following Gherkin elements:&lt;/p&gt;
&lt;p&gt;Feature&lt;br&gt;Scenario&lt;br&gt;Scenario Outline&lt;br&gt;Examples&lt;br&gt;It is not possible to place tags above Background or steps (Given, When, Then, And and But).&lt;/p&gt;
&lt;h1 id=&quot;Cucumber-for-java-8-lambda&quot;&gt;&lt;a href=&quot;#Cucumber-for-java-8-lambda&quot; class=&quot;headerlink&quot; title=&quot;Cucumber for java 8 lambda&quot;&gt;&lt;/a&gt;Cucumber for java 8 lambda&lt;/h1&gt;&lt;p&gt;Using Lambda Expressions for Step Definitions&lt;br&gt;Java Step Definitions are written in regular classes which don’t need to extend or implement anything. They can be written either using lambda expressions or method annotations. In the above, we used the method annotations. To use lambda expressions, use cucumber-java8 module instead of cucumber-java module in your pom.xml file.&lt;/p&gt;
&lt;p&gt;When you use the cucumber-java8 module, you can write the Step Definitions using lambdas:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; cucumber;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; cucumber.api.java8.En;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;StepDefinitions&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;En&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;StepDefinitions&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Given(&lt;span class=&quot;string&quot;&gt;&quot;I have (\\d+) cukes in my belly&quot;&lt;/span&gt;, (Integer cukes) -&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.format(&lt;span class=&quot;string&quot;&gt;&quot;Cukes: %n\n&quot;&lt;/span&gt;, cukes);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; steps;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; cucumber.api.java8.En;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyStepdefs&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;En&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyStepdefs&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       Given(&lt;span class=&quot;string&quot;&gt;&quot;I login as (.*)$&quot;&lt;/span&gt;,(String name)-&amp;gt; System.out.println(name));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Gherkin-1&quot;&gt;&lt;a href=&quot;#Gherkin-1&quot; class=&quot;headerlink&quot; title=&quot;Gherkin&quot;&gt;&lt;/a&gt;Gherkin&lt;/h1&gt;&lt;p&gt;Cucumber tests are expressed using a syntax called Gherkin. Gherkin files are plain text and have a .feature extension.&lt;/p&gt;
&lt;h1 id=&quot;Steps-and-Step-Definitions&quot;&gt;&lt;a href=&quot;#Steps-and-Step-Definitions&quot; class=&quot;headerlink&quot; title=&quot;Steps and Step Definitions&quot;&gt;&lt;/a&gt;Steps and Step Definitions&lt;/h1&gt;&lt;p&gt;Let’s start by clarifying the distinction between a step and a step definition.&lt;br&gt;Each Gherkin scenario is made up of a series of steps, written in plain lan- guage. On its own, a step is just documentation; it needs a step definition to bring it to life. A step definition is a piece of code that says to Cucumber, “If you see a step that looks like this…, then here’s what I want you to do….”&lt;br&gt;When Cucumber tries to execute each step, it looks for a matching step defi- nition to execute. So, how does Cucumber match a step definition to a step?&lt;/p&gt;
&lt;h1 id=&quot;Creating-a-Step-Definition&quot;&gt;&lt;a href=&quot;#Creating-a-Step-Definition&quot; class=&quot;headerlink&quot; title=&quot;Creating a Step Definition&quot;&gt;&lt;/a&gt;Creating a Step Definition&lt;/h1&gt;&lt;p&gt;If Cucumber sees a step definition with this regular expression, it will execute it when it comes to the first step of our scenario. So, how do we create a step definition?&lt;/p&gt;
&lt;p&gt;Step definitions live in ordinary files. To create a step definition in Java, you use a special Cucumber annotation, such as @Given, like this:&lt;br&gt;@Given(“I have \$100 in my Account”)&lt;br&gt;public void iHave$100InMyAccount() throws Throwable {&lt;br&gt;    // TODO: code that puts $100 into User’s Account goes here&lt;br&gt;}&lt;/p&gt;
&lt;h2 id=&quot;Given-When-Then-Are-the-Same&quot;&gt;&lt;a href=&quot;#Given-When-Then-Are-the-Same&quot; class=&quot;headerlink&quot; title=&quot;Given, When, Then Are the Same&quot;&gt;&lt;/a&gt;Given, When, Then Are the Same&lt;/h2&gt;&lt;p&gt;It doesn’t actually matter which of the three methods you use to register a step definition, because Cucumber ignores the keyword when matching a step. Under the hood, all of the annotations are aliases for StepDefAnnotation.&lt;/p&gt;
&lt;p&gt;The best way we’ve found to avoid this kind of problem is to pay careful attention to the precise wording in your steps. You could change both steps to be less ambiguous:&lt;br&gt;Given I have deposited $100 in my Account Then the balance of my Account should be $100&lt;br&gt;By rewording the steps like this, you’ve made them better at communicating exactly what they will do when executed. Learning to spot and remove this kind of ambiguity is something that takes practice. Paying attention to the distinction in wording between two steps like this can also give you hints about concepts that may not be expressed in your code but need to be. It might seem pedantic, but we’ve found that teams who pay this much careful attention to detail write much better software, faster.&lt;/p&gt;
&lt;h3 id=&quot;Alternation&quot;&gt;&lt;a href=&quot;#Alternation&quot; class=&quot;headerlink&quot; title=&quot;Alternation&quot;&gt;&lt;/a&gt;Alternation&lt;/h3&gt;&lt;p&gt;We can specify a wildcard in a regular expression using a few different approaches. One of the simplest is alternation, where we express different options separated by a pipe character |, like this:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Given&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;I have deposited \\$(100|250) in my Account&quot;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; iHaveDeposited$InMyAccount(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; amount) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// &lt;span class=&quot;doctag&quot;&gt;TODO:&lt;/span&gt; code goes here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;This step definition will now match a step with either of the two values 100 or 250 in it, and the number will be captured and passed to the method as an argument. Alternation can be useful if there are a fixed set of values that you want to accept in your step definition, but normally you’ll want something a little looser.&lt;/p&gt;
&lt;h3 id=&quot;The-Dot&quot;&gt;&lt;a href=&quot;#The-Dot&quot; class=&quot;headerlink&quot; title=&quot;The Dot&quot;&gt;&lt;/a&gt;The Dot&lt;/h3&gt;&lt;p&gt;The dot is a metacharacter, meaning it has magical powers in a regular expression. Literally, a dot means match any single character. So, we can try this instead:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Given&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;I have deposited \\$(...) in my Account&quot;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; iHaveDeposited$InMyAccount(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; amount) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// &lt;span class=&quot;doctag&quot;&gt;TODO:&lt;/span&gt; code goes here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;That will now match a step with any three-figure dollar sum and send the matched amount into the method. &lt;/p&gt;
&lt;h4 id=&quot;What-If-I-Actually-Want-to-Match-a-Dot&quot;&gt;&lt;a href=&quot;#What-If-I-Actually-Want-to-Match-a-Dot&quot; class=&quot;headerlink&quot; title=&quot;What If I Actually Want to Match a Dot?&quot;&gt;&lt;/a&gt;What If I Actually Want to Match a Dot?&lt;/h4&gt;&lt;p&gt;Any of the metacharacters like the dot can be escaped by preceding them with a backslash. So, if you wanted to specifically match, say 3.14, you could use “3\.14”.&lt;br&gt;You might have noticed that there’s a backslash in front of the dollar amount in the step definition we’re using. That’s because $ itself is a metacharacter (it’s an anchor, which we’ll explain later), so we need to escape to make it match a normal dollar sign.&lt;/p&gt;
&lt;h2 id=&quot;Star-modifier&quot;&gt;&lt;a href=&quot;#Star-modifier&quot; class=&quot;headerlink&quot; title=&quot;Star modifier&quot;&gt;&lt;/a&gt;Star modifier&lt;/h2&gt;&lt;p&gt;The star modifier means any number of times. So, with .* we’re capturing any character, any number of times. Now we’re getting somewhere—this will allow us to capture all those different amounts. But there’s still a problem.&lt;br&gt;The star modifier is a bit of a blunt instrument. Because we’re using it with the dot that matches any character, it will gobble up any text at all up until the phrase in my Account. This is why, in regex terminology, the star modifier is known as a greedy operator. For example, it would happily match this step:&lt;br&gt;Given I have deposited $1 and a cucumber in my Account&lt;br&gt;The amount captured by our regular expression in this case would be 1 and a cucumber. We need to be more specific about the characters we want to match and just capture numbers. Instead of a dot, we can use something else.&lt;/p&gt;
&lt;h3 id=&quot;Character-Classes&quot;&gt;&lt;a href=&quot;#Character-Classes&quot; class=&quot;headerlink&quot; title=&quot;Character Classes&quot;&gt;&lt;/a&gt;Character Classes&lt;/h3&gt;&lt;p&gt;Character classes allow you to tell the regular expression engine to match one of a range of characters. You just place all of the characters you would accept inside square brackets:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Given&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;I have deposited \\$([01234567890]*) in my Account&quot;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; iHaveDeposited$InMyAccount(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; amount) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// &lt;span class=&quot;doctag&quot;&gt;TODO:&lt;/span&gt; code goes here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;For a continuous range of characters like we have, you can use a hyphen:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Given&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;I have deposited \\$([0-9]*) in my Account&quot;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; iHaveDeposited$InMyAccount(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; amount) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// &lt;span class=&quot;doctag&quot;&gt;TODO:&lt;/span&gt; code goes here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Shorthand-Character-Classes&quot;&gt;&lt;a href=&quot;#Shorthand-Character-Classes&quot; class=&quot;headerlink&quot; title=&quot;Shorthand Character Classes&quot;&gt;&lt;/a&gt;Shorthand Character Classes&lt;/h3&gt;&lt;p&gt;For common patterns of characters like [0-9], there are a few shorthand char- acter classes that you can use instead. You may find this just makes your regular expressions more cryptic, but there are only a few to learn. For a digit, you can use \d as a shorthand for [0-9]:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Given&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;I have deposited \\$(\\d*) in my Account&quot;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; iHaveDeposited$InMyAccount(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; amount) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// &lt;span class=&quot;doctag&quot;&gt;TODO:&lt;/span&gt; code goes here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Here are the most useful shorthand character classes: \d stands for digit, or [0-9].&lt;br&gt;\w stands for word character, specifically [A-Za-z0-9_]. Notice that underscores and digits are included but not hyphens.&lt;br&gt;\s stands for whitespace character, specifically [ \t\r\n]. That means a space, a tab, or a line break.&lt;br&gt;\b stands for word boundary, which is a lot like \s but actually means the opposite of \w. Anything that is not a word character is a word boundary.&lt;br&gt;You can also negate shorthand character classes by capitalizing them, so for example, \D means any character except a digit.&lt;br&gt;Back to matching our amount. It looks like we’re done, but there’s one last problem to fix. Can you see what it is?&lt;/p&gt;
&lt;h3 id=&quot;question-mark&quot;&gt;&lt;a href=&quot;#question-mark&quot; class=&quot;headerlink&quot; title=&quot;question mark&quot;&gt;&lt;/a&gt;question mark&lt;/h3&gt;&lt;p&gt;Like the star and the plus, the question mark modifies the character that precedes it, specifying how many times it can be repeated. The question mark modifier means zero or one times; in other words, it makes the preceding character optional. In step definitions, it’s particularly useful for plurals:&lt;br&gt;@Given(“I have (\d+) cucumbers? in my basket”) public void iHaveCucumbersInMyBasket(int number) {&lt;br&gt;  // TODO: code goes here&lt;br&gt;}&lt;/p&gt;
&lt;h3 id=&quot;noncapturing-group&quot;&gt;&lt;a href=&quot;#noncapturing-group&quot; class=&quot;headerlink&quot; title=&quot;noncapturing group&quot;&gt;&lt;/a&gt;noncapturing group&lt;/h3&gt;&lt;p&gt;@When(“I (?:visit|go to) the homepage”) public void iVisitTheHomepage() {&lt;br&gt;  // TODO: code goes here&lt;br&gt;}&lt;br&gt;Notice that we’ve had to prefix the list of alternates with another bit of regular expression magic. The ?: at the start of the group marks it as noncapturing, meaning Cucumber won’t pass it as an argument to our block.&lt;/p&gt;
&lt;h3 id=&quot;Anchors&quot;&gt;&lt;a href=&quot;#Anchors&quot; class=&quot;headerlink&quot; title=&quot;Anchors&quot;&gt;&lt;/a&gt;Anchors&lt;/h3&gt;&lt;p&gt;The undefined steps start with a ^ and end with a $. These two metacharacters are called anchors, because they’re used to tie down each end of the regular expression to the beginning and end of the string that they match on.&lt;/p&gt;
&lt;p&gt;Generally, it’s best to keep your regular expressions as tight as you can so that there’s less chance of two step definitions clashing with each other.&lt;/p&gt;
&lt;h1 id=&quot;Guides-on-how-to-write-scenarios&quot;&gt;&lt;a href=&quot;#Guides-on-how-to-write-scenarios&quot; class=&quot;headerlink&quot; title=&quot;Guides on how to write scenarios&quot;&gt;&lt;/a&gt;Guides on how to write scenarios&lt;/h1&gt;&lt;p&gt;Try to avoid being guided by existing step definitions when you write your scenarios and just write down exactly what you want to happen, in plain English. In fact, try to avoid programmers or testers writing scenarios on their own. Instead, get nontechnical stakeholders or analysts to write the first draft of each scenario from a purely business-focused perspective or ideally in a pair with a programmer to help them share their mental model. With a well- engineered support layer, you can confidently and quickly write new step definitions to match the way the scenario has been expressed.&lt;/p&gt;
&lt;h1 id=&quot;Imperative-Steps&quot;&gt;&lt;a href=&quot;#Imperative-Steps&quot; class=&quot;headerlink&quot; title=&quot;Imperative Steps&quot;&gt;&lt;/a&gt;Imperative Steps&lt;/h1&gt;&lt;p&gt;In computer programming, there are two contrasting styles for expressing the instructions you give to a computer to make it do something for you. These styles are called imperative programming and declarative programming.&lt;/p&gt;
&lt;p&gt;Imperative programming means using a sequence of commands for the com- puter to perform in a particular order. Java is an example of an imperative language: you write a program as a series of statements that Java runs one at a time, in order. A declarative program tells the computer what it should do without prescribing precisely how to do it. CSS is an example of a declar- ative language: you tell the computer what you want the various elements on a web page to look like, and you leave it to take care of the rest.&lt;/p&gt;
&lt;h2 id=&quot;Use-a-Declarative-Style-Instead&quot;&gt;&lt;a href=&quot;#Use-a-Declarative-Style-Instead&quot; class=&quot;headerlink&quot; title=&quot;Use a Declarative Style Instead&quot;&gt;&lt;/a&gt;Use a Declarative Style Instead&lt;/h2&gt;&lt;p&gt;Let’s raise the level of abstraction in this scenario and rewrite it using a more declarative style:&lt;br&gt;Scenario: Redirect user to originally requested page after logging in Given I am an unauthenticated User&lt;br&gt;When I attempt to view some restricted content&lt;br&gt;Then I am shown a login form&lt;br&gt;When I authenticate with valid credentials Then I should be shown the restricted content&lt;br&gt;The beauty of this style is that it is not coupled to any specific implementation of the user interface. This same scenario could apply to a thick-client or mobile application. The words it uses aren’t technical and are instead written in a language (unauthenticated, restricted, credentials) that any stakeholder interested in security should be able to clearly understand. It’s by expressing every scenario at this level of abstraction that you discover your team’s ubiquitous language.&lt;/p&gt;
&lt;h1 id=&quot;DAMP&quot;&gt;&lt;a href=&quot;#DAMP&quot; class=&quot;headerlink&quot; title=&quot;DAMP&quot;&gt;&lt;/a&gt;DAMP&lt;/h1&gt;&lt;p&gt;However, when you are using examples to drive your code, there is another principle in play that I believe trumps the DRY principle: the examples should tell a good story. They are the docu- mentation narrative that will guide future programmers (including you when you come back to change this code in three months time and you’ve forgotten what it does). In this case, clarity of intent is found in the quality of the narrative, not necessarily in minimizing duplication.&lt;/p&gt;
&lt;p&gt;Some people refer to this as the DAMP principle: Descriptive and Meaningful Phrases. When you’re writing examples, readability is paramount, and DAMP trumps DRY.&lt;/p&gt;
&lt;p&gt;We consider fixture data to be an antipattern. We much prefer using Test Data Builders, on page 104, where the relevant data is created within the test itself, rather than being buried away in a big tangled set of fixture data.&lt;/p&gt;
&lt;p&gt;We find that teams that have a single humongous build also tend to have an architecture that could best be described as a big ball of mud. Because all of the behavior in the system is implemented in one place, all the tests have to live in one place, too, and have to all be run together as one big lump. This is a classic ailment of long-lived applications, which have grown organically without obvious interfaces between their subsystems.&lt;/p&gt;
&lt;h1 id=&quot;Defect-Prevention&quot;&gt;&lt;a href=&quot;#Defect-Prevention&quot; class=&quot;headerlink&quot; title=&quot;Defect Prevention&quot;&gt;&lt;/a&gt;Defect Prevention&lt;/h1&gt;&lt;p&gt;Toyota’s counterintuitive but hugely successful policy of stopping the line works because it’s part of a wider process, known as defect prevention, that focuses on continuously improving the manufacturing system. Without this wider process, stop the line itself would have very little effect. There are four steps to this process:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Detect the abnormality.&lt;/li&gt;
&lt;li&gt;Stop what you’re doing.&lt;/li&gt;
&lt;li&gt;Fix or correct the immediate problem.&lt;/li&gt;
&lt;li&gt;Investigate the root cause and install a countermeasure.&lt;br&gt;This fourth step is crucial because it seizes the opportunity offered by the problem at hand to understand something more fundamental about your process. It also means that fixing things becomes a habit, rather than some- thing you put off to do someday later when you’re not in such a hurry.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cucumber might just seem like a testing tool, but at its heart it’s really a collaboration tool. If you make a genuine effort to write features that work as documentation for the nontechnical stakeholders on your team, you’ll find you are forced to talk with them about details that you might never have otherwise made the time to talk about. Those conversations reveal insights about their understanding of the problem, insights that will help you build a much better solution than you would have otherwise. This is Cucumber’s big secret: the tests and documentation are just a happy side effect; the real value lies in the knowledge you discover during those conversations.&lt;/p&gt;
&lt;h1 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/agile-vision/cucumber-bdd-part-2-creating-a-sample-java-project-with-cucumber-testng-and-maven-127a1053c180&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://medium.com/agile-vision/cucumber-bdd-part-2-creating-a-sample-java-project-with-cucumber-testng-and-maven-127a1053c180&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://codoid.com/cucumber-lambda-expressions/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://codoid.com/cucumber-lambda-expressions/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Acceptance-testing-vs-unit-test&quot;&gt;&lt;a href=&quot;#Acceptance-testing-vs-unit-test&quot; class=&quot;headerlink&quot; title=&quot;Acceptance testing vs unit tes
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Chronicle</title>
    <link href="http://www.todzhang.com/2018-08-09-Chronicle/"/>
    <id>http://www.todzhang.com/2018-08-09-Chronicle/</id>
    <published>2019-05-31T13:03:27.148Z</published>
    <updated>2019-05-31T13:03:27.148Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h1&gt;&lt;p&gt;Chronicle Software is about simplifying fast data.  It is a suite of libraries to make it easier to write, monitor and tune data processing systems where performance and scalability are concerned.&lt;/p&gt;
&lt;h1 id=&quot;Writing-to-a-Queue&quot;&gt;&lt;a href=&quot;#Writing-to-a-Queue&quot; class=&quot;headerlink&quot; title=&quot;Writing to a Queue&quot;&gt;&lt;/a&gt;Writing to a Queue&lt;/h1&gt;&lt;p&gt;In Chronicle Queue we refer to the act of writing your data to the Chronicle queue, as storing an excerpt. This data could be made up from any data type, including text, numbers, or serialised blobs. Ultimately, all your data, regardless of what it is, is stored as a series of bytes.&lt;/p&gt;
&lt;p&gt;Just before storing your excerpt, Chronicle Queue reserves an 8-byte header. Chronicle Queue writes the length of your data into this header. This way, when Chronicle Queue comes to read your excerpt, it knows how long each blob of data is. We refer to this 8-byte header, along with your excerpt, as a document. So strictly speaking Chronicle Queue can be used to read and write documents.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Within this 8-byte header we also reserve a few bits for a number of internal operations, such as locking, to make Chronicle Queue thread-safe across both processors and threads. The important thing to note is that because of this, you can’t strictly convert the 8 bytes to an integer to find the length of your data blob.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To write data to a Chronicle-Queue, you must first create an Appender&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; (ChronicleQueue queue = SingleChronicleQueueBuilder.binary(path + &lt;span class=&quot;string&quot;&gt;&quot;/trades&quot;&lt;/span&gt;).build()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; ExcerptAppender appender = queue.acquireAppender();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Chronicle Queue uses the following low-level interface to write the data:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; DocumentContext dc = appender.writingDocument()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      dc.wire().write().text(“your text data“);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;So, Chronicle Queue uses an &lt;code&gt;Appender to write&lt;/code&gt; to the queue and a &lt;code&gt;Tailer to read&lt;/code&gt; from the queue. Unlike other java queuing solutions, messages are not lost when they are read with a Tailer. &lt;/p&gt;
&lt;p&gt;Each Chronicle Queue excerpt has a unique index.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; DocumentContext dc = appender.writingDocument()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dc.wire().write().text(“your text data“);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;your data was store to index=&quot;&lt;/span&gt;+ dc.index());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The high-level methods below such as writeText() are convenience methods on calling appender.writingDocument(), but both approaches essentially do the same thing. The actual code of writeText(CharSequence text) looks like this:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; text to write a message&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;writeText&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(CharSequence text)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; (DocumentContext dc = writingDocument()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dc.wire().bytes().append8bit(text);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This is the highest-level API which hides the fact you are writing to messaging at all. The benefit is that you can swap calls to the interface with a real component, or an interface to a different protocol.&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// using the method writer interface.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RiskMonitor riskMonitor = appender.methodWriter(RiskMonitor.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; LocalDateTime now = LocalDateTime.now(Clock.systemUTC());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;riskMonitor.trade(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TradeDetails(now, &lt;span class=&quot;string&quot;&gt;&quot;GBPUSD&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.3095&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10e6&lt;/span&gt;, Side.Buy, &lt;span class=&quot;string&quot;&gt;&quot;peter&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;You can write a “self-describing message”. Such messages can support schema changes. They are also easier to understand when debugging or diagnosing problems.&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// writing a self describing message&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;appender.writeDocument(w -&amp;gt; w.write(&lt;span class=&quot;string&quot;&gt;&quot;trade&quot;&lt;/span&gt;).marshallable(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        m -&amp;gt; m.write(&lt;span class=&quot;string&quot;&gt;&quot;timestamp&quot;&lt;/span&gt;).dateTime(now)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                .write(&lt;span class=&quot;string&quot;&gt;&quot;symbol&quot;&lt;/span&gt;).text(&lt;span class=&quot;string&quot;&gt;&quot;EURUSD&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                .write(&lt;span class=&quot;string&quot;&gt;&quot;price&quot;&lt;/span&gt;).float64(&lt;span class=&quot;number&quot;&gt;1.1101&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                .write(&lt;span class=&quot;string&quot;&gt;&quot;quantity&quot;&lt;/span&gt;).float64(&lt;span class=&quot;number&quot;&gt;15e6&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                .write(&lt;span class=&quot;string&quot;&gt;&quot;side&quot;&lt;/span&gt;).object(Side.class, Side.Sell)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                .write(&lt;span class=&quot;string&quot;&gt;&quot;trader&quot;&lt;/span&gt;).text(&lt;span class=&quot;string&quot;&gt;&quot;peter&quot;&lt;/span&gt;)));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;You can write “raw data” which is self-describing. The types will always be correct; position is the only indication as to the meaning of those values.&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// writing just data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;appender.writeDocument(w -&amp;gt; w&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .getValueOut().int32(&lt;span class=&quot;number&quot;&gt;0x123456&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .getValueOut().int64(&lt;span class=&quot;number&quot;&gt;0x999000999000L&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .getValueOut().text(&lt;span class=&quot;string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;You can write “raw data” which is not self-describing. Your reader must know what this data means, and the types that were used.&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// writing raw data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;appender.writeBytes(b -&amp;gt; b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .writeByte((&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;) &lt;span class=&quot;number&quot;&gt;0x12&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .writeInt(&lt;span class=&quot;number&quot;&gt;0x345678&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .writeLong(&lt;span class=&quot;number&quot;&gt;0x999000999000L&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .writeUtf8(&lt;span class=&quot;string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;This is the lowest level way to write data. You get an address to raw memory and you can write what you want.&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Unsafe low level&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;appender.writeBytes(b -&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; address = b.address(b.writePosition());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Unsafe unsafe = UnsafeMemory.UNSAFE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    unsafe.putByte(address, (&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;) &lt;span class=&quot;number&quot;&gt;0x12&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    address += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    unsafe.putInt(address, &lt;span class=&quot;number&quot;&gt;0x345678&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    address += &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    unsafe.putLong(address, &lt;span class=&quot;number&quot;&gt;0x999000999000L&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    address += &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[] bytes = &lt;span class=&quot;string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;.getBytes(StandardCharsets.ISO_8859_1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    unsafe.copyMemory(bytes, Unsafe.ARRAY_BYTE_BASE_OFFSET, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;, address, bytes.length);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    b.writeSkip(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; + bytes.length);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;You can print the contents of the queue. You can see the first two, and last two messages store the same data.&lt;/p&gt;
&lt;p&gt;// dump the content of the queue&lt;br&gt;System.out.println(queue.dump());&lt;/p&gt;
&lt;h1 id=&quot;position-262568-header-0&quot;&gt;&lt;a href=&quot;#position-262568-header-0&quot; class=&quot;headerlink&quot; title=&quot;position: 262568, header: 0&quot;&gt;&lt;/a&gt;position: 262568, header: 0&lt;/h1&gt;&lt;p&gt;— !!data #binary&lt;br&gt;trade: {&lt;br&gt;  timestamp: 2016-07-17T15:18:41.141,&lt;br&gt;  symbol: GBPUSD,&lt;br&gt;  price: 1.3095,&lt;br&gt;  quantity: 10000000.0,&lt;br&gt;  side: Buy,&lt;br&gt;  trader: peter&lt;br&gt;}&lt;/p&gt;
&lt;h1 id=&quot;position-262684-header-1&quot;&gt;&lt;a href=&quot;#position-262684-header-1&quot; class=&quot;headerlink&quot; title=&quot;position: 262684, header: 1&quot;&gt;&lt;/a&gt;position: 262684, header: 1&lt;/h1&gt;&lt;p&gt;— !!data #binary&lt;br&gt;trade: {&lt;br&gt;  timestamp: 2016-07-17T15:18:41.141,&lt;br&gt;  symbol: EURUSD,&lt;br&gt;  price: 1.1101,&lt;br&gt;  quantity: 15000000.0,&lt;br&gt;  side: Sell,&lt;br&gt;  trader: peter&lt;br&gt;}&lt;/p&gt;
&lt;h1 id=&quot;position-262800-header-2&quot;&gt;&lt;a href=&quot;#position-262800-header-2&quot; class=&quot;headerlink&quot; title=&quot;position: 262800, header: 2&quot;&gt;&lt;/a&gt;position: 262800, header: 2&lt;/h1&gt;&lt;p&gt;— !!data #binary&lt;br&gt;!int 1193046&lt;br&gt;168843764404224&lt;br&gt;Hello World&lt;/p&gt;
&lt;h1 id=&quot;position-262830-header-3&quot;&gt;&lt;a href=&quot;#position-262830-header-3&quot; class=&quot;headerlink&quot; title=&quot;position: 262830, header: 3&quot;&gt;&lt;/a&gt;position: 262830, header: 3&lt;/h1&gt;&lt;p&gt;— !!data #binary&lt;br&gt;000402b0       12 78 56 34 00 00  90 99 00 90 99 00 00 0B   ·xV4·· ········&lt;br&gt;000402c0 48 65 6C 6C 6F 20 57 6F  72 6C 64                Hello Wo rld&lt;/p&gt;
&lt;h1 id=&quot;position-262859-header-4&quot;&gt;&lt;a href=&quot;#position-262859-header-4&quot; class=&quot;headerlink&quot; title=&quot;position: 262859, header: 4&quot;&gt;&lt;/a&gt;position: 262859, header: 4&lt;/h1&gt;&lt;p&gt;— !!data #binary&lt;br&gt;000402c0                                               12                 ·&lt;br&gt;000402d0 78 56 34 00 00 90 99 00  90 99 00 00 0B 48 65 6C xV4····· ·····Hel&lt;br&gt;000402e0 6C 6F 20 57 6F 72 6C 64 &lt;/p&gt;
&lt;h2 id=&quot;Finding-the-index-at-the-end-of-a-Chronicle-Queue&quot;&gt;&lt;a href=&quot;#Finding-the-index-at-the-end-of-a-Chronicle-Queue&quot; class=&quot;headerlink&quot; title=&quot;Finding the index at the end of a Chronicle Queue&quot;&gt;&lt;/a&gt;Finding the index at the end of a Chronicle Queue&lt;/h2&gt;&lt;p&gt;Chronicle Queue appenders are thread-local. In fact when you ask for:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; ExcerptAppender appender = queue.acquireAppender();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;the acquireAppender() uses a thread-local pool to give you an appender which will be reused to reduce object creation.&lt;/p&gt;
&lt;p&gt;As such, the method call to:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; index = appender.lastIndexAppended();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;will only give you the last index appended by this appender; not the last index appended by any appender.&lt;/p&gt;
&lt;p&gt;If you wish to find the index of the last record written, then you have to call:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; index = queue.createTailer().toEnd().index();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Dumping-a-Chronicle-Queue-cq4-file-as-text-to-the-Command-Line&quot;&gt;&lt;a href=&quot;#Dumping-a-Chronicle-Queue-cq4-file-as-text-to-the-Command-Line&quot; class=&quot;headerlink&quot; title=&quot;Dumping a Chronicle Queue, cq4 file as text to the Command Line&quot;&gt;&lt;/a&gt;Dumping a Chronicle Queue, cq4 file as text to the Command Line&lt;/h2&gt;&lt;p&gt;Chronicle Queue stores its data in binary format, with a file extension of cq4:&lt;/p&gt;
&lt;p&gt;\��@π�header∂�SCQStoreÇE���»wireType∂�WireTypeÊBINARYÕwritePositionèèèèß��������ƒroll∂�SCQSRollÇ*���∆length¶ÄÓ6�∆format&lt;br&gt;ÎyyyyMMdd-HH≈epoch¶ÄÓ6�»indexing∂SCQSIndexingÇN��� indexCount•��ÃindexSpacing�Àindex2Indexé����ß��������…lastIndexé�&lt;br&gt;���ß��������ﬂlastAcknowledgedIndexReplicatedé������ßˇˇˇˇˇˇˇˇ»recovery∂�TimedStoreRecoveryÇ����…timeStampèèèß����������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������&lt;br&gt;This can often be a bit difficult to read, so it is better to dump the cq4 files as text. This can also help you fix your production issues, as it gives you the visibility as to what has been stored in the queue, and in what order.&lt;/p&gt;
&lt;p&gt;You have to use the chronicle-queue.jar, from any version 4.5.3 or later, and set up the dependent files in the class path. &lt;/p&gt;
&lt;p&gt;$ java -cp chronicle-queue-4.5.5.jar net.openhft.chronicle.queue.DumpQueueMain 19700101-02.cq4&lt;/p&gt;
&lt;p&gt;this will dump the 19700101-02.cq4 file out as text, as shown below:&lt;/p&gt;
&lt;p&gt;— !!meta-data #binary&lt;br&gt;header: !SCQStore {&lt;br&gt;  wireType: !WireType BINARY,&lt;br&gt;  writePosition: 0,&lt;br&gt;  roll: !SCQSRoll {&lt;br&gt;    length: !int 3600000,&lt;br&gt;    format: yyyyMMdd-HH,&lt;br&gt;    epoch: !int 3600000&lt;br&gt;  },&lt;br&gt;  indexing: !SCQSIndexing {&lt;br&gt;    indexCount: !short 4096,&lt;br&gt;    indexSpacing: 4,&lt;br&gt;    index2Index: 0,&lt;br&gt;    lastIndex: 0&lt;br&gt;  },&lt;br&gt;  lastAcknowledgedIndexReplicated: -1,&lt;br&gt;  recovery: !TimedStoreRecovery {&lt;br&gt;    timeStamp: 0&lt;br&gt;  }&lt;br&gt;}&lt;/p&gt;
&lt;p&gt;…&lt;br&gt;4198044 bytes remaining&lt;/p&gt;
&lt;h2 id=&quot;Reading-from-a-Queue-using-a-Tailer&quot;&gt;&lt;a href=&quot;#Reading-from-a-Queue-using-a-Tailer&quot; class=&quot;headerlink&quot; title=&quot;Reading from a Queue using a Tailer&quot;&gt;&lt;/a&gt;Reading from a Queue using a Tailer&lt;/h2&gt;&lt;p&gt;Reading the queue follows the same pattern as writing, except there is a possibility there is not a message when you attempt to read it.&lt;/p&gt;
&lt;p&gt;Start Reading&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; (ChronicleQueue queue = SingleChronicleQueueBuilder.binary(path + &lt;span class=&quot;string&quot;&gt;&quot;/trades&quot;&lt;/span&gt;).build()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; ExcerptTailer tailer = queue.createTailer();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;You can turn each message into a method call based on the content of the message.&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// reading using method calls&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RiskMonitor monitor = System.out::println;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MethodReader reader = tailer.methodReader(monitor);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// read one message&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assertTrue(reader.readOne());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;You can decode the message yourself.&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;assertTrue(tailer.readDocument(w -&amp;gt; w.read(&lt;span class=&quot;string&quot;&gt;&quot;trade&quot;&lt;/span&gt;).marshallable(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        m -&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            LocalDateTime timestamp = m.read(&lt;span class=&quot;string&quot;&gt;&quot;timestamp&quot;&lt;/span&gt;).dateTime();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            String symbol = m.read(&lt;span class=&quot;string&quot;&gt;&quot;symbol&quot;&lt;/span&gt;).text();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; price = m.read(&lt;span class=&quot;string&quot;&gt;&quot;price&quot;&lt;/span&gt;).float64();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; quantity = m.read(&lt;span class=&quot;string&quot;&gt;&quot;quantity&quot;&lt;/span&gt;).float64();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Side side = m.read(&lt;span class=&quot;string&quot;&gt;&quot;side&quot;&lt;/span&gt;).object(Side.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            String trader = m.read(&lt;span class=&quot;string&quot;&gt;&quot;trader&quot;&lt;/span&gt;).text();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// do something with values.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;You can read self-describing data values. This will check the types are correct, and convert as required.&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assertTrue(tailer.readDocument(w -&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ValueIn in = w.getValueIn();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num = in.int32();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; num2 = in.int64();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String text = in.text();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// do something with values&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;You can read raw data as primitives and strings.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;assertTrue(tailer.readBytes(in -&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; code = in.readByte();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num = in.readInt();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; num2 = in.readLong();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String text = in.readUtf8();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    assertEquals(&lt;span class=&quot;string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;, text);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// do something with values&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;or, you can get the underlying memory address and access the native memory.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;assertTrue(tailer.readBytes(b -&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; address = b.address(b.readPosition());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Unsafe unsafe = UnsafeMemory.UNSAFE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; code = unsafe.getByte(address);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    address++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num = unsafe.getInt(address);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    address += &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; num2 = unsafe.getLong(address);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    address += &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; length = unsafe.getByte(address);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    address++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[] bytes = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[length];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    unsafe.copyMemory(&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;, address, bytes, Unsafe.ARRAY_BYTE_BASE_OFFSET, bytes.length);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String text = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; String(bytes, StandardCharsets.UTF_8);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    assertEquals(&lt;span class=&quot;string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;, text);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// do something with values&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Tailers-and-File-Handlers-Clean-up&quot;&gt;&lt;a href=&quot;#Tailers-and-File-Handlers-Clean-up&quot; class=&quot;headerlink&quot; title=&quot;Tailers and File Handlers Clean up&quot;&gt;&lt;/a&gt;Tailers and File Handlers Clean up&lt;/h3&gt;&lt;p&gt;Chronicle queue tailers may create file handlers, the file handlers are cleaned up whenever the associated chronicle queue is close() or whenever the Jvm runs a Garbage Collection. &lt;/p&gt;
&lt;h3 id=&quot;ExcerptTailer-toEnd&quot;&gt;&lt;a href=&quot;#ExcerptTailer-toEnd&quot; class=&quot;headerlink&quot; title=&quot;ExcerptTailer.toEnd()&quot;&gt;&lt;/a&gt;ExcerptTailer.toEnd()&lt;/h3&gt;&lt;p&gt;In some applications, it may be necessary to start reading from the end of the queue (e.g. in a restart scenario). For this use-case, ExcerptTailer provides the toEnd() method.&lt;/p&gt;
&lt;p&gt;If it is necessary to read backwards through the queue from the end, then the tailer can be set to read backwards:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ExcerptTailer tailer = queue.createTailer();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tailer.direction(TailerDirection.BACKWARD).toEnd();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;When reading backwards, then the toEnd() method will move the tailer to the last record in the queue. If the queue is not empty, then there will be a DocumentContext available for reading:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// this will be true if there is at least one message in the queue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; messageAvailable = tailer.toEnd().direction(TailerDirection.BACKWARD).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        readingDocument().isPresent();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;Low-GC&quot;&gt;&lt;a href=&quot;#Low-GC&quot; class=&quot;headerlink&quot; title=&quot;Low GC&quot;&gt;&lt;/a&gt;Low GC&lt;/h1&gt;&lt;p&gt;Ultra low GC means less than one minor collection per day.&lt;/p&gt;
&lt;p&gt;the principles of Zero-copy eliminating unnecessary garbage collection and increased speed. Runtime code generation that reduces code size for efficient CPU cache usage and increased speed. Smart ordering for optimal parsing and you guessed it increased speed. All these combine to allow Chronicle FIX to achieve excellent performance results.&lt;/p&gt;
&lt;h1 id=&quot;Low-garbage-rate&quot;&gt;&lt;a href=&quot;#Low-garbage-rate&quot; class=&quot;headerlink&quot; title=&quot;Low garbage rate&quot;&gt;&lt;/a&gt;Low garbage rate&lt;/h1&gt;&lt;p&gt;Minimising garbage is key to avoiding GC pauses. To use your L1 and L2 cache efficiently, you need to keep your garbage rates very low.  If you are not using these cache efficiently your application can be 2-5x slower. &lt;/p&gt;
&lt;p&gt;The garbage from Chronicle is low enough that you can process one million events without jstat detecting you have created any garbage.  jstat only displays multiples of 4 KB, and only when a new TLAB is allocated.  Chronicle does create garbage, but it is extremely low. i.e. a few objects per million events processes.&lt;/p&gt;
&lt;p&gt;Once you make the GC pauses manageable, or non-existent, you start to see other sources of delay in your system.   Take away the boulders and you start to see the rocks.  Take away the rocks and you start to see the pebbles.&lt;/p&gt;
&lt;h1 id=&quot;Chronicle-has-minimal-interaction-with-the-Operating-System&quot;&gt;&lt;a href=&quot;#Chronicle-has-minimal-interaction-with-the-Operating-System&quot; class=&quot;headerlink&quot; title=&quot;Chronicle has minimal interaction with the Operating System.&quot;&gt;&lt;/a&gt;Chronicle has minimal interaction with the Operating System.&lt;/h1&gt;&lt;p&gt;System calls are slow, and if you can avoid call the OS, you can save significant amounts of latency. &lt;/p&gt;
&lt;p&gt;For example, if you send a message over TCP on loopback, this can add a 10 micro-seconds latency between writing and reading the data.  You can write to a chronicle, which is a plain write to memory, and read from chronicle, which is also a read from memory with a latency of 0.2 micro-seconds. (And as I mentioned before, you get persistence as well)&lt;/p&gt;
&lt;h1 id=&quot;No-need-to-worry-about-running-out-of-heap&quot;&gt;&lt;a href=&quot;#No-need-to-worry-about-running-out-of-heap&quot; class=&quot;headerlink&quot; title=&quot;No need to worry about running out of heap.&quot;&gt;&lt;/a&gt;No need to worry about running out of heap.&lt;/h1&gt;&lt;p&gt;A common problem with unbounded queues and this uses an open ended amount of heap.  &lt;/p&gt;
&lt;p&gt;Chronicle solves this by not using the heap to store data, but instead using memory mapped files.  This improve memory utilisation by making the data more compact but also means a 1 GB JVM can stream 1 TB of data over a day without worrying about the heap or how much main memory you have.  In this case, an unbounded queue becomes easier to manage.&lt;/p&gt;
&lt;h1 id=&quot;how-it-works&quot;&gt;&lt;a href=&quot;#how-it-works&quot; class=&quot;headerlink&quot; title=&quot;how it works&quot;&gt;&lt;/a&gt;how it works&lt;/h1&gt;&lt;p&gt;Chronicle uses a memory mapped file to continuously journal messages, chronicles file-based storage will slowly grow in size as more data is written to the queue, the size of the queue can exceed your available memory, you are only constrained by the amount of disk space you have on your server. Chronicle writes data directly into off-heap memory which is shared between java processes on the same server.&lt;/p&gt;
&lt;p&gt;Chronicle is very fast, it is able to write and read a message in just two microseconds with no garbage. Typically at the end of each day, you archive the queue and start the next day with a fresh empty queue.&lt;/p&gt;
&lt;h1 id=&quot;Chronicle-Queue-is-a-distributed-unbounded-persisted-queue&quot;&gt;&lt;a href=&quot;#Chronicle-Queue-is-a-distributed-unbounded-persisted-queue&quot; class=&quot;headerlink&quot; title=&quot;Chronicle Queue is a distributed unbounded persisted queue.&quot;&gt;&lt;/a&gt;Chronicle Queue is a distributed unbounded persisted queue.&lt;/h1&gt;&lt;p&gt;Chronicle Queue:&lt;/p&gt;
&lt;p&gt;supports asynchronous RMI and Publish/Subscribe interfaces with microsecond latencies.&lt;/p&gt;
&lt;p&gt;passes messages between JVMs in under a microsecond (in optimised examples)&lt;/p&gt;
&lt;p&gt;passes messages between JVMs on different machines via replication in under 10 microseconds (in optimised examples)&lt;/p&gt;
&lt;p&gt;provides stable, soft, real time latencies into the millions of messages per second for a single thread to one queue; with total ordering of every event.&lt;/p&gt;
&lt;h2 id=&quot;Queue-introduction&quot;&gt;&lt;a href=&quot;#Queue-introduction&quot; class=&quot;headerlink&quot; title=&quot;Queue introduction&quot;&gt;&lt;/a&gt;Queue introduction&lt;/h2&gt;&lt;p&gt;Chronicle Queue is a Java project focused on building a persisted low-latency messaging framework for high performance and critical applications.&lt;/p&gt;
&lt;p&gt;Chronicle diagram 005&lt;br&gt;At first glance Chronicle Queue can be seen as simply another queue implementation. However, it has major design choices that should be emphasised.&lt;/p&gt;
&lt;p&gt;Using non-heap storage options (RandomAccessFile), Chronicle Queue provides a processing environment where applications do not suffer from Garbage Collection (GC). When implementing high-performance and memory-intensive applications (you heard the fancy term “bigdata”?) in Java, one of the biggest problems is garbage collection.&lt;/p&gt;
&lt;p&gt;Garbage collection may slow down your critical operations non-deterministically at any time. In order to avoid non-determinism, and escape from garbage collection delays, off-heap memory solutions are ideal. The main idea is to manage your memory manually so it does not suffer from garbage collection. Chronicle Queue behaves like a management interface over off-heap memory so you can build your own solutions over it.&lt;/p&gt;
&lt;p&gt;Chronicle Queue uses RandomAccessFiles while managing memory and this choice brings lots of possibilities. RandomAccessFiles permit non-sequential, or random, access to a file’s contents. To access a file randomly, you open the file, seek a particular location, and read from or write to that file. RandomAccessFiles can be seen as “large” C-type byte arrays that you can access at any random index “directly” using pointers. File portions can be used as ByteBuffers if the portion is mapped into memory.&lt;/p&gt;
&lt;p&gt;This memory mapped file is also used for exceptionally fast interprocess communication (IPC) without affecting your system performance. There is no garbage collection as everything is done off-heap.&lt;/p&gt;
&lt;h2 id=&quot;Message-type&quot;&gt;&lt;a href=&quot;#Message-type&quot; class=&quot;headerlink&quot; title=&quot;Message type&quot;&gt;&lt;/a&gt;Message type&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;TCP: Stream-oriented &lt;/li&gt;
&lt;li&gt;UDP, SCTP: message-oriented .&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;On-heap-vs-off-heap-memory-usage&quot;&gt;&lt;a href=&quot;#On-heap-vs-off-heap-memory-usage&quot; class=&quot;headerlink&quot; title=&quot;On heap vs off heap memory usage&quot;&gt;&lt;/a&gt;On heap vs off heap memory usage&lt;/h2&gt;&lt;p&gt;Overview&lt;/p&gt;
&lt;p&gt;I was recently asked about the benefits and wisdom of using off heap memory in Java.  The answers may be of interest to others facing the same choices.&lt;/p&gt;
&lt;p&gt;Off heap memory is nothing special.  The thread stacks, application code, NIO buffers are all off heap.  In fact in C and C++, you only have unmanaged memory as it does not have a managed heap by default.  The use of managed memory or “heap” in Java is a special feature of the language. Note: Java is not the only language to do this.&lt;br&gt;new Object() vs Object pool vs Off Heap memory.&lt;/p&gt;
&lt;p&gt;new Object()&lt;/p&gt;
&lt;p&gt;Before Java 5.0, using object pools was very popular.  Creating objects was still very expensive.   However, from Java 5.0, object allocation and garbage cleanup was made much cheaper, and developers found they got a performance speed up and a simplification of their code by removing object pools and just creating new objects whenever needed.  Before Java 5.0, almost any object pool, even an object pool which used objects provided an improvement, from Java 5.0 pooling only expensive objects obviously made sense e.g. threads, socket and database connections.&lt;/p&gt;
&lt;p&gt;Object pools&lt;/p&gt;
&lt;p&gt;In the low latency space it was still apparent that recycling mutable objects improved performance by reduced pressure on your CPU caches.  These objects have to have simple life cycles and have a simple structure, but you could see significant improvements in performance and jitter by using them.&lt;br&gt;Another area where it made sense to use object pools is when loading large amounts of data with many duplicate objects. With a significant reduction in memory usage and a reduction in the number of objects the GC had to manage, you saw a reduction in GC times and an increase in throughput.&lt;br&gt;These object pools were designed to be more light weight than say using a synchronized HashMap, and so they still helped.&lt;/p&gt;
&lt;p&gt;Take this StringInterner class as an example. You pass it a recycled mutable StringBuilder of the text you want as a String and it will provide a String which matches.  Passing a String would be inefficient as you would have already created the object.  The StringBuilder can be recycled.&lt;br&gt;Note: this structure has an interesting property that requires no additional thread safety features, like volatile or synchronized, other than is provided by the minimum Java guarantees. i.e. you can see the final fields in a String correctly and only read consistent references.&lt;/p&gt;
&lt;p&gt;public class StringInterner {&lt;br&gt;    private final String[] interner;&lt;br&gt;    private final int mask;&lt;br&gt;    public StringInterner(int capacity) {&lt;br&gt;        int n = Maths.nextPower2(capacity, 128);&lt;br&gt;        interner = new String[n];&lt;br&gt;        mask = n - 1;&lt;br&gt;    }&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;private static boolean isEqual(@Nullable CharSequence s, @NotNull CharSequence cs) {
    if (s == null) return false;
    if (s.length() != cs.length()) return false;
    for (int i = 0; i &amp;lt; cs.length(); i++)
        if (s.charAt(i) != cs.charAt(i))
            return false;
    return true;
}

@NotNull
public String intern(@NotNull CharSequence cs) {
    long hash = 0;
    for (int i = 0; i &amp;lt; cs.length(); i++)
        hash = 57 * hash + cs.charAt(i);
    int h = (int) Maths.hash(hash) &amp;amp; mask;
    String s = interner[h];
    if (isEqual(s, cs))
        return s;
    String s2 = cs.toString();
    return interner[h] = s2;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;}&lt;br&gt;Off heap memory usage&lt;/p&gt;
&lt;p&gt;Using off heap memory and using object pools both help reduce GC pauses, this is their only similarity.  Object pools are good for short lived mutable objects, expensive to create objects and long live immutable objects where there is a lot of duplication.  Medium lived mutable objects, or complex objects are more likely to be better left to the GC to handle.  However, medium to long lived mutable objects suffer in a number of ways which off heap memory solves.&lt;/p&gt;
&lt;p&gt;Off heap memory provides;&lt;/p&gt;
&lt;p&gt;Scalability to large memory sizes e.g. over 1 TB and larger than main memory.&lt;br&gt;Notional impact on GC pause times.&lt;br&gt;Sharing between processes, reducing duplication between JVMs, and making it easier to split JVMs.&lt;br&gt;Persistence for faster restarts or replying of production data in test.&lt;br&gt;The use of off heap memory gives you more options in terms of how you design your system.  The most important improvement is not performance, but determinism.&lt;/p&gt;
&lt;p&gt;Off heap and testing&lt;/p&gt;
&lt;p&gt;One of the biggest challenges in high performance computing is reproducing obscure bugs and being able to prove you have fixed them.  By storing all your input events and data off heap in a persisted way you can turn your critical systems into a series of complex state machines. (Or in simple cases, just one state machine) In this way you get reproducible behaviour and performance between test and production.&lt;/p&gt;
&lt;p&gt;A number of investment banks use this technique to replay a system reliably to any event in the day and work out exactly why that event was processed the way it was.  More importantly, once you have a fix you can show that you have fixed the issue which occurred in production, instead of finding an issue and hoping this was the issue.&lt;/p&gt;
&lt;p&gt;Along with deterministic behaviour comes deterministic performance.  In test environments, you can replay the events with realistic timings and show the latency distribution you expect to get in production.  Some system jitter can’t be reproduce esp if the hardware is not the same, but you can get pretty close when you take a statistical view.  To avoid taking a day to replay a day of data you can add a threshold. e.g. if the time between events is more than 10 ms you might only wait 10 ms.  This can allow you to replay a day of events with realistic timing in under an hour and see whether your changes have improved your latency distribution or not.&lt;/p&gt;
&lt;p&gt;By going more low level don’t you lose some of “compile once, run anywhere”?&lt;/p&gt;
&lt;p&gt;To some degree this is true, but it is far less than you might think.  When you are working closer the processor and so you are more dependant on how the processor, or OS behaves.  Fortunately, most systems use AMD/Intel processors and even ARM processors are becoming more compatible in terms of the low level guarantees they provide.  There is also differences in the OSes, and these techniques tend to work better on Linux than Windows.  However, if you develop on MacOSX or Windows and use Linux for production, you shouldn’t have any issues.  This is what we do at Higher Frequency Trading.&lt;/p&gt;
&lt;p&gt;What new problems are we creating by using off heap?&lt;/p&gt;
&lt;p&gt;Nothing comes for free, and this is the case with off heap.  The biggest issue with off heap is your data structures become less natural.  You either need a simple data structure which can be mapped directly to off heap, or you have a complex data structure which serializes and deserializes to put it off heap.  Obvious using serialization has its own headaches and performance hit.  Using serialization thus much slower than on heap objects.&lt;/p&gt;
&lt;p&gt;In the financial world, most high ticking data structure are flat and simple, full of primitives which maps nicely off heap with little overhead.&lt;/p&gt;
&lt;h1 id=&quot;How-does-Chronicle-Queue-work&quot;&gt;&lt;a href=&quot;#How-does-Chronicle-Queue-work&quot; class=&quot;headerlink&quot; title=&quot;How does Chronicle Queue work&quot;&gt;&lt;/a&gt;How does Chronicle Queue work&lt;/h1&gt;&lt;h2 id=&quot;Terminology&quot;&gt;&lt;a href=&quot;#Terminology&quot; class=&quot;headerlink&quot; title=&quot;Terminology&quot;&gt;&lt;/a&gt;Terminology&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Messages are grouped by topics. A topic can contain any number of sub-topics which are logically stored together under the queue/topic.&lt;/li&gt;
&lt;li&gt;An appender is the source of messages.&lt;/li&gt;
&lt;li&gt;A tailer is a receiver of messages.&lt;/li&gt;
&lt;li&gt;Chronicle Queue is &lt;code&gt;broker-less&lt;/code&gt; by default. You can use Chronicle Engine to act as a broker for remote access.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Note&lt;br&gt;We deliberately avoid the term consumer as messages are not consumed/destroyed by reading.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;At-a-high-level&quot;&gt;&lt;a href=&quot;#At-a-high-level&quot; class=&quot;headerlink&quot; title=&quot;At a high level:&quot;&gt;&lt;/a&gt;At a high level:&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;appenders write to the end of a queue. There is no way to insert, or delete excerpts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;tailers read the next available message each time they are called.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By using Chronicle Engine, a Java or C# client can publish to a queue to act as a remote appender, and you subscribe to a queue to act as a remote tailer.&lt;/p&gt;
&lt;h2 id=&quot;Topics-and-Queue-files&quot;&gt;&lt;a href=&quot;#Topics-and-Queue-files&quot; class=&quot;headerlink&quot; title=&quot;Topics and Queue files&quot;&gt;&lt;/a&gt;Topics and Queue files&lt;/h2&gt;&lt;p&gt;Each topic is a directory of queues. There is a file for each roll cycle. If you have a topic called mytopic, the layout could look like this:&lt;/p&gt;
&lt;p&gt;mytopic/&lt;br&gt;    20160710.cq4&lt;br&gt;    20160711.cq4&lt;br&gt;    20160712.cq4&lt;br&gt;    20160713.cq4&lt;br&gt;To copy all the data for a single day (or cycle), you can copy the file for that day on to your development machine for replay testing.&lt;/p&gt;
&lt;p&gt;Appenders and tailers are cheap as they don’t even require a TCP connection; they are just a few Java objects.&lt;/p&gt;
&lt;h2 id=&quot;File-Retention&quot;&gt;&lt;a href=&quot;#File-Retention&quot; class=&quot;headerlink&quot; title=&quot;File Retention&quot;&gt;&lt;/a&gt;File Retention&lt;/h2&gt;&lt;p&gt;You can add a StoreFileListener to notify you when a file is added, or no longer used. This can be used to delete files after a period of time. However, by default, files are retained forever. Our largest users have over 100 TB of data stored in queues.&lt;/p&gt;
&lt;h2 id=&quot;Every-Tailer-sees-every-message&quot;&gt;&lt;a href=&quot;#Every-Tailer-sees-every-message&quot; class=&quot;headerlink&quot; title=&quot;Every Tailer sees every message.&quot;&gt;&lt;/a&gt;Every Tailer sees every message.&lt;/h2&gt;&lt;p&gt;An abstraction can be added to filter messages, or assign messages to just one message processor. However, in general you only need one main tailer for a topic, with possibly, some supporting tailers for monitoring etc.&lt;/p&gt;
&lt;p&gt;As Chronicle Queue doesn’t partition its topics, you get total ordering of all messages within that topic. Across topics, there is no guarantee of ordering; if you want to replay deterministically from a system which consumes from multiple topics, we suggest replaying from that system’s output.&lt;/p&gt;
&lt;h1 id=&quot;Guarantees&quot;&gt;&lt;a href=&quot;#Guarantees&quot; class=&quot;headerlink&quot; title=&quot;Guarantees&quot;&gt;&lt;/a&gt;Guarantees&lt;/h1&gt;&lt;p&gt;Chronicle Queue provides the following guarantees;&lt;/p&gt;
&lt;p&gt;for each appender, messages are written in the order the appender wrote them. Messages by different appenders are interleaved,&lt;/p&gt;
&lt;p&gt;for each tailer, it will see every message for a topic in the same order as every other tailer,&lt;/p&gt;
&lt;p&gt;when replicated, every replica has a copy of every message.&lt;/p&gt;
&lt;h1 id=&quot;Use-Cases&quot;&gt;&lt;a href=&quot;#Use-Cases&quot; class=&quot;headerlink&quot; title=&quot;Use Cases&quot;&gt;&lt;/a&gt;Use Cases&lt;/h1&gt;&lt;p&gt;Chronicle Queue is most often used for producer-centric systems where you need to retain a lot of data for days or years.&lt;/p&gt;
&lt;h2 id=&quot;What-is-a-producer-centric-system&quot;&gt;&lt;a href=&quot;#What-is-a-producer-centric-system&quot; class=&quot;headerlink&quot; title=&quot;What is a producer-centric system?&quot;&gt;&lt;/a&gt;What is a producer-centric system?&lt;/h2&gt;&lt;p&gt;Most messaging systems are consumer-centric. Flow control is implemented to avoid the consumer ever getting overloaded; even momentarily. A common example is a server supporting multiple GUI users. Those users might be on different machines (OS and hardware), different qualities of network (latency and bandwidth), doing a variety of other things at different times. For this reason it makes sense for the client consumer to tell the producer when to back off, delaying any data until the consumer is ready to take more data.&lt;/p&gt;
&lt;p&gt;Chronicle Queue is a producer-centric solution and does everything possible to never push back on the producer, or tell it to slow down. This makes it a powerful tool, providing a big buffer between your system, and an upstream producer over which you have little, or no, control.&lt;/p&gt;
&lt;p&gt;For market data in particular, real time means in a few microseconds; it doesn’t mean intra-day (during the day).&lt;/p&gt;
&lt;p&gt;Chronicle Queue is fast and efficient, and has been used to increase the speed that data is passed between threads. In addition, it also keeps a record of every message passed allowing you to significantly reduce the amount of logging that you need to do.&lt;/p&gt;
&lt;h2 id=&quot;Latency-Sensitive-Micro-services&quot;&gt;&lt;a href=&quot;#Latency-Sensitive-Micro-services&quot; class=&quot;headerlink&quot; title=&quot;Latency Sensitive Micro-services&quot;&gt;&lt;/a&gt;Latency Sensitive Micro-services&lt;/h2&gt;&lt;p&gt;Chronicle Queue supports low latency IPC (Inter Process Communication) between JVMs on the same machine in the order of magnitude of 1 microsecond; as well as between machines with a typical latency of 10 microseconds for modest throughputs of a few hundred thousands. Chronicle Queue supports throughputs of millions of events per second, with stable microsecond latencies.&lt;/p&gt;
&lt;h2 id=&quot;Log-Replacement&quot;&gt;&lt;a href=&quot;#Log-Replacement&quot; class=&quot;headerlink&quot; title=&quot;Log Replacement&quot;&gt;&lt;/a&gt;Log Replacement&lt;/h2&gt;&lt;p&gt;As Chronicle Queue can be used to build state machines. All the information about the state of those components can be reproduced externally, without direct access to the components, or to their state. This significantly reduces the need for additional logging.&lt;/p&gt;
&lt;p&gt;However, any logging you do need can be recorded in great detail. This makes enabling DEBUG logging in production practical. This is because the cost of logging is very low; less than 10 microseconds. Logs can be replicated centrally for log consolidation.&lt;/p&gt;
&lt;p&gt;Chronicle Queue is being used to store 100+ TB of data, which can be replayed from any point in time.&lt;/p&gt;
&lt;h1 id=&quot;Source-code&quot;&gt;&lt;a href=&quot;#Source-code&quot; class=&quot;headerlink&quot; title=&quot;Source code&quot;&gt;&lt;/a&gt;Source code&lt;/h1&gt;&lt;h2 id=&quot;MappedFile&quot;&gt;&lt;a href=&quot;#MappedFile&quot; class=&quot;headerlink&quot; title=&quot;MappedFile&quot;&gt;&lt;/a&gt;MappedFile&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; net.openhft.chronicle.bytes;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; net.openhft.chronicle.core.Jvm;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; net.openhft.chronicle.core.OS;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; net.openhft.chronicle.core.ReferenceCounted;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; net.openhft.chronicle.core.ReferenceCounter;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; net.openhft.chronicle.core.io.IORuntimeException;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.jetbrains.annotations.NotNull;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.jetbrains.annotations.Nullable;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.File;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.FileNotFoundException;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.IOException;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.RandomAccessFile;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.lang.ref.WeakReference;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.nio.channels.FileChannel;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.nio.channels.FileChannel.MapMode;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.nio.channels.FileLock;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.nio.file.Files;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.ArrayList;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.List;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.concurrent.atomic.AtomicBoolean;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; net.openhft.chronicle.core.io.Closeable.closeQuietly;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * A memory mapped files which can be randomly accessed in chunks. It has overlapping regions to&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * avoid wasting bytes at the end of chunks.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MappedFile&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ReferenceCounted&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; DEFAULT_CAPACITY = &lt;span class=&quot;number&quot;&gt;128L&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// A single JVM cannot lock a file more than once.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Object GLOBAL_FILE_LOCK = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Object();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@NotNull&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; RandomAccessFile raf;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; FileChannel fileChannel;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;public interface BytesStore extends RandomDataInput, RandomDataOutput, ReferencedCount, CharSequence&lt;/p&gt;
&lt;p&gt;public interface Memory {&lt;br&gt;    default long heapUsed() {&lt;br&gt;        Runtime runtime = Runtime.getRuntime();&lt;br&gt;        return runtime.totalMemory() - runtime.freeMemory();&lt;br&gt;    }&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Override
@ForceInline
public void writeByte(long address, byte b) {
    UNSAFE.putByte(address, b);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;/**&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Marker annotation for some methods and constructors in the JSR 292 implementation.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;To utilise this annotation se Chronicle Enterprise Warmup module.&lt;br&gt;*/&lt;br&gt;@Target({ElementType.METHOD, ElementType.CONSTRUCTOR})&lt;br&gt;@Retention(RetentionPolicy.RUNTIME)&lt;br&gt;public @interface ForceInline {&lt;br&gt;}&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/OpenHFT/Chronicle-Queue&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/OpenHFT/Chronicle-Queue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://vanillajava.blogspot.com/2015/08/what-does-chronicle-software-do.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://vanillajava.blogspot.com/2015/08/what-does-chronicle-software-do.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h1&gt;&lt;p&gt;Chronicle Software is about simplifying fast d
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Presto DB</title>
    <link href="http://www.todzhang.com/2018-08-15-PrestoDB/"/>
    <id>http://www.todzhang.com/2018-08-15-PrestoDB/</id>
    <published>2019-05-31T13:03:27.148Z</published>
    <updated>2019-05-31T13:03:27.148Z</updated>
    
    <content type="html">&lt;h1 id=&quot;WHAT-IS-PRESTO&quot;&gt;&lt;a href=&quot;#WHAT-IS-PRESTO&quot; class=&quot;headerlink&quot; title=&quot;WHAT IS PRESTO?&quot;&gt;&lt;/a&gt;WHAT IS PRESTO?&lt;/h1&gt;&lt;p&gt;Presto is an open source distributed SQL query engine for running interactive analytic queries against data sources of all sizes ranging from gigabytes to petabytes.&lt;/p&gt;
&lt;p&gt;Presto was designed and written from the ground up for interactive analytics and approaches the speed of commercial data warehouses while scaling to the size of organizations like Facebook.&lt;/p&gt;
&lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;Presto is a distributed system that runs on a cluster of machines. A full installation includes a coordinator and multiple workers. Queries are submitted from a client such as the Presto CLI to the coordinator. The coordinator parses, analyzes and plans the query execution, then distributes the processing to the workers.&lt;/p&gt;
&lt;p&gt;Presto does not use MapReduce and thus only requires HDFS.&lt;/p&gt;
&lt;h2 id=&quot;Separation-of-Storage-and-Compute&quot;&gt;&lt;a href=&quot;#Separation-of-Storage-and-Compute&quot; class=&quot;headerlink&quot; title=&quot;Separation of Storage and Compute&quot;&gt;&lt;/a&gt;Separation of Storage and Compute&lt;/h2&gt;&lt;p&gt;Architected for separation of storage and compute, Presto can scale up and down based on your analytics demand to access this data. There’s no need to move your data and provisioning compute to the exact need results in significant cost savings.&lt;/p&gt;
&lt;h3 id=&quot;Config-Properties&quot;&gt;&lt;a href=&quot;#Config-Properties&quot; class=&quot;headerlink&quot; title=&quot;Config Properties&quot;&gt;&lt;/a&gt;Config Properties&lt;/h3&gt;&lt;p&gt;The config properties file, etc/config.properties, contains the configuration for the Presto server. Every Presto server can function as both a coordinator and a worker, but dedicating a single machine to only perform coordination work provides the best performance on larger clusters.&lt;/p&gt;
&lt;h3 id=&quot;Catalog-Properties&quot;&gt;&lt;a href=&quot;#Catalog-Properties&quot; class=&quot;headerlink&quot; title=&quot;Catalog Properties&quot;&gt;&lt;/a&gt;Catalog Properties&lt;/h3&gt;&lt;p&gt;Presto accesses data via connectors, which are mounted in catalogs. The connector provides all of the schemas and tables inside of the catalog. For example, the Hive connector maps each Hive database to a schema, so if the Hive connector is mounted as the hive catalog, and Hive contains a table clicks in database web, that table would be accessed in Presto as hive.web.clicks.&lt;/p&gt;
&lt;p&gt;Catalogs are registered by creating a catalog properties file in the etc/catalog directory. For example, create etc/catalog/jmx.properties with the following contents to mount the jmx connector as the jmx catalog:&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;WHAT-IS-PRESTO&quot;&gt;&lt;a href=&quot;#WHAT-IS-PRESTO&quot; class=&quot;headerlink&quot; title=&quot;WHAT IS PRESTO?&quot;&gt;&lt;/a&gt;WHAT IS PRESTO?&lt;/h1&gt;&lt;p&gt;Presto is an open so
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>KDB</title>
    <link href="http://www.todzhang.com/2018-08-16-Kafka/"/>
    <id>http://www.todzhang.com/2018-08-16-Kafka/</id>
    <published>2019-05-31T13:03:27.148Z</published>
    <updated>2019-05-31T13:03:27.149Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Kafka&quot;&gt;&lt;a href=&quot;#Kafka&quot; class=&quot;headerlink&quot; title=&quot;Kafka&quot;&gt;&lt;/a&gt;Kafka&lt;/h1&gt;&lt;p&gt;Kafka is fast. A single node can handle hundreds of read/writes from thousands of clients in real time. Kafka is also distributed and scalable. It creates and takes down nodes in an elastic manner, without incurring any downtime. Data streams are split into partitions and spread over different brokers for capability and redundancy.&lt;/p&gt;
&lt;h2 id=&quot;here-is-some-useful-terminology&quot;&gt;&lt;a href=&quot;#here-is-some-useful-terminology&quot; class=&quot;headerlink&quot; title=&quot;here is some useful terminology:&quot;&gt;&lt;/a&gt;here is some useful terminology:&lt;/h2&gt;&lt;p&gt;Topic: a feed of messages or packages&lt;/p&gt;
&lt;p&gt;Partition: group of topics split for scalability and redundancy&lt;/p&gt;
&lt;p&gt;Producer: process that introduces messages into the queue&lt;/p&gt;
&lt;p&gt;Consumer: process that subscribes to various topics and processes from a feed of published messages&lt;/p&gt;
&lt;p&gt;Broker: a node that is part of the Kafka cluster&lt;/p&gt;
&lt;h2 id=&quot;Memeroy&quot;&gt;&lt;a href=&quot;#Memeroy&quot; class=&quot;headerlink&quot; title=&quot;Memeroy&quot;&gt;&lt;/a&gt;Memeroy&lt;/h2&gt;&lt;p&gt;Kafka should run entirely on RAM. JVM heap size shouldn’t be bigger than your available RAM. That is to avoid swapping.&lt;/p&gt;
&lt;h3 id=&quot;Swap-usage&quot;&gt;&lt;a href=&quot;#Swap-usage&quot; class=&quot;headerlink&quot; title=&quot;Swap usage&quot;&gt;&lt;/a&gt;Swap usage&lt;/h3&gt;&lt;p&gt;Watch for swap usage, as it will degrade performance on Kafka and lead to operations timing out (set vm.swappiness = 0).    When used swap is &amp;gt; 128MB.&lt;/p&gt;
&lt;h1 id=&quot;Kafka-Monitoring-Tools&quot;&gt;&lt;a href=&quot;#Kafka-Monitoring-Tools&quot; class=&quot;headerlink&quot; title=&quot;Kafka Monitoring Tools&quot;&gt;&lt;/a&gt;Kafka Monitoring Tools&lt;/h1&gt;&lt;p&gt;Any monitoring tools with JMX support should be able to monitor a Kafka cluster. Here are 3 monitoring tools we liked:&lt;/p&gt;
&lt;p&gt;First one is check_kafka.pl from Hari Sekhon. It performs a complete end to end test, i.e. it inserts a message in Kafka as a producer and then extracts it as a consumer. This makes our life easier when measuring service times.&lt;/p&gt;
&lt;p&gt;Another useful tool is KafkaOffsetMonitor for monitoring Kafka consumers and their position (offset) in the queue. It aids our understanding of how our queue grows and which consumers groups are lagging behind.&lt;/p&gt;
&lt;p&gt;Last but not least, the LinkedIn folks have developed what we think is the smartest tool out there: Burrow. It analyzes consumer offsets and lags over a window of time and determines the consumer status. You can retrieve this status over an HTTP endpoint and then plug it into your favourite monitoring tool (Server Density for example).&lt;/p&gt;
&lt;p&gt;Oh, and we would be amiss if we didn’t mention Yahoo’s Kafka-Manager. While it does include some basic monitoring, it is more of a management tool. If you are just looking for a Kafka management tool, check out AirBnb’s kafkat.&lt;/p&gt;
&lt;h1 id=&quot;commands&quot;&gt;&lt;a href=&quot;#commands&quot; class=&quot;headerlink&quot; title=&quot;commands&quot;&gt;&lt;/a&gt;commands&lt;/h1&gt;&lt;h2 id=&quot;Start-zookeeper&quot;&gt;&lt;a href=&quot;#Start-zookeeper&quot; class=&quot;headerlink&quot; title=&quot;Start zookeeper&quot;&gt;&lt;/a&gt;Start zookeeper&lt;/h2&gt;&lt;p&gt;bin/zookeeper-server-start.sh config/zookeeper.properties&lt;/p&gt;
&lt;p&gt;bin/kafka-server-start.sh config/server.properties&lt;/p&gt;
&lt;p&gt;~/dev/git/kafka-demo/kafka_2.11-2.0.0/bin/kafka-topics.sh –create –zookeeper localhost:2181 –replication-factor 1 –partitions 1 –topic todtest&lt;br&gt; bin/kafka-topics.sh –list –zookeeper localhost:2181&lt;br&gt;bin/kafka-console-producer.sh –broker-list localhost:9092 –topic todtest&lt;br&gt;bin/kafka-console-consumer.sh –bootstrap-server localhost:9092 –topic todtest –from-beginning&lt;/p&gt;
&lt;p&gt;bin/kafka-topics.sh –describe –zookeeper localhost:2181 –topic test&lt;/p&gt;
&lt;h2 id=&quot;list-topics&quot;&gt;&lt;a href=&quot;#list-topics&quot; class=&quot;headerlink&quot; title=&quot;list topics&quot;&gt;&lt;/a&gt;list topics&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;./kafka-topics.sh --list --zookeeper localhost:2181&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;describe-topics&quot;&gt;&lt;a href=&quot;#describe-topics&quot; class=&quot;headerlink&quot; title=&quot;describe topics&quot;&gt;&lt;/a&gt;describe topics&lt;/h2&gt;&lt;p&gt;./kafka-topics.sh –describe –zookeeper localhost:2181&lt;/p&gt;
&lt;h3 id=&quot;using-connector&quot;&gt;&lt;a href=&quot;#using-connector&quot; class=&quot;headerlink&quot; title=&quot;using connector&quot;&gt;&lt;/a&gt;using connector&lt;/h3&gt;&lt;p&gt;bin/connect-standalone.sh config/connect-standalone.properties config/connect-file-source.properties config/connect-file-sink.properties&lt;/p&gt;
&lt;p&gt;mvn archetype:generate \&lt;br&gt;    -DarchetypeGroupId=org.apache.kafka \&lt;br&gt;    -DarchetypeArtifactId=streams-quickstart-java \&lt;br&gt;    -DarchetypeVersion=2.0.0 \&lt;br&gt;    -DgroupId=io \&lt;br&gt;    -DartifactId=todzhang \&lt;br&gt;    -Dversion=0.1 \&lt;br&gt;    -Dpackage=todzhangapp&lt;/p&gt;
&lt;h1 id=&quot;Security&quot;&gt;&lt;a href=&quot;#Security&quot; class=&quot;headerlink&quot; title=&quot;Security&quot;&gt;&lt;/a&gt;Security&lt;/h1&gt;&lt;p&gt;The keystore stores each machine’s own identity. The truststore stores all the certificates that the machine should trust. Importing a certificate into one’s truststore also means trusting all certificates that are signed by that certificate. As the analogy above, trusting the government (CA) also means trusting all passports (certificates) that it has issued. This attribute is called the chain of trust, and it is particularly useful when deploying SSL on a large Kafka cluster. You can sign all certificates in the cluster with a single CA, and have all machines share the same truststore that trusts the CA. That way all machines can authenticate all other machines.&lt;/p&gt;
&lt;p&gt;To deploy SSL, the general steps are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Generate the keys and certificates&lt;/li&gt;
&lt;li&gt;Create your own Certificate Authority (CA)&lt;/li&gt;
&lt;li&gt;Sign the certificate&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Generate the key and the certificate for each Kafka broker in the cluster. Generate the key into a keystore called kafka.server.keystore so that you can export and sign it later with CA. The keystore file contains the private key of the certificate; therefore, it needs to be kept safely.&lt;/p&gt;
&lt;h2 id=&quot;With-user-prompts&quot;&gt;&lt;a href=&quot;#With-user-prompts&quot; class=&quot;headerlink&quot; title=&quot;With user prompts&quot;&gt;&lt;/a&gt;With user prompts&lt;/h2&gt;&lt;p&gt;keytool -keystore kafka.server.keystore.jks -alias localhost -genkey&lt;/p&gt;
&lt;h2 id=&quot;Without-user-prompts-pass-command-line-arguments&quot;&gt;&lt;a href=&quot;#Without-user-prompts-pass-command-line-arguments&quot; class=&quot;headerlink&quot; title=&quot;Without user prompts, pass command line arguments&quot;&gt;&lt;/a&gt;Without user prompts, pass command line arguments&lt;/h2&gt;&lt;p&gt;keytool -keystore kafka.server.keystore.jks -alias localhost -validity {validity} -genkey -storepass {keystore-pass} -keypass {key-pass} -dname {distinguished-name} -ext SAN=DNS:{hostname}&lt;br&gt;Ensure that the common name (CN) exactly matches the fully qualified domain name (FQDN) of the server. The client compares the CN with the DNS domain name to ensure that it is indeed connecting to the desired server, not a malicious one. The hostname of the server can also be specified in the Subject Alternative Name (SAN). Since the distinguished name is used as the server principal when SSL is used as the inter-broker security protocol, it is useful to have hostname as a SAN rather than the CN.&lt;/p&gt;
&lt;h2 id=&quot;Create-your-own-Certificate-Authority-CA&quot;&gt;&lt;a href=&quot;#Create-your-own-Certificate-Authority-CA&quot; class=&quot;headerlink&quot; title=&quot;Create your own Certificate Authority (CA)&quot;&gt;&lt;/a&gt;Create your own Certificate Authority (CA)&lt;/h2&gt;&lt;p&gt;Generate a CA that is simply a public-private key pair and certificate, and it is intended to sign other certificates.&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;openssl req -new -x509 -keyout ca-key -out ca-cert -days &amp;#123;validity&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Add the generated CA to the clients’ truststore so that the clients can trust this CA:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;keytool -keystore kafka.client.truststore.jks -alias CARoot -import -file ca-cert&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Add the generated CA to the brokers’ truststore so that the brokers can trust this CA.&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;keytool -keystore kafka.server.truststore.jks -alias CARoot -import -file ca-cert&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Sign-the-certificate&quot;&gt;&lt;a href=&quot;#Sign-the-certificate&quot; class=&quot;headerlink&quot; title=&quot;Sign the certificate&quot;&gt;&lt;/a&gt;Sign the certificate&lt;/h2&gt;&lt;p&gt;To sign all certificates in the keystore with the CA that you generated:&lt;/p&gt;
&lt;p&gt;Export the certificate from the keystore:&lt;/p&gt;
&lt;p&gt;keytool -keystore kafka.server.keystore.jks -alias localhost -certreq -file cert-file&lt;br&gt;Sign it with the CA:&lt;/p&gt;
&lt;p&gt;openssl x509 -req -CA ca-cert -CAkey ca-key -in cert-file -out cert-signed -days {validity} -CAcreateserial -passin pass:{ca-password}&lt;br&gt;Import both the certificate of the CA and the signed certificate into the broker keystore:&lt;/p&gt;
&lt;p&gt;keytool -keystore kafka.server.keystore.jks -alias CARoot -import -file ca-cert&lt;br&gt;keytool -keystore kafka.server.keystore.jks -alias localhost -import -file cert-signed&lt;/p&gt;
&lt;h2 id=&quot;SASL&quot;&gt;&lt;a href=&quot;#SASL&quot; class=&quot;headerlink&quot; title=&quot;SASL&quot;&gt;&lt;/a&gt;SASL&lt;/h2&gt;&lt;p&gt;Simple Authentication and Security Layer (SASL) is a framework for authentication and data security in Internet protocols. It decouples authentication mechanisms from application protocols, in theory allowing any authentication mechanism supported by SASL to be used in any application protocol that uses SASL. Authentication mechanisms can also support proxy authorization, a facility allowing one user to assume the identity of another. They can also provide a data security layer offering data integrity and data confidentiality services. DIGEST-MD5 provides an example of mechanisms which can provide a data-security layer. Application protocols that support SASL typically also support Transport Layer Security (TLS) to complement the services offered by SASL.&lt;/p&gt;
&lt;h1 id=&quot;References&quot;&gt;&lt;a href=&quot;#References&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.serverdensity.com/how-to-monitor-kafka/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://blog.serverdensity.com/how-to-monitor-kafka/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Kafka&quot;&gt;&lt;a href=&quot;#Kafka&quot; class=&quot;headerlink&quot; title=&quot;Kafka&quot;&gt;&lt;/a&gt;Kafka&lt;/h1&gt;&lt;p&gt;Kafka is fast. A single node can handle hundreds of read/w
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>QuickFixJ</title>
    <link href="http://www.todzhang.com/2018-07-10-QuickFixJ/"/>
    <id>http://www.todzhang.com/2018-07-10-QuickFixJ/</id>
    <published>2019-05-31T13:03:27.147Z</published>
    <updated>2019-05-31T13:03:27.147Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Settings&quot;&gt;&lt;a href=&quot;#Settings&quot; class=&quot;headerlink&quot; title=&quot;Settings&quot;&gt;&lt;/a&gt;Settings&lt;/h1&gt;&lt;p&gt;A settings file is set up with two types of heading, a [DEFAULT] and a [SESSION] heading. [SESSION] tells QuickFIX/J that a new Session is being defined. [DEFAULT] is a place that you can define settings which will be inherited by sessions that do not explicitly define them. If you do not provide a setting that QuickFIX/J needs, it will throw a ConfigError telling you what setting is missing or improperly formatted.&lt;/p&gt;
&lt;h1 id=&quot;SSL-cipher&quot;&gt;&lt;a href=&quot;#SSL-cipher&quot; class=&quot;headerlink&quot; title=&quot;SSL cipher&quot;&gt;&lt;/a&gt;SSL cipher&lt;/h1&gt;&lt;p&gt;An SSL cipher specification in cipher-spec is composed of 4 major attributes plus a few extra minor ones.&lt;/p&gt;
&lt;p&gt;Key Exchange Algorithm:&lt;br&gt;RSA or Diffie-Hellman variants.&lt;/p&gt;
&lt;p&gt;Authentication Algorithm:&lt;br&gt;RSA, Diffie-Hellman, DSS or none.&lt;/p&gt;
&lt;p&gt;Cipher/Encryption Algorithm:&lt;br&gt;DES, Triple-DES, RC4, RC2, IDEA or none.&lt;/p&gt;
&lt;p&gt;MAC Digest Algorithm:&lt;br&gt;MD5, SHA or SHA1.&lt;/p&gt;
&lt;h2 id=&quot;InOut-exchange&quot;&gt;&lt;a href=&quot;#InOut-exchange&quot; class=&quot;headerlink&quot; title=&quot;InOut exchange&quot;&gt;&lt;/a&gt;InOut exchange&lt;/h2&gt;&lt;p&gt;Although the &lt;code&gt;FIX protocol is event-driven and asynchronous&lt;/code&gt;, there are specific pairs of messages&lt;br&gt;that represent a request-reply message exchange. To use an InOut exchange pattern, there should&lt;br&gt;be a single request message and single reply message to the request. Examples include an&lt;br&gt;OrderStatusRequest message and UserRequest.&lt;/p&gt;
&lt;p&gt;#FIX Sequence Number Management&lt;br&gt;If an application exception is thrown during synchronous exchange processing, this will cause QuickFIX/J to not increment incoming FIX message sequence numbers and will cause a resend of the counterparty message. This FIX protocol behavior is primarily intended to handle transport errors rather than application errors. There are risks associated with using this mechanism to handle application errors. The primary risk is that the message will repeatedly cause application errors each time it is re-received. A better solution is to persist the incoming message (database, JMS queue) immediately before processing it. This also allows the application to process messages asynchronously without losing messages when errors occur.&lt;/p&gt;
&lt;p&gt;Although it is possible to send messages to a FIX session before it is logged on (the messages will be sent at logon time), it is usually a better practice to wait until the session is logged on. This eliminates the required sequence number resynchronization steps at logon. Waiting for session logon can be done by setting up a route that processes the SessionLogon event category and signals the application to start sending messages.&lt;/p&gt;
&lt;h1 id=&quot;Source-code&quot;&gt;&lt;a href=&quot;#Source-code&quot; class=&quot;headerlink&quot; title=&quot;Source code&quot;&gt;&lt;/a&gt;Source code&lt;/h1&gt;&lt;h2 id=&quot;QuickFixJComponent-class&quot;&gt;&lt;a href=&quot;#QuickFixJComponent-class&quot; class=&quot;headerlink&quot; title=&quot;QuickFixJComponent.class&quot;&gt;&lt;/a&gt;QuickFixJComponent.class&lt;/h2&gt;&lt;p&gt;if (configuration != null) {&lt;br&gt;                        settings = configuration.createSessionSettings();&lt;br&gt;                    } else {&lt;br&gt;                        settings = QuickfixjEngine.loadSettings(remaining);&lt;br&gt;                    }&lt;/p&gt;
&lt;h2 id=&quot;MessageStore&quot;&gt;&lt;a href=&quot;#MessageStore&quot; class=&quot;headerlink&quot; title=&quot;MessageStore&quot;&gt;&lt;/a&gt;MessageStore&lt;/h2&gt;&lt;p&gt;This interface Used by a Session to store and retrieve messages for resend purposes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;boolean set(int sequence, String message) throws IOException;&lt;/li&gt;
&lt;li&gt;void get(int startSequence, int endSequence, Collection&lt;string&gt; messages) throws IOException;&lt;/string&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Implementations such as MemoryStore.java, it use one HashMap&lt;integer, string=&quot;&quot;&gt; to keep messages (string)&lt;/integer,&gt;&lt;/p&gt;
&lt;h2 id=&quot;Parse-body&quot;&gt;&lt;a href=&quot;#Parse-body&quot; class=&quot;headerlink&quot; title=&quot;Parse body&quot;&gt;&lt;/a&gt;Parse body&lt;/h2&gt;&lt;p&gt;private void parseBody(DataDictionary dd, boolean doValidation) throws InvalidMessage {&lt;br&gt;        for(StringField field = this.extractField(dd, this); field != null; field = this.extractField(dd, this)) {&lt;br&gt;            if (isTrailerField(field.getField())) {&lt;br&gt;                this.pushBack(field);&lt;br&gt;                return;&lt;br&gt;            }&lt;/p&gt;
&lt;h2 id=&quot;validate-check-sum&quot;&gt;&lt;a href=&quot;#validate-check-sum&quot; class=&quot;headerlink&quot; title=&quot;validate check sum&quot;&gt;&lt;/a&gt;validate check sum&lt;/h2&gt;&lt;p&gt;in message.class&lt;/p&gt;
&lt;p&gt;private void validateCheckSum(String messageData) throws InvalidMessage {&lt;br&gt;        try {&lt;br&gt;            int checksum = this.trailer.getInt(10);&lt;br&gt;            if (checksum != MessageUtils.checksum(messageData)) {&lt;br&gt;                throw new InvalidMessage(“Expected CheckSum=” + MessageUtils.checksum(messageData) + “, Received CheckSum=” + checksum + “ in “ + messageData);&lt;br&gt;            }&lt;br&gt;}&lt;/p&gt;
&lt;p&gt;the first checksum is 131&lt;/p&gt;
&lt;p&gt;in MessageUtils.checksum&lt;br&gt;public static int checksum&lt;/p&gt;
&lt;p&gt;int end = isEntireMessage ? data.lastIndexOf(“\u000110=”) : -1;&lt;br&gt;            int len = end &amp;gt; -1 ? end + 1 : data.length();&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for(int i = 0; i &amp;lt; len; ++i) {
    sum += data.charAt(i);
}

return sum &amp;amp; 255;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;the checksum from above messageUtil is 87&lt;br&gt;?? how to get and set this.trailer.10=131 ?&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Settings&quot;&gt;&lt;a href=&quot;#Settings&quot; class=&quot;headerlink&quot; title=&quot;Settings&quot;&gt;&lt;/a&gt;Settings&lt;/h1&gt;&lt;p&gt;A settings file is set up with two types of he
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Apache Camel</title>
    <link href="http://www.todzhang.com/2018-07-11-Camel/"/>
    <id>http://www.todzhang.com/2018-07-11-Camel/</id>
    <published>2019-05-31T13:03:27.147Z</published>
    <updated>2019-05-31T13:03:27.147Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Camel’s-message-model&quot;&gt;&lt;a href=&quot;#Camel’s-message-model&quot; class=&quot;headerlink&quot; title=&quot;Camel’s message model&quot;&gt;&lt;/a&gt;Camel’s message model&lt;/h1&gt;&lt;p&gt;In Camel, there are two abstractions for modeling messages, both of which we’ll cover in this section.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;org.apache.camel.Message—The fundamental entity containing the data being carried and routed in Camel&lt;/li&gt;
&lt;li&gt;org.apache.camel.Exchange—The Camel abstraction for an exchange of mes- sages. This exchange of messages has an “in” message and as a reply, an “out” message&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Message&quot;&gt;&lt;a href=&quot;#Message&quot; class=&quot;headerlink&quot; title=&quot;Message&quot;&gt;&lt;/a&gt;Message&lt;/h2&gt;&lt;p&gt;Messages are the entities used by systems to communicate with each other when using messaging channels. Messages flow in one direction from a sender to a receiver,  Messages have a body (a payload), headers, and optional attachments,&lt;/p&gt;
&lt;p&gt;Messages are uniquely identified with an identifier of type java.lang.String. The identifier’s uniqueness is enforced and guaranteed by the message creator, it’s protocol depen- dent, and it doesn’t have a guaranteed format.&lt;br&gt;For protocols that don’t define a unique message identification scheme, Camel uses its own UID generator.&lt;br&gt;HEADERS AND ATTACHMENTS&lt;br&gt;Headers are values associated with the message, such as sender identifiers, hints about content encoding, authentication infor- mation, and so on. Headers are name-value pairs; the name is a unique, case-insensitive string, and the value is of type java. lang.Object. This means that Camel imposes no constraints on the type of the headers. Headers are stored as a map within the message. A message can also have optional attachments, which are typically used for the web service and email components.&lt;/p&gt;
&lt;h2 id=&quot;Exchange&quot;&gt;&lt;a href=&quot;#Exchange&quot; class=&quot;headerlink&quot; title=&quot;Exchange&quot;&gt;&lt;/a&gt;Exchange&lt;/h2&gt;&lt;p&gt;An exchange in Camel is the message’s container during routing. An exchange also provides support for the various types of interactions between systems, also known as message exchange patterns (MEPs). MEPs are used to differentiate between one-way and request-response messaging styles. The Camel exchange holds a pattern property that can be either&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;InOnly—A one-way message (also known as an Event message). For example, JMS messaging is often one-way messaging.&lt;/li&gt;
&lt;li&gt;InOut—A request-response message. For example, HTTP-based transports are often request reply, where a client requests to retrieve a web page, waiting for the reply from the server.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Start-Camel-application&quot;&gt;&lt;a href=&quot;#Start-Camel-application&quot; class=&quot;headerlink&quot; title=&quot;Start Camel application&quot;&gt;&lt;/a&gt;Start Camel application&lt;/h1&gt;&lt;p&gt;Camel doesn’t start magically by itself. Often it’s the server (container) that Camel is running inside that invokes the start method on CamelContext, starting up Camel. This is also what you saw in chapter 1, where you used Camel inside a standalone Java application. A standalone Java application isn’t the only deployment choice—you can also run Camel inside a container such as Spring or OSGi.&lt;br&gt;Regardless of which container you use, the same principle applies. The container must prepare and create an instance of CamelContext up front, before Camel can be started.&lt;/p&gt;
&lt;h2 id=&quot;Spring-container&quot;&gt;&lt;a href=&quot;#Spring-container&quot; class=&quot;headerlink&quot; title=&quot;Spring container&quot;&gt;&lt;/a&gt;Spring container&lt;/h2&gt;&lt;p&gt;Camel provides the CamelNamespaceHandler.&lt;br&gt;When using Camel in the Spring XML file, you would define the &lt;camelcontext&gt; tag as follows:&lt;/camelcontext&gt;&lt;/p&gt;
&lt;camelcontext xmlns=&quot;http://camel.apache.org/schema/spring&quot;&gt;

&lt;p&gt;The &lt;a href=&quot;http://camel.apache.org/schema/spring&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://camel.apache.org/schema/spring&lt;/a&gt; namespace is the Camel custom namespace. To let Spring know about this custom namespace, it must be identified in the META-INF/spring.handlers, where you map the namespace to the class implementation:&lt;br&gt;http\://camel.apache.org/schema/spring=&lt;br&gt;     org.apache.camel.spring.handler.CamelNamespaceHandler&lt;/p&gt;
&lt;p&gt;The CamelNamespaceHandler is then responsible for parsing the XML and dele- gating to other factories for further pro- cessing. One of these factories is the Camel- ContextFactoryBean, which is responsible for creating the CamelContext that essen- tially is your Camel application.&lt;br&gt;When Spring is finished initializing, it signals to third-party frameworks that they can start by broadcasting the Context- RefreshedEvent event.&lt;/p&gt;
&lt;h1 id=&quot;Startup&quot;&gt;&lt;a href=&quot;#Startup&quot; class=&quot;headerlink&quot; title=&quot;Startup&quot;&gt;&lt;/a&gt;Startup&lt;/h1&gt;&lt;p&gt;At this point, CamelContext is ready to be started. What happens next is the same regardless of which container or deploy- ment option you’re using with Camel. &lt;/p&gt;
&lt;p&gt;CamelContext is started by invoking its start method. The first step is to determines whether or not autostartup is enabled for Camel. If it’s disabled, the entire startup process is skipped. By default, Camel is set to autostart, which involves the following four steps.&lt;/p&gt;
&lt;p&gt;1 Start internal services—Prepares and starts internal services used by Camel, such as the type-converter mechanism.&lt;br&gt;2 Compute starting order—Computes the order in which the routes should be started. By default, Camel will start up all the routes in the order they are defined in the Spring XML files or the RouteBuilder classes. We’ll cover how to configure the order of routes in section 13.1.3.&lt;br&gt;3 Prepare routes—Prepares the routes before they’re started.&lt;br&gt;4 Start routes—Starts the routes by starting the consumers, which essentially opens&lt;br&gt;the gates to Camel and lets the messages start to flow in.&lt;/p&gt;
&lt;p&gt;After step 4, Camel writes a message to the log indicating that it has been started and that the startup process is complete.&lt;/p&gt;
&lt;h1 id=&quot;Concept&quot;&gt;&lt;a href=&quot;#Concept&quot; class=&quot;headerlink&quot; title=&quot;Concept&quot;&gt;&lt;/a&gt;Concept&lt;/h1&gt;&lt;h2 id=&quot;ENDPOINT&quot;&gt;&lt;a href=&quot;#ENDPOINT&quot; class=&quot;headerlink&quot; title=&quot;ENDPOINT&quot;&gt;&lt;/a&gt;ENDPOINT&lt;/h2&gt;&lt;p&gt;An endpoint is the Camel abstraction that models the end of a channel through which a system can send or receive messages.&lt;/p&gt;
&lt;p&gt;In Camel, you configure endpoints using URIs, such as&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;file:data/inbox?delay=5000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt; and you also refer to endpoints this way. At runtime, Camel will look up an endpoint based on the URI notation. &lt;/p&gt;
&lt;p&gt;The scheme  denotes which Camel component handles that type of endpoint. In this case,&lt;br&gt;the scheme of file selects the FileComponent.&lt;br&gt;The FileComponent then works as a factory creat-&lt;br&gt;ing the FileEndpoint based on the remaining parts of the URI.&lt;br&gt;The context path data/ inbox tells the FileComponent that the starting folder is data/inbox.&lt;br&gt;The option, delay=5000 indicates that files should be polled at a 5 second interval.&lt;/p&gt;
&lt;p&gt;There’s more to an endpoint than meets the eye. &lt;/p&gt;
&lt;h2 id=&quot;JMS&quot;&gt;&lt;a href=&quot;#JMS&quot; class=&quot;headerlink&quot; title=&quot;JMS&quot;&gt;&lt;/a&gt;JMS&lt;/h2&gt;&lt;p&gt;Queues are strictly point-to-point, where each message has only one consumer. Topics operate on a publish/subscribe scheme; a single message may be delivered to many consumers if they have subscribed to the topic.&lt;/p&gt;
&lt;p&gt;JMS also provides a ConnectionFactory that clients (like Camel) can use to cre- ate a connection with a JMS provider. JMS providers are usually referred to as brokers because they manage the communication between a message producer and a mes- sage consumer.&lt;/p&gt;
&lt;h3 id=&quot;HOW-TO-CONFIGURE-CAMEL-TO-USE-A-JMS-PROVIDER&quot;&gt;&lt;a href=&quot;#HOW-TO-CONFIGURE-CAMEL-TO-USE-A-JMS-PROVIDER&quot; class=&quot;headerlink&quot; title=&quot;HOW TO CONFIGURE CAMEL TO USE A JMS PROVIDER&quot;&gt;&lt;/a&gt;HOW TO CONFIGURE CAMEL TO USE A JMS PROVIDER&lt;/h3&gt;&lt;p&gt;To connect Camel to a specific JMS provider, you need to configure Camel’s JMS com- ponent with an appropriate ConnectionFactory.&lt;br&gt;Apache ActiveMQ is one of the most popular open source JMS providers, and it’s the primary JMS broker that the Camel team uses to test the JMS component. &lt;/p&gt;
&lt;h3 id=&quot;JSM-destinations&quot;&gt;&lt;a href=&quot;#JSM-destinations&quot; class=&quot;headerlink&quot; title=&quot;JSM destinations&quot;&gt;&lt;/a&gt;JSM destinations&lt;/h3&gt;&lt;p&gt;There are two types of JMS destinations: queues and topics. The queue is a point-to-point channel, where each message has only one recipient. A topic delivers a copy of the message to all clients who have subscribed to receive it.&lt;/p&gt;
&lt;h3 id=&quot;ActiveMQ&quot;&gt;&lt;a href=&quot;#ActiveMQ&quot; class=&quot;headerlink&quot; title=&quot;ActiveMQ&quot;&gt;&lt;/a&gt;ActiveMQ&lt;/h3&gt;&lt;p&gt;o in the case of Apache ActiveMQ, you can create an ActiveMQConnectionFactory&lt;br&gt;that points to the location of the running ActiveMQ broker:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ConnectionFactory connectionFactory =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ActiveMQConnectionFactory(&lt;span class=&quot;string&quot;&gt;&quot;vm://localhost&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The vm://localhost URI means that you should connect to an embedded broker named “localhost” running inside the current JVM. The vm transport connector in ActiveMQ creates a broker on demand if one isn’t running already, so it’s very handy for quickly testing JMS applications; for production scenarios, it’s recommended that you connect to a broker that’s already running. &lt;/p&gt;
&lt;p&gt;Next, when you create your CamelContext, you can add the JMS component as follows:&lt;br&gt;CamelContext context = new DefaultCamelContext();&lt;br&gt;context.addComponent(“jms”,&lt;br&gt;    JmsComponent.jmsComponentAutoAcknowledge(connectionFactory));&lt;br&gt;The JMS component and the ActiveMQ-specific connection factory aren’t part of the camel-core module. In order to use these, you’ll need to add some dependencies to your Maven-based project. For the plain JMS component, all you have to add is this:&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.apache.camel&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;camel-jms&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;2.5.0&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;The connection factory comes directly from ActiveMQ, so you’ll need the following dependency:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.apache.activemq&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;activemq-core&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;5.3.2&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;USING-URIS-TO-SPECIFY-THE-DESTINATION&quot;&gt;&lt;a href=&quot;#USING-URIS-TO-SPECIFY-THE-DESTINATION&quot; class=&quot;headerlink&quot; title=&quot;USING URIS TO SPECIFY THE DESTINATION&quot;&gt;&lt;/a&gt;USING URIS TO SPECIFY THE DESTINATION&lt;/h3&gt;&lt;p&gt;Once the JMS component is configured, you can start sending and receiving JMS mes- sages at your leisure. Because you’re using URIs, this is a real breeze to configure.&lt;br&gt;Let’s say you want to send a JMS message to the queue named incomingOrders. The URI in this case would be&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;jms:queue:incomingOrders&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;This is pretty self-explanatory. The “jms” prefix indicates that you’re using the JMS component you configured before. By specifying “queue”, the JMS component knows to send to a queue named incomingOrders. You could even have omitted the queue&lt;br&gt;qualifier, because the default behavior is to send to a queue rather than a topic.&lt;/p&gt;
&lt;p&gt;NOTE Some endpoints can have an intimidating list of endpoint URI proper- ties. For instance, the JMS component has about 60 options, many of which are only used in specific JMS scenarios. Camel always tries to provide built-in defaults that fit most cases, and you can always find out what the default values are by browsing to the component’s page in the online Camel documentation. &lt;/p&gt;
&lt;p&gt;Using Camel’s Java DSL, you can send a message to the incomingOrders queue by using the to keyword like this:&lt;br&gt;…to(“jms:queue:incomingOrders”)&lt;br&gt;This can be read as sending to the JMS queue named incomingOrders.&lt;/p&gt;
&lt;h2 id=&quot;FINDING-ROUTE-BUILDERS&quot;&gt;&lt;a href=&quot;#FINDING-ROUTE-BUILDERS&quot; class=&quot;headerlink&quot; title=&quot;FINDING ROUTE BUILDERS&quot;&gt;&lt;/a&gt;FINDING ROUTE BUILDERS&lt;/h2&gt;&lt;p&gt;Using the Spring CamelContext as a runtime and the Java DSL for route development is a great way of using Camel. In fact, it’s the most frequent usage of Camel.&lt;br&gt;You saw before that you can explicitly tell the Spring CamelContext what route builders to load. You can do this by using the routerBuilder element:&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;camelContext&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://camel.apache.org/schema/spring&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;routeBuilder&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;ref&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;ftpToJmsRoute&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;camelContext&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Being this explicit results in a clean and concise definition of what is being loaded into Camel.&lt;br&gt;Sometimes, though, you may need to be a bit more dynamic. This is where the packageScan and contextScan elements come in:&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;camelContext&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://camel.apache.org/schema/spring&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;packageScan&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;package&lt;/span&gt;&amp;gt;&lt;/span&gt;camelinaction.routes&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;package&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;packageScan&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;camelContext&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;This packageScan element will load all RouteBuilder classes found in the camelinac- tion.routes package, including all subpackages.&lt;br&gt;You can even be a bit more picky about what route builders are included:&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;camelContext&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://camel.apache.org/schema/spring&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;packageScan&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;package&lt;/span&gt;&amp;gt;&lt;/span&gt;camelinaction.routes&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;package&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;excludes&lt;/span&gt;&amp;gt;&lt;/span&gt;**.*Test*&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;excludes&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;includes&lt;/span&gt;&amp;gt;&lt;/span&gt;**.*&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;includes&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;packageScan&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;camelContext&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;In this case, you’re loading all route builders in the camelinaction.routes package, except for ones with “Test” in the class name. The matching syntax is similar to what is used in Apache Ant’s file pattern matchers.&lt;/p&gt;
&lt;/camelcontext&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Camel’s-message-model&quot;&gt;&lt;a href=&quot;#Camel’s-message-model&quot; class=&quot;headerlink&quot; title=&quot;Camel’s message model&quot;&gt;&lt;/a&gt;Camel’s message model&lt;/
    
    </summary>
    
    
      <category term="Apache" scheme="http://www.todzhang.com/tags/Apache/"/>
    
      <category term="Camel" scheme="http://www.todzhang.com/tags/Camel/"/>
    
  </entry>
  
</feed>
