<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rxjs on Clouds&amp;Docker</title>
    <link>http://todzhang.com/tags/rxjs/</link>
    <description>Recent content in rxjs on Clouds&amp;Docker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://todzhang.com/tags/rxjs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Router in angular</title>
      <link>http://todzhang.com/posts/2017-12-10-rxjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2017-12-10-rxjs/</guid>
      <description>Lettable operators RxJS 5.5, piping all the things
So now we want a way to use those operators, how could we do that?
Well, we said those operators are “lettable” that means we can use them by calling the let method on an observable:
And if we want to chain multiple lettable operators we can keep dot chaining:
import { Observable } from &amp;lsquo;rxjs/Rx&amp;rsquo;; import { filter, map, reduce } from &amp;lsquo;rxjs/operators&amp;rsquo;;</description>
    </item>
    
    <item>
      <title>rxjs pipe in depth</title>
      <link>http://todzhang.com/posts/2018-05-15-rxjs-pipe-in-depth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2018-05-15-rxjs-pipe-in-depth/</guid>
      <description>https://stormforger.com/blog/2016/07/08/types-of-performance-testing/
Learn more about load testing, scalability testing, stress, spike and soak testing, configuration testing as well as availability and resilience testing.
&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;15/05/2018 notes &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; https://blog.hackages.io/rxjs-5-5-piping-all-the-things-9d469d1b3f44 RxJS 5.5, piping all the things
So now we want a way to use those operators, how could we do that?
Well, we said those operators are “lettable” that means we can use them by calling the let method on an observable:
And if we want to chain multiple lettable operators we can keep dot chaining:</description>
    </item>
    
  </channel>
</rss>