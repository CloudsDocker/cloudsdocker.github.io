<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CAS on Clouds&amp;Docker</title>
    <link>http://todzhang.com/tags/cas/</link>
    <description>Recent content in CAS on Clouds&amp;Docker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://todzhang.com/tags/cas/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Locking and multithreading</title>
      <link>http://todzhang.com/posts/2018-06-12-locking-and-multithreading/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2018-06-12-locking-and-multithreading/</guid>
      <description>Single Writer principle There is a lot of research in computer science for managing this contention that boils down to 2 basic approaches. One is to provide mutual exclusion to the contended resource while the mutation takes place; the other is to take an optimistic strategy and swap in the changes if the underlying resource has not changed while you created the new copy.
Memory Barier Memory barriers, or fences, are a set of processor instructions used to apply ordering limitations on memory operations.</description>
    </item>
    
  </channel>
</rss>