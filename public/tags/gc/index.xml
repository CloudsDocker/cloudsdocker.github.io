<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GC on Clouds&amp;Docker</title>
    <link>http://todzhang.com/tags/gc/</link>
    <description>Recent content in GC on Clouds&amp;Docker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://todzhang.com/tags/gc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java GC notes</title>
      <link>http://todzhang.com/posts/2016-12-30-java-gc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-12-30-java-gc/</guid>
      <description>verbose:gc verbose:gc prints right after each gc collection and prints details about each generation memory details. Here is blog on how to read verbose gc
If you are trying to look for memory leak, verbose:gc may not be enough. Use some visualization tools like jhat (or) visualvm etc.,
4416K-&amp;gt;512K(4928K), 0.0081170 secs
Before GC used memory is 4416K After GC used memory is 512K Total allocated memory is 4928K
-verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:C:/Users/tzhang17/temp/gc/gc.</description>
    </item>
    
  </channel>
</rss>