<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JVM on Clouds&amp;Docker</title>
    <link>http://todzhang.com/tags/jvm/</link>
    <description>Recent content in JVM on Clouds&amp;Docker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://todzhang.com/tags/jvm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java JVM</title>
      <link>http://todzhang.com/posts/2017-02-05-jvm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2017-02-05-jvm/</guid>
      <description>Class loading subsystem Consist of three sections
load There are three class loaders
 bootstrap class loader, e.g. rt.jar extension class loader, e.g. jre/lib/ext application class loader, e.g. -cp  Link  Verify Prepare Resolve  Initialize  While deadlock is the most widely encountered liveness hazard, there are sev- eral other liveness hazards you may encounter in concurrent programs including starvation, missed signals, and livelock.  Metaspace Since Java 8, the introduce of metaspace is kind of using memory or even virtual memory in OS, so theriotically there is no limit of metaspace.</description>
    </item>
    
  </channel>
</rss>