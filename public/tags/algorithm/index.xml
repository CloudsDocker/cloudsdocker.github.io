<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>algorithm on My New Hugo Site</title>
    <link>http://example.org/tags/algorithm/</link>
    <description>Recent content in algorithm on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://example.org/tags/algorithm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Algorithm</title>
      <link>http://example.org/posts/2017-01-21-algorithm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/2017-01-21-algorithm/</guid>
      <description>This page is about key points about Algorithm Methodology  The easiest way to improve search efficiency on a set of data is to put it in a data structure that allows more efficient searching. What data structures can be searched more efficiency than O(n)? Binary tree can be searched in O(log(n)). Arrays and hash tables both have constant time element look up (has tables have worse-case lookup of O(n) but the average case is O(1)).</description>
    </item>
    
    <item>
      <title>Algorithm notes from Leecode -- 1</title>
      <link>http://example.org/posts/2020-03-03-algorithm-leecode-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/2020-03-03-algorithm-leecode-1/</guid>
      <description>Algorithm Leetcode
Links
  [https://www.dailycodingproblem.com/?ref=csdojo]{.underline}
  [https://www.csdojo.io/#]{.underline}
  https://github.com/mission-peace/interview/tree/master/src/com/interview/dynamic
  [https://leetcode.com/discuss/general-discussion/458695/dynamic-programming-patterns]{.underline}
  daily coding problem book pdf free download
  [https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode%20题解%20-%20目录.md]{.underline}
leetcodeGithub project in intelliJ
tasks to hands on
  0/1 knapsack
  fibnachi memoized and bottom up approaches
  median of two sorted array
  64 minimum path sum
   Maximum sub array (kadane algorithm)
   [Slide Window]</description>
    </item>
    
  </channel>
</rss>