<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Articles on Clouds&amp;Docker</title>
    <link>http://todzhang.com/posts/</link>
    <description>Recent content in Articles on Clouds&amp;Docker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Mar 2017 12:00:00 -0500</lastBuildDate>
    
	<atom:link href="http://todzhang.com/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SSL certificates</title>
      <link>http://todzhang.com/posts/2019-02-26-tls-ssl-https/</link>
      <pubDate>Fri, 26 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2019-02-26-tls-ssl-https/</guid>
      <description>What&amp;rsquo;s TLS TLS (Transport Layer Security) and its predecessor, SSL (Secure Sockets Layer), are security protocols designed to secure the communication between a server and a client, for example, a web server and a browser. Both protocols are frequently referred to as SSL.
A TLS/SSL certificate (simply called SSL certificate) is required to enable SSL/TLS on your site and serve your website using the secure HTTPS protocol.
We offer different types of domain-validated SSL certificates signed by globally recognized certificate authorities.</description>
    </item>
    
    <item>
      <title>JVM wram up</title>
      <link>http://todzhang.com/posts/2018-06-10-jvm-warm-up/</link>
      <pubDate>Sat, 28 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2018-06-10-jvm-warm-up/</guid>
      <description>JVM wram up Keeping this in mind, for low-latency applications, we need to cache all classes beforehand – so that they’re available instantly when accessed at runtime.
This process of tuning the JVM is known as warming up.
Escape Analysis Escape analysis is a technique by which the Java Hotspot Server Compiler can analyze the scope of a new object&amp;rsquo;s uses and decide whether to allocate it on the Java heap.</description>
    </item>
    
    <item>
      <title>A Facial Recognition utility in a dozen of LOC</title>
      <link>http://todzhang.com/posts/2017-04-28-facial-recognition_en/</link>
      <pubDate>Sun, 28 Jun 2020 06:40:12 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2017-04-28-facial-recognition_en/</guid>
      <description>A Facial Recognition utility in a dozen of python LOC (Lines Of Code) CV (Computer Vision) I have been soak myself in open sourced libraries, such as OpenCV. I gradually came to discern concepts such as Machine Learning , Deep Learning are not academic standing water. As a matter of fact, those elusive topics and certain pragmatic use cases could coalesce in a amount of interesting products. For instance, in past couple of months, there were a hype of guess-ages-by-photo, below screenshot depicts such.</description>
    </item>
    
    <item>
      <title>Java Concurrent Column 2</title>
      <link>http://todzhang.com/posts/2017-02-01-concurrent-in-java-col-2/</link>
      <pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2017-02-01-concurrent-in-java-col-2/</guid>
      <description>This is the second half about Java Concurrent of my blog non-blocking synchronization  Much of the recent research on concurrent algorithms has focused on nonblock- ing algorithms, which use low-level atomic machine instructions such as compare- and-swap instead of locks to ensure data integrity under concurrent access. Non- blocking algorithms are used extensively in operating systems and JVMs for thread and process scheduling, garbage collection, and to implement locks and other concurrent data structures.</description>
    </item>
    
    <item>
      <title>Java Concurrent</title>
      <link>http://todzhang.com/posts/2017-04-20-concurrent-in-java/</link>
      <pubDate>Tue, 10 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2017-04-20-concurrent-in-java/</guid>
      <description>This blog is about noteworthy pivot points about Java Concurrent Framework  Back to Java old days there were wait()/notify() which is error prone, while from Java 5.0 there was Concurrent framework being introduced, this page list some pivot points.
 CountDownLatch  CountDownLatch in Java is a kind of synchronizer which allows one Thread to wait for one or more Threads before starts processing. You can also implement same functionality using wait and notify mechanism in Java but it requires lot of code and getting it write in first attempt is tricky, With CountDownLatch it can be done in just few lines.</description>
    </item>
    
    <item>
      <title>DevOps-Philosophy</title>
      <link>http://todzhang.com/posts/2018-06-01-devops-philosophy/</link>
      <pubDate>Sat, 02 Jun 2018 01:21:13 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2018-06-01-devops-philosophy/</guid>
      <description>💯DevOps Model Defined DevOps is the combination of cultural philosophies, practices, and tools that increases an organization’s ability to deliver applications and services at high velocity: evolving and improving products at a faster pace than organizations using traditional software development and infrastructure management processes. This speed enables organizations to better serve their customers and compete more effectively in the market.
What&amp;rsquo;s means to team These two teams are merged into a single team where the engineers work across the entire application lifecycle, from development and test to deployment to operations, and develop a range of skills not limited to a single function.</description>
    </item>
    
    <item>
      <title>GIT useful scripts or error solutions</title>
      <link>http://todzhang.com/posts/2018-05-24-git-scripts-bible-errors/</link>
      <pubDate>Sat, 28 Apr 2007 06:40:12 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2018-05-24-git-scripts-bible-errors/</guid>
      <description>Script bible to list merge conflicts files in command line You can use either one of below three commands
git diff --name-only --diff-filter=U git status --short | grep &amp;#34;^UU &amp;#34; git ls-files -u One line command to add, commit and push one changed file git status --short | awk &amp;#39;{split($0, a);print a[2]}&amp;#39; | xargs git add &amp;amp;&amp;amp; git commit -m &amp;#39;commit changes&amp;#39; &amp;amp;&amp;amp; git push origin BRANCH_NAME to show files commited but not pushed git diff --stat --cached origin/feature/BRANCH_NAME to view file content changed git show PATH/abc.</description>
    </item>
    
    <item>
      <title>Agile and SCRUM</title>
      <link>http://todzhang.com/posts/2018-06-06-scrum-agile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2018-06-06-scrum-agile/</guid>
      <description>Key concept In Scrum, a team is cross functional, meaning everyone is needed to take a feature from idea to implementation.
Within agile development, Scrum teams are supported by two specific roles. The first is a ScrumMaster, who can be thought of as a coach for the team, helping team members use the Scrum process to perform at the highest level.
The product owner (PO) is the other role, and in Scrum software development, represents the business, customers or users, and guides the team toward building the right product.</description>
    </item>
    
    <item>
      <title>akka framework of scala</title>
      <link>http://todzhang.com/posts/2018-07-23-akka-scala/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2018-07-23-akka-scala/</guid>
      <description>philosophy The actor model adopts the philosophy that everything is an actor. This is similar to the everything is an object philosophy used by some object-oriented programming languages.
Decoupling the sender from communications sent was a fundamental advance of the Actor model enabling asynchronous communication and control structures as patterns of passing messages.
Recipients of messages are identified by address, sometimes called &amp;ldquo;mailing address&amp;rdquo;. Thus an actor can only communicate with actors whose addresses it has.</description>
    </item>
    
    <item>
      <title>Algorithm</title>
      <link>http://todzhang.com/posts/2017-01-21-algorithm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2017-01-21-algorithm/</guid>
      <description>This page is about key points about Algorithm Methodology  The easiest way to improve search efficiency on a set of data is to put it in a data structure that allows more efficient searching. What data structures can be searched more efficiency than O(n)? Binary tree can be searched in O(log(n)). Arrays and hash tables both have constant time element look up (has tables have worse-case lookup of O(n) but the average case is O(1)).</description>
    </item>
    
    <item>
      <title>Algorithm notes from Leecode -- 1</title>
      <link>http://todzhang.com/posts/2020-03-03-algorithm-leecode-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2020-03-03-algorithm-leecode-1/</guid>
      <description>Algorithm Leetcode
Links
  [https://www.dailycodingproblem.com/?ref=csdojo]{.underline}
  [https://www.csdojo.io/#]{.underline}
  https://github.com/mission-peace/interview/tree/master/src/com/interview/dynamic
  [https://leetcode.com/discuss/general-discussion/458695/dynamic-programming-patterns]{.underline}
  daily coding problem book pdf free download
  [https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode%20题解%20-%20目录.md]{.underline}
leetcodeGithub project in intelliJ
tasks to hands on
  0/1 knapsack
  fibnachi memoized and bottom up approaches
  median of two sorted array
  64 minimum path sum
   Maximum sub array (kadane algorithm)
   [Slide Window]</description>
    </item>
    
    <item>
      <title>Anatomy of ThreadLocal</title>
      <link>http://todzhang.com/posts/2016-08-05-anatomy-of-threadlocal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-08-05-anatomy-of-threadlocal/</guid>
      <description>Design philosophies fast-path /** * Get the entry associated with key. This method * itself handles only the fast path: a direct hit of existing * key. It otherwise relays to getEntryAfterMiss. This is * designed to maximize performance for direct hits, in part * by making this method readily inlinable. * * @param key the thread local object * @return the entry associated with key, or null if no such */ private Entry getEntry(ThreadLocal key) { int i = key.</description>
    </item>
    
    <item>
      <title>Angulary Misc</title>
      <link>http://todzhang.com/posts/2016-12-12-angular/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-12-12-angular/</guid>
      <description>Dependency Injection Angular doesn&amp;rsquo;t automatically know how you want to create instances of your services or the injector to create your service. You must configure it by specifying providers for every service.
Providers tell the injector how to create the service. Without a provider, the injector would not know that it is responsible for injecting the service nor be able to create the service.
What is difference between declarations, providers and import in NgModule  imports: is used to import supporting modules likes FormsModule, RouterModule, CommonModule, or any other custom-made feature module.</description>
    </item>
    
    <item>
      <title>Ansible</title>
      <link>http://todzhang.com/posts/2018-06-21-ansible/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2018-06-21-ansible/</guid>
      <description>Ansible: What Is It Good For? Ansible is often described as a configuration management tool, and is typically mentioned in the same breath as Chef, Puppet, and Salt. When we talk about configuration management, we are typically talking about writing some kind of state description for our servers, and then using a tool to enforce that the servers are, indeed, in that state: the right packages are installed, configuration files contain the expected values and have the expected permissions, the right services are running, and so on.</description>
    </item>
    
    <item>
      <title>Apache Camel</title>
      <link>http://todzhang.com/posts/2018-07-11-camel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2018-07-11-camel/</guid>
      <description>Camel’s message model In Camel, there are two abstractions for modeling messages, both of which we’ll cover in this section.
 org.apache.camel.Message—The fundamental entity containing the data being carried and routed in Camel org.apache.camel.Exchange—The Camel abstraction for an exchange of mes- sages. This exchange of messages has an “in” message and as a reply, an “out” message  Message Messages are the entities used by systems to communicate with each other when using messaging channels.</description>
    </item>
    
    <item>
      <title>Apache Tips</title>
      <link>http://todzhang.com/posts/2016-12-24-apache-tips/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-12-24-apache-tips/</guid>
      <description>Apache sudo su - apachectl start apachectl stop Open a browser to access http://localhost/</description>
    </item>
    
    <item>
      <title>Apigee</title>
      <link>http://todzhang.com/posts/2018-06-21-apigee/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2018-06-21-apigee/</guid>
      <description>App deployment, configuration management and orchestration - all from one system. Ansible is powerful IT automation that you can learn quickly.
Architecture APIs are the glue that connect apps and act as the foundation for what we call the digital economy. Through every connection there is at least one API interacting with other applications and exchanging data. A business needs API management solutions that can support diverse users and not compromise the stability and reliability of back-end systems.</description>
    </item>
    
    <item>
      <title>Arbitrage vs Heading</title>
      <link>http://todzhang.com/posts/2017-01-04-arbitrage-vs-hedging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2017-01-04-arbitrage-vs-hedging/</guid>
      <description>What is the difference between arbitrage and hedging?  Hedging involves the concurrent use of more than one bet in opposite directions to limit risk of serious investment loss. **Arbitrage is the practice of trading a price difference between more than one market for the same good in an attempt to profit from the imbalance. These two concepts play important roles in finance, economics and investments.  Each transaction relies involves two competing types of trades: betting short versus betting long (hedging) and **buying versus selling **(arbitrage).</description>
    </item>
    
    <item>
      <title>AWS certification</title>
      <link>http://todzhang.com/posts/2019-08-25-aws-certificate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2019-08-25-aws-certificate/</guid>
      <description>Concepting Cloud computing is the on-demand delivery of IT resources and applications via the Internet with pay-as-you-go pricing. Whether you run applications that share photos to millions of mobile users or deliver services that support the critical operations of your business, the cloud provides rapid access to flexible and low-cost IT resources.
In its simplest form, cloud computing provides an easy way to access servers, storage, databases, and a broad set of application services over the Internet.</description>
    </item>
    
    <item>
      <title>AWS Tips</title>
      <link>http://todzhang.com/posts/2017-03-21-aws/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2017-03-21-aws/</guid>
      <description>After establishing a SSH session, you can install a default web server by executing sudo yum install httpd -y. To start the web server, type sudo service httpd start and press Return to execute the command. Your web browser should show a placeholder site if you open http://$PublicIp with $PublicIp replaced by the public IP address of your virtual server.</description>
    </item>
    
    <item>
      <title>Business Analysis</title>
      <link>http://todzhang.com/posts/2016-08-04-ba/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-08-04-ba/</guid>
      <description>Purpose of BA  带来一些商业价值（收益） 解决业务痛点  Best Parctices for BA/Architect  架构设计可以大而全，但实施过程最好是简化，化整为零，以最快速度先上线，通过迭代方式不断的完善。（船小好调头） 理想的架构应该像是App Store那样，设计成一个窗口，只要符合平台规范和协议就可以发布上去，关注是应用本身是否work，其他交给平台完成。 收益可以通过多种形式表现：提高产量、节约成本、挖掘用户价值、加强服务质量、优化用户体验、快速响应市场变化等 架构：将产品、技术、运营有机的结合起来 一个成功的互联网应用，背后一定是一群既懂得经营，又明白如何利用技术的业务和一群懂得驱动业务的技术大神们的故事。 任何一个产生生产力革命的行业一定是由业务和技术结合而产生的，比如网上订餐，叫车行业  Samples tips for online eCommerence  From API to CRS (中央预定系统 Centeral Reservation System)  </description>
    </item>
    
    <item>
      <title>Camel</title>
      <link>http://todzhang.com/posts/2018-07-13-camel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2018-07-13-camel/</guid>
      <description>Endpoints Camel supports the Message Endpoint pattern using the Endpoint interface. Endpoints are usually created by a Component and Endpoints are usually referred to in the DSL via their URIs.
From an Endpoint you can use the following methods
createProducer() will create a Producer for sending message exchanges to the endpoint createConsumer() implements the Event Driven Consumer pattern for consuming message exchanges from the endpoint via a Processor when creating a Consumer createPollingConsumer() implements the Polling Consumer pattern for consuming message exchanges from the endpoint via a PollingConsumer</description>
    </item>
    
    <item>
      <title>Chronicle</title>
      <link>http://todzhang.com/posts/2018-08-09-chronicle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2018-08-09-chronicle/</guid>
      <description>Overview Chronicle Software is about simplifying fast data. It is a suite of libraries to make it easier to write, monitor and tune data processing systems where performance and scalability are concerned.
Writing to a Queue In Chronicle Queue we refer to the act of writing your data to the Chronicle queue, as storing an excerpt. This data could be made up from any data type, including text, numbers, or serialised blobs.</description>
    </item>
    
    <item>
      <title>CI and CD</title>
      <link>http://todzhang.com/posts/2016-06-03-ci-cd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-06-03-ci-cd/</guid>
      <description>Concepts CI/CD are usage of Docker, CI is continuous integration, is the process of eliciting fast, automated feedback on the correctness of your application every time there is a change to the code, while CD means continuous delivery, build upon the earlier concept by providing fast, automated feedback on the correctness and production readiness of your application every time there is a chance to code, infrastructure, or configuration.
Some &amp;ldquo;best practices&amp;rdquo;  Frequent commits to a common code stream Disallow commits into a &amp;ldquo;broken&amp;rdquo; build A &amp;ldquo;broken&amp;rdquo; build on CI should be attended to immediately and its resolutin should be of utmost priority  Use cases </description>
    </item>
    
    <item>
      <title>Citrix receiver</title>
      <link>http://todzhang.com/posts/2018-09-26-citrix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2018-09-26-citrix/</guid>
      <description>“Cannot connect to remote desktop” with Citrix Receiver cd /opt/Citrix/ICAClient/keystore/ then: rm -rf cacerts and finally: ln -s /etc/ssl/certs cacerts Cann&amp;rsquo;t show full sreen in linux citrix receiver There is workaround, i.e. Press Alt and drag RDP window, then maximum it.</description>
    </item>
    
    <item>
      <title>Citrix receiver</title>
      <link>http://todzhang.com/posts/2018-10-13-sbe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2018-10-13-sbe/</guid>
      <description>Simple Binary Encoding (SBE) SBE is an OSI layer 6 presentation for encoding and decoding binary application messages for low-latency financial applications.</description>
    </item>
    
    <item>
      <title>cloud computering</title>
      <link>http://todzhang.com/posts/2017-12-18-clouding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2017-12-18-clouding/</guid>
      <description>Concepts Cloud computing is the on-demand demand delivery of compute database storage applications and other IT resources through a cloud services platform via the Internet with pay-as-you-go pricing.
The 6 advantages of cloud computering Trade Capital Expense For Variable Expense Benefit from massive economies of scale Stop guessing about capacity Increase speed and agility Stop spending money running and maintaining data centers Go global in minutes 3 types of cloud computing  IAAS PAAS SAAS  &amp;ldquo;Certification is the beginning of your journey, not the end&amp;rdquo;</description>
    </item>
    
    <item>
      <title>cloud computering</title>
      <link>http://todzhang.com/posts/2017-12-18-openstack-vs-openshift/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2017-12-18-openstack-vs-openshift/</guid>
      <description>openshift vs openstack The shoft and direct answer is `OpenShift Origin can run on top of OpenStack. They are complementary projects that work well together. OpenShift Origin is not presently part of OpenStack, and does not compete with OpenStack. If you stand up your own OpenStack system, you can make it even more useful by installing OpenShift Origin on top of it.&amp;rsquo;
OpenStack is IAAS OpenStack provides “Infrastructure-as-a-Service”, or “IaaS”. It provides bootable virtual machines, networking, block storage, object storage, and so forth.</description>
    </item>
    
    <item>
      <title>common errors in NPM or node</title>
      <link>http://todzhang.com/posts/2017-12-07-errors-in-npm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2017-12-07-errors-in-npm/</guid>
      <description>code E503 code E503 when run npm install packages, e.g.
npm install pretty-data Get following error: ` npm ERR! code E503 npm ERR! 503 Service Unavailable: pretty-data@latest
npm ERR! A complete log of this run can be found in: npm ERR! xxxx\nodejs\npm-cache_logs\2017-12-07T04_16_53_679Z-debug.log
Solution: You maybe behind corporate proxy, so try execute following command
npm config set proxy http://127.0.0.1:53128 </description>
    </item>
    
    <item>
      <title>Compare-In-Java</title>
      <link>http://todzhang.com/posts/2017-01-19-compare-in-java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2017-01-19-compare-in-java/</guid>
      <description>Concepts  If you implement Comparable interface and override compareTo() method it must be consistent with equals() method i.e. for equal object by equals() method compareTo() must return zero. failing to so will affect contract of SortedSet e.g. TreeSet and SortedMap like TreeMap, which uses compareTo() method for checking equality Remember to use Collections.reverseOrder() comparator for sorting Object in reverse order or descending order, as shown in this example. Use Generics while implementing Comparator and Comparable interface, that prevents error of accidentally overloading compareTo() and compare() method instead of overriding it because both of these methods accept Object as a parameter.</description>
    </item>
    
    <item>
      <title>Container</title>
      <link>http://todzhang.com/posts/2017-12-02-container/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2017-12-02-container/</guid>
      <description>The Docker project was responsible for popularizing container development in Linux systems. The original project defined a command and service (both named docker) and a format in which containers are structured. This chapter provides a hands-on approach to using the docker command and service to begin working with containers in Red Hat Enterprise Linux 7 and RHEL Atomic Host by getting and using container images and working with running containers.</description>
    </item>
    
    <item>
      <title>Conversations with God</title>
      <link>http://todzhang.com/posts/2019-09-12-conversations-with-god/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2019-09-12-conversations-with-god/</guid>
      <description>Feelings is the language of the soul. If you want to know what&amp;rsquo;s true for you about something, look to how your&amp;rsquo;re feeling about.</description>
    </item>
    
    <item>
      <title>Core Java</title>
      <link>http://todzhang.com/posts/2018-06-26-core-java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2018-06-26-core-java/</guid>
      <description>Annotation retention policy What is Retention policy in java annotations?
A retention policy determines at what point annotation should be discarded. Java defined 3 types of retention policies through java.lang.annotation.RetentionPolicy enumeration. It has SOURCE, CLASS and RUNTIME. Annotation with retention policy SOURCE will be retained only with source code, and discarded during compile time. Annotation with retention policy CLASS will be retained till compiling the code, and discarded during runtime. Annotation with retention policy RUNTIME will be available to the JVM through runtime.</description>
    </item>
    
    <item>
      <title>CORS :Cross-Origin Resource Sharing</title>
      <link>http://todzhang.com/posts/2018-01-10-cors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2018-01-10-cors/</guid>
      <description>Cross-Origin Request Sharing - CORS (A.K.A. Cross-Domain AJAX request) is an issue that most web developers might encounter, according to Same-Origin-Policy, browsers restrict client JavaScript in a security sandbox, usually JS cannot directly communicate with a remote server from a different domain. In the past developers created many tricky ways to achieve Cross-Domain resource request, most commonly using ways are:
Use Flash/Silverlight or server side as a &amp;ldquo;proxy&amp;rdquo; to communicate with remote.</description>
    </item>
    
    <item>
      <title>Cucumber</title>
      <link>http://todzhang.com/posts/2018-08-08-cucumber/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2018-08-08-cucumber/</guid>
      <description>Acceptance testing vs unit test It’s sometimes said that unit tests ensure you build the thing right, whereas acceptance tests ensure you build the right thing.
Cucumber. The acceptance testing tool.
Source of Truth For many teams, the Cucumber feature files become the definitive source of truth as to what the system does.
Scenarios Scenarios are written before production code. They start their life as an executable specification. As the production code emerges, Scenarios take on a role as living documentation and automated tests.</description>
    </item>
    
    <item>
      <title>Data Structure</title>
      <link>http://todzhang.com/posts/2016-07-25-data-structure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-07-25-data-structure/</guid>
      <description>Binary Tree  A binary tree is a tree in which no node can have more than two children. A property of a binary tree that is sometimes important is that the depth of an average binary tree is considerably smaller than N. An analysis shows that the average depth is √O( N), and that for a special type of binary tree, namely the binary search tree, the average value of the depth is O(log N).</description>
    </item>
    
    <item>
      <title>Database sharding</title>
      <link>http://todzhang.com/posts/2016-06-01-db-sharding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-06-01-db-sharding/</guid>
      <description>DB sharding in YHD There are two solutions when DB becoming bottleneck in yihaodian.
 Scale up Upgrade Oracle DB, adding more CPU , Disk and memory to incrase I/O performance. This is for short term only, high cost. Scale out Divide the order table to multiple DBs, which is support horizontal extension, for long term purpose.  Orgional Oracle is replaced by multiple MySQL DB, supporintg one master and multiple slaves, supporitng segratation of read and write.</description>
    </item>
    
    <item>
      <title>Dead Lock</title>
      <link>http://todzhang.com/posts/2017-01-20-deadlock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2017-01-20-deadlock/</guid>
      <description>Concept  Two or more threads are waiting for each other to release lock and get stuck for infinite time. It will only happen in case of multitasking.  One screnario of dead lock If method1() and method2() both will be called by two or many threads , there is a good chance of deadlock because if thread 1 acquires lock on Sting object while executing method1() and thread 2 acquires lock on Integer object while executing method2() both will be waiting for each other to release lock on Integer and String to proceed further which will never happen.</description>
    </item>
    
    <item>
      <title>Distruptor</title>
      <link>http://todzhang.com/posts/2018-09-06-mockito/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2018-09-06-mockito/</guid>
      <description>multithreading Concurrent execution of code ia bout two things: mutal exclusion and visibility of change.
 Mutual exclusion is about managing contented updtes to some resources. Visibiliyt of change is about controlling when such changes are made visible to other threads.  mutal exclusion It is possible to avoid the need for mutal exclusion if you can eliminate the need for contented updates. If your algorithm can guarantee that any given resource is modified by only one thread then utal exclusion is unnecessary.</description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>http://todzhang.com/posts/2016-06-01-docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-06-01-docker/</guid>
      <description>Dockers Concepts Official Definition  Docker is an open platform for developers and sysadmins to build,ship and run distributed applications
  Docker&amp;rsquo;s philosophy is &amp;ldquo;build-&amp;gt;ship-&amp;gt;run&amp;rdquo;.
 In contemporary IT industry, there are two major usage of Docker.
 Focus on Build &amp;amp; Ship, to leverage Docker to setup a platform of &amp;ldquo;CI/CD&amp;rdquo;, for develop, test enviornment. Make use of Docker as light weight VM (virtual machine), focus on Run, apply it in large scale production environment.</description>
    </item>
    
    <item>
      <title>Docker Errors and Fixes</title>
      <link>http://todzhang.com/posts/2016-06-09-docker-errors-fixes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-06-09-docker-errors-fixes/</guid>
      <description>Docker Errors  Cannot connect to the Docker daemon. Is the docker daemon running on this host? The solution is to run under root user, e.g.  sudo docker run hello-world  Docker service  sudo service docker status sudo service docker start sudo docker run hello-world </description>
    </item>
    
    <item>
      <title>Eclipse notes</title>
      <link>http://todzhang.com/posts/2017-02-06-eclipse-tips/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2017-02-06-eclipse-tips/</guid>
      <description>How do I remove a plug-in? Run Help &amp;gt; About Eclipse &amp;gt; Installation Details, select the software you no longer want and click Uninstall. (On Macintosh it is Eclipse &amp;gt; About Eclipse &amp;gt; Installation Details.)
Where is the Eclipse Plugin update error log? The log is located at current workspace: {workspace_path}/.metadata/.log - also you can view this log in view &amp;ldquo;Error Log&amp;rdquo;: Window &amp;gt; Show View &amp;gt; Other &amp;gt; Find here &amp;ldquo;Error Log&amp;rdquo;</description>
    </item>
    
    <item>
      <title>equity trading</title>
      <link>http://todzhang.com/posts/2016-06-23-equity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-06-23-equity/</guid>
      <description>Difference between mutal funds and hedge funds Similarites: Both are managed portfolios. There are manager (or managers) pick securities by certain strategy or algorithm.
Difference:  Headge fund tend to aggressive, they take speculative postions in derviaties such as options are able to short sell. This iwll typically increase leverage (and also the risks). On the other hand, mutal fund are not permitted to take these highly leveraged postions and more safer as a result.</description>
    </item>
    
    <item>
      <title>Eslastic Search</title>
      <link>http://todzhang.com/posts/2016-11-12-elastic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-11-12-elastic/</guid>
      <description>Eslastic Search `Elastic Search notes
List indices http://localhost:9200/_cat/indices?v pretty-print JSON message (if any) curl -XPUT &amp;#39;localhost:9200/customer?pretty&amp;#39; 如果有任何建议或者想法，请联系我。
联系我：  phray.zhang@gmail.com (email/邮件，whatsapp, linkedin) helloworld_2000 (wechat/微信) github [简书 jianshu]（http://www.jianshu.com/users/a9e7b971aafc） 微信公众号：vibex 微博: cloudsdocker  </description>
    </item>
    
    <item>
      <title>File Util in Apache Camel</title>
      <link>http://todzhang.com/posts/2018-07-16-fileutils_camel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2018-07-16-fileutils_camel/</guid>
      <description>FileUtil.class compactPath(String path) To normalize path and join with provided separator
if path is null, return null if path.indexOf(47) == -1 &amp;amp;&amp;amp; path.indexOf(92) ==-1 (means /, ) return path
normalizePath check whether it is windows String osName = System.getProperty(&amp;ldquo;os.name&amp;rdquo;).toLowerCase(Locale.ENGLISH); return osName.contains(&amp;ldquo;windows&amp;rdquo;); for windows, replace / with \, for linux, replace \ with /
split path by separator (\ or /) to get an array
traverse array and check whether current is &amp;ldquo;.</description>
    </item>
    
    <item>
      <title>flexbox</title>
      <link>http://todzhang.com/posts/2018-06-14-flex-box/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2018-06-14-flex-box/</guid>
      <description>How Flexbox works — explained with big, colorful, animated gifs
Flexbox promises to save us from the evils of plain CSS (like vertical alignment).
Well, Flexbox does deliver on that goal. But mastering its new mental model can be challenging.
So let’s take an animated look at how Flexbox works, so we can use it to build better layouts.
Flexbox’s underlying principle is to make layouts flexible and intuitive.
To accomplish this, it lets containers decide for themselves how to evenly distribute their children — including their size and the space between them.</description>
    </item>
    
    <item>
      <title>Foreign Exchange</title>
      <link>http://todzhang.com/posts/2018-06-09-fx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2018-06-09-fx/</guid>
      <description>Foreign Exchange markets Generally, FX Swap is the biggest portion of FX market, followed by FX Spot, outright forward, Options.
Forward forward contract or simply a forward is a non-standardized contract between two parties to buy or to sell an asset at a specified future time at a price agreed upon today, making it a type of derivative instrument
A foreign exchange swap has two legs - a spot transaction and a forward transaction - that are executed simultaneously for the same quantity, and therefore offset each other.</description>
    </item>
    
    <item>
      <title>Foreign Exchange</title>
      <link>http://todzhang.com/posts/2019-01-17-fx-foreignexchange/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2019-01-17-fx-foreignexchange/</guid>
      <description>currency pairs  Direct ccy: means USD is part of currency pair Cross ccy: means ccy wihtout USD, so except NDF, the deal will be split to legs, both with USD. e.g. EUR/GBP will split to EURUSD and USDGBP non-convention ccy pair: that&amp;rsquo;s depends on where you sit on. e.g. for Aussie traders, they would trade AUDNZD, but for kiwi traders, they would trade for NZDAUD, then AUDNZD would be non-convention  </description>
    </item>
    
    <item>
      <title>Git commands notes</title>
      <link>http://todzhang.com/posts/2016-06-13-git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-06-13-git/</guid>
      <description>How to to list of what branch for a given commit $ git log --author todd --grep e2e $ git name-rev 78a4c4c340de70c726844e97233c58fa4738fea9 78a4c4c340de70c726844e97233c58fa4738fea9 remotes/origin/feature/term-deposit-protractors~1 To search keywords in js files only $ find . -name &amp;#39;*.js&amp;#39; | xargs grep -r &amp;#39;SearchKeywords&amp;#39; One line command to add and commit file git status --short | awk &amp;#39;{split($0, a);print a[2]}&amp;#39; | xargs git add &amp;amp;&amp;amp; git commit -m &amp;#39;summit status&amp;#39; to show files commited but not pushed git diff --stat --cached origin/feature/BRANCH_NAME to view file content changed git show PATH/FILE.</description>
    </item>
    
    <item>
      <title>git raise error filename too long when checkout</title>
      <link>http://todzhang.com/posts/2016-07-02-file-name-too-long-when-git-checkout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-07-02-file-name-too-long-when-git-checkout/</guid>
      <description>Symptoms: node_modules/grunt-contrib-imagemin/node_modules/pngquant-bin/node_modules/bin-wrapper/node_modules/download/node_modules/request/node_modules/form-data/node_modules/combined-stream/node_modules/delayed-stream/test/integration/test-handle-source-errors.js: Filename too long
solution  Execute following command  git config core.longpaths true  retry checkoutpap  </description>
    </item>
    
    <item>
      <title>Github page commands notes</title>
      <link>http://todzhang.com/posts/2016-06-13-github-pages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-06-13-github-pages/</guid>
      <description>404 error for customized domain (such as godday) 404 There is not a GitHub Pages site here.  Go to github master branch for gitpages site, manually add CNAME file  following lages are searchable in google  alice gihub  Travis errors: Got following errors in Travis page:
branch not included or excluded solution: that&amp;rsquo;s because your source branch, such as &amp;lsquo;blogSrc&amp;rsquo; should be added in whitelist of .travis.yml, for instance</description>
    </item>
    
    <item>
      <title>google analysis</title>
      <link>http://todzhang.com/posts/2017-09-04-google-analytics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2017-09-04-google-analytics/</guid>
      <description>How Page Value is calculated At a glance Page Value is the average value for a page that a user visited before landing on the goal page or completing an Ecommerce transaction (or both). This value is intended to give you an idea of which page in your site contributed more to your site&amp;rsquo;s revenue. If the page wasn&amp;rsquo;t involved in an ecommerce transaction for your website in any way, then the Page Value for that page will be $0 since the page was never visited in a session where a transaction occurred.</description>
    </item>
    
    <item>
      <title>Guice</title>
      <link>http://todzhang.com/posts/2018-09-18-google-guice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2018-09-18-google-guice/</guid>
      <description>A new type of Juice Put simply, Guice alleviates the need for factories and the use of new in your Java code. Think of Guice&amp;rsquo;s @Inject as the new new. You will still need to write factories in some cases, but your code will not depend directly on them. Your code will be easier to change, unit test and reuse in other contexts.
Guice embraces Java&amp;rsquo;s type safe nature, especially when it comes to features introduced in Java 5 such as generics and annotations.</description>
    </item>
    
    <item>
      <title>Hash Code Misc</title>
      <link>http://todzhang.com/posts/2016-12-30-hashcode-contract/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-12-30-hashcode-contract/</guid>
      <description>contract of hashCode :  Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result.</description>
    </item>
    
    <item>
      <title>HashMap in JDK</title>
      <link>http://todzhang.com/posts/2017-01-16-java-hashmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2017-01-16-java-hashmap/</guid>
      <description>Hashmap in JDK Some note worth points about hashmap  Lookup process  Step# 1: Quickly determine the bucket number in which this element may reside (using key.hashCode()). Step# 2: Go over the mini-list and return the element that matches the key (using key.equals()).   Immutability of keys In Node&amp;lt;K,V&amp;gt; node of hashMap, besides key, value, hash, there is Node next link inside. So undelrying table is a linked list.</description>
    </item>
    
    <item>
      <title>Head First Blockchina 1</title>
      <link>http://todzhang.com/posts/2016-09-11-head-first-blockchian-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-09-11-head-first-blockchian-1/</guid>
      <description>深入浅出区块链系统：第一章. what you should know about blockchain
考虑的大家现在很多都是碎片化阅读，不知道大家如何，反正如果我是在在只有很短一段时间里，不太容易切换状态静下心来读一篇洋洋洒洒的长文章。因此此系统会保持短小精悍，把整套分成一系列小文章，每个文章有分成若干个段（sections）。既KISS原则，查看这里什么是KISS.
目前区块链（blockchain）应该是在最近比较火的新技术之一了，这个不光在银行金融行业，也在其他诸多行业逐渐成为热点。区块链基于被认为是继互联网之后最重要的技术发明之一。看到过很多关于区块链的文章，要么是太过于学术，要么又局限于某个行业领域。对于一般人来说不太容易去理解其所以然。因此，笔者提笔自己写一个关于区块链的系列文章，以方便大家。
比特币 说到区块链就不得不提比特币。在进入讨论blockchain之前，先上张图片。 这个是在说雷曼兄弟公司的破产，背景是发生于2008年金融危机。当时被媒体及世人厌恶的贪婪，低效的传统金融体系垮塌，与此同时，不知道是不是巧合，比特币（bitcoin）诞生了（其实电子货币已经有几十年的历史了）。
比特币，就像是美元，人民币一样是个货币，只是这个是数字化的货币，没有一个具体的国家或者机构管理。既然是货币就要拿来用，要流通。当有任何变动，就会产生所谓的 money in money out， balance changed。即这些比特币的变动，最新的余额是多少，等都要记录下来。在现实世界中，这些记录在具体你的每个银行账户中，由一些监管机构监视并确保准确性。
但是比特币是个电子货币，没有一个具体的营业监管机构。怎么破？
这时区块链就被发明出来（大约是在2009年），区块链起源于比特币，就是当比特币从一个人转移到另一个人时，用于记录这些变动。换句话说，区块链（Blockchain） 就是比特币（bitcoin）的不可变动（immutable）的记账系统。
记账 有人可能会觉得“记账系统”太过于笼统，不太明白，因此首先这里说一下什么是记账，举个例子，你在淘宝上买东西，整个过程需要有多个记账操作，包括可能需要在购物车里添加一条记录，你买好了需要在商家那里记一笔账，然后支付时需要记下一笔，快递再需要记录一笔。如果你买的不是一般的小东西，比如是一个房子，那样还要在相关管理部门还要记录一笔。 有没有发现这个是非常低效的，需要花费很多的重复资源的过程？换句话说，这些低效都是最终都要转嫁到我们消费者头上。区块链却在设计之初很好的解决上面这些弊端。
什么是区块链 区块链是专门针对比特币设计开发的记账系统，用于所有比特币的记账。因为区块链本身良好的设计，区块链被服务于比特币仅仅只是一个用例和开端，其还可以用于很多地方。
记住这几个词可以帮助理解什么是区块链  chain/链。 像下面这个图，数据的组织是由一个一个大小相同的块(block)组成一个链条(chain)，就像是DNA里每个基因有机的组织在一起。 .  下面使用一个例子来解释一下。当有如下三个操作时就会在区块链中添加三条记录。
  去中心化，或者说是“分布式” ， 也就是具体的这些记账数据是分布式的散落在各个节点，而且每个节点都存有一份所有的交易。这样有个好处，就是每个交易有多份副本，互相之间可以对比查对，那些欺诈，篡改数据就没有可能了。其实，传统金融业有一个问题就是各个金融机构间互相的不信任，想像一下在2008年金融危机时，各个金融机构竞相抢购那些credit default derivatives等产品，就是因为大家对对方的不信任所引起的。
  挖矿。 “矿工”，其实就是链中一个个能够保存对账信息的节点的别名. 当有新的对账或者交易时，应该就是把数据写到某个节点，然后再需要加入到区块链中时。但问题是“链”只有一个，节点有很多，到底由哪个节点来完成这个任务呢？解决办法就是“打”，看谁厉害。其实就是许多的矿工节点会互相竞争，使用一些非常耗费计算资源，后台使用复杂的算法，最后使用一种叫做 PoW （Proof Of Work,是一种快速断定工作量的技术，比如你安排工人来给把一车箱子从仓库搬到车间，你并不需要从一开始紧盯着他去搬每一个箱子，只要看到最终的所有的箱子都已经在车间，即可证明他做完了工作，可以给相应的报酬了。这个我们在后续章节详细解释）的机制来决定最终哪个节点获胜，由它有资格来写这个区块，并加入到区块链中，同时这个获胜的节点可以得到相应财务上的奖励，即若干的比特币，这也正是不断激励人们投入更加强大计算能力的机器来挖矿的原因。这个过程被比特币平台很好的控制节奏，也就是大概每10分钟左右产生一个新的“区块”以添加到区块链路中。
  可以参考https://blockchain.info/?currency=CNY， 这里是以人民币滚动显示当前所有挖矿的更新，下图是此屏幕截图。 区块链的应用领域 金融业 对于金融业来说，在进行远程转账时一直在使用的所谓“关系银行”，比如你想要通过中国工商银行给朋友在澳洲的汇丰银行的账户转账，这时在中间可能要经过在香港的汇丰以及悉尼的银行等多个第三方机构来中转，不光要多花手续费，真正拿到手时可能已经1周时间过去了。如果使用区块链，转账其实就是添加一个“对账”信息块并加入到区块链中即可，对方银行可以立即在链中发现此交易。这样此过程就流水化（streamline）了，就跟发个电子邮件似的。 相对于之前，区块链会有3个优势，（1）不需要经过第三方 （2）快 （3）省钱
一般商业公司 设想一下普通办公场景，一般业务处理都会涉及到许多纸制的表格，文件，请多文件的复印件等等。一是方便文件信息的传递，记录，另外一个原因是为了应付内部外部的审计。如果使用区块链，这些问题都得到很好的解决。比如，由于区块链的系统架构，其本身数据就是自动审计的。简言之，在这个领域，区块链有3大优势，（1）数据透明（2）数据安全性验证（3）审计。
对于零售行业 比如说你想知道这个食品是不是有机食品，而每个环节的数据都是散落在各个地方，不便于统一追踪。另外，数据的来源又是多种多样，又容易被篡改，比如作为一个钻石加工商，我是无法确定这批钻石是不是血钻。而“区块链”本身的特性保证了可以跟踪产品生命周期的每个阶段详细信息，而且区块链的“只能添加”的属性也确保了数据数据的准确性，不容易被后期篡改。因此区块链也可以用以政府类的投票，这样就更加具有合法性，不可能被人为篡改结果。
小结 以上的案例都涉及到一个关键词 “信任”。 你不信任供应链路，你不信任 “相关银行”， 等。但是你可以信任 “区块链”，它是允许多个不同的机构一起协同工作，但是不需要他们之间相互信任。</description>
    </item>
    
    <item>
      <title>Head First Blockchina 3</title>
      <link>http://todzhang.com/posts/2016-10-19-head-first-blockchian-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-10-19-head-first-blockchian-3/</guid>
      <description>Hyperledger Fabric for Mortals
 HyperLedger, from Arvind Krishna, Director of IBM research lab, meant to cross borders. e.g. for credit ledger, the importer and exporter in China need to make preparations few months beforehand, this is similiar to Marco Polo went to China 300 years ago.
Another usage in stock market is stock loan, by using blockchain, we are going to know whose the stock came from. And the borrowers need to know who can borrow, and I need to prepare collaterials, need to check whether it comply with the processes, when I pay it back, etc.</description>
    </item>
    
    <item>
      <title>heavy load web application</title>
      <link>http://todzhang.com/posts/2016-06-29-heavy-load-web-app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-06-29-heavy-load-web-app/</guid>
      <description>Common solutions With cache + hash, seems nothing is impossible.
hash When involving big data, heavey load and concurrent, the ultimate solution is hash, such as random insert, time complexity O(1) etc, the only downside is waste of space, however, storage is cheap recently. hash is one must-have for concurrent systems.
cache There are many mature cache mechanism, such as KV DB like memcache, redis, and they are supporting clusters, operatibility is good as well.</description>
    </item>
    
    <item>
      <title>How to customize Sublime syntax highlights</title>
      <link>http://todzhang.com/posts/2016-10-06-sublime-syntax-highlights/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-10-06-sublime-syntax-highlights/</guid>
      <description>Reference  Sublime Scope Naming Syntax Guide  </description>
    </item>
    
    <item>
      <title>How to setup nodejs to install package from intranet</title>
      <link>http://todzhang.com/posts/2018-05-15-how-to-setup-node-config-in-intranet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2018-05-15-how-to-setup-node-config-in-intranet/</guid>
      <description>Error of &amp;lsquo;ECONNRESET&amp;rsquo; You may face error ECONNRESET from intranet, even appropriate proxy tools (e.g. cntlm) is running. The errors may looks like
$ npm install -g @angular/cli@latest npm WARN registry Unexpected warning for http://registry.npmjs.org/: Miscellaneous Warning ECONNRESET: request to http://registry.npmjs.org/@angular%2fcli failed, reason: read ECONNRESET npm WARN registry Using stale package data from http://registry.npmjs.org/ due to a request error during revalidation. npm ERR! code ECONNRESET npm ERR! errno ECONNRESET npm ERR!</description>
    </item>
    
    <item>
      <title>http methods</title>
      <link>http://todzhang.com/posts/2016-09-01-http-methods-rfc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-09-01-http-methods-rfc/</guid>
      <description>RFC origion http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.1.2)
part of Hypertext Transfer Protocol &amp;ndash; HTTP/1.1 RFC 2616 Fielding, et al. 9 Method Definitions
The set of common methods for HTTP/1.1 is defined below. Although this set can be expanded, additional methods cannot be assumed to share the same semantics for separately extended clients and servers.
The Host request-header field (section 14.23) MUST accompany all HTTP/1.1 requests.
9.1 Safe and Idempotent Methods
9.1.1 Safe Methods
Implementors should be aware that the software represents the user in their interactions over the Internet, and should be careful to allow the user to be aware of any actions they might take which may have an unexpected significance to themselves or others.</description>
    </item>
    
    <item>
      <title>HTTPS/2</title>
      <link>http://todzhang.com/posts/2016-06-14-http-https2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-06-14-http-https2/</guid>
      <description>concepts  HTTP : 传统 HTTP 采用明文，完全开放的编码，缺少加解密功能，很容易遭受窃取、篡改等安全威胁。尤其涉及在线交易的网站，遭遇攻击如同家常便饭。 HTTPS : HTTPS 协议传输过程全程加解密，相当于增加了一层 SSL/TSL 分层协议的 HTTP，让访问更加安全。 HTTPS2 : HTTP/2 本身是 HTTP 协议自 1999 年发表后的第一次更新，于 2015 年 5 月正式发布。掐指一算，这个协议积累了 16 年才更新，憋了这么久，放的一定是大招，它的更新主要体现在多路复用，二进制传输，使用 HPACK 压缩头部信息，服务端 Push 。  </description>
    </item>
    
    <item>
      <title>iConnect</title>
      <link>http://todzhang.com/posts/2016-08-04-iconnect/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-08-04-iconnect/</guid>
      <description>UI HTML5, AngularJS, BootStrap, REST API, JSON
Backend Hadoop core (HDFS), Hive, HBase, MapReduce, Oozie, Pig, Solr</description>
    </item>
    
    <item>
      <title>IntelliJ Tips</title>
      <link>http://todzhang.com/posts/2017-01-03-intellij-tips/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2017-01-03-intellij-tips/</guid>
      <description>Shortcuts   Ctrl+J: To show JavaDoc
  Cmd+Alt+B: To show interface implementations
  Alt+Enter: when cursor on class declare line, press Alt+Enter can quickly create a unit test against this test class
  Ctrl+Shift+A: Action window, just like sublime, search IDE actions
  F11: add bookmark,
  Shift+F11: show bookmarks
  Shift + Escape: close bottom source pannel or left side barGo to settings, Editor-&amp;gt;General-&amp;gt;Mouse-&amp;gt; change font size (Zoom)</description>
    </item>
    
    <item>
      <title>Inter Processes Communication</title>
      <link>http://todzhang.com/posts/2019-01-03-ipc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2019-01-03-ipc/</guid>
      <description>IPC interprocess communication (IPC)
Posted by: Margaret Rouse WhatIs.com
Interprocess communication (IPC) is a set of programming interfaces that allow a programmer to coordinate activities among different program processes that can run concurrently in an operating system. This allows a program to handle many user requests at the same time. Since even a single user request may result in multiple processes running in the operating system on the user&amp;rsquo;s behalf, the processes need to communicate with each other.</description>
    </item>
    
    <item>
      <title>iOS programming</title>
      <link>http://todzhang.com/posts/2018-01-06-ios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2018-01-06-ios/</guid>
      <description>View A view is also a responder (UIView is a subclass of UIResponder). This means that a view is subject to user interactions, such as taps and swipes. Thus, views are the basis not only of the interface that the user sees, but also of the interface that the user touches
The Window and Root View The top of the view hierarchy is the app’s window. It is an instance of UIWindow (or your own subclass thereof), which is a UIView subclass.</description>
    </item>
    
    <item>
      <title>IT-Architect</title>
      <link>http://todzhang.com/posts/2017-01-26-it-architect/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2017-01-26-it-architect/</guid>
      <description>SOA  SOA is a set of design principles for building a suite of interoperable, flexible and reusable services based architecture. top-down and bottom-up approach SOA patterns  Design Patterns Singleton  Being single sometimes has its advantages you know. I’m often used to manage pools of resources, like connection or thread pools. The Singleton Pattern ensures a class has only one instance, and provides a global point of access to it.</description>
    </item>
    
    <item>
      <title>Java 8 Tips</title>
      <link>http://todzhang.com/posts/2017-01-14-java-8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2017-01-14-java-8/</guid>
      <description>This blog is listing key new features introduced in Java 8 It is best to think of a lambda expression as a function, not an object, and to accept that it can be converted to a functional interface.
New comparator method in Java 8 List&amp;lt;Track&amp;gt; tracks = asList(new Track(&amp;#34;Bakai&amp;#34;, 524), new Track(&amp;#34;Violets for Your Furs&amp;#34;, 378), new Track(&amp;#34;Time Was&amp;#34;, 451)); Track shortestTrack = tracks.stream() .min(Comparator.comparing(track -&amp;gt; track.getLength())) .get(); assertEquals(tracks.get(1), shortestTrack); When we think about maximum and minimum elements, the first thing we need to think about is the ordering that we’re going to be using.</description>
    </item>
    
    <item>
      <title>Java Class Loader</title>
      <link>http://todzhang.com/posts/2016-02-25-java-class-loader/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-02-25-java-class-loader/</guid>
      <description>Codecache  The maximum size of the code cache is set via the -XX:ReservedCodeCacheSize=N flag (where N is the default just mentioned for the particular compiler). The code cache is managed like most memory in the JVM: there is an initial size (specified by -XX:InitialCodeCacheSize=N). Allocation of the code cache size starts at the initial size and increases as the cache fills up. The total of native and heap memory used by the JVM yields the total footprint of an application.</description>
    </item>
    
    <item>
      <title>Java Collections Misc</title>
      <link>http://todzhang.com/posts/2017-01-17-java-collections-misc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2017-01-17-java-collections-misc/</guid>
      <description>Difference between equals and deepEquals of Arrays in Java  Arrays.equals() method does not compare recursively if an array contains another array on other hand Arrays.deepEquals() method compare recursively if an array contains another array. Arrays.equals() check is if element is null or not and then calls equals() method, it does not check for Array type. It&amp;rsquo;s better to use Arrays.equals() to compare non-nested Array and Arrays.deepEquals() to compare nested Array, as former is faster than later in the case of non-nested Array.</description>
    </item>
    
    <item>
      <title>Java Deep Notes</title>
      <link>http://todzhang.com/posts/2020-05-10-java-deep-notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2020-05-10-java-deep-notes/</guid>
      <description>Java Deep Notes
Is string concatenation a devil? In fact, a string concatenation is going to be just fine, as the javac compiler will optimize the string concatenation as a series of append operations on a StringBuilder anyway. Here&amp;rsquo;s a part of the disassembly of the bytecode from the for loop from the above program:</description>
    </item>
    
    <item>
      <title>Java Enum Misc</title>
      <link>http://todzhang.com/posts/2017-01-02-enum-misc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2017-01-02-enum-misc/</guid>
      <description>Enum Misc  All enums implicitely extends java.lang.Enum Enum in Java are type-safe You can specify values of enum constants at the creation time. Enum.values() returns an array of MyEnum’s values. Enum constants are implicitly static and final and can not be changed once created. Enum can be safely compare using:  Switch-Case Statement == Operator .equals() method   You can not create instance of enums by using new operator in Java because constructor of Enum in Java can only be private and Enums constants can only be created inside Enums itself.</description>
    </item>
    
    <item>
      <title>Java GC notes</title>
      <link>http://todzhang.com/posts/2016-12-30-java-gc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-12-30-java-gc/</guid>
      <description>verbose:gc verbose:gc prints right after each gc collection and prints details about each generation memory details. Here is blog on how to read verbose gc
If you are trying to look for memory leak, verbose:gc may not be enough. Use some visualization tools like jhat (or) visualvm etc.,
4416K-&amp;gt;512K(4928K), 0.0081170 secs
Before GC used memory is 4416K After GC used memory is 512K Total allocated memory is 4928K
-verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:C:/Users/tzhang17/temp/gc/gc.</description>
    </item>
    
    <item>
      <title>Java JIT compiler</title>
      <link>http://todzhang.com/posts/2017-02-21-java-jit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2017-02-21-java-jit/</guid>
      <description>This is talking about Java JIT (Just-In-Time) compiler   That trade-off is one reason that the compiler executes the interpreted code first—the compiler can figure out which methods are called frequently enough to warrant their compilation. The second reason is one of optimization: the more times that the JVM executes a particular method or loop, the more information it has about that code. This allows the JVM to make a number of optimizations when it compiles the code.</description>
    </item>
    
    <item>
      <title>Java JVM</title>
      <link>http://todzhang.com/posts/2017-02-05-jvm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2017-02-05-jvm/</guid>
      <description>Class loading subsystem Consist of three sections
load There are three class loaders
 bootstrap class loader, e.g. rt.jar extension class loader, e.g. jre/lib/ext application class loader, e.g. -cp  Link  Verify Prepare Resolve  Initialize  While deadlock is the most widely encountered liveness hazard, there are sev- eral other liveness hazards you may encounter in concurrent programs including starvation, missed signals, and livelock.  Metaspace Since Java 8, the introduce of metaspace is kind of using memory or even virtual memory in OS, so theriotically there is no limit of metaspace.</description>
    </item>
    
    <item>
      <title>Java new features</title>
      <link>http://todzhang.com/posts/2016-12-01-java-new-features-chronicle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-12-01-java-new-features-chronicle/</guid>
      <description>JDK Versions  JDK 1.5 in 2005 JDK 1.6 in 2006 JDK 1.7 in 2011 JDK 1.8 in 2014 Sun之前风光无限，但是在2010年1月27号被Oracle收购。 在被Oracle收购后对外承诺要回到每2年一个realse的节奏。但是2014年就公布由于Java Security的问题delay一年  Java新功能一览  Generics Concurrent Framework Numberic Literal Lambda  JDK New release vs. Stock Price 最近在做一个Java项目的相关工作，发现很多程序员还在使用一些最基本的Java语言特性，其实可以理解为很多人入门Java要么在学校里要么通过某些书籍，而这些在国内的学习资料更新比较慢，很多都还是基于JDK1.4或者更老。其实Java这个语言一直在进步。下面我就以Java最近几个主版本引入的新功能来梳理一下这些“黑科技”
Java 1.5 这个版本个人认为在Java最近10年的历史中是一个最重要的升级。JDK1.5，内部版本号是Tiger，引入了一些颠覆性的功能，列在如下： Generics Conncurrecnt Framework，应该是继Collection Framework后又一个块头的“框架”了。
Java 1.6 所有上面提到的东西，包括此文章的markdown源代码，mindmap思维导图等等都可以在我的github上找到。联系我：
 phray.zhang@gmail.com (email/邮件，whatsapp, linkedin) helloworld_2000 (wechat/微信) github  Reference  JDK History  </description>
    </item>
    
    <item>
      <title>Java New IO</title>
      <link>http://todzhang.com/posts/2017-02-02-java-new-io/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2017-02-02-java-new-io/</guid>
      <description>Notes  JDK 1.0 introduced rudimentary I/O facilities for accessing the file system (to create a directory, remove a file, or perform another task), accessing file content randomly (as opposed to sequentially), and streaming byte-oriented data between sources and destinations in a sequential manner.  </description>
    </item>
    
    <item>
      <title>Java Pesistence API Notes</title>
      <link>http://todzhang.com/posts/2020-06-21-jpa-notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2020-06-21-jpa-notes/</guid>
      <description>JPA
As you create Session from a SessionFactory, it’s not hard to understand that you use EntityManagerFactory to create an instance of EntityManager. However, because JPA is a standard applicable to Enterprise and Standalone applications, there are a couple of modes for obtaining or creating the EntityManagerFactory itself—one that will be created in a managed environment such as Application Servers or Web containers while the other in a standalone application.</description>
    </item>
    
    <item>
      <title>Java Security Notes</title>
      <link>http://todzhang.com/posts/2017-02-15-java-security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2017-02-15-java-security/</guid>
      <description>Java Security  well-behaved: programs should be prevent from consuming too much system resources  Components  JCE: Java Cryptography Extension JSSE: Java Secure Socketets Extension JAAS: Java Authentication and Authorization Service  Anatomy of a Java Application the bytecode verifier The bytecode verifier ensures that Java class files follow the rules of the Java language. As the figure implies, not all classes are subject to bytecode verification.
the class loader One or more class loaders load all Java classes.</description>
    </item>
    
    <item>
      <title>Java-Tricky-Tech-Questions.md</title>
      <link>http://todzhang.com/posts/2017-01-19-java-tricky-tech-questions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2017-01-19-java-tricky-tech-questions/</guid>
      <description>What is the difference between Serializable and Externalizable in Java?  In earlier version of Java, reflection was very slow, and so serializaing large object graphs (e.g. in client-server RMI applications) was a bit of a performance problem. To handle this situation, the java.io.Externalizable interface was provided, which is like java.io.Serializable but with custom-written mechanisms to perform the marshalling and unmarshalling functions (you need to implement readExternal and writeExternal methods on your class).</description>
    </item>
    
    <item>
      <title>JavaScript tips</title>
      <link>http://todzhang.com/posts/2016-06-12-javascript-tips/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-06-12-javascript-tips/</guid>
      <description>includes() vs some()   The includes() method is used to check if a specific string exists in a collection, and returns true or false. Keep in mind that it is case sensitive: if the item inside the collection is SCHOOL, and you search for school, it will return false.
  The some() method checks if some elements exists in an array, and returns true or false. This is somewhat similar to the concept of the includes() method, the key diffence is the argument is a function but not a string.</description>
    </item>
    
    <item>
      <title>Jboss tips</title>
      <link>http://todzhang.com/posts/2018-06-14-jboss-console/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2018-06-14-jboss-console/</guid>
      <description>commands: to list all deployed applications jboss\jboss-eap-6.4\bin\jboss-cli.bat &amp;ndash;connect &amp;ndash;controller=localhost:7373 &amp;ndash;command=/deployment=*:read-attribute(name=name)
to list JNDI tree: cd /subsystem=mail ls /subsystem=mail/mail-session=java:jboss/mail/payment_mail /subsystem=naming:jndi-view() }, &amp;#34;mail&amp;#34; =&amp;gt; { &amp;#34;class-name&amp;#34; =&amp;gt; &amp;#34;javax.naming.Context&amp;#34;, &amp;#34;children&amp;#34; =&amp;gt; { &amp;#34;Default&amp;#34; =&amp;gt; { &amp;#34;class-name&amp;#34; =&amp;gt; &amp;#34;javax.mail.Session&amp;#34;, &amp;#34;value&amp;#34; =&amp;gt; &amp;#34;javax.mail.Session@22951e8f&amp;#34; }, &amp;#34;payment_mail&amp;#34; =&amp;gt; { &amp;#34;class-name&amp;#34; =&amp;gt; &amp;#34;javax.mail.Session&amp;#34;, &amp;#34;value&amp;#34; =&amp;gt; &amp;#34;javax.mail.Session@548df9e2&amp;#34; } } }, &amp;lt;management-interfaces&amp;gt; &amp;lt;native-interface security-realm=&amp;#34;ManagementRealm&amp;#34;&amp;gt; &amp;lt;socket-binding native=&amp;#34;management-native&amp;#34;/&amp;gt; &amp;lt;/native-interface&amp;gt; &amp;lt;http-interface security-realm=&amp;#34;ManagementRealm&amp;#34;&amp;gt; &amp;lt;socket-binding http=&amp;#34;management-http&amp;#34;/&amp;gt; &amp;lt;/http-interface&amp;gt; &amp;lt;/management-interfaces&amp;gt; &amp;lt;/management&amp;gt; xxx &amp;lt;socket-binding-group name=&amp;#34;standard-sockets&amp;#34; default-interface=&amp;#34;public&amp;#34; port-offset=&amp;#34;${jboss.socket.binding.port-offset:0}&amp;#34;&amp;gt; &amp;lt;socket-binding name=&amp;#34;management-native&amp;#34; interface=&amp;#34;management&amp;#34; port=&amp;#34;${jboss.</description>
    </item>
    
    <item>
      <title>JDK source</title>
      <link>http://todzhang.com/posts/2017-06-24-jdk-sources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2017-06-24-jdk-sources/</guid>
      <description>interface RandomAccess Marker interface used by List implementations to indicate that they support fast (generally constant time) random access. The primary purpose of this interface is to allow generic algorithms to alter their behavior to provide good performance when applied to either random or sequential access lists.
Such a List implementation should generally implement this interface. As a rule of thumb, a List implementation should implement this interface if, for typical instances of the class, this loop:</description>
    </item>
    
    <item>
      <title>JetBrains/IntelliJ tips</title>
      <link>http://todzhang.com/posts/2016-09-14-jetbrains-tips/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-09-14-jetbrains-tips/</guid>
      <description>Shortcuts Open files by name To navigate to a class, file or symbol with the specified name:
On the main menu, point to Navigate, and then choose Class, File, or Symbol respectively, or use the following shortcuts: Class: ⌘O File (directory): ⇧⌘O Symbol: ⌥⌘O
Search keywords in files Shift+Command+F: Fine in path
Re-open files Command +E</description>
    </item>
    
    <item>
      <title>JSON lines</title>
      <link>http://todzhang.com/posts/2016-11-05-json-lines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-11-05-json-lines/</guid>
      <description>JSON lines The JSON Lines format is useful because it’s stream-like, you can easily append new records to it. It doesn’t have the same problem of JSON when you run twice. Also, as each record is a separate line, you can process big files without having to fit everything in memory, there are tools like JQ to help doing that at the command-line.
Reference  http://jsonlines.org https://en.wikipedia.org/wiki/JSON_Streaming   </description>
    </item>
    
    <item>
      <title>JXM</title>
      <link>http://todzhang.com/posts/2018-07-10-jmx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2018-07-10-jmx/</guid>
      <description>Exporting your beans to JMX The core class in Spring&amp;rsquo;s JMX framework is the MBeanExporter. This class is responsible for taking your Spring beans and registering them with a JMX MBeanServer.
when running inside a container that does not provide an MBeanServer. To address this you can create an MBeanServer instance declaratively by adding an instance of the org.springframework.jmx.support.MBeanServerFactoryBean class to your configuration. You can also ensure that a specific MBeanServer is used by setting the value of the MBeanExporter&amp;rsquo;s server property to the MBeanServer value returned by an MBeanServerFactoryBean</description>
    </item>
    
    <item>
      <title>Kafka</title>
      <link>http://todzhang.com/posts/2019-07-07-kafka/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2019-07-07-kafka/</guid>
      <description>Kafka Kafka is fast. A single node can handle hundreds of read/writes from thousands of clients in real time. Kafka is also distributed and scalable. It creates and takes down nodes in an elastic manner, without incurring any downtime. Data streams are split into partitions and spread over different brokers for capability and redundancy.
History of Kafka The result was a publish/subscribe messaging system that had an interface typical of messaging systems but a storage layer more like a log-aggregation system.</description>
    </item>
    
    <item>
      <title>Kafka In Spring</title>
      <link>http://todzhang.com/posts/2019-09-02-kafka-in-spring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2019-09-02-kafka-in-spring/</guid>
      <description>Enable Kafka listener annotated endpoints that are created under the covers by a AbstractListenerContainerFactory. To be used on Configuration classes as follows: @Configuration @EnableKafka public class AppConfig { @Bean public ConcurrentKafkaListenerContainerFactory myKafkaListenerContainerFactory() { ConcurrentKafkaListenerContainerFactory factory = new ConcurrentKafkaListenerContainerFactory(); factory.setConsumerFactory(consumerFactory()); factory.setConcurrency(4); return factory; } // other @Bean definitions }
The KafkaListenerContainerFactory is responsible to create the listener container for a particular endpoint. Typical implementations, as the ConcurrentKafkaListenerContainerFactory used in the sample above, provides the necessary configuration options that are supported by the underlying MessageListenerContainer.</description>
    </item>
    
    <item>
      <title>KDB</title>
      <link>http://todzhang.com/posts/2018-06-12-kdb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2018-06-12-kdb/</guid>
      <description>KDB However kdb+ evaluates expressions right-to-left. There are no precedence rules. The reason commonly given for this behaviour is that it is a much simpler to understand system, many q-gods would agree, beginners however may not.
The kdb+ built-in commands are mostly a single letter. If a system command that is not built-in is entered, that command will be passed to the underlying operating system.
Created with financial institutions in mind, the database was developed as a central repository to store time series data that supports real-time analysis of billions of records.</description>
    </item>
    
    <item>
      <title>kibana, view layer of elasticsearch</title>
      <link>http://todzhang.com/posts/2016-08-11-kibana/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-08-11-kibana/</guid>
      <description>What&amp;rsquo;s Kibana kibana is an open source data visualization plugin for Elasticsearch. It provides visualization capabilities on top of the content indexed on an Elasticsearch cluster. Users can create bar, line and scatter plots, or pie charts and maps on top of large volumes of data.
Why Kibana  Flexible analytics and visualization platform Real-time summary and charting of streaming data Intuitive interface for a variety of users Instant sharing and embedding of dashboards  Reference digital ocean setup ELK</description>
    </item>
    
    <item>
      <title>kibana, view layer of elasticsearch</title>
      <link>http://todzhang.com/posts/2016-08-11-sentry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-08-11-sentry/</guid>
      <description>What&amp;rsquo;s Kibana kibana is an open source data visualization plugin for Elasticsearch. It provides visualization capabilities on top of the content indexed on an Elasticsearch cluster. Users can create bar, line and scatter plots, or pie charts and maps on top of large volumes of data.
Why Kibana  Flexible analytics and visualization platform Real-time summary and charting of streaming data Intuitive interface for a variety of users Instant sharing and embedding of dashboards  Reference digital ocean setup ELK</description>
    </item>
    
    <item>
      <title>Kubernetes 与 Docker Swarm的对比</title>
      <link>http://todzhang.com/posts/2016-09-04-kubernets-vs-swarm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-09-04-kubernets-vs-swarm/</guid>
      <description>Kubernetes 和Docker Swarm 可能是使用最广泛的工具，用于在集群环境中部署容器。但是这两个工具还是有很大的差别。
Kubernetes Google根据其在Linux上容器管理经验，改造到docker管理上，就是kubernetes。他的在许多方面表现良好。最重要的是构造于Google多年的宝贵经验只上。
如果你从docker1.0以上开始使用kubernetes，你得到的用户体验会非常良好。比如你会发现kubernetes解决一些docker自身的问题。例如你可以mount（绑定）持久化存储卷（volume），以便于在迁移docker时不至于丢失数据。
kubernetes使用flannel（一个使用go写的虚拟网络的开源系统）构造容器间的网络通信。它还内置有负载均衡。除此之外，它的“服务发现”使用了etcd（一个使用golang编写的开源虚拟网络系统）。然而，使用kubernetes是有代价的。首先，它用一个不同的命令行接口，不同的编程接口及不同的YAML文件定义等。换言之，你不能使用docker命令行接口也不能用docker compose来定义容器。为了使用kubernetes，所有所有的东西都需要从头开始。这就好像这个工具并不是为了docker写的一样（这个在某种程度上确实是）。kubernetes把集群带到了一个全新的高度，代价是学习曲线比较陡。
Docker Swarm docker-swarm 使用了一个不同的方式。它是docker原生的集群工具。
最方便的部分是它暴露了docker标准的编程接口，意味着你之前一直在使用的任何与docker沟通的工具（docker命令行接口，docker compose，dokku，krane等等），都可以无缝的在docker swarm上使用。
这个其实是个双刃剑，毁誉参半。一直可以使用自己得心应手熟悉的工具，这再好不过了，然而，这样意味着我们又被docker紧紧的“耦合”了（而非业界一直追求的松耦合”）。如果你需要的都能满足，那皆大欢喜。可是如果不是呢，要是你有特殊需求这些API满足不了怎么办？这是就不得不去耍一些“小聪明”。
我们来仔细剖析下这两个工具，主要会从如何在集群中运行容器，这两个工具分别如何安装以及他们提供的功能。
安装设置 安装设置swarm非常简单，简单明了并且很灵活。我们需要做的就是安装一个服务发现工具，然后在所有的节点上安装swarm容器。因为它自己就是以一个docker容器来部署的，因此它在不同的操作系统上运行方式都是没有差别的。我们运行swarm容器，开放一个端口，然后告知服务发现模块的地址。这不能再简单了。我们甚至可以在没有任何服务发现模块的情况下开始使用，来看看我们是否喜欢它，当开始真正认真的要使用时再去添加etcd，consul或者其他支持的工具。
相比较而言，kubernetes的安装就有点复杂晦涩了。不同的操作系统上安装都不同。每个操作系统都有自己的独立安装指令和运维团队。比如说，如果你选择使用vagrant来试用，然后在Fedora这里遇到问题卡住了，但这不是意味着其他的（比如Ubuntu或者coreos）也不能用。你可以，不过要开始在kubernetes官方以外到处搜索. 你所需要的很可能在某个社区论坛里提供的解决方案，但是你需要时间去查询，运气好的话可以在第一次尝试就能用。一个严重的问题是安装kubernetes依赖于bash脚本。如果我们是处于配置管理不是必须的情况下是，这个本身可能不是大问题。我们可能不希望运行一个脚本，而是希望kubernetes成为puppet，chef或者ansible的一部分。同样，这个也是可以解决的。你可以找到ansible 的安装手册来动行kubernetes或者你自己去写。跟swarm比这些都不是什么大问题,只是一点点的小痛苦而已。使用刀砍请不要期待任何的安装文档，除非都可使用docker命令行的时候运行的参数而已。我们打算去运行容器，swarm可以实现这个，但kubernetes 没有。有些人可能并不在意具体是使用哪个服务发现的工具。我喜欢swarm背后提倡的那种极简风格，以及他背后的逻辑，内置电池，拆留由已。任何东西都是拆箱可用但是我们还提供了选项让你去替换其中的任一个模块。
与swarm不同的是，kubernetes 是一个可配置的工具。你需要跟kubernetes提供的各个选项来共生存。例如，如果你打算使用kubernets,你必须要使用etcd.我不是说etcd不好(实际上正好相反)，但是如果你习惯于，比如你在非常复杂的业务场景下使用consul，如果要使用服务发现，必须特别针对kubernets使用一个，而剩下的其他部分使用其他一个产品。另外一个对使用Kubernets觉得不方便的地方就是你需要在事先了解各种事情。比如，你需要告诉他要用到的所有节点的地址，每个节点的职责是什么,这个集群有多少个“小黄人” (minion,是kubernet对于一个集群中机器之前叫的名字)，等等。 而使用Swarm，我们只需要启动一个节点，告诉他加入网络，就可以了。我们不需要提前告诉关于集群其他的信息，因为这些信息会通过各个节点间的 “八卦”（gossip protocol）来传输。
配置本身也许并不是这些工具之间最大的差别。不管你使用哪个工具，或早或晚，所有都会配置好并运行起来，到时候你们就会忘掉在配置时的痛苦经历。你可能会说我们之所以选择某个工具就是因为它安装配置简单吧。很公平的。我们继续往下讨论如何定义容器及之上的这些工具。
运行容器 如果使用Swarm来运行Docker容器，你如何去定义所有的参数呢？ 实际上你根本不需要！你所做的跟使用Swarm之前没有什么不同。比如，你习惯于使用Docker CLI（命令行接口），你可以继续使用几乎相同的命令。如果你习惯于使用Docker Componse来运行容器，你可以继续在Swarm集群中使用。不管你之前习惯于怎么使用容器，你仍旧可以使用，只是在更大级别的集群中使用。
Kubernetes要求你去学习它自己的CLI（命令行接口）和配置。你不能使用你之前创建的docker-compose.yml配置，你必须要去新建与Kubernetes对应的配置。你也不能使用之前学习的Docker CLI（命令行接口）。你必须要去学习 Kubernetes CLI（命令行接口），并且很有可能，确保你整个公司机构也要去学习。
不管你选择哪个工具来部署集群，你都要先熟悉Docker。你可能已经习惯于使用 使用Docker Compose来定义你运行容器的参数。如果你曾经使用它超过几个小时，你可能就会直接使用它而扔掉Docker CLI。你可以使用它运行容器，跟踪日志变化，等等。另外一方面，你可能是Docker的 “死忠”，看不上 Docker Compose，而是任何事都使用Docker CLI，或者你甚至自己写bash脚本来运行容器。不管哪种方式，这些都可以在Docker Swarm上使用。
如果你选择Kubernetes，请先准备好同一件事需要有多个定义配置。你需要使用 Docker Compose来运行Kubernetes范围外的容器。开发人员需要继续在他们的笔记本电脑上运行容器，你的测试环境可能也不是一个大集群，等等。换言之，如果你选择了Docker，那么 Docker Compose 和 Docker CLI将是不可避免的。你肯定会在某些地方或者以某种方式用到它们。一旦你开始使用 Kubernetes，你就会发现你所有的 Docker Compose的配置都要翻译成 Kubernetes的方式，从这个时候，你也要开始维护这两个版本了。使用 Kubernetes，这些重复的事情意味着维护成本的提高。重复只是一个问题，另外的是你在集群中运行的命令将于集群外使用的命令不一样了。你之前学习并喜爱的Docker的所有命令在 Kubernetes集群内将是完全行不通了。
Kubernetes的开发团队强制你去按照他们的办事方式行事，其实不是为了让你过的那么苦。如此巨大差别的主要原因是 Swarm 和 Kubernetes针对同一问题采取了不同的处理手段。 Swarm团队决定使用跟Docker相同的API接口，因此我们看到这些之前有如此好的兼容性。结果就是，你可以使用几乎所有之前的东西，只是在更大级别的集群中使用而已。没有新的东西要去做，不需要去重复配置参数，也不需要去新学习什么。不管你是直接使用Docker CLIgipj使用Swarm，这些API接口是基本上一致的。不好的方面是如果你想Swarm去做某件事，但是这个在Docker API中没有，这样你就悲催了。简单来说，如果你在找一个工具，可以部署使用Docker API的容器到集群中，那么 Swarm就是解决方案。另一方面，如果你想要一个工具，可以解决Docker API办不到的事情，你就应该去试试 Kubernetes了。这就是功能性（ Kubernetes）VS.</description>
    </item>
    
    <item>
      <title>Linux Tips</title>
      <link>http://todzhang.com/posts/2016-06-10-linux-tips/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-06-10-linux-tips/</guid>
      <description>Get permission denied error when sudo su (or hyphen in sudo command) bash: /home/YOURNAME/.bashrc: Permission denied That&amp;rsquo;s because you didn&amp;rsquo;t add &amp;ldquo;-&amp;rdquo; hyphen in your sudo command.
The difference between &amp;ldquo;-&amp;rdquo; and &amp;ldquo;no hyphen&amp;rdquo; is that the latter keeps your existing environment (variables, etc); the former creates a new environment (with the settings of the actual user, not your own).
The hyphen has two effects:
  switches from the current directory to the home directory of the new user (e.</description>
    </item>
    
    <item>
      <title>Load Balancing</title>
      <link>http://todzhang.com/posts/2016-06-07-load-balancing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-06-07-load-balancing/</guid>
      <description>Concepts LVS means Linux Virtual Server, which is one Linux built-in component.
Some logics of LVS Never Queue Shceduling  The never queue scheduling algorithm adpots a two-speed model
  When there is an idel server avaiable, the job will be sent to the idel server, instead of waiting for a fast one. When there is no idel server avaiable, the job will be sent to the server that minimize it&amp;rsquo;s expected delay.</description>
    </item>
    
    <item>
      <title>Locking and multithreading</title>
      <link>http://todzhang.com/posts/2018-06-12-locking-and-multithreading/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2018-06-12-locking-and-multithreading/</guid>
      <description>Single Writer principle There is a lot of research in computer science for managing this contention that boils down to 2 basic approaches. One is to provide mutual exclusion to the contended resource while the mutation takes place; the other is to take an optimistic strategy and swap in the changes if the underlying resource has not changed while you created the new copy.
Memory Barier Memory barriers, or fences, are a set of processor instructions used to apply ordering limitations on memory operations.</description>
    </item>
    
    <item>
      <title>Mac tips</title>
      <link>http://todzhang.com/posts/2016-09-01-mac-tips/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-09-01-mac-tips/</guid>
      <description>how to switch differnt input This can be configured in system proferenece-&amp;gt;keyboard shortcuts-&amp;gt;input sources-&amp;gt;select next source in input Ctrl+Alt+Space
How to force an app to quit on your Mac Press these three keys together: Option, Command, and Esc (Escape). This is similar to pressing Control-Alt-Delete on a PC. Or choose Force Quit from the Apple () menu in the upper-left corner of your screen.
To capture screenshot of Mac Press Shift + Command + 5, then click an option, like Selection button to capture a still selection or Whole screen button to record your whole screen.</description>
    </item>
    
    <item>
      <title>Maven-Notes</title>
      <link>http://todzhang.com/posts/2017-02-03-maven-notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2017-02-03-maven-notes/</guid>
      <description>Maven philosophy  “It is important to note that in the pom.xml file you specify the what and not the how. The pom.xml file can also serve as a documentation tool, conveying your project dependencies and their versions.”  Concepts Life cycles Maven defines three Lifecycles ֠default, clean and site and each Lifecycle consists of predefined Phases.
The clean argument which we pass to mvn command is phase which is in lifecycle named clean.</description>
    </item>
    
    <item>
      <title>Microservices vs. SOA</title>
      <link>http://todzhang.com/posts/2016-05-31-microservices-vs-soa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-05-31-microservices-vs-soa/</guid>
      <description>Microservice  Services are organized around capabilities, e.g., user interface front-end, recommendation, logistics, billing, etc. Services are small in size, messaging enabled, bounded by contexts, autonomously developed, independently deployable, decentralized and built and released with automated processes. resource-oriented computing (ROC) as a generalized form of the Web abstraction. If in the Unix abstraction &amp;ldquo;everything is a file&amp;rdquo;, in ROC, everything is a &amp;ldquo;Micro-Web-Service&amp;rdquo;  Philosophy The philosophy of the microservices architecture essentially equates to the Unix philosophy of &amp;ldquo;Do one thing and do it well&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Mifid</title>
      <link>http://todzhang.com/posts/2019-01-17-mifid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2019-01-17-mifid/</guid>
      <description>FX Spot is not covered by the regulation, as it is not considered to be a financial instrument by ESMA, the European Union (EU) regulator. As FX is considered “illiquid” it does not have pre-trade reporting requirements.
Recordkeeping – MiFID II requires firms to keep extensive records of all transactions, communications, services and activities for 10 years, in order for them to be able to provide transparency into the trade life cycle.</description>
    </item>
    
    <item>
      <title>Minium Viable Product</title>
      <link>http://todzhang.com/posts/2018-02-27-mvp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2018-02-27-mvp/</guid>
      <description>https://blog.leanstack.com/minimum-viable-product-mvp-7e280b0b9418
What is a Minimum Viable Product (MVP) A Minimum Viable Product is the smallest thing you can build that delivers customer value (and as a bonus captures some of that value back i.e. gets you paid).</description>
    </item>
    
    <item>
      <title>Mockito</title>
      <link>http://todzhang.com/posts/2018-09-03-distruptor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2018-09-03-distruptor/</guid>
      <description>Feature There only 2 things you can do with Mockito mocks - verify or stub. Stubbing goes before execution and verification afterwards.
References  https://github.com/mockito/mockito/wiki/Mockito-vs-EasyMock  </description>
    </item>
    
    <item>
      <title>NavigableMap Misc</title>
      <link>http://todzhang.com/posts/2017-01-19-java-navigablemap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2017-01-19-java-navigablemap/</guid>
      <description>What is NavigableMap  NavigableMap in Java 6 is an extension of SortedMap like TreeMap which provides convenient navigation method like lowerKey, floorKey, ceilingKey and higherKey. NavigableMap is added on Java 1.6 and along with these popular navigation method it also provide ways to create a Sub Map from existing Map in Java e.g. headMap whose keys are less than specified key, tailMap whose keys are greater than specified key and a subMap which is strictly contains keys which falls between toKey and fromKey.</description>
    </item>
    
    <item>
      <title>Network Protocols</title>
      <link>http://todzhang.com/posts/2017-01-28-network-protocols/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2017-01-28-network-protocols/</guid>
      <description>Net Protocols  Like most models, this OSI physical layer contains the electrical, mechanical, and functional means to establish physical connections between Layer-2 devices. In addition to interfacing with the Network Layer, the data link connection can be built upon one or more physical layer interfaces.   </description>
    </item>
    
    <item>
      <title>ngrx</title>
      <link>http://todzhang.com/posts/2018-01-08-ngrx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2018-01-08-ngrx/</guid>
      <description>Why @Effects? In a simple ngrx/store project without ngrx/effects there is really no good place to put your async calls. Suppose a user clicks on a button or types into an input box and then we need to make an asynchronous call. The dumb component will be the first to know about this action from the user, and it’s handler will be called when the button is actually clicked. However, we don’t want to put the logic to do our async call right in the dumb component since we want to keep it dumb!</description>
    </item>
    
    <item>
      <title>Node errors troubleshooting</title>
      <link>http://todzhang.com/posts/2018-05-11-node-errors-db/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2018-05-11-node-errors-db/</guid>
      <description>Here is the typical erros log:
node_modules/@types/node/index.d.ts(6202,55): error TS2304: Cannot find name &amp;#39;Map&amp;#39;. node_modules/@types/node/index.d.ts(6209,55): error TS2304: Cannot find name &amp;#39;Set&amp;#39;. node_modules/@types/node/index.d.ts(6213,64): error TS2304: Cannot find name &amp;#39;Symbol&amp;#39;. node_modules/@types/node/index.d.ts(6219,59): error TS2304: Cannot find name &amp;#39;WeakMap&amp;#39;. node_modules/@types/node/index.d.ts(6220,59): error TS2304: Cannot find name &amp;#39;WeakSet&amp;#39;. The main reason is above stuff are new to ES6, which are unavaiable in ES5. Hold no, you don&amp;rsquo;t need to change your typescript target to ES6, which may break projects and leads to tons of new regression testing.</description>
    </item>
    
    <item>
      <title>NodeJs Notes</title>
      <link>http://todzhang.com/posts/2018-03-18-nodejs-notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2018-03-18-nodejs-notes/</guid>
      <description>commands to read files var lineReader = require(&amp;lsquo;readline&amp;rsquo;).createInterface({ input: require(&amp;lsquo;fs&amp;rsquo;).createReadStream(&amp;lsquo;C:\dev\node\input\git_reset_files.txt&amp;rsquo;) });
lineReader.on(&amp;lsquo;line&amp;rsquo;, function(line){ console.log(&amp;lsquo;git checkout &amp;lsquo;+line); });</description>
    </item>
    
    <item>
      <title>Openshift tips</title>
      <link>http://todzhang.com/posts/2017-11-29-openshift/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2017-11-29-openshift/</guid>
      <description>Commands bible install cli in Mac brew install openshift-cli Frequently used commands Start mini shift minishift start OC commands oc config view Start a new application oc new-app https://github.com/openshift/nodejs-ex -l name=toddapp To switch project oc project Show a high level overview of the current project oc status # Export the overview of the current project in an svg file. oc status -o dot | dot -T svg -o project.svg # See an overview of the current project including details for any identified issues.</description>
    </item>
    
    <item>
      <title>Oracle</title>
      <link>http://todzhang.com/posts/2017-03-13-oracle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2017-03-13-oracle/</guid>
      <description>ORA-12899: Value Too Large for Column  SQL&amp;gt; SELECT value$ FROM sys.props$ WHERE name = &amp;#39;NLS_CHARACTERSET&amp;#39; ; VALUE$ -------------------------------------------------------------------------  AL32UTF8 SELECT * FROM NLS_DATABASE_PARAMETERS select user from dual; u43888859@hkl105482$ lsnrctl services DHKCUSTD LSNRCTL for Linux: Version 12.1.0.2.0 - Production on 28-FEB-2017 06:40:53 Copyright (c) 1991, 2014, Oracle. All rights reserved. Connecting to (DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=hkl105482.hk.hsbc)(PORT=2001))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=DHKCUSTD.hk.hsbc))) Services Summary... Service &amp;#34;DHKCUSTD.hk.hsbc&amp;#34; has 1 instance(s). Instance &amp;#34;DHKCUSTD&amp;#34;, status READY, has 1 handler(s) for this service.</description>
    </item>
    
    <item>
      <title>Portactor</title>
      <link>http://todzhang.com/posts/2018-06-07-protractor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2018-06-07-protractor/</guid>
      <description>Better to use smart wait If possible, you&amp;rsquo;d better to use smart wait in protractor e2e testing. Which could increase end to end testing efficiency. Normally dev tend to use sleep or wait to insert some stop during execution. What&amp;rsquo;s the difference of these two? The difference between browser.sleep() and browser.wait() is that browser.wait() expects a specific value/condition. This wait condition is valid of Protractor or any WebDriver framework.
An Expectation for checking an element is visible and enabled such that you can click it.</description>
    </item>
    
    <item>
      <title>Presto DB</title>
      <link>http://todzhang.com/posts/2018-08-15-prestodb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2018-08-15-prestodb/</guid>
      <description>WHAT IS PRESTO? Presto is an open source distributed SQL query engine for running interactive analytic queries against data sources of all sizes ranging from gigabytes to petabytes.
Presto was designed and written from the ground up for interactive analytics and approaches the speed of commercial data warehouses while scaling to the size of organizations like Facebook.
Introduction Presto is a distributed system that runs on a cluster of machines. A full installation includes a coordinator and multiple workers.</description>
    </item>
    
    <item>
      <title>promise vs observiable</title>
      <link>http://todzhang.com/posts/2017-12-01-promise-vs-observable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2017-12-01-promise-vs-observable/</guid>
      <description>The drawback of using Promises is that they’re unable to handle data sources that produce more than one value, like mouse movements or sequences of bytes in a file stream. Also, they lack the ability to retry from failure—all present in RxJS.
The most important downside, moreover, is that because Promises are immutable, they can’t be cancelled. So, for instance, if you use a Promise to wrap the value of a remote HTTP call, there’s no hook or mechanism for you to cancel that work.</description>
    </item>
    
    <item>
      <title>Protobuf</title>
      <link>http://todzhang.com/posts/2018-08-23-protobuf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2018-08-23-protobuf/</guid>
      <description>What are protocol buffers? Protocol buffers are a flexible, efficient, automated mechanism for serializing structured data – think XML, but smaller, faster, and simpler.
You define how you want your data to be structured once, then you can use special generated source code to easily write and read your structured data to and from a variety of data streams and using a variety of languages. You can even update your data structure without breaking deployed programs that are compiled against the &amp;ldquo;old&amp;rdquo; format.</description>
    </item>
    
    <item>
      <title>Python</title>
      <link>http://todzhang.com/posts/2016-06-05-python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-06-05-python/</guid>
      <description>(&#39;&amp;mdash;&amp;ndash;Unexpected error:&amp;rsquo;, &amp;lt;type &amp;lsquo;exceptions.TypeError&#39;&amp;gt;) datetime.datetime.now()
Python items Test item,
MapReduce的设计灵感来自于函数式编程，这里不打算提MapReduce，就拿python中的map()函数来学习一下
Single Qutoe vs Double Quote There is no difference between using single quotes and double quotes in Python
Generators presentation: http://www.dabeaz.com/generators/Generators.pdf
wwwlog=open(&amp;#39;weblog.debug&amp;#39;) bytecolumn=(line.rsplit(None,1)[1] for line in wwwlog) bytes=(int(x) for x in bytecolumn if x!=&amp;#39;-&amp;#39;) print &amp;#34;total:&amp;#34;, sum(bytes) Generator as a pipeline At each step, we declare an operation that will be applied to the entire input stream, like rsplit to all lines of the input log file.</description>
    </item>
    
    <item>
      <title>Python Scraphy</title>
      <link>http://todzhang.com/posts/2016-11-04-python-scrapy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-11-04-python-scrapy/</guid>
      <description>Python Scraphy &amp;lsquo;https://www.seek.com.au/jobs-in-information-communication-technology?highpay=True&amp;amp;salaryrange=150000-999999&amp;amp;salarytype=annual&#39;
scrapy shell httxxxx scrapy extrac
   response.css(&amp;lsquo;title::text&amp;rsquo;).re(r&amp;rsquo;Quotes.*&#39;) [&amp;lsquo;Quotes to Scrape&amp;rsquo;]
      response.css(&amp;lsquo;title::text&amp;rsquo;)[0].extract() &amp;lsquo;Quotes to Scrape&amp;rsquo;
      response.xpath(&#39;//title&amp;rsquo;)
   view(response)
Reference  https://doc.scrapy.org/en/latest/intro/tutorial.html   </description>
    </item>
    
    <item>
      <title>QuickFixJ</title>
      <link>http://todzhang.com/posts/2018-07-10-quickfixj/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2018-07-10-quickfixj/</guid>
      <description>Settings A settings file is set up with two types of heading, a [DEFAULT] and a [SESSION] heading. [SESSION] tells QuickFIX/J that a new Session is being defined. [DEFAULT] is a place that you can define settings which will be inherited by sessions that do not explicitly define them. If you do not provide a setting that QuickFIX/J needs, it will throw a ConfigError telling you what setting is missing or improperly formatted.</description>
    </item>
    
    <item>
      <title>R Language</title>
      <link>http://todzhang.com/posts/2017-02-09-r-lang/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2017-02-09-r-lang/</guid>
      <description>s&amp;lt;-read.csv(&amp;#34;C:/Users/xxx/dev/R/IRS/SHH_SCHISHG.csv&amp;#34;) # aggregate  s2&amp;lt;-table(s$Original.CP) s3&amp;lt;-as.data.frame(s2) # extract by Frequency ordered  s3[order(-s3$Freq),] </description>
    </item>
    
    <item>
      <title>Random number in java</title>
      <link>http://todzhang.com/posts/2016-12-09-headsfirst-randomnumber-in-java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-12-09-headsfirst-randomnumber-in-java/</guid>
      <description>ThreadLocalRandom, SecureRandm, java.util.Random, java.math.Random
Instances of java.util.Random are threadsafe. However, the concurrent use of the same java.util.Random instance across threads may encounter contention and consequent poor performance. Consider instead using ThreadLocalRandom in multithreaded designs.
The Java Math library function Math.random() generates a double value in the range [0,1). Notice this range does not include the 1.
int rand = ThreadLocalRandom.current().nextInt(x,y); Reference  How to generate a range of random integers in Java Random JavaDoc SecureRandom JavaDoc ThreadLocalRandom JavaDoc Apache Common Math LCG wikipedia Blog about this topic ImportNew  </description>
    </item>
    
    <item>
      <title>reactive programing</title>
      <link>http://todzhang.com/posts/2017-12-11-why-reactive-programming-is-outpermant/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2017-12-11-why-reactive-programming-is-outpermant/</guid>
      <description>The second advantage to a lazy subscription is that the observable doesn’t hold onto data by default. In the previous example, each event generated by the interval will be processed and then dropped. This is what we mean when we say that the observable is streaming in nature rather than pooled. This discard-by-default semantic means that you never have to worry about unbounded memory growth sneaking up on you, causing memory leaks.</description>
    </item>
    
    <item>
      <title>Redux</title>
      <link>http://todzhang.com/posts/2017-12-12-redux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2017-12-12-redux/</guid>
      <description>whats @Effects You can almost think of your Effects as special kinds of reducer functions that are meant to be a place for you to put your async calls in such a way that the returned data can then be easily inserted into the store’s internal state for the application.
rule of a thumb for actions As a good rule of thumb, try not to make one reducer that handles all the actions, but also do not make a separate reducer for each action.</description>
    </item>
    
    <item>
      <title>RenMinBi International</title>
      <link>http://todzhang.com/posts/2016-06-13-rqfii/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-06-13-rqfii/</guid>
      <description>RQFII RQFII stands for Renminbi Qualified Foreign Institutional Investor. RQFII was introduced in 2011 to allow qualified foreign institutional investors to use RMB to buy securities such as bonds and shares and other investment instruments listed on the Chinese market. RQFII is an extension of the Qualified Foreign Institutional Investor (QFII) scheme established in 2002.
What is the difference between QFII and RQFII? QFII (Qualified Foreign Institutional Investor) allows institutional investors to buy shares in mainland Chinese companies (A-shares) listed on stock exchanges in China.</description>
    </item>
    
    <item>
      <title>Router in angular</title>
      <link>http://todzhang.com/posts/2017-12-10-rxjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2017-12-10-rxjs/</guid>
      <description>Lettable operators RxJS 5.5, piping all the things
So now we want a way to use those operators, how could we do that?
Well, we said those operators are “lettable” that means we can use them by calling the let method on an observable:
And if we want to chain multiple lettable operators we can keep dot chaining:
import { Observable } from &amp;lsquo;rxjs/Rx&amp;rsquo;; import { filter, map, reduce } from &amp;lsquo;rxjs/operators&amp;rsquo;;</description>
    </item>
    
    <item>
      <title>rxjs pipe in depth</title>
      <link>http://todzhang.com/posts/2018-05-15-rxjs-pipe-in-depth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2018-05-15-rxjs-pipe-in-depth/</guid>
      <description>https://stormforger.com/blog/2016/07/08/types-of-performance-testing/
Learn more about load testing, scalability testing, stress, spike and soak testing, configuration testing as well as availability and resilience testing.
&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;15/05/2018 notes &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; https://blog.hackages.io/rxjs-5-5-piping-all-the-things-9d469d1b3f44 RxJS 5.5, piping all the things
So now we want a way to use those operators, how could we do that?
Well, we said those operators are “lettable” that means we can use them by calling the let method on an observable:
And if we want to chain multiple lettable operators we can keep dot chaining:</description>
    </item>
    
    <item>
      <title>RxJS reactive extension javascript</title>
      <link>http://todzhang.com/posts/2017-12-08-router-in-angular/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2017-12-08-router-in-angular/</guid>
      <description>Streams Traditionally, the term stream was used in programming languages as an abstract object related to I/O operations such as reading a file, reading a socket, or requesting data from an HTTP server. For instance, Node.js implements readable, writable, and duplex streams for doing just this. In the RP world, we expand the definition of a stream to mean any data source that can be consumed.
A$ = [20]; 1 B$ = [22]; 2 C$ = A$.</description>
    </item>
    
    <item>
      <title>Scala</title>
      <link>http://todzhang.com/posts/2018-07-28-scala/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2018-07-28-scala/</guid>
      <description>Scala String Scala offers the magic of implicit conver‐ sions, String instances also have access to all the methods of the StringOps class, so you can do many other things with them, such as treating a String instance as a sequence of characters. As a result, you can iterate over every character in the string using the foreach method:
scala&amp;gt; &amp;#34;hello&amp;#34;.foreach(println) h e l l o //You can treat a String as a sequence of characters in a for loop: scala&amp;gt; for (c &amp;lt;- &amp;#34;hello&amp;#34;) println(c) scala&amp;gt; val result = &amp;#34;hello world&amp;#34;.</description>
    </item>
    
    <item>
      <title>Seconds</title>
      <link>http://todzhang.com/posts/2018-11-01-seconds/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2018-11-01-seconds/</guid>
      <description>nano seconds ns: 1/1,000,000,000 second, i.e. 10(-9) seconds 1 ns = 1/1,000 micro second 1 ns = 1/1,000,000 milis second
used in telecommunications
micro seconds Its symbol is μs. 微秒 1 μs = 1000 ns 1 μs = 1/1,000 milli Seconds
8.01 μs： light took the time to travel 1 mile in vaccum
The average human eye blink takes 350,000 microseconds (just over 1/3 of one second). The average human finger snap takes 150,000 microseconds (just over 1/7 of one second).</description>
    </item>
    
    <item>
      <title>SeriableVersionUID</title>
      <link>http://todzhang.com/posts/2017-02-14-serialversionuid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2017-02-14-serialversionuid/</guid>
      <description>Noteworthy points about SeriableVersionUID in Java Preventing ClassCastExceptions with SerialVersionUID Problem  Your classes were recompiled, and you’re getting ClassCastExceptions that you shouldn’t. Solution Run serialver to generate a “serial version UUID” and paste its output into your classes before you start. Or use your IDE’s tools for this purpose. Discussion When a class is undergoing a period of evolution—particularly a class being used in a networking context such as RMI or servlets—it may be useful to provide a serialVersionUID value in this class.</description>
    </item>
    
    <item>
      <title>Setup Git in Mint Linux</title>
      <link>http://todzhang.com/posts/2016-06-01-setup-git-in-mint/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-06-01-setup-git-in-mint/</guid>
      <description>How to setup Git in Mint Linux =================================================
 git config &amp;ndash;global user.name &amp;ldquo;Todd Zhang&amp;rdquo; git config &amp;ndash;global user.email phray.zhang@gmail.com git config &amp;ndash;list git clone https://github.com/todzhanglei/todzhanglei.github.io git config &amp;ndash;global credential.helper cache git config &amp;ndash;global credential.helper &amp;lsquo;cache &amp;ndash;timeout=36000&amp;rsquo;  To add remote git remote add origin https://github.com/CloudsDocker/cloudsdocker.github.io.git Above command will add the remote URL with alias &amp;ldquo;origin&amp;rdquo;
To pull specific branch git pull origin blogSrc Errors Error: The following untracked working tree files would be overwritten by checkout git clean -d -fx &amp;#34;&amp;#34; </description>
    </item>
    
    <item>
      <title>Setup WebSphere profiles and application in command line</title>
      <link>http://todzhang.com/posts/2017-03-30-websphere-setp-via-cli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2017-03-30-websphere-setp-via-cli/</guid>
      <description>Setup WebSphere profiles and application in command line Background &amp;amp; descriptions  Beginning with V8.5, WebSphere Application Server provides two runtime profiles. Every WebSphere Application Server package includes both profile types.  Full WebSphere Application Server Liberty profile    What&amp;rsquo;s profile?   Simply put, a profile contains an Application Server. When an Application Server is running, the server process may read and write data to the underlying configuration files and logs.</description>
    </item>
    
    <item>
      <title>Simpler chronicle of CI(Continuous Integration) “乱弹系列”之持续集成工具</title>
      <link>http://todzhang.com/posts/2016-10-26-continuous-integretaion-simpler-chronicle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-10-26-continuous-integretaion-simpler-chronicle/</guid>
      <description>引言 有句话说有人的地方就有江湖，同样，有江湖的地方就有恩怨。在软件行业历史长河（虽然相对于其他行业来说，软件行业的历史实在太短了，但是确是充满了智慧的碰撞也是十分的精彩）中有一些恩怨情愁，分分合合的小故事，比如类似的有，从一套代码发展出来后面由于合同到期就分道扬镳，然后各自发展成独门产品的Sybase DB和微软的SQL Server；另外一个例子是，当时JBPM的两个主要开发的小伙伴离开当时的RedHat，在JBPM基础上自立门户新创建的Java工作流管理软件Activiti，等等。在持续集成工具龙头老大这个宝座，也曾经发生过合作合并，吵架分家，再对着干的事情，今天分享一下这前前后后有趣的故事。
DevOps 首先，防止__先入为主__,以为大家都知道这个那个的。先普及下相关背景知识，如果已经了解的同学可以跳过。目前在软件工程领域已经火了好几年的DevOps领域，核心的模块就是CI与&amp;rsquo;CD&amp;rsquo;，即Continuous Integration与Continuous Deployment,也就是持续集成与持续部署，这个对于处于敏捷开发环境下尤其是互联网等需要高速迭代是个核心的功能，可以说没有CI，就不可能达到像Google或者Facebook这些一天有多个release的情况。
CI CI(Continuous Integration) 持续集成起源于 XP(极限编程)与 TDD (Test Driven Develop)也就是__以测试驱动__的开发模式，是防止出现所谓的&amp;rsquo;集成地狱&amp;rsquo;,即防止程序员在正常编码工作中，需要写新的业务逻辑，添加新的代码，但是同时也新引入了bug。CI会持续的（重复的）进行一些小的工作，比如不断的跑测试用例，去扫描代码等工作。以减轻或者很大程度上避免这个个新引入的bug对软件交付质量引起的负面影响。目前，市场上有很多的CI解决方案及工具，常用的如下几个，
CI 的进化史 世界上本来没有CI,用的人多了也就成就了CI。本来软件工程里是没有这个概念的。最开始，就像下图中描述的帝国时代里，整个社会节奏平稳而缓慢，每个程序员自己做自己的开发，然后各自把自己的工作上次（提交），整个团队把代码放在一起，然后整个人过来，启动make/build，后面有个人去把编译好的代码放到测试机器上，每个程序员自己或者单独的测试团队去测试程序，如果没有问题，另外的人去发布到生产环境上。这些都是或多或少由人手工去做的。
但是就像很多人类的发明就是为了人类&amp;quot;偷懒&amp;quot;一样，CI慢慢在一些想偷懒的牛人脑子里形成。这其中就有Kent Beck （多说一句，这个现在工作于Facebook的牛人，还发明创造了很多到现在还在流行的东西，比如Agile敏捷开发，以JUnit为代码的xUnit测试理念，TDD测试驱动开发等等），在上个世纪最后几年，Kent Beck创造了XP（注意这个不是Bill的那个XP操作系统），是eXtreme Programming，即极限编程。虽然现在看起来极限编程有很多很诡异不太现实的方式，比如两个程序员坐在一起，使用一台电脑一起写一段程序等天马行空的想法。但是其中一个理念就是“持续集成”（CI)。以此理念，后面出现了使用各种语言写的CI的工具，其中的老大是CruiseControl。这个就像是上图中那个跑车一样，在当时整个缓慢的大环境下其提升工作效率的效果十分的吸眼。
到了2005年，当时就职于Sun(没错，就是创造了Java的那家公司)的一个叫川口浩介（Kohsuke Kawaguchi）的日本人，就是上图这位“霓虹金”，敢于冒险，重新“发明轮子”，不顾如日中天的CruiseControl，设计并开发了一个新的持续集成的软件，起名叫做Hudson。它提供了很多强大的功能，比如提供插件机制，这样就使其几乎集成了市面上所有的源代码管理工具，比如CVS, Subversion, Git, Perforce等。除此之外，它还提供了界面的扩展能力，另外还支持基于Apache Ant 和 Apache Maven的项目，除了xNix,还支持Windows环境等一众强大功能。听起来这么牛逼的工具，很快，在大约2007年的时候Hudson已经超越CruiseControl。然后在2008年5月的JavaOne大会上，Hudson获得了开发解决方案类的Duke&amp;rsquo;s Choice奖项。从此，小弟翻身做大哥，Hudson成为CI的代名词。其主要开发者 Kohsuke Kawaguchi 还获得了Google-O&amp;rsquo;Reilly Open Source Award。他后来也不用自己苦逼的写代码了，只要到处受邀去演讲做是如何受什么启发创造并发明了这么好的工具，造福大批程序员。再后来他还离职创立了公司CloudBees，出任CEO，迎娶白富美，走上人生新巅峰。（也难怪上图中他笑的如此开心）
一切看起来都是那么美好。但是，天有不测风云，在2009年6月，Oracle收购Sun，所有人都蒙逼了，是不是写反了？一个传统数据库的公司收购了在Java及开源老大的Sun？！！这个消息公布之后，两个公司内部各个产品及项目就被整合，调整，Hudson也不例外。这也就算了，反正谁给钱不是干活哪，但是在2010年9月，Oracle竟然暗戳啜的把Hudson变成了注册商标。2010年11月，Hudson社区的核心开发人员发现了这个事情，他们觉得这对于一个一直标榜自己是开源CI领域“诚实可靠小郎君”的Hudson来说是个玷污。双方进行了会谈，过程不太友好，然后就不出意料的谈崩了。2011年圣诞节过后，几个秃顶的大叔觉得不要再跟Oracle的律师在这里瞎扯淡了，他们决定自立门户，自己起个新的名字叫Jenkins。然后凑钱注册网址，买服务器，列出下面的清单，统统改名，
 hudson-labs.org -&amp;gt; jenkins-ci.org @hudsonci -&amp;gt; @jenkinsci http://github.com/hudson -&amp;gt; http://github.com/jenkinsci hudson-dev -&amp;gt; jenkins-dev hudson-users -&amp;gt; jenkins-users hudson-commits -&amp;gt; jenkins-commits hudson-issues -&amp;gt; jenkins-issues  然后把代码fork出一份来（这里好笑的是Hudson与Jenkins都声称对方是自己这里的子分叉，都跟孩子斗气似的），即便分出来了，但是绝大部分还是基于之前的核心代码，所以你可以通过下图看到Hudson与Jenkins的界面都十分类似。
Jenkins的界面 Hudson的界面 但是有一个值得注意的地方就是两个系统的logo，其中Hudson是一个高傲的老头子，而Jenkins是一个谦卑为你服务的老头子。
分家之后，Hudson有Oracle和Sonatype&amp;rsquo;s corporate的支持和Hudson的注册商标，而Jenkins拥有的是大多数的核心开发者，社区，和后续更多的commit。比如下图是分家之后两个软件的对比。两个软件的活跃程度十分明显，Jenkins遥遥领先。</description>
    </item>
    
    <item>
      <title>Solace MQ</title>
      <link>http://todzhang.com/posts/2018-07-04-solace-mq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2018-07-04-solace-mq/</guid>
      <description>Solace PubSub+ It is a message broker that lets you establish event-driven interactions between applications and microservices across hybrid cloud environments using open APIs and protocols.
Deployment Cloud PubSub+ Cloud is enterprise-grade messaging available as a fully managed service in your favorite public clouds.
What do we mean by “enterprise grade?” Unrivaled Reliability Intelligent routing protocols always identify best path and adapt around network issues to keep your applications humming, and automatic message buffering keeps bursts of data from affecting slow consumers or your system as a whole.</description>
    </item>
    
    <item>
      <title>Something about authentication</title>
      <link>http://todzhang.com/posts/2016-06-29-something-about-authentication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-06-29-something-about-authentication/</guid>
      <description>It&amp;rsquo;s annoying to keep on repeating typing same login and password when you access multiple systems within office or for systems in external Internet. There are bunch of tools / technicles to cater for such. To my best knowledge, I&amp;rsquo;ll illustrate some as below.
SSO (Single Sign On) After you successfully log into one system, when you hop onto other systems, so you&amp;rsquo;ll no need to furhter re-enter your user name and password, and you&amp;rsquo;ll in &amp;lsquo;logged in status&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>Something about RESTful architect</title>
      <link>http://todzhang.com/posts/2016-08-02-restful/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-08-02-restful/</guid>
      <description>REST API must be hypertext driver Roy&amp;rsquo;s interview
Key points for a REST structure API designers, please note the following rules before calling your creation a REST API:
 A REST API should not be dependent on any single communication protocol, though its successful mapping to a given protocol may be dependent on the availability of metadata, choice of methods, etc. In general, any protocol element that uses a URI for identification must allow any URI scheme to be used for the sake of that identification.</description>
    </item>
    
    <item>
      <title>Spark-vs-Storm</title>
      <link>http://todzhang.com/posts/2016-08-30-spark-vs-storm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-08-30-spark-vs-storm/</guid>
      <description>The stark difference among Spark and Storm. Although both are claimed to process the streaming data in real time. But Spark processes it as micro-batches; whereas Storm processes per message - meaning if you intend to process things like social data, log data, etc.. you can actually apply CEP (Complex Event Processing) per tuples (i.e each social message in your example). Spark, on other hand is good at processing small blocks of data, for instance if you are streaming a whole blobs of data (say some huge files of medical record, for example).</description>
    </item>
    
    <item>
      <title>Spring notes</title>
      <link>http://todzhang.com/posts/2017-03-05-spring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2017-03-05-spring/</guid>
      <description>Spring Bean Life Cycle Callback Methods A bean life cycle includes the following steps.
 Within IoC container, a spring bean is created using class constructor. Now the dependency injection is performed using setter method. Once the dependency injection is completed, BeanNameAware.setBeanName() is called. It sets the name of bean in the bean factory that created this bean. Now &amp;lt; code&amp;gt;BeanClassLoaderAware.setBeanClassLoader() is called that supplies the bean class loader to a bean instance.</description>
    </item>
    
    <item>
      <title>SQL</title>
      <link>http://todzhang.com/posts/2016-06-14-sql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-06-14-sql/</guid>
      <description>Differences between not in, not exists , and left join with null  It seems to me that you can do the same thing in a SQL query using either NOT EXISTS, NOT IN, or LEFT JOIN WHERE IS NULL. For example:
 SELECT a FROM table1 WHERE a NOT IN (SELECT a FROM table2) SELECT a FROM table1 WHERE NOT EXISTS (SELECT * FROM table2 WHERE table1.a = table2.a) SELECT a FROM table1 LEFT JOIN table2 ON table1.</description>
    </item>
    
    <item>
      <title>SSH and Cryptography</title>
      <link>http://todzhang.com/posts/2017-02-06-ssh-cryptography/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2017-02-06-ssh-cryptography/</guid>
      <description>SFTP versus FTPS  SS: Secure Shell An increasing number of our customers are looking to move away from standard FTP for transferring data, so we are often asked which secure FTP protocol we recommend. In the next few paragraphs, we will explain what options are available and their main differences. The two mainstream protocols available for Secure FTP transfers are named SFTP (FTP over SSH) and FTPS (FTP over SSL).</description>
    </item>
    
    <item>
      <title>SSH SFTP</title>
      <link>http://todzhang.com/posts/2017-04-06-ssh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2017-04-06-ssh/</guid>
      <description>Secure FTP  SFTP over FTP is the equivalant of HTTPS over HTTP, the security version
 SFTP versus FTPS  An increasing number of our customers are looking to move away from standard FTP for transferring data, so we are often asked which secure FTP protocol we recommend. In the next few paragraphs, we will explain what options are available and their main differences. The two mainstream protocols available for Secure FTP transfers are named SFTP (FTP over SSH) and FTPS (FTP over SSL).</description>
    </item>
    
    <item>
      <title>Storage Management</title>
      <link>http://todzhang.com/posts/2016-06-03-storage-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-06-03-storage-management/</guid>
      <description>RAID RAID is Reductant Array Independent Disk,
JBOD JBOD is abbreviated from &amp;ldquo;Just a bunch of disks&amp;rdquo;, is an architecutre using multiple hard drives, but not in a RAID configuration, thus providing neither redundancy nor performance improvement.Hard drives may be handled independently as separate logical volumnes, or they may be combined into a single logical volume using a volume manager like LVM, such volumes are usually called &amp;ldquo;spanned&amp;rdquo;
LVM &amp;lsquo;LVM&amp;rsquo; means Logical Volume Manager, is part of Linux kenel, is a device mapper.</description>
    </item>
    
    <item>
      <title>Strategy-Of-Openshift-Releases</title>
      <link>http://todzhang.com/posts/2018-05-14-strategy-of-openshift-releases/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2018-05-14-strategy-of-openshift-releases/</guid>
      <description>Release &amp;amp; Testing Strategy There are various methods for safely releasing changes to Production. Each team must select what is appropriate for their own use case with consideration to risk, rollback approaches and testing approaches.
The following are options: Canary Release This is the lowest risk strategy since it allows for testing on a subset of users, and it allows for fast rollback:
 Build a new Environment Use a routing tool (eg.</description>
    </item>
    
    <item>
      <title>Sudo in a Nutshell</title>
      <link>http://todzhang.com/posts/2018-08-21-sudo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2018-08-21-sudo/</guid>
      <description>Sudo in a Nutshell Sudo (su &amp;ldquo;do&amp;rdquo;) allows a system administrator to give certain users (or groups of users) the ability to run some (or all) commands as root while logging all commands and arguments. Sudo operates on a per-command basis, it is not a replacement for the shell. Its features include:
The ability to restrict what commands a user may run on a per-host basis. Sudo does copious logging of each command, providing a clear audit trail of who did what.</description>
    </item>
    
    <item>
      <title>Terraform</title>
      <link>http://todzhang.com/posts/2019-07-26-terraform/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2019-07-26-terraform/</guid>
      <description>Why Terraform Software isn’t done when the code is working on your computer. It’s not done when the tests pass. And it’s not done when someone gives you a “ship it” on a code review. Software isn’t done until you deliver it to the user.</description>
    </item>
    
    <item>
      <title>tips in as400 IBM Emulator</title>
      <link>http://todzhang.com/posts/2016-06-29-tips-as400-ibm-emulator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-06-29-tips-as400-ibm-emulator/</guid>
      <description>Toggle crosshair  Open IBM personal communication client Go to menu Edit-&amp;gt;Preference-&amp;gt;Apperance-&amp;gt;Display settings-&amp;gt;Ruler change Rule style to crosshair or turn it off  </description>
    </item>
    
    <item>
      <title>TypeScript noteworthy notes</title>
      <link>http://todzhang.com/posts/2017-11-27-typescript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2017-11-27-typescript/</guid>
      <description>Async Await keywords Async Await Support in TypeScript Async - Await has been supported by TypeScript since version 1.7. Asynchronous functions are prefixed with the async keyword; await suspends the execution until an asynchronous function return promise is fulfilled and unwraps the value from the Promise returned. It was only supported for target es6 transpiling directly to ES6 generators.
Troubleshotting Unexpected token &amp;hellip; That&amp;rsquo;s because your node version is lower (e.</description>
    </item>
    
    <item>
      <title>unmodifiableList, unmodifiableSet,unmodifiableMap</title>
      <link>http://todzhang.com/posts/2016-08-12-unmodifiablecollection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-08-12-unmodifiablecollection/</guid>
      <description>What&amp;rsquo;s it Returns an unmodifiable view of the specified set. This method allows modules to provide users with &amp;ldquo;read-only&amp;rdquo; access to internal sets. Query operations on the returned set &amp;ldquo;read through&amp;rdquo; to the specified set, and attempts to modify the returned set, whether direct or via its iterator, result in an UnsupportedOperationException.Impelement logic In general, it re-created a new Collection, and inherit read-only methods from superclass, while raise Exception for those modify functions.</description>
    </item>
    
    <item>
      <title>Useful bookmarks</title>
      <link>http://todzhang.com/posts/2016-07-24-bookmarks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-07-24-bookmarks/</guid>
      <description>eBooks list of various books
Node.js install nodejs without admin access</description>
    </item>
    
    <item>
      <title>What is difference between declarations, providers and import in NgModule</title>
      <link>http://todzhang.com/posts/2018-01-11-angular-module-declaration-import/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2018-01-11-angular-module-declaration-import/</guid>
      <description>What is difference between declarations, providers and import in NgModule  imports: is used to import supporting modules likes FormsModule, RouterModule, CommonModule, or any other custom-made feature module. makes the exported declarations of other modules available in the current module declarations are to make directives (including components and pipes) from the current module available to other directives in the current module. Selectors of directives, components or pipes are only matched against the HTML if they are declared or imported.</description>
    </item>
    
    <item>
      <title>XA Transactions in 2PC</title>
      <link>http://todzhang.com/posts/2016-06-01-xa-2pc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-06-01-xa-2pc/</guid>
      <description>Description  2 phase commit protocol referred to as XA(eXtended Architecture) This protocol provides ACID-like properties for global transaction processing 2 phase commit protocol is an atomic commitment protocol for distributed systems. The first one is commit-request phase in which transaction manager coordinates all of the transaction resources to commit or abort. In the commit-phase, transaction manager decides to finalize operation by committing or aborting according to the votes of the each transaction resource.</description>
    </item>
    
    <item>
      <title>YAML</title>
      <link>http://todzhang.com/posts/2018-09-16-yaml-config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2018-09-16-yaml-config/</guid>
      <description>Key points All YAML files (regardless of their association with Ansible or not) can optionally begin with &amp;mdash; and end with &amp;hellip;. This is part of the YAML format and indicates the start and end of a document.
In a way, YAML is to JSON what Markdown is to HTML.
 References  https://developers.google.com/protocol-buffers/docs/overview  </description>
    </item>
    
    <item>
      <title>Zoo-keeper</title>
      <link>http://todzhang.com/posts/2018-08-19-zookeeper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2018-08-19-zookeeper/</guid>
      <description>ZK Motto  the motto &amp;ldquo;ZooKeeper: Because Coordinating Distributed Systems is a Zoo.&amp;rdquo;
 Features of Zookeeper  Synchronization − Mutual exclusion and co-operation between server processes. Ordered Messages - The strict ordering means that sophisticated synchronization primitives can be implemented at the client. Reliability - The reliability aspects keep it from being a single point of failure. Atomicity − Data transfer either succeeds or fails completely, but no transaction is partial.</description>
    </item>
    
    <item>
      <title>【原创】深入浅出区块链系统：第二章</title>
      <link>http://todzhang.com/posts/2016-10-13-head-first-blockchian-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-10-13-head-first-blockchian-2/</guid>
      <description>使用Solidity创建以太坊(Ethereum)智能合约(Smart Contract)
 引言 前面第一章 (位于微博上的链接)主要介绍了区块链的概念，我们知道区块链分为两大类，一是以公有链为代表的无权限控制区块链，第二是有权限控制的区块链，这个又包括了私有链(Private Blockchain,以Overstock为代表)和联盟链(Consortium Blockchain,以R3为代表)，相对于公有链来说，这些链一般都是没有电子货币，因为他们不需要像公有链那样要靠电子货币作为挖矿的奖励来激励参与，所以速度也是比较快的。
上一章都是讲的抽象的概括，下面我们就深入讲一些具体的东西，这样以便于大家有一个形象的概念，方便理解。我们这一章主要讲讲公有链，以方便讲解以及大家去继续研究，尝试，这里选择在公有链领域社区最为活跃以太坊（Ethereum），对于中国用户来说，其于2016年9月19号刚刚在中国上海举办了DevCon 2区块链峰会，很多人可能有所印象。第一步，这个东西怎么读啊？其实这是新构造的一个单词，而非一个已有的英语单词，其读作[i&amp;rsquo;θi:&amp;lsquo;riəm]。接下来我们会一起过一下涉及的一些概念，后面我会介绍几个如何进行太坊开发的技术工具，以及两个比较好用的应用框架。
大家都知道，学习一个新技术最好的方式就是亲自动手试一把，几乎学习所有新编程语言上来都会写个HelloWorld并运行一把，在这一章最后一部分我会手把手的带领大家创建并运行一个智能合约。
概念 Ethereum: Ethereum (官方链接) ，是个区块链公有链解决方案，如果比特币的区块链称作区块链1.0的话，那Ethereum可以称为区块链2.0 。 其主要特色就是支持可编程的智能合约。这个开源的系统相当于计算机中的操作系统一样，其是一个平台，提供了API及接口，以供其上运行不同的程序共享使用。同时因为它本质上是去中心化的区块链，因此号称是零宕机，零审查，以及不会有欺诈与人为篡改。就像所有的公有链需要激励机制的“代币”一样，它除了底层的区块链外，还有自己的加密电子货币，Ether，即以太币，在国内有些人戏称为“姨太”。目前一个“姨太”大约11美元，实时的价格趋势可以参见 这个交易所链接
智能合约 智能合约 (解释链接 )，其实这个概念本身是远远早于区块链产生的（早在1994年就出现了）。智能合约，说白了就是自己写的一段代码放到区块链上，在这里可以添加自己需要的业务逻辑等，只是这段代码在创建后不像传统应用是部署到服务器上运行，而是放到区块链上，并且自动执行(其运行部署都会消耗Gas(气，也就是若干的以太币))。各个参与方不需要像以前需要一个或若干个中心节点/服务器，大家都各自在自己那里完全按照“合约”执行，中间没有人可以去篡改或者停止，此设计会大大提高flexibility(灵活性）以及互相不信任的问题。比如有一个智能合约定义的逻辑是：当A收到钱后，B就会收到货物，这些操作都是按照合约自动执行，中间不再会有违约或者被人为修改的风险。
这些智能合约是以DAPP (Decentralized Application)的形式存在。智能合约是部署在区块链上，由于区块链的透明性，这些合约对任何人都是可见的，当然这个有利有弊。如果其有bug或者漏洞，就有可能被人抓住并利用，比如2016年6月的The DAO攻击，就造成相当于5千万美元的以太币丢失，这也直接导致了以太坊后面的一次更分叉，这块笔者后面会撰文详解。
Web 3.0 大家可能听说过web 1.0， 其是指之前传统的网页技术，比如HTML，传统的JavaScript,VBScript,CSS。而web 2.0 是使用所谓的DHMTL,HTML5, Ajax,等众多的JavaScript技术，来创作类似于桌面程序效果般的网页应用。Web 2.0这些技术有个问题，就是过于依赖中心化的服务器/第三方机构，比如除了其应该做的提供网页访问服务外，还有验证，用户行为记录分析等。 而这里提出的web 3.0是有如下几个特性，首先是去中心化，比如通用的后台端，使用Swarm与bzz来作为内容寻址的存储系统，基于区块链的共识形成机制，基于Whisper的异步消息机制等，这样具体的业务逻辑都会分发到每个客户端去执行，而非位于昂贵且易于出问题的少数中心节点。
这是刚刚提到的架构图
Solidity 上面说到的这些智能合约一般来说是使用一种特殊的编程语言来创建的，即Solidity，这个语言是以太坊提出并创造的，面向对象的DSL特定领域编程语言(Domain Specific Language),它是以太坊支持的4种语言（另外三个是Serpent, LLL 和 Mutan），只不过其是最流行的一个语言。从技术上来讲，solidify源代码会编译成字节码，然后运行于EVM（Ethereum Virtual Machine）上面。如果你看到源代码后就会觉得其实Solidity是与JavaScript十分类似的语言，如下是一段代码：
Gavin Wood (Solidity之父)说Solidity就是根据ECMAScript（是JavaScript,ActionScript等的标准祖先）所创建的，这样对于大多数开发人员来说学习曲线会很平滑。
开发工具 由于发展时间不是很长，目前市面上可用的开发环境IDE不太多。下面介绍下稍微比较成熟可靠的开发工具。
Microsoft Visual Studio Ethereum 插件 没错，就是那个市面上已经非常常见的visual studio，也就是dot net的开发工具，不是一个全新的开发工具。此开发集成环境只需要安装solidify插件即可。 这个也从侧面可以看到微软对于以太坊以及区块链的野心。
安装此插件后在微软的Visual Studio后就可以在新建项目时的模板里看到这个Solidity 选项：
当选择此模板后，visual studio他会自动构造出一个应用的基本文件结构。这样你可以省去一些每次开发一个智能合约都要重复的工作。你就可以集中时间精力到真正业务代码上。
如下就是这个IDE自动生成的代码
Ethereum Studio 除了背靠微软这个大旗的visual studio集成开发环境外，还有一个方便大家使用的免费的IDE。这个是基于Cloud9平台的一个在线IDE，其完全运行于浏览器中，不用安装，可以用于任何的操作系统。如下就是这个在线集成开发环境的样子。这个还是比较推荐的开发环境：</description>
    </item>
    
    <item>
      <title>微服务</title>
      <link>http://todzhang.com/posts/2016-08-24-microservices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-08-24-microservices/</guid>
      <description>可以想像一下，之前的传统应用系统，像是一个大办公室里面，有各个部门，销售部，采购部，财务部。办一件事情效率比较高。但是也有一些弊端，首先，各部门都在一个房间里。</description>
    </item>
    
    <item>
      <title>浅谈软件单元测试中的“断言” (assert)，从石器时代进步到黄金时代。</title>
      <link>http://todzhang.com/posts/2016-09-17-assert-in-unit-test-cn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-09-17-assert-in-unit-test-cn/</guid>
      <description>大家都知道，在软件测试特别是在单元测试时,必用的一个功能就是“断言”（Assert)，可能有些人觉得不就一个Assert语句，没啥花头，也有很多人用起来也是懵懵懂懂，认为只要是Assert开头的方法，拿过来就用。一个偶然的机会跟人聊到此功能，觉得还是有必要在此整理一下如何使用以及对“断言”的理解。希望可以帮助大家对此有一个系统的理解，也趁机聊聊“断言”发展一路过来的心路历程。
基础知识 首先稍微介绍一下断言相关知识，对于有经验的程序员请移步到下面的“断言”进化史部分。
什么是断言 在单元测试时，程序员预计在程序运行到某个节点位置，需要判断某些逻辑条件必须满足，这样下面的一些业务逻辑才可以进行下去，如果不满足，程序就会&amp;quot;报错&amp;quot;甚至是&amp;quot;崩溃&amp;rdquo;。比如说，一段程序是负责“转账”，在真正开始转账操作前首先需要“断言”这个账户是一个“合法”的账户，比如账户不是null。当出现些状况时，程序开发人员就可以在第一时间知道这个问题，可以去debug除错，而非等到交付给用户后才发现问题。其实这个功能是TDD (Test Driven Develop)的基石之一。
“断言” vs &amp;ldquo;异常&amp;quot;或者错误， 即 Assert vs. Exception/Error  “断言”通常是给程序开发人员自己使用，并且在开发测试期间使用。而异常等在程序运行期间触发 通常“断言”触发后程序“崩溃”退出，不需要从错误中恢复。而“异常”通常会使用try/catch等结构从错误中恢复并继续运行程序。  “断言”进化史 “石器时代” 一开始的一些单元测试框架（比如JUnit）提供的断言语句，这样在程序某个地方确保某个逻辑关系肯定返回是true,如果不是true,这个单元测试就是没有测试通过。如下就是一个例子,如果程序运行到此行时返回false程序就会抛出一个错误（如下图一）并停止运行，开发人员可以去检查下为什么出现此问题。非常的简单粗爆。
assert(x=y); “青铜时代” 上面这种断言除了简单之外，是有一个问题，就是当断言被触发时显示出来的错误消息不是很友好。如上图一，只是知道出错了，但是并没有太多有用的信息，比如最好是能显示出x与y的值来，这样好更快的理解为啥出错。后来，支持断言的单元测试框架升级版本出现了，它们提供了一系列的高级”断言“语句，添加了一些更加友好的程序接口，同时还提供比较亲民的错误消息，比如下面的例子使用了两个单独的断言语句。
int x=111; int y=222; assertEquals(x, y); assertNotEquals(x, y); 执行的结果如下图二，你可以看到这个错误结果相对于上面“石器时代”已经包括了不少有用的信息，比如除了知道断言失败外还显示了期望的值以及实际值。
“黄金时代” 但是上面这种方式有一个弊端，就是需要大量的预置断言方法（比如判断相等一个方法，判断不相等一个方法等），去支持各种场景。接下来又出现了新的解决方案，其中的明星就是Hamcrest (其实这个词是使用一种叫做angram的文字游戏，即把一个原来单词中的字母顺序改变，这个Hamcrest就是从Matchers的变形)框架。是使用一种assertThat组合上Matcher来使用。
这个有多个好处，
 首先是支持了在Java8中才迟迟引入的流式编程(Stream)，即每个Matcher执行完后会再返回一个Matcher，这样可以一个套一个组成一个Matcher链 另外Hamcrest还使用了非常接近于人类自然语言以及使用and/or/not等逻辑判断的方式来写测试方法，比如当你看到下面的测试语句肯定会一目了然：  assertThat(actual, is(not(equalTo(expected)));  还有一个好处是输出的断言消息更加易读。 另外还有一个好处即Hamcrest框架支持泛型TypeSafe，即在编译时就会找到类型不匹配的错误。比如下面第一个是传统的断言，在编译期不会报错，但是运行时会失败，而第二个会在编译时报错，就不用等到运行期。  assertEquals(&amp;#34;abc&amp;#34;, 123); // 1 assertThat(123, is(&amp;#34;abc&amp;#34;)); // 2  使用Hamcrest的最后一个好处是对测试框架的“解耦合”，即，使用此框架你可以现在使用Junit后面可以转到TestNG。甚至你自己去扩展自己实现。  总结 上面说了这么多，是不是感觉平时经常使用的一个看似简简单单的Assert还有不少的东西可以深挖一下滴。这个只是抛砖引玉，如果大家还有什么点子或建议请使用下面的方式。
 联系我：
  phray.zhang@gmail.com (email/邮件，whatsapp, linkedin) helloworld_2000 (wechat/微信) blog on github pages 简书 jianshu github 微信公众号：vibex  Reference:  benefit of assertThat  </description>
    </item>
    
    <item>
      <title>漫谈开发设计中的一些‘原则’及&#39;设计哲学&#39;</title>
      <link>http://todzhang.com/posts/2016-09-02-design-principals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-09-02-design-principals/</guid>
      <description>在开发设计中有一些常用原则或者潜规则，根据笔者的经验，这里稍微总结一下最最常用的，以飨读者。
POLA The principle of least astonishment (POLA) is: &amp;ldquo;If a necessary feature has a high astonishment factor, it may be necessary to redesign the feature.&amp;rdquo;
In general engineering design contexts, the principle means that a component of a system should behave in a way that users expect it to behave; that is, users should not be astonished by its behavior.
A textbook formulation is: &amp;ldquo;People are part of the system.</description>
    </item>
    
    <item>
      <title>用10几行代码自己写个人脸识别程序</title>
      <link>http://todzhang.com/posts/2016-11-22-facial-recognition/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://todzhang.com/posts/2016-11-22-facial-recognition/</guid>
      <description>用10几行代码自己写个人脸识别程序 CV (Computer Vision) 最近在研究CV的一些开源库(OpenCV)，有一个体会就是在此领域，除了一些非常学术的_机器学习_, _深度学习_等概念外，其实还有一些很有趣的_现实的_应用场景。比如之前很流行的微软的 https://how-old.net, 你使用自己指定或者上传的照片进行面部识别_猜年龄_。 如下图所示： 细想一下这个很吸引眼球的程序，其实技术本身打散了就包括两大块，一是从图片中扫描并进行面部识别，二是对找到的人脸根据算法去猜个年龄。大家可以猜猜实现第一个功能需要多少核心代码量？其实不用上万行，在这里我就使用短短几行代码（去除空格换行什么的，有效代码只要10行）就实现一个_高大上_面部识别的功能。在此文容我细述一下具体实现代码以及我对机器识别图像领域技术的理解。
面部识别,刷脸 _人脸识别_技术大家应该都不陌生，之前大家使用的数码相机，或者现在很多手机自带的相机都有人脸识别的功能。其效果就像是下图这样。近的看，_剁手节_刚刚过了没有多久 , 背后的马老板一直在力推的刷脸支付也是一个此领域的所谓“黑科技”。比如在德国汉诺威电子展上，马云用支付宝“刷脸”买了一套纪念邮票。人脸识别应用市场也从爆发。随后，各大互联网巨头也纷纷推出了刷脸相关的应用。
如果要加个定义，人脸识别又叫做人像识别、面部识别，是一种通过用摄像机或摄像头采集含有人脸的图像或视频流，并自动在图像中检测和跟踪人脸，进而对检测到的人脸进行脸部的一系列相关技术。
我的十行代码程序 OK，长话短说，先上 干货 ，下面就是此程序的_带注释_ 版本，完整的程序以及相关配套文件可以在 这个github库 https://github.com/CloudsDocker/pyFacialRecognition 中找到，有兴趣可以_fork_ 下来玩玩。下面是整个程序的代码样子，后面我会逐行去解释分析。
就这短短的十行代码代码？seriously？“有图有真相”，我们先来看下运行的效果：
首先是原始的图片 运行程序后识别出面部并高亮显示的结果 请注意 K歌二人组 的脸上的红色框框，这就是上面十行代码的成果。 代码解析 准备工作 因为此程序使用是的Python,因此你需要去安装Python。这里就不赘述了。除此之外，还需要安装 OpenCV (http://opencv.org/downloads.html)。 多说一句,这个 OpenCV正如其名，是一个开源的机器识别的深度学习框架。这是Intel（英特尔）实验室里的一个俄罗斯团队创造的，目前在开源社区非常的活跃。
特别提一下，对于Mac的用户，推荐使用brew去安装 （下面第一条语句可能会执行报错，我当时也是搞了好久。如果遇到第一条命令不过可以通过文尾的方式联系作者）
brew tap homebrew/science brew install opencv 安装完成之后,在python的命令行中输入如下代码验证，如果没有报错就说明安装好了。
&amp;gt;&amp;gt;&amp;gt; import cv2 程序代码“庖丁解牛” # -*- coding: utf-8 -*- import cv2,sys  由于这里注释及窗口标题中使用了中文，因此加上utf-8字符集的支持 引入Opencv库以及Python的sys内建库，用于解析输入的图片参数  inputImageFile=sys.argv[1]  在运行程序时将需要测试的照片文件名作为一个参数传进来  faceClassifier=cv2.CascadeClassifier(&amp;#39;haarcascade_frontalface_default.xml&amp;#39;)  加载OpenCV中自带预先培训好的人脸识别层级分类器 HAAR Casscade Classifier，这个会用来对我们输入的图片进行人脸判断。  这里有几个在深度学习及机器图像识别领域中的几个概念，稍微分析一下，至于深入的知识，大家可以自行搜索或者联系作者。</description>
    </item>
    
  </channel>
</rss>